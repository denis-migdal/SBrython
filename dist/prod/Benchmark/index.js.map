{"version":3,"file":"Benchmark/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js?a779","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/pages/Benchmark/index.html","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/list.js?6004","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/types/list.js?29f5","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts"],"sourcesContent":["import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default class Py_object {\n\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","export default {};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, OP_OFF_REVERSE, OP_OOF_IEQ, opid2jsop, opid2opmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n    const SAME   = convert_other === convert_self;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        let op = ops[i];\n\n        const FCT = (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        };\n\n        let RFCT = FCT;\n        if( ! SAME ) {\n            RFCT = (call: NODE_ID) => {\n                const _ = firstChild(call);\n                const a = nextSibling(_); const b = nextSibling(a);\n                return w_call(call, convert_other(a), op, convert_self(b) );\n            }\n        }\n\n        add_method(target, opid2opmethod[op]               , return_type, FCT);\n        add_method(target, opid2opmethod[op+OP_OFF_REVERSE], return_type, RFCT);\n\n        if( ADD_EQ ) {\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, `__i${op}__`, return_type, (node: NODE_ID) => {\n\n                const _ = firstChild(node);\n                const a = nextSibling(_);\n                const b = nextSibling(a);\n\n                const other_value = VALUES[b];\n\n                //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --\n\n\n                return w_JSBinOp(node, a, op+ OP_OOF_IEQ, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","export default __webpack_public_path__ + \"Benchmark/index.html\";","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","import Types, { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_CALL_ARG_KW, AST_DEF_ARG_POS, AST_OP_OP } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ID, OP_OFF_REVERSE, opid2opmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_COMMA = 44;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL)\n            return true;\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n\n    if(__DEBUG__ && code.charCodeAt(offset+end) === CHAR_NL) {\n        ++CURSOR[0];\n        CURSOR[1] = offset + end + 1;\n    }\n\n    return code.slice(offset, offset += end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => setType(id, AST_KEY_RETURN),\n    \"assert\": (id) => {\n        setType(id, AST_KEY_ASSERT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        setFirstChild(id, readExpr() );\n        ++offset; // this is a \\n\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __name__: \"function\",\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return SType_fct.__call__[RETURN_TYPE]();\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID; // 15 for now...\n        Types[STypeID] = SType_fct;\n\n        setResultType(id, STypeID);\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        setSibling(args, readBody() );\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    let curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    CURRENT_INDENTATION = 0;\n    if(__DEBUG__) CURSOR[1] = offset;\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readExpr() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readExpr() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken() {\n    //TODO: known symbol 2 versions...\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE ) { // consume str\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== CHAR_QUOTE);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n       \n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n\n        let astnode_type = AST_LIT_INT;\n        let result_type  = TYPEID_int;\n\n        if( curChar === CHAR_DOT ) {\n\n            astnode_type = AST_LIT_FLOAT;\n            result_type  = TYPEID_float;\n        \n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n        } else if( offset - beg <= 9 ) { // opti\n            result_type = TYPEID_jsint\n        }\n\n\n              setType(node, astnode_type);\n        setResultType(node, result_type);\n        \n        VALUES[node] = code.slice(beg, offset);\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n            //TODO: get type from context\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                //TODO: get left from context...\n                setResultType(cur, 15 as TYPE_ID); // h4ck\n                VALUES[cur] = \"foo\"; // h4ck\n\n                ++offset; // (\n                consumeSpaces();\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    let next;\n\n                    //TODO: requires op refactor...\n                    if( curChar > CHAR_DIGIT_9 ) { // we assume kw args\n\n                        // h4ck (requires context...)\n                        const name = nextSymbol();\n                        consumeSpaces();\n                        ++offset;\n                        consumeSpaces();\n\n                        next = createASTNode();\n                        setType(next, AST_CALL_ARG_KW);\n                        VALUES[next] = name;\n                        setFirstChild(next, readExpr());\n                    } else {\n                        next = readExpr();\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop      = [createASTNode(), value, op, 0] as OP_INFO;\n    let lop_prio = pyop_priorities[op];\n\n    value = right;\n\n    let rop: OP_INFO;\n    let rop_prio;\n\n    const stack: OP_INFO[] = [];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // priority\n        if( rop_prio > lop_prio ) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0];\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n            stack.length = 0;\n\n            rop   = [createASTNode(), lop[0], op, 0];\n            lop   = rop;\n        }\n\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    value = createCallOpNode(...lop)\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return value;\n}\n\nexport function py2ast(_code: string, filename: string): AST {\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readExpr() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readExpr() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        op  += OP_OFF_REVERSE;\n        pyop_name = opid2opmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined)\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType)\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_type } from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\n\nexport default [];","import Types, { TYPEID_type, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_str_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        const method = Types[resultType(a)]![opname] as Callable;\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","export const TYPEID_None               = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_NotImplemented     = 2;\nexport const TYPEID_NotImplementedType = 3;\nexport const TYPEID_int                = 4;\nexport const TYPEID_jsint              = 5;\nexport const TYPEID_float              = 6;\nexport const TYPEID_bool               = 7;\nexport const TYPEID_str                = 8;\nexport const TYPEID_type               = 9;\nexport const TYPEID_type_int_          =10;\nexport const TYPEID_type_jsint_        =11;\nexport const TYPEID_type_float_        =12;\nexport const TYPEID_type_str_          =13;\nexport const TYPEID_type_bool_         =14;\n\nconst TYPES = new Array(15);\nfor(let i = 0; i < 15; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/attr\").default;\nLIST[18 ] = require(\"./op/brackets\").default;\nLIST[19 ] = require(\"./op/assign_aug\").default;\nLIST[20 ] = require(\"./op/assign_init\").default;\nLIST[21 ] = require(\"./op/assign_attr\").default;\nLIST[22 ] = require(\"./op/assign\").default;\nLIST[23 ] = require(\"./lit/str\").default;\nLIST[24 ] = require(\"./lit/int\").default;\nLIST[25 ] = require(\"./lit/float\").default;\nLIST[26 ] = require(\"./lit/fstring\").default;\nLIST[27 ] = require(\"./lit/fstring_fval\").default;\nLIST[28 ] = require(\"./lit/true\").default;\nLIST[29 ] = require(\"./lit/false\").default;\nLIST[30 ] = require(\"./lit/none\").default;\nLIST[31 ] = require(\"./def/fct\").default;\nLIST[32 ] = require(\"./def/meth\").default;\nLIST[33 ] = require(\"./def/args\").default;\nLIST[34 ] = require(\"./def/arg_posonly\").default;\nLIST[35 ] = require(\"./def/arg_pos\").default;\nLIST[36 ] = require(\"./def/arg_varargs\").default;\nLIST[37 ] = require(\"./def/arg_kwonly\").default;\nLIST[38 ] = require(\"./def/arg_kwargs\").default;\nLIST[39 ] = require(\"./call/index\").default;\nLIST[40 ] = require(\"./call/arg_kw\").default;\nLIST[41 ] = require(\"./ctrl/while\").default;\nLIST[42 ] = require(\"./ctrl/tryblock\").default;\nLIST[43 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[44 ] = require(\"./ctrl/ternary\").default;\nLIST[45 ] = require(\"./ctrl/if\").default;\nLIST[46 ] = require(\"./ctrl/elif\").default;\nLIST[47 ] = require(\"./ctrl/else\").default;\nLIST[48 ] = require(\"./ctrl/for_range\").default;\nLIST[49 ] = require(\"./ctrl/for\").default;\nLIST[50 ] = require(\"./classdef\").default;\nLIST[51 ] = require(\"./body\").default;\nLIST[52 ] = require(\"./2bigint\").default;\nLIST[53 ] = require(\"./2number\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n];\nexport const id2name = _id2name;\n","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js\";\nimport { id2name as id2typename } from \"@SBrython/sbry/types\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n    const result_type = id2typename[typeID];\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild = firstChild(node);\n    \n    let cur = nextSibling(rchild);\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","export type OP_ID = number; // can't brand it as I will do operations on it...\n\n// have reverse\nexport const OP_BIT_OR     =  0 as const; // prio 5\nexport const OP_BIT_XOR    =  1 as const; // prio 6\nexport const OP_BIT_AND    =  2 as const; // prio 7\n\nexport const OP_BIT_LSHIFT =  3 as const; // prio 8\nexport const OP_BIT_RSHIFT =  4 as const; // prio 8\n\nexport const OP_BIN_ADD    =  5 as const; // prio 9\nexport const OP_BIN_SUB    =  6 as const; // prio 9\n\nexport const OP_BIN_MUL    =  7 as const; // prio 10\nexport const OP_BIN_DIV    =  8 as const; // prio 10\nexport const OP_BIN_FDIV   =  9 as const; // prio 10\nexport const OP_BIN_MOD    = 10 as const; // prio 10\n\nexport const OP_BIN_POW    = 11 as const; // prio 13\n\n// special reverse (~= self)\nexport const OP_CMP_EQ     = 12 as const; // prio 4 \nexport const OP_CMP_NEQ    = 13 as const; // prio 4 \nexport const OP_CMP_GT     = 14 as const; // prio 4 \nexport const OP_CMP_GE     = 15 as const; // prio 4 \nexport const OP_CMP_LT     = 16 as const; // prio 4 \nexport const OP_CMP_LE     = 17 as const; // prio 4 \n\n// can't be inverted\n\nexport const OP_UNR_PLUS   = 18 as const; // prio 11\nexport const OP_UNR_MINUS  = 19 as const; // prio 12\nexport const OP_BIT_NOT    = 20 as const; // prio 12\n\nexport const OP_CMP_IN     = 21 as const; // prio 4 // __contains__\nexport const OP_CMP_NOT_IN = 22 as const; // prio 4 // not(__contains__)\n\n// can't be override...\nexport const OP_CMP_IS     = 23 as const; // prio 4\nexport const OP_CMP_IS_NOT = 24 as const; // prio 4\n\nexport const OP_BOOL_OR    = 25 as const; // prio 1 \nexport const OP_BOOL_AND   = 26 as const; // prio 2\nexport const OP_BOOL_NOT   = 27 as const; // prio 3\n\nexport const OP_OFF_REVERSE = 28;\nexport const OP_OOF_IEQ     = 28+12;\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;\n\n// https://www.w3schools.com/python/python_operators.asp\n// the higher the more priority\nexport const pyop_priorities = [\n    5, // OP_BIT_OR\n    6, // OP_BIT_XOR\n    7, // OP_BIT_AND\n\n    8, // OP_BIT_LSHIFT\n    9, // OP_BIT_RSHIFT\n\n    9, // OP_BIN_ADD\n    9, // OP_BIN_SUB\n\n    10, // OP_BIN_MUL\n    10, // OP_BIN_DIV\n    10, // OP_BIN_FDIV\n    10, // OP_BIN_MOD\n\n    13, // OP_BIN_POW\n\n    4, // OP_CMP_EQ\n    4, // OP_CMP_NEQ\n    4, // OP_CMP_GT\n    4, // OP_CMP_GE\n    4, // OP_CMP_LT\n    4, // OP_CMP_LE\n\n    11, // OP_UNR_PLUS\n    12, // OP_UNR_MINUS\n    13, // OP_BIT_NOT\n\n    4, // OP_CMP_IN\n    4, // OP_CMP_NOT_IN\n\n    4, // OP_CMP_IS\n    4, // OP_CMP_IS_NOT\n\n    1, // OP_BOOL_OR\n    2, // OP_BOOL_AND\n    3, // OP_BOOL_NOT\n]\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n    5, // OP_BIT_OR\n    6, // OP_BIT_XOR\n    7, // OP_BIT_AND\n\n    10, // OP_BIT_LSHIFT\n    10, // OP_BIT_RSHIFT\n\n    11, // OP_BIN_ADD\n    11, // OP_BIN_SUB\n\n    12, // OP_BIN_MUL\n    12, // OP_BIN_DIV\n    12, // OP_BIN_FDIV\n    12, // OP_BIN_MOD\n\n    13, // OP_BIN_POW\n\n    8, // OP_CMP_EQ\n    8, // OP_CMP_NEQ\n    9, // OP_CMP_GT\n    9, // OP_CMP_GE\n    9, // OP_CMP_LT\n    9, // OP_CMP_LE\n\n    14, // OP_UNR_PLUS\n    14, // OP_UNR_MINUS\n    14, // OP_BIT_NOT\n\n    9, // OP_CMP_IN\n    9, // OP_CMP_NOT_IN\n\n    8, // OP_CMP_IS\n    8, // OP_CMP_IS_NOT\n\n    3, // OP_BOOL_OR\n    4, // OP_BOOL_AND\n    14,// OP_BOOL_NOT\n    //TODO: add more op ?\n]\n\nexport const opid2opmethod = [\n    \"__or__\",\n    \"__xor__\",\n    \"__and__\",\n    \"__lshift__\",\n    \"__rshift__\",\n    \"__add__\",\n    \"__sub__\",\n    \"__mul__\",\n    \"__truediv__\",\n    \"__floordiv__\",\n    \"__mod__\",\n    \"__pow__\",\n    \"__eq__\",\n    \"__neq__\",\n    \"__gt__\",\n    \"__ge__\",\n    \"__lt__\",\n    \"__le__\",\n    // can't be inverted\n    \"__pos__\", // unary +\n    \"__neg__\",\n    \"__not__\",\n    \"__contains__\",\n    \"\", // not contains (special)\n\n    // reversed\n    \"__ror__\",\n    \"__rxor__\",\n    \"__rand__\",\n    \"__rlshift__\",\n    \"__rrshift__\",\n    \"__radd__\",\n    \"__rsub__\",\n    \"__rmul__\",\n    \"__rtruediv__\",\n    \"__rfloordiv__\",\n    \"__rmod__\",\n    \"__rpow__\",\n    // ieq\n    \"__ior__\",\n    \"__ixor__\",\n    \"__iand__\",\n    \"__ilshift__\",\n    \"__irshift__\",\n    \"__iadd__\",\n    \"__isub__\",\n    \"__imul__\",\n    \"__itruediv__\",\n    \"__ifloordiv__\",\n    \"__imod__\",\n    \"__ipow__\",\n];\n\nexport const opid2jsop = [\n    \"|\",\n    \"^\",\n    \"&\",\n    \"<<\",\n    \">>\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\", // might need special fct\n    \"/\", // might need special fct\n    \"%\", // might need special fct\n    \"**\",\n    \"==\",\n    \"!=\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"+\",\n    \"-\",\n    \"~\",\n    \"in\",\n    //TODO: add more op ?\n];\n\n/*\n    export const OP_UNR_PLUS   = 18 as const; // prio 11\n    export const OP_UNR_MINUS  = 19 as const; // prio 12\n    export const OP_BIT_NOT    = 20 as const; // prio 12\n    export const OP_BOOL_NOT   = 27 as const; // prio 3\n*/\n\nexport const opsymbol2opid = {\n    \"|\"     : OP_BIT_OR,\n    \"^\"     : OP_BIT_XOR,\n    \"&\"     : OP_BIT_AND,\n    \"<<\"    : OP_BIT_LSHIFT,\n    \">>\"    : OP_BIT_RSHIFT,\n    \"+\"     : OP_BIN_ADD,\n    \"-\"     : OP_BIN_SUB,\n    \"*\"     : OP_BIN_MUL,\n    \"/\"     : OP_BIN_DIV,\n    \"//\"    : OP_BIN_FDIV,\n    \"%\"     : OP_BIN_MOD,\n    \"**\"    : OP_BIN_POW,\n    \"==\"    : OP_CMP_EQ,\n    \"!=\"    : OP_CMP_NEQ,\n    \">\"     : OP_CMP_GT,\n    \">=\"    : OP_CMP_GE,\n    \"<\"     : OP_CMP_LT,\n    \"<=\"    : OP_CMP_LE,\n    \"in\"    : OP_CMP_IN,\n    \"not in\": OP_CMP_NOT_IN,\n    \"is\"    : OP_CMP_IS,\n    \"is not\": OP_CMP_IS_NOT,\n    \"or\"    : OP_BOOL_OR,\n    \"and\"   : OP_BOOL_AND\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node);\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = search.get(\"merge\")  === \"true\" ? true : false;\nconst parser    = search.get(\"parser\") === \"true\" ? true : false;\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers',\n//    \"classes\" // ~1174\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~600\n// list    ~496\n// dicts   ~288\n// sets    ~300\n// bytes   ~300\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )   // when does it occur ?\n            continue;\n        if( ctype.start.line === 0) {// unprinted node\n            subparts.length -= 2;\n            continue;\n        }\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n        if( val.__qualname__ !== undefined)\n            val = val.__qualname__;\n        else if( val.__name__ !== undefined)\n            val = val.__name__;\n        else if( val.name !== undefined)\n            val = val.name;\n        else\n            val = JSON.stringify(val);\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(const child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(const gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(const gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            const code = subtests[j];\n\n            if( code === \"\")\n                continue;\n       \n            if( merge ) {\n                const indented_code = code.split('\\n').map(e => `\\t${e}`).join('\\n');\n                fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n            } else {\n                try {\n                    fullcode = code;\n                    generate(fullcode, results, parser);\n                    execute(results, sbry_print);\n                } catch(e) {\n                    error = e as Error;\n                    break tests;\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n    }\n\n    if( error || ! merge ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n    \n    if(error) {\n\n        python_input.value = results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('#').slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__DEBUG__) set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(id, cur.body);\n    }\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    w_str(\"var \");\n\n    let rchild    = firstChild(node);\n\n    let cur = nextSibling(rchild);\n\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        const other_value = VALUES[other];\n\n        if( type(other) === AST_LIT_STR ) {\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","// @ts-nocheck\n\nimport dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, TYPE_ID, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, TYPE_ID> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, TYPE_ID>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}"],"names":["klass","initBuiltinClass","TYPEID_str","TYPEID_type_str_","add_method","RET_STR","node","other","nextSibling","firstChild","other_type","resultType","TYPES","__str__","WRITE_CALL","w_node","RET_INT","call","w_str","addJSCmpOps","JSCmpOps_LIST","RET_STR2BOOL","addJSBinOps","OP_BIN_ADD","RET_STR2STR","OP_BIN_MUL","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","w_call","a","op","b","_","w_sns","convert","convert_args","dst","SType_fct","context","meta","__call__","ARGS_INFO","_args","args","has_vararg","undefined","vararg","has_kwarg","kwarg","args_pos","args_names","total_args","posonlyargs","length","kwonlyargs","cur","first","setType","AST_DEF_ARGS","addSblng","addSibling","addFirstChild","pos_defaults","defaults","posonly","pos","doffset","i","convert_arg","AST_DEF_ARG_POSONLY","local_symbols","arg","offset","AST_DEF_ARG_POS","idx_vararg","idx_end_pos","Number","POSITIVE_INFINITY","AST_DEF_ARG_VARARGS","nb_pos_defaults","Math","min","has_others","cut_off","end","kwonly","kw_defaults","has_kw","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","kwargs","VALUES","defval","type","name","result_type","TYPEID_NotImplementedType","annotation","id","RETURN_TYPE","coffset","convert_node","TYPEID_jsint","TYPEID_int","setResultType","brython_name","Py_object","TypeKlass","TYPEID_type","instance","jsname","Klass","__class__","__name__","__qualname__","JS_NAME","target","RET_TYPE","write","r","Object","create","TYPEID","create_function","nbChildren","handlers","AST_CTRL_TRYBLOCK","Body","body","ExceptHandler","ast2js","AST_KEY_IMPORT","names","module","write_arg","Number2Int","write_posarg","start","Py_Exception","test","orelse","AST_CTRL_TERNARY","idx","list","TYPEID_type_jsint_","RET_JSINT","w_subs","OP_BIN_POW","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_IJBF2BOOL","iter","constructor","$name","func","AST_CTRL_FOR","value","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","values","console","warn","TYPEID_NoneType","AST_KEY_RETURN","parentTypeID","to_write","setParentOPPrio","parentOPPrio","ops","return_type","NOCONVERT","ADD_EQ","SAME","FCT","RFCT","opid2opmethod","OP_OFF_REVERSE","ADD_INCR","ADD_DECR","other_value","OP_OOF_IEQ","prio","jsop_priorities","p_prio","l","opid2jsop","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","results","nb_tokens","A","B","report","nb_lines","total_lines","nb_done","nb_excluded_lines","nb_files","code","tcoef","times","AST_LIT_FSTRING_FVAL","Error","FAKE_RETURN_NODE","generate","rtype","stype","Types","createSubContext","returns","fct_return_type","last_type","push","default_call","Array","STypeID","AST_DEF_FCT","AST_DEF_METH","method_name","gen","instanceType","instanceTypeID","addType","BB","w_NL","BE","float2str","f","str","toExponential","sign_idx","slice","toString","includes","AST_KEY_IMPORT_ALIAS","asname","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","curChar","CURRENT_PARAM_TYPE","POSONLY_END","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","setFirstChild","readExpr","KNOWN_SYMBOLS","AST_LIT_NONE","AST_LIT_TRUE","AST_LIT_FALSE","AST_KEY_BREAK","AST_KEY_CONTINUE","AST_KEY_PASS","AST_KEY_ASSERT","setSibling","readBody","AST_CTRL_WHILE","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","CURRENT_INDENTATION","consumeIndentedLines","beg","createASTNode","AST_BODY","indent","readToken","AST_LIT_STR","astnode_type","AST_LIT_INT","AST_LIT_FLOAT","TYPEID_float","AST_STRUCT_LIST","token","symbol","AST_CALL","next","AST_CALL_ARG_KW","isEndOfExpr","readOp","nextChar","op_str","opsymbol2opid","right","createCallOpNode","rop","rop_prio","lop","lop_prio","pyop_priorities","stack","py2ast","_code","filename","nodes","ASTNODES","dop_reset","left","opnode","AST_OP_OP","pyop_name","ltype","method","ret_type","use_parser","bry","sbry","ast","_ast","performance","now","parser","$B","Parser","_PyPegen","run_parser","t0","tokens","tokenizer","buildAST","__ast","convert_ast","jscode","t1","generateSBrython","src","future","future_features","symtable","_PySymtable_Build","js_from_root","imported","js","generateBrython","PythonError","python_exception","super","_raw_err_","this","cn","obj","abs","n","Py_JSException","fct","attr","fct_type","keywords","keyword","writeOp","count","jop","reversed_operator","find_and_write_call","kname","rchild","last_id","AST_SYMBOL","AST_STRUCT_TUPLE","AST_STRUCT_DICT","AST_KEY_RAISE","AST_OP_UNARY","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN_ATTR","AST_OP_ASSIGN","AST_CTRL_TRYBLOCK_CATCH","AST_CLASSDEF","AST_2BIGINT","AST_2NUMBER","TYPEID_type_int_","genOpFct","RET_None","opname","debug_print_exception","err","sb","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","line","col","indexOf","getASTFor","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","TYPEID_None","TYPEID_NotImplemented","TYPEID_bool","TYPEID_type_float_","TYPEID_type_bool_","LIST","require","id2name","resetResults","fill","elts","astnode2tree","typeID","id2typename","children","buildJSCode","pycode","buildPyCode","_context","vtype","qname","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_GT","OP_CMP_GE","OP_CMP_LT","OP_CMP_LE","OP_BOOL_NOT","OP_EQ2IS","exc","o","RET_INT2INT","RET_FLOAT","JS_CODE","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","AST2JS","AssignOperators","c2","bname2pyname","left_id","right_id","fist","KW","kw","getKW","floordiv_float","floor","floordiv_int","result","mod_float","mod","mod_int","write_multi_jsop","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","sbry_print","URLSearchParams","location","test_name","get","merge","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","oneTimeExec","fullcode","textContent","classList","remove","trim","error","execute","message","add","print_js","print_python","print_ast","print_code","createElement","lineno","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","JSON","stringify","child","html_child","startTests","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","tests","subtests","substats","j","stats","total","excluded","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","parts","t","excl","nbEmptyLines","code_len","nbExcluded","find","v","isArray","weak_assign","key","instance_TypeID","method_wrapper","klass_type","inst_type","createClassContext","bases","stypeID","SBrython","browser","globalThis","buildModule","Function","runJSCode","getModules","getModule","print","executeSBrython","executeBrython","brython_node","BRY2SBRY","ifblock_cur","Symbol","assert","cond","__int__","_op","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","mix","base","extensions","Mix","prototype","w_JSCmpOp","targets","attrname","attrdef","keys","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","PY_CODE","NEXT_AST_NODE_ID","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","parent","sibling","nops","nb_ops","comparators","operand","a_value","type_obj","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","assign","ILIST","Context","symbols","builtins","ctx","alt","bname2jsop"],"sourceRoot":""}