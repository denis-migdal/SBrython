{"version":3,"file":"Benchmark/index.js","mappings":"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","sources":["webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/structs/STypes.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/bry2sbry/ClassDef.ts","webpack://sbrython/./src/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/bry2sbry/Body.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/List.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/literals/bool/stype.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/core_modules/literals/int/stype_jsint.ts","webpack://sbrython/./src/bry2sbry/Constant.ts","webpack://sbrython/./src/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/core_modules/literals/int/stype.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/core_modules/literals/float/stype.ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/core_modules/literals/str/stype.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/bry2sbry/list.ts","webpack://sbrython/./src/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/literals/None/stype.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/bry2sbry/functions/Args.ts","webpack://sbrython/./src/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/bry2sbry/Name.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/bry2sbry/import/alias.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/bry2sbry/functions/Call.ts","webpack://sbrython/./src/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/bry2sbry/import/Import.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts","webpack://sbrython/./src/pages/Benchmark/index.html"],"sourcesContent":["import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_NONETYPE, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = STYPE_NONETYPE;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (STypes[resultType(context.parent_node_context!)] as STypeFct).__call__;\n    if( meta.return_type === undefined )\n        meta.return_type = () => result_type;\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`throw new _b_.PythonError(${firstChild(node)})`;\n}","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, STYPE_BOOL);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { STypeObj } from \"./SType\";\n\nexport const STypes  = new Array<STypeObj>();\nconst STypename2id: Record<string, number> = {};\n\nexport function getSTypeFromName<T extends STypeObj>(name: string): T {\n    return STypes[getSTypeID(name)] as T;\n}\n\nexport function getSTypeID(name: string): number {\n\n    let id = STypename2id[name];\n    if( id === undefined ) {\n        id = STypename2id[name] = STypes.length;\n        STypes[id] = {__name__: name};\n    }\n\n    return id;\n}\n\nexport function addSType(name: string, type: Omit<STypeObj, '__name__'>) {\n\n    const id = getSTypeID(name);\n    Object.assign( STypes[id], type );\n    return id;\n}\n\nexport const STYPE_NONETYPE           = getSTypeID(\"NoneType\"); // 0...\nexport const STYPE_INT                = getSTypeID(\"int\");\nexport const STYPE_JSINT              = getSTypeID(\"jsint\");\nexport const STYPE_BOOL               = getSTypeID(\"bool\");\nexport const STYPE_FLOAT              = getSTypeID(\"float\");\nexport const STYPE_STR                = getSTypeID(\"str\");\nexport const STYPE_NOT_IMPLEMENTED    = getSTypeID(\"NotImplementedType\");","import { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport dop_reset, {ASTNODE_RESULT_TYPE, ASTNODE_SIZE, ASTNODE_TYPE_ID, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : ASTNODES[ASTNODE_SIZE*id+ASTNODE_TYPE_ID],\n        ret_type : STypes[ASTNODES[ASTNODE_SIZE*id+ASTNODE_RESULT_TYPE]],\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : {\n            //TODO: I need a self...\n            return_type    : return_type,\n            // not really :?\n            substitute_call: (call: number) => {\n                const left   = firstChild(call)+1;\n                const method = STypes[resultType(left)]![opname] as STypeFctSubs;\n                return method.substitute_call!(call);\n            }\n        }\n    }\n}\n\n//TODO: not a type !!!\nconst len = addSType(\"len\", genUnaryOpFct(\"len\", RET_INT));\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : getSTypeID('type[int]'),\n        str  : getSTypeID('type[str]'),\n        float: getSTypeID('type[float]'),\n        len,\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w( firstChild(node) );\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] += results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] += results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] += results. bry.times[offset+1];\n    results.sbry.times[offset] += results.sbry.times[offset+1];\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w(\"return null\");\n\n    return wt`return ${coffset}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"${\", firstChild(node), \"}\")\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL, STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') {\n\n        setResultType(dst, STYPE_BOOL);\n        return;\n    }\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type();\n\n    if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED)\n        throw new Error(`${op} ${resultType(coffset)} NOT IMPLEMENTED!`);\n\n    setResultType(dst, type);\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"continue\");\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${VALUES[node]}`);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { set_js_cursor, w, wr, wt } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT } from \"@SBrython/structs/STypes\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"@SBrython/bry2sbry/functions/Args\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as STypeFct;\n\n    const meta = SType_fct.__call__;\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w(\", \");\n\n        if( kw_start === i)\n            w(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            wt`...${name}`;\n        else\n            wr( binary_jsop(node, name, '=', \"[]\") );\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        wr( binary_jsop(node, name, '=', \"{}\") );\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === STYPE_JSINT )\n            defval = Number2Int(defval);\n\n        wr( binary_jsop(node, name, '=', defval) );\n    }else {\n        w(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { buildJSCode } from \"@SBrython/ast2js\";\nimport { buildPyCode } from \"@SBrython/py2ast\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type: ''+type(id), // TODO convert\n        result_type: ''+resultType(id), // TODO convert\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { r } from \"@SBrython/ast2js\";\nimport { STypeFctSubs } from \"./SType\";\nimport { STYPE_FLOAT, STYPE_INT, STYPE_JSINT} from \"./STypes\";\nimport { LITERALS_INT } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, parentOPPrio, resultType, setParentOPPrio, setResultType, type, VALUES } from \"@SBrython/dop\";\nimport { Converter, NOCONVERT } from \"./Converters\";\nimport { RETURN_TYPE_FCT } from \"./ReturnTypeFcts\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\nexport function Int2Number(a: number, target = STYPE_FLOAT) {\n\n    if( resultType(a) !== STYPE_INT) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === STYPE_FLOAT )\n            setResultType(a, STYPE_JSINT);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === STYPE_INT || ltype === STYPE_JSINT)\n            && (rtype === STYPE_INT || rtype === STYPE_JSINT)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === STYPE_INT) {\n        setResultType(a, target);\n        return a;\n    }\n    if( target === STYPE_FLOAT )\n        return r`Number(${a})`;\n\n    // int -> jsint cast is facultative...\n    return a;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === STYPE_INT)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, STYPE_INT); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === STYPE_JSINT) {\n        setResultType(a, STYPE_INT);\n        return a;\n    }\n\n    return r`BigInt(${a})`;\n}\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    let result = r`${first}`;\n    for(let i = 1; i < nbChildren; ++i)\n        result = r`${result} && ${first + i}`; //TODO: better...\n\n    if( p_prio < prio )\n        result = r`(${result})`;\n\n    return result;\n}\n\n// null operation, the node has the same priority as his father.\n// 2*int(1+1) => 2*(1+1)\nexport function id_jsop(node: number, a: number) { // TODO remove arg ?\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    return r`${a}`;\n}\n\nexport function binary_jsop(node: number, a: number|any, op: string, b: number|any) {\n\n    const   prio = JSOperatorsPriority[op];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    if(typeof b === \"number\")\n        setParentOPPrio(b, prio);\n\n    let cmp = r`${a}${op}${b}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\nexport function unary_jsop(node: number, op: string, a: number|any) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPriority[rop];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    let cmp = r`${op}${a}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\n\ntype GenUnaryOps_Opts = {\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, a: number) => any\n};\n\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_self = NOCONVERT,\n                                substitute_call\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        substitute_call ??= (node: number, self: number) => {\n            return unary_jsop(node, op, convert_self(self) );\n        };\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call\n        };\n    }\n    \n    return result;\n}\n\ntype GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, self: number|any, other: number|any) => any\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            substitute_call,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === '//')\n            op = '/';\n\n        let cs  = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_self(self), op, convert_other(other) );\n        }\n\n        let rcs = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_other(other), op, convert_self(self) );\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_self(self), convert_other(o) );\n            };\n        \n            // same_order ? fct : \n            rcs = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_other(o), convert_self(self) );\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n        result[`__r${pyop}__`] = {\n            return_type,\n            substitute_call: rcs,\n        };\n        if( convert_self === NOCONVERT && substitute_call === undefined)\n            result[`__i${pyop}__`] = {\n                return_type,\n                substitute_call: (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return unary_jsop(node, '--', self);\n                    \n                    return binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            };\n    }\n    \n    return result;\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                substitute_call,\n                             }: GenBinaryOps_Opts = {} ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        let cs  = (node: number, self: number, other: number, reversed: boolean) => {\n\n            let cop = op;\n\n            let a = convert_self(self);\n            let b = convert_other(other);\n            if( reversed ) {\n                [a,b] = [b,a];\n                cop = reverse[cop];\n            }\n\n            if( cop[0] === '=' || cop[0] === '!' ) {\n                if( resultType(self) === resultType(other) )\n                    cop = cop + '=';\n            }\n\n            return binary_jsop(node, a, cop, b);\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number, _: boolean) => {\n                return substitute_call(node, convert_self(self), convert_other(o) ); //TODO...\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n    }\n    \n    return result;\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    wt`for(var ${idx} of ${list}){${body}${NL}}`;\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { getSTypeID } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = getSTypeID(node.name);\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not')\n        return wr( unary_jsop(node, '!', Int2Number(left, STYPE_JSINT) ) );\n\n    const method = STypes[resultType(left)!][value] as STypeFctSubs;\n\n    wr( method.substitute_call!(node, left) );\n}","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n}","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { OPERATORS__EQ, OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID, STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = OPERATORS__EQ;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = OPERATORS__EQ_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = getSTypeID(annotation);\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === STYPE_JSINT)\n            result_type = STYPE_INT; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\nimport { multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    wr( multi_jsop(node, VALUES[node]) );\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return wt`_b_.assert(${firstChild(node)})`;\n}","import { CMPOPS_LIST, genCmpOps } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType  } from \"@SBrython/structs/STypes\";\n\naddSType('bool', {\n    ...genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, type, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    wt`function ${name}(${coffset}){${coffset+1}${NL}}`;\n}","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}","import { r, wr } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\n\nfunction print_obj(obj: Record<string, any>) {\n\n    const keys = Object.keys(obj);\n    if(keys.length === 0)\n        return [[]];\n\n    const str = new Array(keys.length+1);\n    str[0] = `{${keys[0]}: `;\n    let i;\n    for(i = 1; i < keys.length; ++i)\n        str[i]  = `, ${keys[i]}: `;\n\n    str[i] = \"}\";\n\n    return [str, ...Object.values(obj)];\n}\n\nfunction join(data: any[], sep=\", \") {\n\n    if(data.length === 0)\n        return [[\"\"]];\n\n    const str = new Array(data.length+1);\n    str[0] = \"\";\n    let i;\n    for(i = 1; i < data.length; ++i)\n        str[i] = sep;\n    str[i] = \"\";\n\n    return [str, ...data];\n}\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as STypeFct).__call__;\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let kw_pos = nbChildren;\n    for(let i = 1; i < nbChildren; ++i)\n        if( type( i + coffset) === FUNCTIONS_CALL_KEYWORD) {\n            kw_pos = i;\n            break;\n        }\n\n    let nb_pos = meta.idx_end_pos;\n    if( nb_pos === Number.POSITIVE_INFINITY)\n        nb_pos = Math.max(meta.idx_vararg, kw_pos-1);\n\n    let pos_size = nb_pos+1;\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY )\n        pos_size = meta.idx_vararg+2;\n    let pos = new Array(pos_size);\n    \n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let has_kw = false;\n\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY ) {\n\n        const cutoff = Math.min(kw_pos, meta.idx_vararg);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const varg_start = meta.idx_vararg+1;\n        const varg_nb = kw_pos - varg_start;\n        if( varg_nb !== 0 ) {\n\n            // template string... [ [..str], ...idx ]\n            // => [ (a), (b), (c), (d) ] ...\n            let str = new Array(varg_nb + 1);\n            let idx = new Array(varg_nb + 1);\n\n            str[0]       = \"[\";\n\n            idx[0]       = str;\n            idx[1]       = coffset + varg_start;\n            for(let i = 1; i < varg_nb; ++i) {\n                str[i]  = \", \";\n                idx[i+1]= coffset + varg_start + i;\n            }\n\n            str[varg_nb] = \"]\"; // prevents sparse array ?\n        }\n    } else {\n\n        const cutoff = Math.min(kw_pos, nb_pos+1);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < kw_pos; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        has_kw = cutoff !== kw_pos;\n    }\n\n    let has_kwargs = false;\n\n    const args_pos = meta.args_pos;\n    \n\n    for(let i = kw_pos; i < nbChildren; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) {\n            pos[idx] = arg;\n            continue;\n        }\n\n        has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            has_kwargs = true;\n        }\n    }\n\n    let obj: Record<string, any> = kw;\n    //TODO: only the ones at -1...\n    if( has_kwargs && ! meta.has_kw ){\n        obj = kwargs;\n    } else if( has_kwargs ) {\n        obj[meta.kwargs!] = print_obj(kwargs);\n    }\n\n    if( has_kw )\n        pos[pos.length-1] = print_obj(obj);\n    else {\n        while(pos.length > 0 && pos[pos.length-1] === undefined)\n            --pos.length;\n    }\n\n    return r`${coffset}(${join(pos)})`; // args ?\n}\n\nexport default function ast2js(node: number) {\n    wr( (VALUES[node] as STypeFct).__call__.substitute_call!(node) );\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code += jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    wt`${coffset}[${coffset+1}]`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w(\"break\");\n}","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"/* not implemented */\");\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, STYPE_STR);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(rtype);\n\n    // try reversed operator\n    if( type === STYPE_NOT_IMPLEMENTED) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined)\n            type   = method.return_type(ltype!);\n\n        if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED)\n            throw new Error(`${rtype} ${op} ${ltype} NOT IMPLEMENTED!`);\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\ntype Printable = {toString(): string};\n\nlet indent = \"    \";\nlet cur_indent_level = 0;\n//let cur_indent = \"\";\n\nconst indents = [\n    \"\",\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n]\n\nexport const NL = {\n    toString: function() {\n\n        if( __DEBUG__ ) {\n            ++CURSOR[CODE_LINE];\n            CURSOR[CODE_COL] = jscode.length + 1;\n\n            return \"\\n\" + indents[cur_indent_level];\n        } else {\n            return \"\\n\";\n        }\n    }\n}\nexport const BB = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents[++cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\nexport const BE = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents[--cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\n\n// transforms into a template string\nexport function r(...args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    return args;\n}\n\n// write a template string\nexport function wr(args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    if( typeof args === \"string\")\n        return w(args);\n    return wt(...args);\n}\n\n\n// write with template string wt``\nexport function wt(str: TemplateStringsArray, ...args: (Printable|number)[]) {\n    \n    for(let i = 0; i < args.length; ++i) {\n        jscode += str[i];\n        w(args[i]);\n    }\n\n    jscode += str[args.length];\n}\n\n// generic write ?\nexport function w(...args: (Printable|number)[]) {\n\n    for(let i = 0; i < args.length; ++i) {\n\n        let arg = args[i];\n\n        if( Array.isArray(arg) ) { // likely a r``\n            wr(arg as Parameters<typeof wr>[0]);\n            continue;\n        }\n\n        if( typeof arg !== \"number\" ) {\n\n            if( arg === undefined )\n                arg = \"undefined\";\n            if( arg === null )\n                arg = \"null\";\n\n            jscode += arg.toString();\n            continue;\n        }\n\n        const offset = 4*arg;\n        \n        if( __DEBUG__ )\n            set_js_cursor(offset + CODE_BEG);\n        AST2JS[type(arg)!](arg);\n        if( __DEBUG__ )\n            set_js_cursor(offset + CODE_END)\n    }\n}\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { r } from \"@SBrython/ast2js\";\nimport { resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType, STYPE_FLOAT, STYPE_INT } from \"@SBrython/structs/STypes\";\n\naddSType('jsint', {\n\n    ...genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_IJ2INT,\n        {\n            substitute_call: (node, a, b) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, Number2Int(a), '*', Number2Int(b) );\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_INT )\n                    return unary_jsop(node, '-', Number2Int(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps(['~'], // min_safe_integer == max_safe_integer.\n        RET_INT,\n        {\n            convert_self : CONVERT_2INT\n        }\n    ),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /*\n    __int__: {\n        return_type: () => 'int',\n        call_substitute(node, self) {\n            return id_jsop(node, self);\n        }\n    },*/\n});","import { LITERALS_BOOL, LITERALS_FLOAT, LITERALS_INT, LITERALS_NONE, LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_BOOL, STYPE_FLOAT, STYPE_INT, STYPE_JSINT, STYPE_NONETYPE, STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, LITERALS_BOOL);\n            setResultType(dst, STYPE_BOOL);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, LITERALS_STR);\n            setResultType(dst, STYPE_STR);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, LITERALS_FLOAT);\n            setResultType(dst, STYPE_FLOAT);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, LITERALS_NONE);\n            setResultType(dst, STYPE_NONETYPE);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, LITERALS_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, STYPE_INT);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, STYPE_JSINT);\n        VALUES[dst] = value;\n    }\n}","import { Context, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport { default_call } from \"@SBrython/core_modules/functions/call/ast2js\";\nimport { convert_args } from \"./Args\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport Body from \"@SBrython/bry2sbry/Body\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = STypes[rtype] as STypeFct;\n    const meta    = stype.__call__;\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    meta.return_type = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = getSTypeID(annotation);\n        // force the type.\n        meta.return_type = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: STypeFct = {\n        __name__: \"function\",\n        __call__: {\n            args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n            args_pos       : {},\n            idx_end_pos    : -1,\n            idx_vararg     : -1,\n            has_kw         : false,\n            generate,\n            return_type    : () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__.return_type();\n            },\n            substitute_call: default_call\n        }\n    }\n\n    const STypeID = STypes.length;\n    STypes[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, id_jsop, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_IJ2INT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_JSINT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_int = addSType('type[int]', {\n    __call__: {\n        //TODO...\n        return_type: RET_INT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return other;\n            if( other_type === STYPE_JSINT)\n                return Number2Int(other);\n            if( other_type === STYPE_FLOAT )\n                return r`BigInt(Math.trunc(${other}))`;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`BigInt(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('int', {\n\n    //TODO: fix type...\n    // @ts-ignore\n    __class__: SType_type_int,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`${node}.toString()`;\n        }\n    },\n\n    __int__: {\n        return_type: RET_INT,\n        substitute_call(node, self) {\n            return id_jsop(node, self);\n        }\n    },\n    /* */\n    ...genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_INT2INT,\n        {\n            substitute_call(node, a, b) {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_int(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_INT,\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    return unary_jsop(node, '-', Int2Number(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps( ['~'], RET_INT),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n\n});","import { w, wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\n\nfunction find_and_call_substitute(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n    if( method !== undefined )\n        type = method.return_type(rtype!);\n\n    if( type === STYPE_NOT_IMPLEMENTED) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined )\n            type   = method.return_type(ltype!);\n        \n        if( type === STYPE_NOT_IMPLEMENTED) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            return binary_jsop(node, left, jsop, right);\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    return method.substitute_call!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            wr( binary_jsop(node, left, '===', right) );\n            continue;\n        }\n        if( op === 'is not' ) {\n            wr( binary_jsop(node, left, '!==', right) );\n            continue;\n        }\n        \n        wr( find_and_call_substitute(node, left, op, right) );\n    }\n}","import {py2ast, convert_ast} from \"@SBrython/py2ast\";\nimport {ast2js} from \"@SBrython/ast2js\";\nimport {SBrython, _b_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\nimport '@SBrython/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code += jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { resultType } from \"@SBrython/dop\";\nimport { Int2Number, Number2Int } from \"./BinaryOperators\";\nimport { STYPE_INT } from \"./STypes\";\n\ntype Printable = { toString(): string };\n\nexport type Converter = (node: number) => number | [TemplateStringsArray, ...(number | Printable)[]];\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function generateConvert(convert: number[]) {\n\n    const table = new Array<number>();\n    for(let i = 0; i < convert.length; i+=2)\n        table[convert[i]] = convert[i+1];\n\n    return (node: number) => {\n        const src    = resultType(node);\n        const target = table[src];\n        if( target === undefined )\n            return node;\n\n        //TODO: improve:\n        if( src === STYPE_INT)\n            return Int2Number(node, target);\n        if( target === STYPE_INT )\n            return Number2Int(node);\n\n        throw new Error(\"Unfound conversion\");\n    };\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry);\n     executeBrython(results.bry );\n\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { r } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport const SType_type_float = addSType('type[float]', {\n    __call__: {\n        //TODO...\n        return_type: RET_FLOAT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return Int2Number(other);\n            if( other_type === STYPE_FLOAT || other_type === STYPE_INT)\n                return other_type;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" )\n                        return \"Number.POSITIVE_INFINITY\";\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\")\n                        return \"Number.NEGATIVE_INFINITY\";\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`parseFloat(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('float', {\n\n    // @ts-ignore\n    __class__: SType_type_float,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`_b_.float2str(${node})`;\n        }\n    },\n    \n    ...genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    ...genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.mod_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genUnaryOps(['u.-']    , RET_FLOAT),\n    ...genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { set_js_cursor, w } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    w(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === STYPE_STR) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w(\"`\");\n}","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    \n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","import { STYPE_NOT_IMPLEMENTED, STYPE_BOOL, STYPE_FLOAT, STYPE_INT, STYPE_STR, STYPE_JSINT } from \"./STypes\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_FLOAT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === STYPE_JSINT)\n        return STYPE_JSINT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === STYPE_INT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_FLOAT(_: number) { return STYPE_FLOAT; }\nexport function RET_INT  (_: number) { return STYPE_INT;   }\nexport function RET_JSINT(_: number) { return STYPE_JSINT; }\nexport function RET_STR  (_: number) { return STYPE_STR;   }\n\n//TODO...\nexport function generate_return_type() {\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`while(${coffset}){${coffset+1}${NL}}}`;\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { wt } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`'${VALUES[node]}'`;\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        wt`${coffset}: ${coffset+1}`;\n\n    for(let i = 2; i < nbChildren; i+=2)\n        wt`, ${i+coffset}: ${i+1+coffset}`;\n\n    w('}');\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED) {\n        throw new Error(`${resultType(coffset+1)} ${op}= ${resultType(coffset)} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps} from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_str = addSType('type[str]', {\n    __call__: {\n        //TODO...\n        return_type: RET_STR,\n        substitute_call: (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_STR )\n                return other;\n\n            const method = STypes[other_type]?.__str__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${STypes[other_type].__name__}.__str__ not defined`);\n            return method.substitute_call!(other);\n        }\n    }\n});\n\naddSType('str', {\n\n    // @ts-ignore\n    __class__: SType_type_str,\n\n    __len__: {\n        return_type: RET_INT,\n        substitute_call: (_) => {\n            return r`${firstChild(_) + 1}.length`;\n        }\n    },\n\n    ...genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    ...genBinaryOps([\"+\"]      , RET_STR2STR),\n    ...genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            substitute_call: (node: number, a: number, b: number) => {\n                \n                if( resultType(a) !== STYPE_STR )\n                    [a,b] = [b,a];\n\n                return r`${a}.repeat(${b})`;\n            }\n        }),\n});","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n    execute(results);\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n            if( id === 5 )\n                continue;\n\n            if( subtests[j] === \"\")\n                continue;\n        \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._b_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","export default class Py_object {\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1)\n        return wt`{${coffset}${NL}}`;\n\n    wt`if(${coffset+1}){${coffset}${NL}}`;\n}","import { addSType } from \"@SBrython/structs/STypes\";\n\naddSType('NoneType', {});","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w(value[0])\n\n    if( value[1] !== undefined)\n        w(\": \", value[1]);\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`${firstChild(node)}.${VALUES[node]}`;\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    w(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_FOR, CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, CONTROLFLOWS_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = STYPE_INT;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: STypeFct, context: Context) {\n\n    const meta = SType_fct.__call__;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    //TODO: convert annotation type...\n    let result_type = node.annotation?.id; \n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === undefined ) {\n            result_type = resultType(coffset);\n            if(result_type === STYPE_JSINT)\n                result_type = STYPE_INT;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    wt`if(${coffset++}){${coffset++}${NL}}`;\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        wt`else if(${coffset++}){${coffset++}${NL}}`;\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        wt`else {${coffset}${NL}}`;\n}","import { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._b_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"null\");\n}","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let beg : string|number|any  = \"0n\";\n    let incr: string|number|any  = \"1n\";\n\n    let end = Number2Int(body+1);\n\n    if( nbChildren > 2) {\n        beg = end;\n        end = Number2Int(body+1);\n    }\n\n    if( nbChildren === 4)\n        incr = Number2Int(body+2);\n\n    return wt`for(var ${idx} = ${beg}; ${idx} < ${end}; ${idx} += ${incr}){${body}${NL}}`;\n}","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { BB, BE, NL, w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    wt`try {${coffset}${NL}}`;\n    wt`catch(_raw_err_){${BB}${NL}`;\n\n        w(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i)\n            w(NL, \"else \", i + coffset );\n\n        // not a catch all...\n        if( nbChild(coffset + nbChildren-1) !== 1)\n            w(NL, \"else { throw _raw_err_ }\");\n\n    w(BE, NL);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`(${coffset} ? ${coffset+1} : ${coffset+2})`;\n}","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { BB, BE, NL, w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(BB);\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i)\n        w(NL, i);\n\n    w(BE);\n}","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\nimport keyword from \"./keyword\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = STypes[fct_type];\n    const ret_type = (fct.__call__ as STypeFctSubs).return_type();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code_from_list(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import      AST2JS_0 from \"./symbol/ast2js\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nimport type {T_ASTCONVERT, T_AST2JS} from './'\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let base: string|number = \"_r_.object\";\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    if( nbChildren === 2)\n        base = body+1;\n\n    wt`class ${VALUES[node]} extends ${base} {${body}${NL}}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === STYPE_INT ) {\n        // force str write (else might assume this is an AST node ID)...\n        w(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${value}`);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = STypes[resultType(coffset)]![VALUES[node]] as STypeFctSubs;\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        if( i !== 0)\n            w(\", \");\n        w(i + coffset);\n    }\n\n    w('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w(\"__SBRYTHON__.getModules()\");\n    else\n        wt`__SBRYTHON__.getModule(\"${value}\")`;\n}","export default __webpack_public_path__ + \"Benchmark/index.html\";"],"names":["Py_Exception","Py_object","convert","dst","node","context","setType","KEYWORDS_ASSERT","coffset","addChild","convert_node","test","result_type","STYPE_NONETYPE","undefined","value","resultType","RETURN","setResultType","meta","parent_node_context","__call__","return_type","ast2js","wt","firstChild","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Error","Function","runJSCode","getModules","getModule","name","getASTFor","_r_","_b_","nops","ops","nb_ops","length","Array","i","op","bname2pyname","constructor","$name","VALUES","OPERATORS_COMPARE","STYPE_BOOL","nbChildren","comparators","left","STypes","STypename2id","getSTypeID","id","__name__","addSType","type","Object","assign","STYPE_INT","STYPE_JSINT","STYPE_FLOAT","STYPE_STR","STYPE_NOT_IMPLEMENTED","buildPyCode","offset","start","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","convert_ast","dop_reset","createASTNode","Body","body","Context","ASTNODES","swapASTNodes","a","b","ao","ASTNODE_SIZE","bo","t","brython_node","BRY2SBRY","parent_context","RootContext","local_symbols","type_fct","len","RET_INT","__class__","substitute_call","call","int","str","float","w","generate","code","results","bry","sbry","buildAST","generateSBrython","generateBrython","times","OPERATORS_UNARY","operand","method","Py_JSException","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","nbChild","OPERATORS_ATTR","attr","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","type_id","FUNCTIONS_ARGS_VARG","wr","binary_jsop","FUNCTIONS_ARGS_KWARG","defval","Number2Int","astnode2tree","buildJSCode","pycode","children","from","_","BinaryOperators","AssignOperators","jsop2pyop","JSOperators","Int2Number","target","LITERALS_INT","a_value","ltype","rtype","r","JSOperatorsPriority","priority","reversed_operator","multi_jsop","first","prio","p_prio","setParentOPPrio","id_jsop","parentOPPrio","cmp","unary_jsop","rop","genUnaryOps","convert_self","NOCONVERT","pyop","self","genBinaryOps","convert_other","cs","other","rcs","o","other_value","CMPOPS_LIST","reverse","genCmpOps","reversed","cop","idx","list","NL","STRUCTS_TUPLE","elts","CLASS_CLASSDEF","bases","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","BODY","cn","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","tcoef","targets","OPERATORS__EQ","OPERATORS__EQ_INIT","annotation","rchild","STRUCTS_LIST","CONTROLFLOWS_WHILE","RET_IJBF2BOOL","KEYWORDS_CONTINUE","print_obj","obj","keys","values","default_call","kw_pos","FUNCTIONS_CALL_KEYWORD","nb_pos","max","pos_size","has_kw","pos","kw","cutoff","min","varg_start","varg_nb","args_names","has_kwargs","args_pos","arg","data","sep","join","float2str","f","toExponential","sign_idx","slice","toString","includes","src","beg","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","debug_print_exception","err","sb","console","warn","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","indexOf","nodes","SYMBOL","parse_stack","_raw_err_","stackline","stackline2astnode","stack2astnodes","exception_str","log","get_py_exception","__SBRYTHON__","_err_","PythonError","python_exception","JSException","CONTROLFLOWS_TRYBLOCK_CATCH","KEYWORDS_BREAK","OPERATORS__BRACKETS","LITERALS_F_STRING","OPERATORS_BINARY","right","JS_CODE","indent","BB","BE","args","isArray","AST2JS","RET_IJ2INT","CONVERT_2INT","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","RET_JSINT2JSINT","RET_JSINT","_context","vtype","qname","LITERALS_BOOL","LITERALS_STR","__qualname__","LITERALS_FLOAT","LITERALS_NONE","FAKE_RETURN_NODE","stype","convert_args","returns","fct_return_type","last_type","push","SType_fct","posonlyargs","STypeID","FUNCTIONS_DEF","SType_type_int","other_type","otype","__int__","__str__","RET_STR","RET_INT2INT","find_and_call_substitute","jsop","_ast","execute","executeSBrython","executeBrython","SType_type_float","RET_FLOAT","LITERALS_F_STRING_FORMATTEDVALUE","STRUCTS_DICT","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","super","bname2jsop","OPERATORS_BOOLEAN","RUNTIME_0","RUNTIME_1","RUNTIME_2","handlers","CONTROLFLOWS_TRYBLOCK","ExceptHandler","SType_type_str","__len__","window","onerror","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","textContent","classList","remove","add","print_js","print_python","print_ast","print_code","createElement","lineno","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","merge","tests","subtests","j","async","fetch","text","fromEntries","lines","exclude","x","parseInt","names","loadSubTests","trim","nbEmptyLines","code_len","nbExcluded","find","v","Name","require","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","KEYWORDS_RAISE","exc","assert","cond","iter","func","CONTROLFLOWS_FOR","CONTROLFLOWS_FOR_RANGE","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","brython_name","CONTROLFLOWS_TERNARY","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","fct","KEYWORDS_IMPORT_ALIAS","asname","incr","OPERATORS_ASSIGNOP","fct_type","ret_type","FUNCTIONS_CALL","keywords","KEYWORDS_IMPORT","module","PASS","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","RUNTIME","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","base"],"sourceRoot":""}