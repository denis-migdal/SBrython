{"version":3,"file":"Benchmark/index.js","mappings":"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GAKhBzJ,EAAkB,CAC9B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,GAKYrJ,EAAkB,CAC9B,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GAGYL,EAAiB,CAC7B,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGYC,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYE,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGYK,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,MACA,MACA,KACA,KACA,IACA,GAEA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGY2I,EAAiB,CAC7B,IAAK3L,EACL,KAAMA,EAAU,GAChB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAKF,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAc,GACrB,KAAMC,EACN,MAAOA,EAAc,GACrB,IAAKjI,EACL,KAAMA,EAAW,GACjB,IAAK4H,EACL,KAAMA,EAAW,GACjB,IAAK1H,EACL,KAAMA,EAAW,GACjB,IAAKqI,EACL,KAAMA,EAAW,GACjB,KAAME,EACN,MAAOA,EAAY,GACnB,IAAKE,EACL,KAAMA,EAAW,GACjB,KAAMhB,EACN,MAAOA,EAAW,GAClB,I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","sources":["webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js?a779","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/pages/Benchmark/index.html","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/list.js?6004","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/types/list.js?29f5","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts"],"sourcesContent":["import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { printNode } from \"../py2ast\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) ) {\n        printNode(other);\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n    }\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default class Py_object {\n\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","export default {};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","export default __webpack_public_path__ + \"Benchmark/index.html\";","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","import Types, { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST, printNode } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_BOOL_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n\n    return code.slice(offset, offset += end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => setType(id, AST_KEY_RETURN),\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return SType_fct.__call__[RETURN_TYPE]();\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        setSibling(args, readBody() );\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    let curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __DEBUG__ ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr();\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== end);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n                //TODO: return type...\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\nlet nbTypes: number;\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    // h4ck\n    // @ts-ignore\n    if( nbTypes === undefined)\n        nbTypes = TYPES.length;\n\n    TYPES.length = nbTypes;\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __DEBUG__ ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __DEBUG__ && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__DEBUG__)\n        w_str(`/*${VALUES[node]} */`);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        console.warn(name, opname, method, resultType(a), Types[resultType(a)])\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_None               = 1;\nexport const TYPEID_NoneType           = 2;\nexport const TYPEID_NotImplemented     = 3;\nexport const TYPEID_NotImplementedType = 4;\nexport const TYPEID_int                = 5;\nexport const TYPEID_jsint              = 6;\nexport const TYPEID_float              = 7;\nexport const TYPEID_bool               = 8;\nexport const TYPEID_str                = 9;\nexport const TYPEID_type               =10;\nexport const TYPEID_type_int_          =11;\nexport const TYPEID_type_jsint_        =12;\nexport const TYPEID_type_float_        =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_type_bool_         =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"unknown\",\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js\";\nimport { id2name as id2typename } from \"@SBrython/sbry/types\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string|null,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n\n    const info = Types[typeID];\n\n    const inst_name  = info.__qualname__ as string ?? info.__name__ ?? \"\"\n    const klass_name = info.__class__?.__qualname__ as string ?? info.__class__?.__name__ ?? \"\"\n\n    const result_type = typeID === 0 ? null : `${inst_name}:${klass_name}`;\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = ! __DEBUG__;\nconst parser    = search.get(\"parser\") === \"false\" ? false : true;\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = [\n    'basic test suite',\n    'numbers',\n//    \"classes\" // ~1174\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~600\n// list    ~496\n// dicts   ~288\n// sets    ~300\n// bytes   ~300\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    if( __DEBUG__ ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )   // when does it occur ?\n            continue;\n        if( ctype.start.line === 0) {// unprinted node\n            subparts.length -= 2;\n            continue;\n        }\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n\n        if( val.__qualname__ !== undefined)\n            val = val.__qualname__;\n        else if( val.__name__ !== undefined)\n            val = val.__name__;\n        else if( val.name !== undefined)\n            val = val.name;\n        else\n            val = JSON.stringify(val);\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(const child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(const gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(const gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n\n    let failed = [];\n\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            const code = subtests[j];\n\n            if( code === \"\")\n                continue;\n       \n            if( merge ) {\n                const indented_code = code.split('\\n').map(e => `\\t${e}`).join('\\n');\n                fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n            } else {\n                try {\n                    fullcode = code;\n                    generate(fullcode, results, parser);\n                    execute(results, sbry_print);\n                } catch(e) {\n                    error = e as Error;\n\n                    failed.push({\n                        code,\n                        error: e,\n                    })\n\n                    // print last error...\n                    try {\n                        const ast = astnode2tree();\n                        try {\n                            print_js( results.sbry.code, ast );\n                        } catch(e) { console.warn(e); }\n                        try {\n                            print_python( fullcode, ast );\n                        } catch(e) { console.warn(e); }\n                        try {\n                            print_ast( ast );\n                        } catch(e) { console.warn(e); }\n                    } catch(e) { console.warn(e); }\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n\n        if( error ) {\n\n            try {\n                const ast = astnode2tree();\n                try {\n                    print_js( results.sbry.code, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_python( fullcode, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_ast( ast );\n                } catch(e) { console.warn(e); }\n            } catch(e) { console.warn(e); }\n        }\n    }\n    \n    if(error) {\n\n        console.warn(failed);\n\n        python_input.value = failed[failed.length-1]?.code ?? results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('#').slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n// @ts-ignore\nglobalThis.int   = BigInt;\n// @ts-ignore\nglobalThis.float = Number;\n// @ts-ignore\nglobalThis.bool  = Boolean;\n// @ts-ignore\nglobalThis.str   = String;\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__DEBUG__) set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(id, cur.body);\n    }\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS, OP_UNR_PLUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","// @ts-nocheck\n\nimport dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, TYPE_ID, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, TYPE_ID> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, TYPE_ID>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}"],"names":["klass","initBuiltinClass","TYPEID_str","TYPEID_type_str_","add_method","RET_STR","node","other","nextSibling","firstChild","other_type","resultType","TYPES","__class__","__str__","__call__","WRITE_CALL","w_node","RET_INT","call","w_str","addJSCmpOps","JSCmpOps_LIST","RET_STR2BOOL","addJSBinOps","OP_BIN_ADD","RET_STR2STR","OP_BIN_MUL","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","w_call","a","op","b","_","w_sns","convert","convert_args","dst","SType_fct","context","meta","ARGS_INFO","_args","args","has_vararg","undefined","vararg","has_kwarg","kwarg","args_pos","args_names","total_args","posonlyargs","length","kwonlyargs","cur","first","setType","AST_DEF_ARGS","addSblng","addSibling","addFirstChild","pos_defaults","defaults","posonly","pos","doffset","i","convert_arg","AST_DEF_ARG_POSONLY","local_symbols","arg","offset","AST_DEF_ARG_POS","idx_vararg","idx_end_pos","Number","POSITIVE_INFINITY","AST_DEF_ARG_VARARGS","nb_pos_defaults","Math","min","has_others","cut_off","end","kwonly","kw_defaults","has_kw","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","kwargs","VALUES","defval","type","name","result_type","TYPEID_NotImplementedType","annotation","id","RETURN_TYPE","coffset","convert_node","TYPEID_jsint","TYPEID_int","setResultType","brython_name","Py_object","TypeKlass","TYPEID_type","instance","jsname","Klass","__name__","__qualname__","JS_NAME","target","RET_TYPE","write","r","Object","create","TYPEID","create_function","nbChildren","handlers","AST_CTRL_TRYBLOCK","Body","body","ExceptHandler","ast2js","AST_KEY_IMPORT","names","module","write_arg","Number2Int","write_posarg","start","Py_Exception","test","orelse","AST_CTRL_TERNARY","idx","list","TYPEID_type_jsint_","RET_JSINT","w_subs","OP_BIN_POW","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_IJBF2BOOL","iter","constructor","$name","func","AST_CTRL_FOR","value","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","values","console","warn","TYPEID_NoneType","AST_KEY_RETURN","parentTypeID","to_write","setParentOPPrio","parentOPPrio","ops","return_type","NOCONVERT","ADD_EQ","opid2opmethod","opid2ropmethod","iop","opid2iopmethod","prio","jsop_priorities","p_prio","l","opid2jsop","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","results","nb_tokens","A","B","report","nb_lines","total_lines","nb_done","nb_excluded_lines","nb_files","code","tcoef","times","AST_LIT_FSTRING_FVAL","Error","FAKE_RETURN_NODE","generate","rtype","stype","Types","createSubContext","returns","fct_return_type","last_type","push","default_call","Array","STypeID","AST_DEF_FCT","AST_DEF_METH","method_name","gen","instanceType","instanceTypeID","addType","BB","w_NL","BE","TYPEID_unknown","float2str","f","str","toExponential","sign_idx","slice","toString","includes","AST_KEY_IMPORT_ALIAS","asname","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","curChar","CURRENT_PARAM_TYPE","POSONLY_END","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","setFirstChild","readExpr","KNOWN_SYMBOLS","AST_LIT_NONE","AST_LIT_TRUE","AST_LIT_FALSE","AST_OP_NOT","readToken","AST_KEY_BREAK","AST_KEY_CONTINUE","AST_KEY_PASS","AST_KEY_ASSERT","cond","setSibling","readBody","AST_CTRL_WHILE","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","addSymbol","nbTypes","CURRENT_INDENTATION","consumeIndentedLines","beg","readLine","createASTNode","AST_COMMENT","readComment","AST_BODY","indent","createCallUopNode","AST_LIT_STR","nextChar","AST_LIT_INT","astnode_type","AST_LIT_FLOAT","TYPEID_float","AST_STRUCT_LIST","token","symbol","AST_SYMBOL","getSymbol","AST_CALL","fctType","next","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN","isEndOfExpr","readOp","op_str","opsymbol2opid","right","createCallOpNode","rop","rop_prio","lop","lop_prio","pyop_priorities","stack","py2ast","_code","filename","resetSymbols","nodes","ASTNODES","dop_reset","opnode","AST_OP_OP","pyop_name","atype","method","ret_type","left","OP_ASSIGN","node_type","AST_OP_ASSIGN_AUG","ltype","use_parser","bry","sbry","ast","_ast","performance","now","parser","$B","Parser","_PyPegen","run_parser","t0","tokens","tokenizer","buildAST","__ast","convert_ast","jscode","t1","generateSBrython","src","future","future_features","symtable","_PySymtable_Build","js_from_root","imported","js","generateBrython","PythonError","python_exception","super","_raw_err_","this","cn","obj","abs","n","Py_JSException","AST_CALL_ARG_KW","fct","attr","fct_type","keywords","keyword","writeOp","count","jop","reversed_operator","find_and_write_call","kname","rchild","OP_CMP_EQ","OP_CMP_NEQ","TYPEID_bool","TYPEID_NotImplemented","last_id","AST_STRUCT_TUPLE","AST_STRUCT_DICT","AST_KEY_RAISE","AST_OP_UNARY","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_ATTR","AST_CTRL_TRYBLOCK_CATCH","AST_CLASSDEF","AST_2BIGINT","AST_2NUMBER","builtins","TYPEID_type_int_","TYPEID_type_float_","genOpFct","RET_None","nbBuiltins","opname","debug_print_exception","err","sb","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","line","col","indexOf","getASTFor","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","TYPEID_None","TYPEID_type_bool_","LIST","require","id2name","resetResults","fill","elts","astnode2tree","typeID","info","inst_name","klass_name","children","buildJSCode","pycode","buildPyCode","_context","vtype","qname","lchild","OP_CMP_GT","OP_CMP_LT","OP_CMP_GE","OP_CMP_LE","OP_BOOL_NOT","OP_EQ2IS","exc","o","RET_INT2INT","RET_FLOAT","JS_CODE","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","AST2JS","bname2pyname","left_id","right_id","fist","KW","kw","getKW","floordiv_float","floor","floordiv_int","result","mod_float","mod","mod_int","write_multi_jsop","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","sbry_print","URLSearchParams","location","test_name","get","merge","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","oneTimeExec","fullcode","textContent","classList","remove","trim","error","execute","message","add","print_code","createElement","lineno","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","JSON","stringify","child","html_child","startTests","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","print_ast","replaceChildren","print_python","print_js","tests","failed","subtests","substats","j","stats","total","excluded","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","parts","t","excl","nbEmptyLines","code_len","nbExcluded","find","v","isArray","weak_assign","key","instance_TypeID","method_wrapper","klass_type","inst_type","createClassContext","bases","stypeID","globalThis","int","BigInt","float","bool","Boolean","String","SBrython","browser","buildModule","Function","runJSCode","getModules","getModule","print","executeSBrython","executeBrython","brython_node","BRY2SBRY","ifblock_cur","Symbol","assert","__int__","other_value","_op","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","mix","base","extensions","Mix","prototype","w_JSCmpOp","targets","attrname","attrdef","keys","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","PY_CODE","ArrayBuffer","maxByteLength","NEXT_AST_NODE_ID","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","sibling","nops","nb_ops","comparators","operand","a_value","type_obj","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","assign","ILIST","Context","symbols","ctx","alt","bname2jsop"],"sourceRoot":""}