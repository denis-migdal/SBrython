{"version":3,"file":"Benchmark/index.js","mappings":"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","sources":["webpack://sbrython/./src/types/type[int].ts","webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/types/str.ts","webpack://sbrython/./src/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/structs/operators/compare.ts","webpack://sbrython/./src/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/structs/operators/binary.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/types/utils/addType.ts","webpack://sbrython/./src/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/bry2sbry/ClassDef.ts","webpack://sbrython/./src/types/jsint.ts","webpack://sbrython/./src/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/bry2sbry/Body.ts","webpack://sbrython/./src/types/type[str].ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/types/utils/types.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/List.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/types/bool.ts","webpack://sbrython/./src/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/core_modules/to_number/ast2js.ts","webpack://sbrython/./src/types/bases.ts","webpack://sbrython/./src/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/types/NoneType.ts","webpack://sbrython/./src/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/bry2sbry/Constant.ts","webpack://sbrython/./src/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/types/type[float].ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/core_modules/to_bigint/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/bry2sbry/list.ts","webpack://sbrython/./src/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/structs/operators/id.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/types/list.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/bry2sbry/functions/Args.ts","webpack://sbrython/./src/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/bry2sbry/Name.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/bry2sbry/import/alias.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/structs/operators/unary.ts","webpack://sbrython/./src/types/index.js","webpack://sbrython/./src/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/types/utils/methods.ts","webpack://sbrython/./src/types/int.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/bry2sbry/functions/Call.ts","webpack://sbrython/./src/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/bry2sbry/import/Import.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/types/NotImplementedType.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/types/float.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts","webpack://sbrython/./src/pages/Benchmark/index.html"],"sourcesContent":["import { RET_INT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns } from \"@SBrython/ast2js\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL](node, other);\n        })\n    }\n);","import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_NoneType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _b_.PythonError(\", firstChild(node), \")\");\n}","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import dop_reset, {ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"./types/utils/types\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n\n    console.warn({\n        type     : type(id),\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname];\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : TYPEID_type_int_,\n        str  : TYPEID_type_str_,\n        float: TYPEID_type_float_,\n        len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)) //TODO...\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { w_node } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] += results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] += results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] += results. bry.times[offset+1];\n    results.sbry.times[offset] += results.sbry.times[offset+1];\n}","import { w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { parentOPPrio, setParentOPPrio, type, VALUES } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { write_unary_jsop } from \"./unary\";\nimport { AST2JS } from \"@SBrython/core_modules/lists\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"@SBrython/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { buildJSCode } from \"@SBrython/ast2js\";\nimport { buildPyCode } from \"@SBrython/py2ast\";\n\nimport Types from \"@SBrython/types/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type: ''+type(id), // TODO convert\n        result_type: Types[resultType(id)]?.__name__,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { addType } from \"@SBrython/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_b_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nimport Types from \"@SBrython/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value];\n\n    method[WRITE_CALL]!(node, left);\n}","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n}","import { RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport Types from \"./list\";\nimport { w_node } from \"@SBrython/ast2js\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__[WRITE_CALL](node, other);\n        })\n    }\n);","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { OPERATORS__EQ, OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = OPERATORS__EQ;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = OPERATORS__EQ_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { Context } from \"@SBrython/py2ast\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Fct<T extends any[] = unknown[]> = {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = {\n    __name__?: string,\n    __call__: Fct<T> & {\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { VALUES } from \"@SBrython/dop\";\nimport { write_multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_b_.assert(\", firstChild(node), \")\");\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}","import { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === FUNCTIONS_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code += jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","import { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// =======================================================================\n\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}\n\n// =======================================================================\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { LITERALS_BOOL, LITERALS_FLOAT, LITERALS_INT, LITERALS_NONE, LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, LITERALS_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, LITERALS_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, LITERALS_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, LITERALS_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, LITERALS_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { Context, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { default_call } from \"@SBrython/core_modules/functions/call/ast2js\";\nimport { convert_args } from \"./Args\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport Body from \"@SBrython/bry2sbry/Body\";\n\nimport Types from \"@SBrython/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import {py2ast, convert_ast} from \"@SBrython/py2ast\";\nimport {ast2js} from \"@SBrython/ast2js\";\nimport {SBrython, _b_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code += jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { LITERALS_INT, TO_BIGINT, TO_NUMBER } from \"@SBrython/core_modules/lists\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, TO_NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, TO_BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry);\n     executeBrython(results.bry );\n\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { RET_FLOAT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    \n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n\n    try {\n        execute(results);\n    } catch(e) {\n        console.warn(e);\n    }\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            if( subtests[j] === \"\")\n                continue;\n       \n            if( id === 5) { // || id > 121) {\n                //console.warn(\"ignored\", id);\n                continue;\n            }\n            \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._b_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","export default class Py_object {\n\n}","import { w_node } from \"@SBrython/ast2js\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","export default [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_FOR, CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, CONTROLFLOWS_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n\n    if( Number.isNaN( Number(value) ) ) {\n        console.warn(value);\n        throw new Error(\"??\");\n    }\n\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._b_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { write_id_jsop } from \"@SBrython/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_b_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { BB, BE, w_NL, w_node } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport Types from \"@SBrython/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import      AST2JS_0 from \"./symbol/ast2js\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\nimport      AST2JS_41 from \"./to_bigint/ast2js\";\nimport      AST2JS_42 from \"./to_number/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nexport const TO_BIGINT = 41;\nexport const TO_NUMBER = 42;\n\nimport type {T_AST2JS} from './'\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n\tAST2JS_41,\n\tAST2JS_42,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_b_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_b_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_b_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]];\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SBRYTHON__.getModules()\");\n    else\n        w_str(`__SBRYTHON__.getModule(\"${value}\")`);\n}","export default __webpack_public_path__ + \"Benchmark/index.html\";"],"names":["Object","assign","TYPE_type_int_","__name__","__call__","method_wrapper","RET_INT","node","other","firstChild","other_type","resultType","TYPEID_int","TYPEID_jsint","TYPEID_float","TYPEID_str","Types","__int__","WRITE_CALL","w_sns","w_node","Number2Int","Py_Exception","Py_object","TYPE_str","__class__","TYPE_type_str_","__len__","w_str","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","t","convert","dst","context","setType","KEYWORDS_ASSERT","coffset","addChild","convert_node","test","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","result_type","TYPEID_NoneType","undefined","value","RETURN","setResultType","meta","parent_node_context","RETURN_TYPE","ast2js","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Error","Function","runJSCode","getModules","getModule","name","getASTFor","_r_","_b_","nops","nb_ops","length","Array","i","bname2pyname","constructor","$name","VALUES","OPERATORS_COMPARE","TYPEID_bool","nbChildren","comparators","left","buildPyCode","id","offset","start","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","convert_ast","dop_reset","createASTNode","Body","body","Context","ASTNODES","swapASTNodes","ao","ASTNODE_SIZE","bo","brython_node","BRY2SBRY","type","parent_context","RootContext","local_symbols","type_fct","int","TYPEID_type_int_","str","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","call","generate","code","results","bry","sbry","buildAST","generateSBrython","generateBrython","times","OPERATORS_UNARY","operand","TYPEID_NotImplementedType","method","Py_JSException","pyop","other_value","write_unary_jsop","prio","JSOperatorsPrio","p_prio","parentOPPrio","setParentOPPrio","l","r","floordiv_float","Math","floor","floordiv_int","mod_float","mod","mod_int","nbChild","OPERATORS_ATTR","attr","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","type_id","FUNCTIONS_ARGS_VARG","FUNCTIONS_ARGS_KWARG","defval","astnode2tree","buildJSCode","pycode","children","from","_","BinaryOperators","AssignOperators","JSOperators","JSOperatorsPriority","priority","reversed_operator","write_multi_jsop","first","parenthesis","idx","list","typedesc","obj","create","STRUCTS_TUPLE","elts","CLASS_CLASSDEF","bases","TYPE_jsint","RET_IJ2INT","CONVERT_2INT","Int2Number","RET_IJBF2FLOAT","RET_JSINT2JSINT","genUnaryOps","RET_JSINT","RET_IJBF2BOOL","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","BODY","cn","RET_STR","__str__","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","tcoef","targets","target","OPERATORS__EQ","OPERATORS__EQ_INIT","rtype","annotation","Symbol","rchild","STRUCTS_LIST","CONTROLFLOWS_WHILE","KEYWORDS_CONTINUE","default_call","nb_call_args","call_args_offset","nb_pos_call","FUNCTIONS_CALL_KEYWORD","max_pos","vararg_array","has_kw","cutoff","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","args_names","args_pos","arg","key","float2str","f","toExponential","sign_idx","slice","toString","includes","src","beg","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","debug_print_exception","err","sb","console","warn","stack","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","indexOf","nodes","SYMBOL","parse_stack","_raw_err_","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SBRYTHON__","_err_","PythonError","python_exception","JSException","TYPE_bool","CONTROLFLOWS_TRYBLOCK_CATCH","KEYWORDS_BREAK","OPERATORS__BRACKETS","TYPE_type_float_","TYPE_int","TYPE_float","TYPE_NotImplementedType","TYPE_NoneType","LITERALS_F_STRING","values","OPERATORS_BINARY","right","ltype","JS_CODE","w_NL","BB","BE","AST2JS","args","_context","vtype","qname","LITERALS_BOOL","LITERALS_STR","__qualname__","LITERALS_FLOAT","LITERALS_NONE","LITERALS_INT","FAKE_RETURN_NODE","stype","convert_args","returns","fct_return_type","last_type","push","SType_fct","posonlyargs","STypeID","FUNCTIONS_DEF","find_and_write_call","jsop","_ast","a_value","TO_NUMBER","setFirstChild","TO_BIGINT","execute","executeSBrython","executeBrython","RET_FLOAT","LITERALS_F_STRING_FORMATTEDVALUE","STRUCTS_DICT","keys","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","RET_INT2INT","super","bname2jsop","OPERATORS_BOOLEAN","RUNTIME_0","RUNTIME_1","RUNTIME_2","handlers","CONTROLFLOWS_TRYBLOCK","ExceptHandler","window","onerror","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","textContent","classList","remove","add","print_js","print_python","print_ast","print_code","createElement","lineno","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","merge","tests","subtests","j","async","fetch","text","fromEntries","lines","exclude","x","parseInt","names","loadSubTests","trim","nbEmptyLines","code_len","nbExcluded","find","v","isArray","Name","require","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","KEYWORDS_RAISE","exc","write_id_jsop","assert","cond","iter","func","CONTROLFLOWS_FOR","CONTROLFLOWS_FOR_RANGE","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","brython_name","CONTROLFLOWS_TERNARY","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","isNaN","fct","KEYWORDS_IMPORT_ALIAS","asname","OPERATORS_ASSIGNOP","rop","RET_TYPE","write","fct_type","ret_type","FUNCTIONS_CALL","keywords","KEYWORDS_IMPORT","module","PASS","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","AST2JS_41","AST2JS_42","RUNTIME","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","_node","_op"],"sourceRoot":""}