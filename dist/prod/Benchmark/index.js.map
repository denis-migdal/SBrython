{"version":3,"file":"Benchmark/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/pages/Benchmark/index.html","webpack://sbrython/./src/sbry/ast2js/symbol.ts"],"sourcesContent":["const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n}\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __name__: string,\n    __str__?: Fct<[number]>,\n    __int__?: Fct<[number]>,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, AST_FCT_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type: Types[resultType(id)]?.__name__,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = AST_OP_ASSIGN;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = AST_OP_ASSIGN_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"./types/utils/types\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : id2name[type(id)],\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname] as Fct;\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; // is it used ?\n    type; //TODO: remove\n}\n\n// builtin symbols.\nconst builtins = {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT))\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;\n\nexport default [];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[number]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default {};","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_list\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n\n    try {\n        execute(results);\n    } catch(e) {\n        console.warn(e);\n    }\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            if( subtests[j] === \"\")\n                continue;\n       \n            if( id === 5) { // || id > 121) {\n                //console.warn(\"ignored\", id);\n                continue;\n            }\n            \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { type Context, convert_node, swapASTNodes } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = context.createSubContext(\"class\");\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[number, number]>;\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, PY_CODE, VALUES } from \"../dop\";\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","export default __webpack_public_path__ + \"Benchmark/index.html\";","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}"],"names":["LIST","require","ILIST","push","id2name","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","w_node","w_sns","convert","dst","context","name","func","id","fct_type","local_symbols","fct","Types","ret_type","__call__","RETURN_TYPE","setType","AST_FCT_CALL","setResultType","coffset","addChild","args","length","keywords","convert_node","i","keyword","rchild","resultType","TYPEID_jsint","TYPEID_int","Number2Int","Object","assign","TYPE_str","__name__","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","RET_FLOAT","other","other_type","TYPEID_float","__int__","WRITE_CALL","other_value","type","AST_LIT_STR","Int2Number","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","Error","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","undefined","kwargs","write_arg","isLast","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","Symbol","FAKE_RETURN_NODE","constructor","$name","generate","rtype","stype","call","createSubContext","parent_node_context","convert_args","annotation","returns","fct_return_type","last_type","Body","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_STRUCT_DICT","keys","values","bname2pyname","AST_OP_ASSIGN_AUG","target","value","Py_object","TYPE_bool","RET_IJBF2BOOL","astnode2tree","result_type","jscode","buildJSCode","pycode","buildPyCode","children","from","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_INIT","ast","filename","offset","start","line","JS_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","str","AST2JS","PY_CODE","convert_ast","dop_reset","createASTNode","Context","ASTNODES","type_fct","symbols","builtins","this","int","TYPEID_type_int_","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","return_type","left","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","code","tcoef","times","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","AST_SYMBOL","AST_OP_ATTR","attr","TYPE_float","arg","RET_IJBF2FLOAT","_node","_op","genUnaryOps","results","bry","sbry","resetResults","fill","AST_KEY_IMPORT","names","module","idx","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","console","warn","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","PythonError","python_exception","super","_raw_err_","TYPEID_NoneType","float2str","f","toExponential","sign_idx","slice","toString","includes","typedesc","obj","write_unary_jsop","bname2jsop","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","TYPE_jsint","TYPE_int","TYPE_NotImplementedType","TYPE_NoneType","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","NEXT_AST_NODE_ID","parent","ASTNODE_SIZE","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","parentOPPrio","setFirstChild","setParentOPPrio","beg","cn","elts","test","window","onerror","log","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","textContent","classList","remove","execute","e","add","print_js","print_python","print_ast","print_code","_ast","map","createElement","lineno","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","filter","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","nodes","replaceChildren","merge","tests","subtests","j","split","join","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","trim","nbEmptyLines","code_len","nbExcluded","l","find","v","isArray","asname","right","ltype","reversed_operator","swapASTNodes","bases","_context","orelse","debug_print_exception","err","sb","stack","isV8","filter_stack","_line","_col","fct_name","indexOf","getASTFor","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","find_and_write_call","jsop","write_multi_jsop","ao","bo","brython_node","BRY2SBRY","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","write_id_jsop","CONVERT_2INT","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators"],"sourceRoot":""}