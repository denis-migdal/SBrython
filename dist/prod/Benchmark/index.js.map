{"version":3,"file":"Benchmark/index.js","mappings":"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","sources":["webpack://sbrython/./src/core_modules/structs/list/astconvert.ts","webpack://sbrython/./src/core_modules/functions/call/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/import/astconvert.ts","webpack://sbrython/./src/core_modules/operators/attr/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/for/astconvert.ts","webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/structs/STypes.ts","webpack://sbrython/./src/core_modules/literals/str/astconvert.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/astconvert.ts","webpack://sbrython/./src/core_modules/functions/args/astconvert.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/astconvert.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/continue/astconvert.ts","webpack://sbrython/./src/core_modules/literals/bool/astconvert.ts","webpack://sbrython/./src/core_modules/operators/[]/astconvert.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/while/astconvert.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/astconvert.ts","webpack://sbrython/./src/core_modules/literals/bool/stype.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/astconvert.ts","webpack://sbrython/./src/core_modules/operators/=/astconvert.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/astconvert.ts","webpack://sbrython/./src/core_modules/operators/binary/astconvert.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/astconvert.ts","webpack://sbrython/./src/core_modules/structs/dict/astconvert.ts","webpack://sbrython/./src/core_modules/literals/int/astconvert.ts","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/core_modules/literals/int/stype_jsint.ts","webpack://sbrython/./src/core_modules/literals/int/stype.ts","webpack://sbrython/./src/core_modules/keywords/assert/astconvert.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/core_modules/literals/None/astconvert.ts","webpack://sbrython/./src/core_modules/literals/float/stype.ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/core_modules/pass/astconvert.ts","webpack://sbrython/./src/core_modules/operators/=_init/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/astconvert.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/core_modules/literals/str/stype.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/astconvert.ts","webpack://sbrython/./src/core_modules/literals/float/astconvert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/core_modules/return/astconvert.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/astconvert.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/literals/None/stype.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/core_modules/operators/compare/astconvert.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/core_modules/operators/boolean/astconvert.ts","webpack://sbrython/./src/core_modules/body/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/core_modules/operators/unary/astconvert.ts","webpack://sbrython/./src/core_modules/class/classdef/astconvert.ts","webpack://sbrython/./src/core_modules/symbol/astconvert.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/core_modules/keywords/break/astconvert.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts","webpack://sbrython/./src/pages/Benchmark/index.html"],"sourcesContent":["import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}\n\nconvert.brython_name = \"List\";","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = STypes[fct_type];\n    const ret_type = (fct.__call__ as STypeFctSubs).return_type();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context );\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n    for(let i = 0; i < node.keywords.length; ++i)\n        convert_node(coffset++, node.keywords[i], context );\n\n    VALUES[dst] = fct;\n}\n\nconvert.brython_name = \"Call\";","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context);\n\n    VALUES[dst] = node.module;\n}\n\nconvert.brython_name = [\"Import\", \"ImportFrom\"];","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}\n\nconvert.brython_name = [\"Attribute\"];","import { CONTROLFLOWS_FOR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\")\n        return false;\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    setType(dst, CONTROLFLOWS_FOR);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.iter, context);\n    convert_body(coffset+1, node.body, context);\n\n    VALUES[dst] = target;\n}\n\nconvert.brython_name = \"For\";","import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`throw new _b_.PythonError(${firstChild(node)})`;\n}","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { STypeObj } from \"./SType\";\n\nexport const STypes  = new Array<STypeObj>();\nconst STypename2id: Record<string, number> = {};\n\nexport function getSTypeFromName<T extends STypeObj>(name: string): T {\n    return STypes[getSTypeID(name)] as T;\n}\n\nexport function getSTypeID(name: string): number {\n\n    let id = STypename2id[name];\n    if( id === undefined ) {\n        id = STypename2id[name] = STypes.length;\n        STypes[id] = {__name__: name};\n    }\n\n    return id;\n}\n\nexport function addSType(name: string, type: Omit<STypeObj, '__name__'>) {\n\n    const id = getSTypeID(name);\n    Object.assign( STypes[id], type );\n    return id;\n}\n\nexport const STYPE_NONETYPE           = getSTypeID(\"NoneType\"); // 0...\nexport const STYPE_INT                = getSTypeID(\"int\");\nexport const STYPE_JSINT              = getSTypeID(\"jsint\");\nexport const STYPE_BOOL               = getSTypeID(\"bool\");\nexport const STYPE_FLOAT              = getSTypeID(\"float\");\nexport const STYPE_STR                = getSTypeID(\"str\");\nexport const STYPE_NOT_IMPLEMENTED    = getSTypeID(\"NotImplementedType\");","import { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( typeof node.value !== \"string\")\n        return false;\n\n    setType(dst, LITERALS_STR);\n    setResultType(dst, STYPE_STR);\n\n    VALUES[dst] = node.value;\n}\n\nconvert.brython_name = \"Constant\";","import { AST_CONVERT } from \"./core_modules/lists\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport dop_reset, {ASTNODE_RESULT_TYPE, ASTNODE_SIZE, ASTNODE_TYPE_ID, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : ASTNODES[ASTNODE_SIZE*id+ASTNODE_TYPE_ID],\n        ret_type : STypes[ASTNODES[ASTNODE_SIZE*id+ASTNODE_RESULT_TYPE]],\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nconst modules: Record<string, number[]> = {}\n\nfor(let i = 0 ; i < AST_CONVERT.length; ++i) {\n\n    const module = AST_CONVERT[i];\n\n    let names = [\"null\"];\n    if( \"brython_name\" in module) {\n\n        if( Array.isArray(module.brython_name) )\n            names = module.brython_name;\n        else\n            names = [module.brython_name as string]\n    }\n\n    for(const name of names)\n        (modules[name] ??= []).push(i);\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    convert_body(createASTNode(), ast.body, new Context() );\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nconst body = modules.Body[0]\n\nexport function convert_body(id: number, brython_node: any, context: Context) {\n\n    AST_CONVERT[body]    (id, brython_node, context);\n    if(__DEBUG__) set_py_code_from_list(id, brython_node);\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const candidates = modules[name];\n\n    if( __DEBUG__ && candidates === undefined ) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(\"nok\");\n    }\n\n    //TODO: rewrite system\n\n    // we may have many modules for the same node type.\n    for(let i = 0; i < candidates.length; ++i)\n        if( AST_CONVERT[candidates[i]](id, brython_node, context) !== false) {\n\n            if( __DEBUG__ ) set_py_code(id, brython_node);\n\n            return;\n        }\n\n    console.error(brython_node);\n    throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : {\n            //TODO: I need a self...\n            return_type    : return_type,\n            // not really :?\n            substitute_call: (call: number) => {\n                const left   = firstChild(call)+1;\n                const method = STypes[resultType(left)]![opname] as STypeFctSubs;\n                return method.substitute_call!(call);\n            }\n        }\n    }\n}\n\n//TODO: not a type !!!\nconst len = addSType(\"len\", genUnaryOpFct(\"len\", RET_INT));\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : getSTypeID('type[int]'),\n        str  : getSTypeID('type[str]'),\n        float: getSTypeID('type[float]'),\n        len,\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w( firstChild(node) );\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] += results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] += results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] += results. bry.times[offset+1];\n    results.sbry.times[offset] += results.sbry.times[offset+1];\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w(\"return null\");\n\n    return wt`return ${coffset}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"${\", firstChild(node), \"}\")\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"continue\");\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${VALUES[node]}`);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    if( node.iter.constructor.$name !== \"Call\" || node.iter.func.id !== \"range\")\n        return false;\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n    context.local_symbols[node.value] = STYPE_INT;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    convert_body(coffset, node.body, context);\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}\n\nconvert.brython_name = \"For\";","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: STypeFct, context: Context) {\n\n    const meta = SType_fct.__call__;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    //TODO: convert annotation type...\n    let result_type = node.annotation?.id; \n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === undefined ) {\n            result_type = resultType(coffset);\n            if(result_type === STYPE_JSINT)\n                result_type = STYPE_INT;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { set_js_cursor, w, wr, wt } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT } from \"@SBrython/structs/STypes\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"./astconvert\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as STypeFct;\n\n    const meta = SType_fct.__call__;\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w(\", \");\n\n        if( kw_start === i)\n            w(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            wt`...${name}`;\n        else\n            wr( binary_jsop(node, name, '=', \"[]\") );\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        wr( binary_jsop(node, name, '=', \"{}\") );\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === STYPE_JSINT )\n            defval = Number2Int(defval);\n\n        wr( binary_jsop(node, name, '=', defval) );\n    }else {\n        w(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { buildJSCode } from \"@SBrython/ast2js\";\nimport { buildPyCode } from \"@SBrython/py2ast\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type: ''+type(id), // TODO convert\n        result_type: ''+resultType(id), // TODO convert\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { r } from \"@SBrython/ast2js\";\nimport { STypeFctSubs } from \"./SType\";\nimport { STYPE_FLOAT, STYPE_INT, STYPE_JSINT} from \"./STypes\";\nimport { LITERALS_INT } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, parentOPPrio, resultType, setParentOPPrio, setResultType, type, VALUES } from \"@SBrython/dop\";\nimport { Converter, NOCONVERT } from \"./Converters\";\nimport { RETURN_TYPE_FCT } from \"./ReturnTypeFcts\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\nexport function Int2Number(a: number, target = STYPE_FLOAT) {\n\n    if( resultType(a) !== STYPE_INT) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === STYPE_FLOAT )\n            setResultType(a, STYPE_JSINT);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === STYPE_INT || ltype === STYPE_JSINT)\n            && (rtype === STYPE_INT || rtype === STYPE_JSINT)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === STYPE_INT) {\n        setResultType(a, target);\n        return a;\n    }\n    if( target === STYPE_FLOAT )\n        return r`Number(${a})`;\n\n    // int -> jsint cast is facultative...\n    return a;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === STYPE_INT)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, STYPE_INT); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === STYPE_JSINT) {\n        setResultType(a, STYPE_INT);\n        return a;\n    }\n\n    return r`BigInt(${a})`;\n}\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    let result = r`${first}`;\n    for(let i = 1; i < nbChildren; ++i)\n        result = r`${result} && ${first + i}`; //TODO: better...\n\n    if( p_prio < prio )\n        result = r`(${result})`;\n\n    return result;\n}\n\n// null operation, the node has the same priority as his father.\n// 2*int(1+1) => 2*(1+1)\nexport function id_jsop(node: number, a: number) { // TODO remove arg ?\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    return r`${a}`;\n}\n\nexport function binary_jsop(node: number, a: number|any, op: string, b: number|any) {\n\n    const   prio = JSOperatorsPriority[op];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    if(typeof b === \"number\")\n        setParentOPPrio(b, prio);\n\n    let cmp = r`${a}${op}${b}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\nexport function unary_jsop(node: number, op: string, a: number|any) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPriority[rop];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    let cmp = r`${op}${a}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\n\ntype GenUnaryOps_Opts = {\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, a: number) => any\n};\n\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_self = NOCONVERT,\n                                substitute_call\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        substitute_call ??= (node: number, self: number) => {\n            return unary_jsop(node, op, convert_self(self) );\n        };\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call\n        };\n    }\n    \n    return result;\n}\n\ntype GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, self: number|any, other: number|any) => any\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            substitute_call,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === '//')\n            op = '/';\n\n        let cs  = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_self(self), op, convert_other(other) );\n        }\n\n        let rcs = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_other(other), op, convert_self(self) );\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_self(self), convert_other(o) );\n            };\n        \n            // same_order ? fct : \n            rcs = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_other(o), convert_self(self) );\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n        result[`__r${pyop}__`] = {\n            return_type,\n            substitute_call: rcs,\n        };\n        if( convert_self === NOCONVERT && substitute_call === undefined)\n            result[`__i${pyop}__`] = {\n                return_type,\n                substitute_call: (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return unary_jsop(node, '--', self);\n                    \n                    return binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            };\n    }\n    \n    return result;\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                substitute_call,\n                             }: GenBinaryOps_Opts = {} ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        let cs  = (node: number, self: number, other: number, reversed: boolean) => {\n\n            let cop = op;\n\n            let a = convert_self(self);\n            let b = convert_other(other);\n            if( reversed ) {\n                [a,b] = [b,a];\n                cop = reverse[cop];\n            }\n\n            if( cop[0] === '=' || cop[0] === '!' ) {\n                if( resultType(self) === resultType(other) )\n                    cop = cop + '=';\n            }\n\n            return binary_jsop(node, a, cop, b);\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number, _: boolean) => {\n                return substitute_call(node, convert_self(self), convert_other(o) ); //TODO...\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n    }\n    \n    return result;\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    wt`for(var ${idx} of ${list}){${body}${NL}}`;\n}","import { Context, convert_body } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport { default_call } from \"../call/ast2js\";\nimport { convert_args } from \"../args/astconvert\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = STypes[rtype] as STypeFct;\n    const meta    = stype.__call__;\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    meta.return_type = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = getSTypeID(annotation);\n        // force the type.\n        meta.return_type = () => fct_return_type!;\n    }\n\n    convert_body(coffset+1, node.body, context);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: STypeFct = {\n        __name__: \"function\",\n        __call__: {\n            args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n            args_pos       : {},\n            idx_end_pos    : -1,\n            idx_vararg     : -1,\n            has_kw         : false,\n            generate,\n            return_type    : () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__.return_type();\n            },\n            substitute_call: default_call\n        }\n    }\n\n    const STypeID = STypes.length;\n    STypes[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        const fake_node = {\n            constructor: {\n                $name: \"Return\"\n            },\n                lineno: node.end_lineno,\n            end_lineno: node.end_lineno,\n                col_offset: node.end_col_offset,\n            end_col_offset: node.end_col_offset,\n        }\n        node.body.push( fake_node );\n    }\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}\n\nconvert.brython_name = \"FunctionDef\";","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}\n\nconvert.brython_name = \"FormattedValue\";","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}\n\nconvert.brython_name = \"Continue\";","import { LITERALS_BOOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_BOOL } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( typeof node.value !== \"boolean\" )\n        return false;\n\n    setType(dst, LITERALS_BOOL);\n    setResultType(dst, STYPE_BOOL);\n    \n    VALUES[dst] = node.value; // TODO: 2 types instead of one ?\n}\n\nconvert.brython_name = \"Constant\";","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}\n\nconvert.brython_name = [\"Subscript\"];","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not')\n        return wr( unary_jsop(node, '!', Int2Number(left, STYPE_JSINT) ) );\n\n    const method = STypes[resultType(left)!][value] as STypeFctSubs;\n\n    wr( method.substitute_call!(node, left) );\n}","import { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n    convert_body(coffset+1, node.body, context);\n\n}\n\nconvert.brython_name = \"While\";","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\nimport { multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    wr( multi_jsop(node, VALUES[node]) );\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return wt`_b_.assert(${firstChild(node)})`;\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}\n\nconvert.brython_name = \"Tuple\";","import { CMPOPS_LIST, genCmpOps } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType  } from \"@SBrython/structs/STypes\";\n\naddSType('bool', {\n    ...genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, type, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    wt`function ${name}(${coffset}){${coffset+1}${NL}}`;\n}","import { r, wr } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\n\nfunction print_obj(obj: Record<string, any>) {\n\n    const keys = Object.keys(obj);\n    if(keys.length === 0)\n        return [[]];\n\n    const str = new Array(keys.length+1);\n    str[0] = `{${keys[0]}: `;\n    let i;\n    for(i = 1; i < keys.length; ++i)\n        str[i]  = `, ${keys[i]}: `;\n\n    str[i] = \"}\";\n\n    return [str, ...Object.values(obj)];\n}\n\nfunction join(data: any[], sep=\", \") {\n\n    if(data.length === 0)\n        return [[\"\"]];\n\n    const str = new Array(data.length+1);\n    str[0] = \"\";\n    let i;\n    for(i = 1; i < data.length; ++i)\n        str[i] = sep;\n    str[i] = \"\";\n\n    return [str, ...data];\n}\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as STypeFct).__call__;\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let kw_pos = nbChildren;\n    for(let i = 1; i < nbChildren; ++i)\n        if( type( i + coffset) === FUNCTIONS_CALL_KEYWORD) {\n            kw_pos = i;\n            break;\n        }\n\n    let nb_pos = meta.idx_end_pos;\n    if( nb_pos === Number.POSITIVE_INFINITY)\n        nb_pos = Math.max(meta.idx_vararg, kw_pos-1);\n\n    let pos_size = nb_pos+1;\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY )\n        pos_size = meta.idx_vararg+2;\n    let pos = new Array(pos_size);\n    \n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let has_kw = false;\n\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY ) {\n\n        const cutoff = Math.min(kw_pos, meta.idx_vararg);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const varg_start = meta.idx_vararg+1;\n        const varg_nb = kw_pos - varg_start;\n        if( varg_nb !== 0 ) {\n\n            // template string... [ [..str], ...idx ]\n            // => [ (a), (b), (c), (d) ] ...\n            let str = new Array(varg_nb + 1);\n            let idx = new Array(varg_nb + 1);\n\n            str[0]       = \"[\";\n\n            idx[0]       = str;\n            idx[1]       = coffset + varg_start;\n            for(let i = 1; i < varg_nb; ++i) {\n                str[i]  = \", \";\n                idx[i+1]= coffset + varg_start + i;\n            }\n\n            str[varg_nb] = \"]\"; // prevents sparse array ?\n        }\n    } else {\n\n        const cutoff = Math.min(kw_pos, nb_pos+1);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < kw_pos; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        has_kw = cutoff !== kw_pos;\n    }\n\n    let has_kwargs = false;\n\n    const args_pos = meta.args_pos;\n    \n\n    for(let i = kw_pos; i < nbChildren; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) {\n            pos[idx] = arg;\n            continue;\n        }\n\n        has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            has_kwargs = true;\n        }\n    }\n\n    let obj: Record<string, any> = kw;\n    //TODO: only the ones at -1...\n    if( has_kwargs && ! meta.has_kw ){\n        obj = kwargs;\n    } else if( has_kwargs ) {\n        obj[meta.kwargs!] = print_obj(kwargs);\n    }\n\n    if( has_kw )\n        pos[pos.length-1] = print_obj(obj);\n    else {\n        while(pos.length > 0 && pos[pos.length-1] === undefined)\n            --pos.length;\n    }\n\n    return r`${coffset}(${join(pos)})`; // args ?\n}\n\nexport default function ast2js(node: number) {\n    wr( (VALUES[node] as STypeFct).__call__.substitute_call!(node) );\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}\n\nconvert.brython_name = \"Raise\";","import { OPERATORS__EQ, SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID, STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const isMultiTarget = \"targets\" in node;\n    const targets = isMultiTarget ? node.targets : [node.target];\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && !(targets[0].id in context.local_symbols)\n    )\n        return false;\n\n    setType(dst, OPERATORS__EQ);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node?.annotation?.id;\n    if( annotation !== undefined)\n        result_type = getSTypeID(annotation);\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === STYPE_JSINT)\n            result_type = STYPE_INT; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n\n/*\n        // could be improved I guess.\n        if( type(i+coffset) === SYMBOL) {\n    \n            // if exists, ensure type.\n            const ltype = context.local_symbols[i+coffset];\n            if( ltype !== undefined ) {\n                if( ltype !== 0 && rtype !== ltype)\n                    {}//console.warn(\"Wrong result_type\");\n    \n                // annotation_type\n            }\n        }\n*/\n    }\n}\n\nconvert.brython_name = [\"Assign\", \"AnnAssign\"];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code += jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    wt`${coffset}[${coffset+1}]`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w(\"break\");\n}","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"/* not implemented */\");\n}","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, STYPE_STR);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context);\n}\n\nconvert.brython_name = \"JoinedStr\";","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(rtype);\n\n    // try reversed operator\n    if( type === STYPE_NOT_IMPLEMENTED) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined)\n            type   = method.return_type(ltype!);\n\n        if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED)\n            throw new Error(`${rtype} ${op} ${ltype} NOT IMPLEMENTED!`);\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n\nconvert.brython_name = [\"BinOp\"];","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}\n\nconvert.brython_name = \"keyword\";","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}\n\nconvert.brython_name = \"Dict\";","import { LITERALS_INT } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    let value = node.value;\n\n    if(value.__class__?.__qualname__ === \"int\")\n        value = value.value;\n\n    if( typeof value !== \"number\" && typeof value !== \"bigint\" )\n        return false;\n\n    const real_type = typeof value !== \"number\" ? STYPE_INT : STYPE_JSINT;\n\n    setType(dst, LITERALS_INT);\n    setResultType(dst, real_type);\n    \n    VALUES[dst] = value;\n}\n\nconvert.brython_name = \"Constant\";","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\ntype Printable = {toString(): string};\n\nlet indent = \"    \";\nlet cur_indent_level = 0;\n//let cur_indent = \"\";\n\nconst indents = [\n    \"\",\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n]\n\nexport const NL = {\n    toString: function() {\n\n        if( __DEBUG__ ) {\n            ++CURSOR[CODE_LINE];\n            CURSOR[CODE_COL] = jscode.length + 1;\n\n            return \"\\n\" + indents[cur_indent_level];\n        } else {\n            return \"\\n\";\n        }\n    }\n}\nexport const BB = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents[++cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\nexport const BE = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents[--cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\n\n// transforms into a template string\nexport function r(...args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    return args;\n}\n\n// write a template string\nexport function wr(args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    if( typeof args === \"string\")\n        return w(args);\n    return wt(...args);\n}\n\n\n// write with template string wt``\nexport function wt(str: TemplateStringsArray, ...args: (Printable|number)[]) {\n    \n    for(let i = 0; i < args.length; ++i) {\n        jscode += str[i];\n        w(args[i]);\n    }\n\n    jscode += str[args.length];\n}\n\n// generic write ?\nexport function w(...args: (Printable|number)[]) {\n\n    for(let i = 0; i < args.length; ++i) {\n\n        let arg = args[i];\n\n        if( Array.isArray(arg) ) { // likely a r``\n            wr(arg as Parameters<typeof wr>[0]);\n            continue;\n        }\n\n        if( typeof arg !== \"number\" ) {\n\n            if( arg === undefined )\n                arg = \"undefined\";\n            if( arg === null )\n                arg = \"null\";\n\n            jscode += arg.toString();\n            continue;\n        }\n\n        const offset = 4*arg;\n        \n        if( __DEBUG__ )\n            set_js_cursor(offset + CODE_BEG);\n        AST2JS[type(arg)!](arg);\n        if( __DEBUG__ )\n            set_js_cursor(offset + CODE_END)\n    }\n}\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { r } from \"@SBrython/ast2js\";\nimport { resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType, STYPE_FLOAT, STYPE_INT } from \"@SBrython/structs/STypes\";\n\naddSType('jsint', {\n\n    ...genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_IJ2INT,\n        {\n            substitute_call: (node, a, b) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, Number2Int(a), '*', Number2Int(b) );\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_INT )\n                    return unary_jsop(node, '-', Number2Int(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps(['~'], // min_safe_integer == max_safe_integer.\n        RET_INT,\n        {\n            convert_self : CONVERT_2INT\n        }\n    ),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /*\n    __int__: {\n        return_type: () => 'int',\n        call_substitute(node, self) {\n            return id_jsop(node, self);\n        }\n    },*/\n});","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, id_jsop, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_IJ2INT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_JSINT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_int = addSType('type[int]', {\n    __call__: {\n        //TODO...\n        return_type: RET_INT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return other;\n            if( other_type === STYPE_JSINT)\n                return Number2Int(other);\n            if( other_type === STYPE_FLOAT )\n                return r`BigInt(Math.trunc(${other}))`;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`BigInt(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('int', {\n\n    //TODO: fix type...\n    // @ts-ignore\n    __class__: SType_type_int,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`${node}.toString()`;\n        }\n    },\n\n    __int__: {\n        return_type: RET_INT,\n        substitute_call(node, self) {\n            return id_jsop(node, self);\n        }\n    },\n    /* */\n    ...genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_INT2INT,\n        {\n            substitute_call(node, a, b) {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_int(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_INT,\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    return unary_jsop(node, '-', Int2Number(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps( ['~'], RET_INT),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n\n});","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}\n\nconvert.brython_name = \"Assert\";","import { w, wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\n\nfunction find_and_call_substitute(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n    if( method !== undefined )\n        type = method.return_type(rtype!);\n\n    if( type === STYPE_NOT_IMPLEMENTED) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined )\n            type   = method.return_type(ltype!);\n        \n        if( type === STYPE_NOT_IMPLEMENTED) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            return binary_jsop(node, left, jsop, right);\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    return method.substitute_call!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            wr( binary_jsop(node, left, '===', right) );\n            continue;\n        }\n        if( op === 'is not' ) {\n            wr( binary_jsop(node, left, '!==', right) );\n            continue;\n        }\n        \n        wr( find_and_call_substitute(node, left, op, right) );\n    }\n}","import {py2ast, convert_ast} from \"@SBrython/py2ast\";\nimport {ast2js} from \"@SBrython/ast2js\";\nimport {SBrython, _b_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\nimport '@SBrython/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code += jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { resultType } from \"@SBrython/dop\";\nimport { Int2Number, Number2Int } from \"./BinaryOperators\";\nimport { STYPE_INT } from \"./STypes\";\n\ntype Printable = { toString(): string };\n\nexport type Converter = (node: number) => number | [TemplateStringsArray, ...(number | Printable)[]];\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function generateConvert(convert: number[]) {\n\n    const table = new Array<number>();\n    for(let i = 0; i < convert.length; i+=2)\n        table[convert[i]] = convert[i+1];\n\n    return (node: number) => {\n        const src    = resultType(node);\n        const target = table[src];\n        if( target === undefined )\n            return node;\n\n        //TODO: improve:\n        if( src === STYPE_INT)\n            return Int2Number(node, target);\n        if( target === STYPE_INT )\n            return Number2Int(node);\n\n        throw new Error(\"Unfound conversion\");\n    };\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry);\n     executeBrython(results.bry );\n\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { LITERALS_NONE } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_NONETYPE } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( ! (typeof node.value === \"object\")\n            || !(\"__class__\" in node.value)\n            || node.value.__class__.__qualname__ !== \"NoneType\" )\n        return false;\n\n    setType(dst, LITERALS_NONE);\n    setResultType(dst, STYPE_NONETYPE);\n}\n\nconvert.brython_name = \"Constant\";","import { r } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport const SType_type_float = addSType('type[float]', {\n    __call__: {\n        //TODO...\n        return_type: RET_FLOAT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return Int2Number(other);\n            if( other_type === STYPE_FLOAT || other_type === STYPE_INT)\n                return other_type;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" )\n                        return \"Number.POSITIVE_INFINITY\";\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\")\n                        return \"Number.NEGATIVE_INFINITY\";\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`parseFloat(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('float', {\n\n    // @ts-ignore\n    __class__: SType_type_float,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`_b_.float2str(${node})`;\n        }\n    },\n    \n    ...genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    ...genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.mod_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genUnaryOps(['u.-']    , RET_FLOAT),\n    ...genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { set_js_cursor, w } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    w(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === STYPE_STR) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w(\"`\");\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}\n\n\nconvert.brython_name = \"Pass\";","import { OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID, STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const isMultiTarget = \"targets\" in node;\n    const targets = isMultiTarget ? node.targets : [node.target];\n\n    if(    context.type === \"class\"\n        || targets[0].constructor.$name !== \"Name\"\n        || targets[0].id in context.local_symbols\n    )\n        return false;\n\n    setType(dst, OPERATORS__EQ_INIT);\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node?.annotation?.id;\n    if( annotation !== undefined)\n        result_type = getSTypeID(annotation);\n\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n            console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === STYPE_JSINT)\n            result_type = STYPE_INT; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\nconvert.brython_name = [\"Assign\", \"AnnAssign\"];","import { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n    convert_body(coffset++, node.body, context);\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n        convert_body(coffset++, cur.body, context);\n\n        childCount += 2;\n    }\n}\n\nconvert.brython_name = \"If\";","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    \n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","import { STYPE_NOT_IMPLEMENTED, STYPE_BOOL, STYPE_FLOAT, STYPE_INT, STYPE_STR, STYPE_JSINT } from \"./STypes\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_FLOAT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === STYPE_JSINT)\n        return STYPE_JSINT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === STYPE_INT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_FLOAT(_: number) { return STYPE_FLOAT; }\nexport function RET_INT  (_: number) { return STYPE_INT;   }\nexport function RET_JSINT(_: number) { return STYPE_JSINT; }\nexport function RET_STR  (_: number) { return STYPE_STR;   }\n\n//TODO...\nexport function generate_return_type() {\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`while(${coffset}){${coffset+1}${NL}}}`;\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { wt } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`'${VALUES[node]}'`;\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        wt`${coffset}: ${coffset+1}`;\n\n    for(let i = 2; i < nbChildren; i+=2)\n        wt`, ${i+coffset}: ${i+1+coffset}`;\n\n    w('}');\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED) {\n        throw new Error(`${resultType(coffset+1)} ${op}= ${resultType(coffset)} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps} from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_str = addSType('type[str]', {\n    __call__: {\n        //TODO...\n        return_type: RET_STR,\n        substitute_call: (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_STR )\n                return other;\n\n            const method = STypes[other_type]?.__str__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${STypes[other_type].__name__}.__str__ not defined`);\n            return method.substitute_call!(other);\n        }\n    }\n});\n\naddSType('str', {\n\n    // @ts-ignore\n    __class__: SType_type_str,\n\n    __len__: {\n        return_type: RET_INT,\n        substitute_call: (_) => {\n            return r`${firstChild(_) + 1}.length`;\n        }\n    },\n\n    ...genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    ...genBinaryOps([\"+\"]      , RET_STR2STR),\n    ...genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            substitute_call: (node: number, a: number, b: number) => {\n                \n                if( resultType(a) !== STYPE_STR )\n                    [a,b] = [b,a];\n\n                return r`${a}.repeat(${b})`;\n            }\n        }),\n});","import { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    convert_body(coffset, node.body, context);\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}\n\nconvert.brython_name = \"ExceptHandler\";","import { LITERALS_FLOAT } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_FLOAT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( ! (node.value instanceof Object) || node.value.__class__?.__qualname__ !== \"float\")\n        return false;\n\n    setType(dst, LITERALS_FLOAT);\n    setResultType(dst, STYPE_FLOAT);\n    \n    VALUES[dst] = node.value.value;\n}\n\nconvert.brython_name = \"Constant\";","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n    execute(results);\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n            if( id === 5 )\n                continue;\n\n            if( subtests[j] === \"\")\n                continue;\n        \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._b_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_NONETYPE, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = STYPE_NONETYPE;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (STypes[resultType(context.parent_node_context!)] as STypeFct).__call__;\n    if( meta.return_type === undefined )\n        meta.return_type = () => result_type;\n}\n\nconvert.brython_name = \"Return\";","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}\n\nconvert.brython_name = [\"AugAssign\"];","export default class Py_object {\n\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}\n\nconvert.brython_name = \"IfExp\";","import { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    convert_body(coffset, node.body, context);\n\n    for(let i = 1; i < nbChildren; ++i)\n        convert_node(i+coffset, node.handlers[i-1], context);\n\n}\n\nconvert.brython_name = \"Try\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1)\n        return wt`{${coffset}${NL}}`;\n\n    wt`if(${coffset+1}){${coffset}${NL}}`;\n}","import { addSType } from \"@SBrython/structs/STypes\";\n\naddSType('NoneType', {});","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w(value[0])\n\n    if( value[1] !== undefined)\n        w(\": \", value[1]);\n}","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const ops = node.ops.map( (e: any) => {\n        const op = bname2pyname[e.constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${e.constructor.$name} not implemented!`);\n        return op;\n    });\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, STYPE_BOOL);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n\nconvert.brython_name = \"Compare\";","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`${firstChild(node)}.${VALUES[node]}`;\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    w(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}\n\nconvert.brython_name = [\"BoolOp\"];","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n}\n\nconvert.brython_name = \"Body\";","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}\n\nconvert.brython_name = [\"alias\"];","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    wt`if(${coffset++}){${coffset++}${NL}}`;\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        wt`else if(${coffset++}){${coffset++}${NL}}`;\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        wt`else {${coffset}${NL}}`;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._b_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"null\");\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let beg : string|number|any  = \"0n\";\n    let incr: string|number|any  = \"1n\";\n\n    let end = Number2Int(body+1);\n\n    if( nbChildren > 2) {\n        beg = end;\n        end = Number2Int(body+1);\n    }\n\n    if( nbChildren === 4)\n        incr = Number2Int(body+2);\n\n    return wt`for(var ${idx} = ${beg}; ${idx} < ${end}; ${idx} += ${incr}){${body}${NL}}`;\n}","import { BB, BE, NL, w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    wt`try {${coffset}${NL}}`;\n    wt`catch(_raw_err_){${BB}${NL}`;\n\n        w(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i)\n            w(NL, \"else \", i + coffset );\n\n        // not a catch all...\n        if( nbChild(coffset + nbChildren-1) !== 1)\n            w(NL, \"else { throw _raw_err_ }\");\n\n    w(BE, NL);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`(${coffset} ? ${coffset+1} : ${coffset+2})`;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL, STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') {\n\n        setResultType(dst, STYPE_BOOL);\n        return;\n    }\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type();\n\n    if( type === STYPE_NOT_IMPLEMENTED)\n        throw new Error(`${op} ${resultType(coffset)} NOT IMPLEMENTED!`);\n\n    setResultType(dst, type);\n}\n\nconvert.brython_name = [\"UnaryOp\"];","import { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = getSTypeID(node.name);\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    convert_body(coffset, node.body, context);\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}\n\nconvert.brython_name = \"ClassDef\";","import _r_ from \"../../core_runtime/lists\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}\n\n\nconvert.brython_name = \"Name\";","import { BB, BE, NL, w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(BB);\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i)\n        w(NL, i);\n\n    w(BE);\n}","import AST_CONVERT_0 from \"./symbol/astconvert\";\nimport      AST2JS_0 from \"./symbol/ast2js\";\nimport AST_CONVERT_1 from \"./structs/tuple/astconvert\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport AST_CONVERT_2 from \"./structs/list/astconvert\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport AST_CONVERT_3 from \"./structs/dict/astconvert\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport AST_CONVERT_4 from \"./return/astconvert\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport AST_CONVERT_5 from \"./pass/astconvert\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport AST_CONVERT_6 from \"./operators/unary/astconvert\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport AST_CONVERT_7 from \"./operators/compare/astconvert\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport AST_CONVERT_8 from \"./operators/boolean/astconvert\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport AST_CONVERT_9 from \"./operators/binary/astconvert\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport AST_CONVERT_10 from \"./operators/attr/astconvert\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport AST_CONVERT_11 from \"./operators/[]/astconvert\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport AST_CONVERT_12 from \"./operators/AssignOp/astconvert\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport AST_CONVERT_13 from \"./operators/=_init/astconvert\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport AST_CONVERT_14 from \"./operators/=/astconvert\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport AST_CONVERT_15 from \"./literals/str/astconvert\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport AST_CONVERT_16 from \"./literals/int/astconvert\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport AST_CONVERT_17 from \"./literals/float/astconvert\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport AST_CONVERT_18 from \"./literals/f-string/astconvert\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport AST_CONVERT_19 from \"./literals/f-string/FormattedValue/astconvert\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport AST_CONVERT_20 from \"./literals/bool/astconvert\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport AST_CONVERT_21 from \"./literals/None/astconvert\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport AST_CONVERT_22 from \"./keywords/raise/astconvert\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport AST_CONVERT_23 from \"./keywords/import/astconvert\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport AST_CONVERT_24 from \"./keywords/import/alias/astconvert\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport AST_CONVERT_25 from \"./keywords/continue/astconvert\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport AST_CONVERT_26 from \"./keywords/break/astconvert\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport AST_CONVERT_27 from \"./keywords/assert/astconvert\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport AST_CONVERT_28 from \"./functions/def/astconvert\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport AST_CONVERT_29 from \"./functions/call/astconvert\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport AST_CONVERT_30 from \"./functions/call/keyword/astconvert\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport AST_CONVERT_31 from \"./functions/args/astconvert\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport AST_CONVERT_32 from \"./controlflows/while/astconvert\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport AST_CONVERT_33 from \"./controlflows/tryblock/astconvert\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport AST_CONVERT_34 from \"./controlflows/tryblock/catch/astconvert\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport AST_CONVERT_35 from \"./controlflows/ternary/astconvert\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport AST_CONVERT_36 from \"./controlflows/ifblock/astconvert\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport AST_CONVERT_37 from \"./controlflows/for_range/astconvert\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport AST_CONVERT_38 from \"./controlflows/for/astconvert\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport AST_CONVERT_39 from \"./class/classdef/astconvert\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport AST_CONVERT_40 from \"./body/astconvert\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nimport type {T_ASTCONVERT, T_AST2JS} from './'\n\nexport const AST_CONVERT: T_ASTCONVERT[] = [\n\tAST_CONVERT_0,\n\tAST_CONVERT_1,\n\tAST_CONVERT_2,\n\tAST_CONVERT_3,\n\tAST_CONVERT_4,\n\tAST_CONVERT_5,\n\tAST_CONVERT_6,\n\tAST_CONVERT_7,\n\tAST_CONVERT_8,\n\tAST_CONVERT_9,\n\tAST_CONVERT_10,\n\tAST_CONVERT_11,\n\tAST_CONVERT_12,\n\tAST_CONVERT_13,\n\tAST_CONVERT_14,\n\tAST_CONVERT_15,\n\tAST_CONVERT_16,\n\tAST_CONVERT_17,\n\tAST_CONVERT_18,\n\tAST_CONVERT_19,\n\tAST_CONVERT_20,\n\tAST_CONVERT_21,\n\tAST_CONVERT_22,\n\tAST_CONVERT_23,\n\tAST_CONVERT_24,\n\tAST_CONVERT_25,\n\tAST_CONVERT_26,\n\tAST_CONVERT_27,\n\tAST_CONVERT_28,\n\tAST_CONVERT_29,\n\tAST_CONVERT_30,\n\tAST_CONVERT_31,\n\tAST_CONVERT_32,\n\tAST_CONVERT_33,\n\tAST_CONVERT_34,\n\tAST_CONVERT_35,\n\tAST_CONVERT_36,\n\tAST_CONVERT_37,\n\tAST_CONVERT_38,\n\tAST_CONVERT_39,\n\tAST_CONVERT_40,\n]\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}\n\nconvert.brython_name = \"Break\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let base: string|number = \"_r_.object\";\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    if( nbChildren === 2)\n        base = body+1;\n\n    wt`class ${VALUES[node]} extends ${base} {${body}${NL}}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === STYPE_INT ) {\n        // force str write (else might assume this is an AST node ID)...\n        w(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${value}`);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = STypes[resultType(coffset)]![VALUES[node]] as STypeFctSubs;\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        if( i !== 0)\n            w(\", \");\n        w(i + coffset);\n    }\n\n    w('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w(\"__SBRYTHON__.getModules()\");\n    else\n        wt`__SBRYTHON__.getModule(\"${value}\")`;\n}","export default __webpack_public_path__ + \"Benchmark/index.html\";"],"names":["convert","dst","node","context","setType","STRUCTS_LIST","nbChildren","elts","length","coffset","addChild","i","convert_node","brython_name","name","func","id","fct_type","local_symbols","fct","STypes","ret_type","__call__","return_type","FUNCTIONS_CALL","setResultType","args","keywords","VALUES","KEYWORDS_IMPORT","names","module","OPERATORS_ATTR","value","attr","iter","constructor","$name","target","CONTROLFLOWS_FOR","convert_body","body","Py_Exception","Py_object","ast2js","wt","firstChild","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Error","Function","runJSCode","getModules","getModule","getASTFor","_r_","_b_","Array","STypename2id","getSTypeID","undefined","__name__","addSType","type","Object","assign","STYPE_NONETYPE","STYPE_INT","STYPE_JSINT","STYPE_BOOL","STYPE_FLOAT","STYPE_STR","STYPE_NOT_IMPLEMENTED","_context","LITERALS_STR","buildPyCode","offset","start","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","modules","AST_CONVERT","isArray","push","convert_ast","dop_reset","createASTNode","Context","ASTNODES","swapASTNodes","a","b","ao","ASTNODE_SIZE","bo","t","Body","brython_node","candidates","console","error","lineno","col_offset","parent_context","RootContext","parent_node_context","type_fct","len","RET_INT","__class__","substitute_call","call","left","resultType","int","str","float","w","generate","code","results","bry","sbry","buildAST","generateSBrython","generateBrython","times","Py_JSException","CONTROLFLOWS_FOR_RANGE","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWARG","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_VARG","FUNCTIONS_ARGS_POS","convert_args","SType_fct","meta","_args","has_vararg","vararg","has_kwarg","kwarg","args_pos","args_names","total_args","posonlyargs","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","pos","doffset","convert_arg","arg","idx_vararg","idx_end_pos","Number","POSITIVE_INFINITY","nb_pos_defaults","Math","min","has_others","cut_off","kwonly","kw_defaults","has_kw","kwargs","defval","result_type","annotation","floordiv_float","floor","floordiv_int","result","mod_float","mod","mod_int","nbChild","kw_start","write_arg","isLast","type_id","wr","binary_jsop","Number2Int","astnode2tree","buildJSCode","pycode","children","from","_","bname2pyname","BinaryOperators","AssignOperators","jsop2pyop","JSOperators","Int2Number","LITERALS_INT","a_value","ltype","rtype","r","JSOperatorsPriority","priority","op","reversed_operator","multi_jsop","first","prio","p_prio","setParentOPPrio","id_jsop","parentOPPrio","cmp","unary_jsop","rop","genUnaryOps","ops","convert_self","NOCONVERT","pyop","self","genBinaryOps","convert_other","cs","other","rcs","o","other_value","CMPOPS_LIST","reverse","genCmpOps","reversed","cop","idx","list","NL","stype","returns","fct_return_type","default_call","STypeID","last_type","fake_node","end_lineno","end_col_offset","FUNCTIONS_DEF","LITERALS_F_STRING_FORMATTEDVALUE","KEYWORDS_CONTINUE","LITERALS_BOOL","OPERATORS__BRACKETS","slice","method","CONTROLFLOWS_WHILE","test","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","tcoef","rchild","STRUCTS_TUPLE","RET_IJBF2BOOL","print_obj","obj","keys","values","kw_pos","FUNCTIONS_CALL_KEYWORD","nb_pos","max","pos_size","kw","cutoff","varg_start","varg_nb","has_kwargs","data","sep","join","KEYWORDS_RAISE","exc","targets","OPERATORS__EQ","float2str","f","toExponential","sign_idx","toString","includes","src","beg","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","debug_print_exception","err","sb","warn","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","indexOf","nodes","SYMBOL","parse_stack","_raw_err_","stackline","stackline2astnode","stack2astnodes","exception_str","log","get_py_exception","__SBRYTHON__","_err_","PythonError","python_exception","JSException","LITERALS_F_STRING","OPERATORS_BINARY","right","STRUCTS_DICT","__qualname__","real_type","JS_CODE","indent","BB","BE","AST2JS","RET_IJ2INT","CONVERT_2INT","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","RET_JSINT2JSINT","RET_JSINT","SType_type_int","other_type","otype","__int__","__str__","RET_STR","RET_INT2INT","KEYWORDS_ASSERT","find_and_call_substitute","jsop","_ast","execute","executeSBrython","executeBrython","LITERALS_NONE","SType_type_float","RET_FLOAT","PASS","OPERATORS__EQ_INIT","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","super","RUNTIME_0","RUNTIME_1","RUNTIME_2","SType_type_str","__len__","CONTROLFLOWS_TRYBLOCK_CATCH","LITERALS_FLOAT","window","onerror","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","textContent","classList","remove","add","print_js","print_python","print_ast","print_code","createElement","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","merge","tests","subtests","j","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","trim","nbEmptyLines","code_len","nbExcluded","find","v","RETURN","OPERATORS_ASSIGNOP","CONTROLFLOWS_TERNARY","handlers","CONTROLFLOWS_TRYBLOCK","OPERATORS_COMPARE","comparators","assert","cond","bname2jsop","OPERATORS_BOOLEAN","BODY","cn","KEYWORDS_IMPORT_ALIAS","asname","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","incr","OPERATORS_UNARY","operand","CLASS_CLASSDEF","bases","KEYWORDS_BREAK","AST_CONVERT_0","AST_CONVERT_1","AST_CONVERT_2","AST_CONVERT_3","AST_CONVERT_4","AST_CONVERT_5","AST_CONVERT_6","AST_CONVERT_7","AST_CONVERT_8","AST_CONVERT_9","AST_CONVERT_10","AST_CONVERT_11","AST_CONVERT_12","AST_CONVERT_13","AST_CONVERT_14","AST_CONVERT_15","AST_CONVERT_16","AST_CONVERT_17","AST_CONVERT_18","AST_CONVERT_19","AST_CONVERT_20","AST_CONVERT_21","AST_CONVERT_22","AST_CONVERT_23","AST_CONVERT_24","AST_CONVERT_25","AST_CONVERT_26","AST_CONVERT_27","AST_CONVERT_28","AST_CONVERT_29","AST_CONVERT_30","AST_CONVERT_31","AST_CONVERT_32","AST_CONVERT_33","AST_CONVERT_34","AST_CONVERT_35","AST_CONVERT_36","AST_CONVERT_37","AST_CONVERT_38","AST_CONVERT_39","AST_CONVERT_40","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","RUNTIME","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","base"],"sourceRoot":""}