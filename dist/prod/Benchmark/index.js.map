{"version":3,"file":"Benchmark/index.js","mappings":"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M+I,EAAgB,EAChBC,EAAgB,EAChBF,EAAgB,EAChBG,EAAgB,EAChBC,EAAgB,EAChBN,EAAgB,EAChBC,EAAgB,EAChBU,EAAgB,EAChBM,EAAgB,EAChBG,EAAgB,EAChBE,EAAgB,GAChBvB,EAAgB,GAChBoS,EAAgB,GAChBC,EAAgB,GAChB7O,EAAgB,GAChBC,EAAgB,GAChB6O,EAAgB,GAChBC,EAAgB,GAChB1D,EAAgB,GAEhBpN,EAAgB,GAChBE,EAAgB,GAMhBM,EAAgB,GAKhB2L,EAAkB,CAC9B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,GAKY4E,EAAkB,CAC9B,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GAGYzP,EAAiB,CAC7B,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGYiM,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYF,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGY1L,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,MACA,MACA,KACA,KACA,IACA,GAEA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGY+J,EAAiB,CAC7B,IAAK/M,EACL,KAAMA,EAAU,GAChB,IAAKC,EACL,KAAMA,EAAW,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","sources":["webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/ast2js/list.js?3400","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/pages/Benchmark/index.html","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./stubs/JS/__init__.pyi?2df2","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js?932c","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/types/list.js?f121","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts"],"sourcesContent":["import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__SBRY_MODE__ === \"dev\") w_str(`/*${VALUES[node]} */`);\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __SBRY_MODE__ === \"dev\" && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default class Py_object {\n\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./type\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\n\nconst _id2name = __SBRY_MODE__ !== 'dev' ? [] : [\n\t\"unknown\",\n\t\"NoneType\",\n\t\"None\",\n\t\"NotImplementedType\",\n\t\"NotImplemented\",\n\t\"type\",\n\t\"type_int_\",\n\t\"int\",\n\t\"type_jsint_\",\n\t\"jsint\",\n\t\"type_float_\",\n\t\"float\",\n\t\"type_bool_\",\n\t\"bool\",\n\t\"type_str_\",\n\t\"str\",\n];\nexport const id2name = _id2name;\n","export default __webpack_public_path__ + \"Benchmark/index.html\";","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __SBRY_MODE__ === \"dev\" && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(body, node.body);\n\n}","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SBRY__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst JSType = __SBRY_COMPAT__ === \"NONE\" ? \"Number\" : \"BigInt\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", JSType);\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        if( __SBRY_COMPAT__ === \"NONE\") {\n            w_sns(\"Math.trunc(\", other, \")\");\n        } else {\n            w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        }\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            if( __SBRY_COMPAT__ === \"NONE\")\n                                w_JSBinOp(call, a, op, b);\n                            else\n                                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\nexport class SBrython {\n\n    #registered: Record<string, Record<string, any>> = {};\n\n    register(name: string, exported: Record<string, any>) {\n        this.#registered[name] = exported;\n    }\n\n    //TODO...\n    // executeModule -> ObjectURL + get exports if possible...\n    // jscode  = `//# sourceURL=${filename}\\n`;\n\n    // for AST...\n    #registered_AST: Record<string, AST> = {};\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRY__\", jscode); //TODO...\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#registered[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#registered;\n    }\n    getModule(name: string) {\n        return this.#registered[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return __SBRY_COMPAT__ === \"NONE\" ? null : _r_;\n    }\n    get _sb_() {\n        return __SBRY_COMPAT__ === \"NONE\" ? null : _sb_;\n    }\n}\n\n// give options here ? factory ?\nexport default globalThis.__SBRY__ = new SBrython();","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __SBRY_MODE__ === \"dev\" && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(id, cur.body);\n    }\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","export default \"# Missing:\\n# - Final[T]\\n# - Callable[] (requires fct type refactor...)\\n# - TypedDict + NotRequired\\n#        - from typing import TypedDict\\n#        - type NameInfo = TypedDict('NameInfo', {'name': str, 'first-letter': str})\\n# - circular type hints\\n# - static attributes/methods\\n# - async + iterators\\n# - some API (mainly in Window)\\n# - split into separate files\\n# - special stubs parser\\n# - better import system.\\n# - @overload\\n# - add constructors + special methods (__getattr__ etc)\\n# https://developer.mozilla.org/en-US/docs/Web/API (1006 classes)\\n\\nclass Undefined:\\n    pass\\n\\nundefined: Undefined\\n\\nclass Event:\\n    # TODO: read-only : Final[bool] (they are all RO)\\n    bubble: bool\\n    cancelable: bool\\n    composed: bool\\n    currentTarget: EventTarget\\n    defaultPrevented: bool\\n    # TODO: enum ?\\n    eventPhase: float\\n    NONE = 0.\\n    CAPTURING_PHASE = 1.\\n    AT_TARGET = 2.\\n    BUBBLING_PHASE = 3.\\n    isTrusted: bool\\n    target: EventTarget\\n    timeStamp: float\\n    type: str\\n\\n    def composedPath(self) -> EventTarget : ...\\n    def preventDefault(self) -> Undefined: ...\\n    def stopImmediatePropagation(self) -> Undefined: ...\\n    def stopPropagation(self) -> Undefined: ...\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\\nclass EventTarget:\\n    # TODO: listener type...\\n    # TODO: option/capture optional arg...\\n    # TODO: listener: This must be null, an object with a handleEvent() method, or a JavaScript function.\\n    # def addEventListener(self, type: str, listener, /) -> Undefined: ...\\n    # def removeEventListener(self, type: str, listener, /) -> Undefined: ...\\n\\n    def dispatchEvent(self, event: Event, /) -> bool: ...\\n\\nclass NodeList:\\n    length: float\\n    # entries\\n    # values\\n    # keys\\n    # forEach\\n    def item(self, index: float, /) -> Node: ...\\n\\nclass Node(EventTarget):\\n    # TODO: RO\\n    baseURI: str\\n    childNodes: NodeList\\n    firstChild: Node|None\\n    isConnected: bool\\n    lastChild: Node|None\\n    nextSibling: Node|None\\n    nodeName: str\\n    # TODO: enum ?\\n    nodeType: float\\n    ELEMENT_NODE = 0.\\n    ATTRIBUTE_NODE = 1.\\n    TEXT_NODE = 3.\\n    CDATA_SECTION_NODE = 4.\\n    PROCESSING_INSTRUCTION_NODE = 7.\\n    COMMENT_NODE = 8.\\n    DOCUMENT_NODE = 9.\\n    DOCUMENT_TYPE_NODE = 10.\\n    DOCUMENT_FRAGMENT_NODE = 11.\\n    # RW:\\n    nodeValue: str|None\\n    # RO\\n    ownerDocument: Document|None\\n    parentElement: Element|None\\n    parentNode: Node|None\\n    previousSibling: Node|None\\n    textContent: str|None\\n\\n    def appendChild(self, child: Node) -> Node: ...\\n    def cloneNode(self, deep: bool = False) -> Node: ...\\n    def compareDocumentPosition(self, otherNode: Node) -> float: ...\\n    DOCUMENT_POSITION_DISCONNECTED = 1.\\n    DOCUMENT_POSITION_PRECEDING = 2.\\n    DOCUMENT_POSITION_FOLLOWING = 4.\\n    DOCUMENT_POSITION_CONTAINS = 8.\\n    DOCUMENT_POSITION_CONTAINED_BY = 16.\\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32.\\n    def contains(self, otherNode: Node|None) -> bool: ...\\n    # TODO: options\\n    # https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\\n    def getRootNode(self) -> Node: ...\\n    def hasChildNodes(self) -> bool: ...\\n    def insertBefore(self, newNode: Node, referenceNode: Node|None) -> Node: ...\\n    def isDefaultNamespace(self, namespaceURI: str|None) -> bool: ...\\n    def isEqualNode(self, otherNode: Node|None) -> bool: ...\\n    def isSameNode(self, otherNode: Node|None) -> bool: ...\\n    def lookupNamespaceURI(self, prefix: str|None) -> str|None: ...\\n    def lookupPrefix(self, namespace: str|None) -> str|None: ...\\n    def normalize(self) -> Undefined: ...\\n    def removeChild(self, child: Node) -> Undefined: ...\\n    # TODO: can be generic\\n    def replaceChild(self, newChild: Node, oldChild: Node) -> Node: ...\\n\\n# TODO\\n\\n# Getter/setter/deleter\\nclass DOMStringMap:\\n    pass\\n\\nclass CSSStyleDeclaration:\\n    cssFloat: str\\n    cssText: str\\n    length: float\\n    parentRule: CSSRule\\n    \\n    def getPropertyPriority(self, property: str, /) -> str: ...\\n    def getPropertyValue(self, property: str, /) -> str: ...\\n    def item(self, index: float, /) -> str: ...\\n    def removeProperty(self, property: str, /) -> str: ...\\n    def setProperty(self, propertyName: str, value: str, priority: str = \\\"\\\") -> Undefined : ...\\n\\nclass NamedNodeMap:\\n    # RO\\n    length: float\\n    def getNamedItem(self, name: str, /) -> Attr|None: ...\\n    def getNamedItemNS(self, namespace: str, localName: str, /) -> Attr|None: ...\\n    def item(self, index: float, /) -> Attr|None: ...\\n    def removeNamedItem(self, attrName: str, /) -> Attr: ...\\n    def removeNamedItemNS(self, namespace: str, localName: str, /) -> Attr: ...\\n    def setNamedItem(self, attr: Attr, /) -> Attr|None: ...\\n    def setNamedItemNS(self, attr: Attr, /) -> Attr|None: ...\\n\\nclass HTMLCollection:\\n    length: float\\n    def item(self, index: float, /) -> Element|None: ...\\n    def namedItem(self, key: str, /) -> Element|None: ...\\n\\nclass DOMTokenList:\\n    length: float\\n    value: str\\n\\n    def add(self, token1: str, /) -> Undefined: ...\\n    def contains(self, token: str, /) -> bool: ...\\n    # entries : iterator\\n    # forEach\\n    def item(self, index: float, /) -> str|None: ...\\n    # keys\\n    def remove(self, token1: str, /) -> Undefined: ...\\n    def replace(self, oldToken: str, newToken: str, /) -> bool: ...\\n    def supports(self, token: str, /) -> bool: ...\\n    def toggle(self, token: str, force: bool = False, /) -> bool: ...\\n    def toString(self, /) -> str: ...\\n    # values\\n\\nclass StyleSheet:\\n    # RW\\n    disabled: bool\\n    # RO\\n    href: str\\n    # media: MediaList\\n    ownerNode: Node\\n    parentStyleSheet: StyleSheet\\n    title: str\\n    type: str\\n\\nclass CSSRule:\\n    # RO\\n    cssText: str\\n    parentRule: CSSRule|None\\n    parentStyleSheet: StyleSheet\\n\\nclass CSSRuleList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSRule|None: ...\\n\\nclass CSSImportRule(CSSRule):\\n    # RO\\n    href: str\\n    layerName: str|None\\n    # media : MediaList\\n    styleSheet: CSSStyleSheet\\n    supportsText: str|None\\n\\nclass CSSStyleSheet(StyleSheet):\\n    # RO\\n    cssRules: CSSRuleList\\n    ownerRule: CSSImportRule|None\\n\\n    def deleteRule(self, index: float, /) -> Undefined: ...\\n    def insertRule(self, rule: str, index: float = 0., /) -> float: ...\\n    #TODO:  Async : replace\\n    def replaceSync(self, text: str, /) -> Undefined: ...\\n\\n\\nclass StyleSheetList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSStyleSheet|None: ...\\n\\n\\nclass DocumentFragment(Node):\\n    childElementCount: float\\n    children: HTMLCollection\\n    firstElementChild: Element|None\\n    lastElementChild: Element|None\\n    \\n    def append(self, param1: Node, /) -> Undefined: ...\\n    # + make generic\\n    def getElementById(self, id: str, /) -> Element|None: ...\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n\\n\\nclass ShadowRoot(DocumentFragment):\\n    # RO...\\n    activeElement: Element|None\\n    # adoptedStyleSheets (array)\\n    clonable: bool\\n    delegatesFocus: bool\\n    # fullscreenElement (limited)\\n    host: Element\\n    innerHTML: str|None\\n    # TODO: enum ?\\n    mode: str\\n    pointerLockElement: Element|None\\n    serializable: bool\\n    # TODO: enum ?\\n    slotAssignment: str\\n    styleSheets: StyleSheetList\\n\\n    # getAnimations\\n    #TODO: opts\\n    def getHTML(self, /) -> str: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n\\nclass DOMRect:\\n    # RW\\n    height: float\\n    width: float\\n    x: float\\n    y: float\\n    # TODO: static\\n    # fromRect()\\n\\n    # RO\\n    top: float\\n    bottom: float\\n    left: float\\n    right: float\\n\\nclass Attr(Node):\\n    # RO\\n    localName: str\\n    name: str\\n    namespaceURI: str\\n    ownerElement: Element\\n    prefix: str|None\\n    value: str\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Element\\n# no aria (too much)\\nclass Element(Node):\\n    # RO\\n    assignedSlot: HTMLSlotElement|None\\n    attributes: NamedNodeMap\\n    childElementCount: float\\n    children: HTMLCollection\\n    classList: DOMTokenList\\n    # RW\\n    className: str\\n    # RO\\n    clientHeight: float\\n    clientLeft: float\\n    clientTop: float\\n    clientWidth: float\\n    currentCSSZoom: float\\n    firstElementChild: Element|None\\n    id: str\\n    # RW\\n    innerHTML: str\\n    lastElementChild: Element|None\\n    localName: str\\n    namespaceURI: str|None\\n    nextElementSibling: Element|None\\n    outerHTML: str\\n    part: DOMTokenList\\n    prefix: str|None\\n    previousElementSibling: Element|None\\n    # RW\\n    role: str|None\\n    # RW\\n    scrollHeight: float\\n    scrollLeft: float\\n    scrollTop: float\\n    scrollWidth: float\\n    # RO\\n    shadowRoot: ShadowRoot|None\\n    slot: str\\n    tagName: str\\n\\n    #TODO: *args\\n    def after(self, node1: Node, /) -> Undefined: ...\\n    # def animate()\\n    def append(self, param1: None, /) -> Undefined: ...\\n    #TODO: attachShadow\\n    def before(self, node1: Node, /) -> Undefined: ...\\n    #TODO: checkVisibility\\n    def closest(self, selectors: str, /) -> Element|None: ...\\n    # TODO: computedStyleMap (limited)\\n    # TODO: getAnimations\\n    def getAttribute(self, attributeName: str, /) -> str|None: ...\\n    #TODO getAttributeNames (list)\\n    def getAttributeNode(self, attrName: str, /) -> Attr: ...\\n    def getAttributeNodeNS(self, namespace: str, attrName: str, /) -> Attr: ...\\n    def getAttributeNS(self, namespace: str, attributeName: str, /) -> str|None: ...\\n    def getBoundingClientRect(self, /) -> DOMRect: ...\\n    #TODO getClientRects\\n    def getElementsByClassName(self, names: str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, tagName: str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespaceURI: str, localName: str, /) -> HTMLCollection: ...\\n    # TODO: options\\n    def getHTML(self, /) -> str: ...\\n    def hasAttribute(self, name: str, /) -> bool: ...\\n    def hasAttributeNS(self, namespace: str, localName: str, /) -> bool: ...\\n    def hasAttributes(self, /) -> bool: ...\\n    # TODO: pointerId ?\\n    def hasPointerCapture(self, pointerId: float, /) -> bool: ...\\n    # TODO: more restrictive position str\\n    def insertAdjacentElement(self, position: str, element: Element, /) -> Element|None: ...\\n    def insertAdjacentHTML(self, position: str, text: str, /) -> Undefined: ...\\n    def insertAdjacentText(self, where: str, data: str, /) -> Undefined: ...\\n    def matches(self, selectors: str, /) -> bool: ...\\n    # moveBefore\\n    #TODO:\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def releasePointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def removeAttribute(self, attrName: str, /) -> Undefined: ...\\n    def removeAttributeNode(self, attributeNode: Attr, /) -> Node: ...\\n    def removeAttributeNS(self, namespace: str, attrName: str, /) -> Undefined: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    def replaceWith(self, param1: Node, /) -> Undefined: ...\\n    # requestFullScreen (limited)\\n    # requestPointerLock (limited)\\n    # TODO: 2 possibilites :\\n    def scroll(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollBy(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: options\\n    def scrollIntoView(self) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollTo(self, x: float, y: float, /) -> Undefined: ...\\n    def setAttribute(self, name: str, value: str|None, /) -> Undefined: ...\\n    def setAttributeNode(self, attribute: Attr, /) -> Attr|None: ...\\n    def setAttributeNodeNS(self, attributeNode: Attr, /) -> Attr|None: ...\\n    def setAttributeNS(self, namespace: str, name: str, value: str|None, /) -> Undefined: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n    def setPointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def toggleAttribute(self, name: str, toggle: bool = False, /) -> bool: ...\\n\\n\\nclass HTMLElement(Element):\\n\\n    accessKeyLabel: str\\n    autofocus: bool\\n    contentEditable: str\\n    dataset: DOMStringMap\\n    dir: str\\n    draggable: bool\\n    enterKeyHint: str\\n    hidden: bool\\n    inert: bool\\n    innerText: str\\n    inputMode: str\\n    isContentEditable: bool\\n    lang: str\\n    nonce: float\\n    offsetHeight: float\\n    offsetLeft: float\\n    offsetParent: float\\n    offsetTop: float\\n    offsetWidth: float\\n    outerText: str\\n    popover: str\\n    spellcheck: bool\\n    style: CSSStyleDeclaration|None\\n    tabIndex: float\\n    title: str\\n    translate: bool\\n\\n    # attachInternals\\n    def blur(self) -> Undefined: ...\\n    def click(self) -> Undefined: ...\\n    def focus(self) -> Undefined: ...\\n    def hidePopover(self) -> Undefined: ...\\n    # TODO: options\\n    def showPopover(self) -> Undefined: ...\\n    # TODO:\\n    def togglePopover(self, force: bool=False, /) -> Undefined: ...\\n\\nclass HTMLSlotElement(HTMLElement):\\n    pass\\n\\nclass HTMLBodyElement(HTMLElement):\\n    pass\\n\\nclass HTMLHeadElement(HTMLElement):\\n    pass\\n\\nclass HTMLScriptElement:\\n    # async ?\\n    crossOrigin: str\\n    defer: bool\\n    fetchPriority: str\\n    integrity: str\\n    nomodule: bool\\n    referrerPolicy: str\\n    str: str\\n    text: str\\n    type: str\\n    # static support\\n\\nclass DOMStringList:\\n    length: float\\n    def contains(self, string: str, /) -> bool: ...\\n    def item(self, index: float, /) -> str|None: ...\\n\\nclass URLSearchParams:\\n    size: float\\n\\n    def append(self, name: str, value: str, /) -> Undefined: ...\\n    def delete(self, name: str, value: str|Undefined = undefined, /) -> Undefined: ...\\n    # entries/forEach/keys/values\\n    def get(self, name: str) -> str|None: ...\\n    # getAll (array)\\n    def has(self, name: str, value: str|Undefined = undefined, /) -> bool: ...\\n    def set(self, name: str, value: str, /) -> Undefined: ...\\n    def sort(self) -> Undefined: ...\\n    def toString(self) -> str: ...\\n\\nclass URL:\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n    searchParams: URLSearchParams\\n    username: str\\n\\n    # static\\n    # canParse + createObjectURL + parse + revokeObjectURL\\n    def toJSON(self) -> str: ...\\n    def toString(self) -> str: ...\\n\\nclass Location:\\n    ancestorOrigins: DOMStringList\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n\\n    def assign(self, url: str|URL, /) -> Undefined: ...\\n    def reload(self) -> Undefined: ...\\n    def replace(self, url: str|URL, /) -> Undefined: ...\\n    def toString(self) -> Undefined: ...\\n\\nclass Window(EventTarget):\\n    \\\"\\\"\\\"\\n    The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.\\n\\n    See https://developer.mozilla.org/en-US/docs/Web/API/Window\\n    \\\"\\\"\\\"\\n\\n    # caches\\n    closed: bool\\n    # cookieStore\\n    crossOriginIsolated: bool\\n    # crypto\\n    # customElements\\n    document: Document\\n    frameElement: HTMLElement|None\\n    # frames\\n    # history\\n    # indexedDB\\n    innerHeight: float\\n    innerWidth: float\\n    isSecureContext: bool\\n    length: float\\n    # localStorage\\n    location: Location\\n    # locationBar\\n    # menubar\\n    name: str\\n    # navigator\\n    # opener\\n    origin: str\\n    originAgentCluster: bool\\n    outerHeight: float\\n    outerWidth: float\\n    parent: Window\\n    # performance\\n    # personalbar\\n    # screen\\n    screenLeft: float\\n    screenTop: float\\n    screenX: float\\n    screenY: float\\n    # scrollbars\\n    scrollX: float\\n    scrollY: float\\n    self: Window\\n    # sessionStorage\\n    # speechSynthesis\\n    # statusbar\\n    # toolbar\\n    top: Window\\n    # visualViewport\\n    window: Window\\n\\n    def alert(self, message: str = \\\"\\\", /) -> Undefined: ...\\n    def atob(self, encodedData: str, /) -> str: ...\\n    def btoa(self, stringToEncode: str, /) -> str: ...\\n    def cancelAnimationFrame(self, requestID: float, /) -> Undefined: ...\\n    def clearInterval(self, intervalID: float, /) -> Undefined: ...\\n    def clearTimeout(self, timeoutID: float, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def confirm(self, message: str = \\\"\\\", /) -> bool: ...\\n    # createImageBitmap\\n    # fetch\\n    def focus(self) -> Undefined: ...\\n    def getComputedStyle(self, element: Element, pseudoElt: str|None = None, /) -> CSSStyleDeclaration: ...\\n    # getSelection\\n    # matchMedia\\n    def moveBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def moveTo(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def open(self, url: str = \\\"\\\", target: str = \\\"\\\", windowFeatures: str = \\\"\\\", /) -> Window|None: ...\\n    def postMessage(self, message: object, targetOrigin: str = \\\"\\\", /) -> Undefined: ...\\n    def print(self) -> Undefined: ...\\n    def prompt(self, message: str, defaultValue: str|None = None, /) -> str|None: ...\\n    # queueMicrotask\\n    # reportError\\n    # requestAnimationFrame\\n\\n    def resizeBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def resizeTo(self, width: float, height: float, /) -> Undefined: ...\\n    def scroll(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollBy(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollTo(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    # def setInterval(self, )\\n    # def setTimeout\\n    def stop(self) -> Undefined: ...\\n    # TODO: generic\\n    def structuredClone[T](self, value: T, /) -> T: ...\\n\\n\\nwindow: Window\\n\\nclass DocumentType(Node):\\n    name: str\\n    publicId: str\\n    systemId: str\\n\\n    def after(self, param1: Node, /) -> Undefined: ...\\n    def before(self, param1: Node, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def replaceWith(self, node1: Node, /) -> Undefined: ...\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Document/\\n# also lot of methods...\\nclass Document(Node):\\n    activeElement: Element|None\\n    adoptedStyleSheets: CSSStyleSheet\\n    body: HTMLBodyElement\\n    characterSet: str\\n    childElementCount: float\\n    children: HTMLCollection\\n    compatMode: str\\n    contentType: str\\n    cookie: str\\n    currentScript: HTMLScriptElement|None\\n    defaultView: Window|None\\n    designMode: str\\n    dir: str\\n    doctype: DocumentType\\n    documentElement: Element\\n    documentURI: str\\n    embeds: HTMLCollection\\n    firstElementChild: HTMLElement|None\\n    #fonts: FontFaceSet\\n    forms: HTMLCollection\\n    #fragmentDirective: FragmentDirective\\n    head: HTMLHeadElement\\n    hidden: bool\\n    images: HTMLCollection\\n    #implementation: DOMImplementation\\n    lastElementChild: Element|None\\n    lastModified: str\\n    links: HTMLCollection\\n    location: Location\\n    plugins: HTMLCollection\\n    readyState: str\\n    referrer: str\\n    scripts: HTMLCollection\\n    scrollingElement: Element\\n    styleSheets: StyleSheetList\\n    # timeline\\n    title: str\\n    URL: str\\n    visibilityState: str\\n\\n    # static parseHTMLUnsafe\\n    def adoptNode(self, externalNode: Node, /) -> Node: ...\\n    def append(self, param1: Node, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def createAttribute(self, name: str, /) -> Attr: ...\\n    def createAttributeNS(self, namespaceURI: str, qualifiedName: str, /) -> Attr: ...\\n    def createCDATASection(self, data:str, /) -> Node: ...\\n    def createComment(self, data: str, /) -> Node: ...\\n    def createDocumentFragment(self) -> DocumentFragment: ...\\n    # TODO: options\\n    def createElement(self, localName: str, /) -> Element: ...\\n    def createElementNS(self, namespaceURI: str, qualifiedName: str) -> Element: ...\\n    # createExpression\\n    # createNodeIterator\\n    # createProcessingInstruction\\n    # createRange\\n    def createTextNode(self, data: str, /) -> Node: ...\\n    # createTreeWalker\\n    def elementFromPoint(self, x: float, y: float) -> Element: ...\\n    # elementsFromPoint (array)\\n    # evaluate (XPath)\\n    # getAnimations\\n    def getElementById(self, selectors: str, /) -> Element|None: ...\\n    def getElementsByClassName(self, names:str, /) -> HTMLCollection: ...\\n    def getElementsByName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespace: str, name: str, /) -> HTMLCollection: ...\\n    # getSelection\\n    def hasFocus(self) -> bool: ...\\n    def hasStorageAccess(self) -> bool: ...\\n    def importNode[T: Node](self, externalNode: T, deep: bool = False) -> T: ...\\n    def open(self) -> Undefined: ...\\n    def prepend(self, param1: Node) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    # TODO: options + promise\\n    # def requestStorageAccess(self): \\n    def writeln(self, line: str, /) -> Undefined: ...\\n\\ndocument: Document\";","import Types, { TYPEID_None, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG, AST_CLASSDEF, AST_DEF_METH, AST_OP_ATTR } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport builtins, { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\nimport { printNode } from \"@SBrython/utils/print/printNode\";\nimport { w_str } from \"./ast2js/utils\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nlet JS: Record<string, TYPE_ID> = {};\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__SBRY_MODE__ === \"dev\") ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = offset + code.slice(offset).search(END_OF_SYMBOL);\n\n    curChar = code.charCodeAt(end);\n\n    return code.slice(offset, offset = end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n    \n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    if( curChar === CHAR_COLON ) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol(); // type\n        setResultType(id, getSymbol(type) + 1 as TYPE_ID );\n    }\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => {\n        setType(id, AST_KEY_RETURN);\n        consumeSpaces();\n        if( curChar !== CHAR_NL)\n            setFirstChild(id, readExpr() );\n    },\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        let genericName = \"\";\n        let genericType = \"\";\n        if( curChar === CHAR_BRACKET_LEFT) {\n            ++offset;\n            genericName = nextSymbol();\n            offset += 2; // \": \"\n            genericType = nextSymbol();\n            ++offset; // ]\n        }\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        let ret_type: TYPE_ID = 0;\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return ret_type; //TODO...\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        const cur_builtin_idx = builtins.length;\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        ++offset; // )\n\n        consumeSpaces();\n        if( curChar === CHAR_MINUS ) {\n            offset += 2; // ->\n            consumeSpaces();\n            let ret_name = nextSymbol();\n            if( ret_name === genericName)\n                ret_name = genericType;\n            ret_type = getSymbol( ret_name ) + 1 as TYPE_ID;\n\n            // @ts-ignore\n            while(curChar === 124) { // |\n                ++offset;\n                nextSymbol();\n            }\n            consumeSpaces();\n        }\n\n        ++offset; // :\n\n        curChar = code.charCodeAt(offset);\n\n        if( curChar === CHAR_SPACE && code.charCodeAt(++offset) === CHAR_DOT ) {\n            offset += 3; // ...\n        } else {\n\n            const body = readBody();\n            setSibling(args, body);\n\n            if( ret_type === 0 ) {\n\n                ret_type = TYPEID_None;\n\n                cur = firstChild(body);\n                while( nextSibling(cur) !== 0) {\n                    cur = nextSibling(cur);\n                }\n\n                if( type(cur) === AST_KEY_RETURN && (cur = firstChild(cur)) !== 0)\n                    ret_type = resultType(cur);\n            }\n        }\n\n        builtins.length = cur_builtin_idx;\n    },\n    \"from\": (id) => {\n        // only stubs for now...\n        consumeSpaces();\n        const module = nextSymbol();\n\n        consumeSpaces();\n        //TODO...\n        nextSymbol(); // from\n        consumeSpaces();\n        const imported_name = nextSymbol(); //TODO: many\n\n        if(module === \"JS\" ) {\n            addSymbol(imported_name, JS[imported_name] ); //TODO...\n            setType(id, AST_KEY_PASS); //TODO...\n        } else {\n            throw new Error(\"Not implemented !\");\n        }\n        //TODO: parse studs...\n    },\n    \"class\": (id) => {\n\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const inherit: NODE_ID[] = []; //TODO...\n\n        if( curChar === CHAR_PARENTHESIS_LEFT) {\n            //TODO read args like call (?)\n            ++offset; // consume (\n            consumeSpaces();\n\n            // @ts-ignore\n            while( curChar !== CHAR_PARENTHESIS_RIGHT ) {\n\n                inherit.push( readToken() );\n\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset; // consume ,\n                    consumeSpaces();\n                }\n            }\n            ++offset; // consume )\n        }\n\n        ++offset; // \":\"\n        \n        const body = readBody();\n\n        let cur = body;\n        for(let i = 0; i < inherit.length; ++i) {\n            setSibling(cur, inherit[i]);\n            cur = inherit[i];\n        }\n\n        setType(id, AST_CLASSDEF);\n        setFirstChild(id, body); // too lazy to duplicate...\n\n        const STypeID = Types.length as TYPE_ID;\n        const SInstID = Types.length+1 as TYPE_ID;\n\n        const SType_klass: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => SInstID,\n                [WRITE_CALL]: (id: NODE_ID) => {\n                    w_str(\"new \");\n                    default_call(id);\n                },\n            }\n        }\n\n        const SType_instance = {};\n        for(let i = 0; i < inherit.length; ++i)\n            Object.assign(SType_instance, TYPES[resultType(inherit[i]) + 1]);\n\n        // @ts-ignore\n        SType_instance.__class__ = SType_klass;\n    \n        Types[STypeID] = SType_klass;\n        Types[SInstID] = SType_instance;\n\n\n        //TODO: refactor/fix...\n\n        cur = firstChild(body);\n        let node_type: NODE_TYPE;\n        do {\n\n            node_type = type(cur);\n\n            // not ideal : needs it BEFORE...\n            if( node_type === AST_DEF_FCT) {\n\n                // @ts-ignore\n                SType_instance[VALUES[cur]] = resultType(cur);\n\n                setType(cur, AST_DEF_METH);\n            }\n\n            //TODO: fix...\n            if( node_type === AST_OP_ASSIGN_INIT || node_type === AST_OP_ASSIGN) {\n\n                // @ts-ignore\n                SType_instance[VALUES[nextSibling(firstChild(cur))]] = resultType(cur);\n\n                setType(cur, AST_OP_ASSIGN);\n            }\n\n            cur = nextSibling(cur);\n\n        } while( cur !== 0);\n\n        addSymbol(name, STypeID);\n\n        //TODO: inherit...\n\n        //TODO: SType...\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__SBRY_MODE__ === \"dev\") ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr(false); //TODO... : typehint too...\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n\n        if( code.charCodeAt(++offset) ===  end) {\n\n            if( code.charCodeAt(++offset) !==  end ) {\n                // empty str.\n                VALUES[node] = \"\";\n            } else { \n                //TODO: multi-str.\n\n                let count = 0;\n\n                while(true) {\n                    curChar = code.charCodeAt(++offset);\n                    \n                    if( __SBRY_MODE__ === \"dev\" && offset >= code.length)\n                        throw new Error(\"NOK\");\n\n                    if( curChar !== end ) {\n                        count = 0;\n                        continue;\n                    }\n                    \n                    if( ++count === 3)\n                        break;\n                        \n                }\n\n                ++offset;\n                VALUES[node] = \"`\" + code.slice(beg+3, offset-3) + \"`\";\n            }\n        } else {\n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar !== end);\n\n           ++offset;\n            VALUES[node] = code.slice(beg, offset);\n        }\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar !== CHAR_DOT && curChar !== CHAR_BRACKET_LEFT ) {\n\n                //TODO: better way for inlineKlasses\n                if( token === \"int\")\n                    VALUES[node] = __SBRY_COMPAT__ === \"NONE\" ? \"Number\" : \"BigInt\";\n                if( token === \"float\")\n                    VALUES[node] = \"Number\";\n                if( token === \"str\")\n                    VALUES[node] = \"String\";\n                if( token === \"bool\")\n                    VALUES[node] = \"Boolean\";\n            }\n\n            if( curChar === CHAR_DOT) { // get attr...\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_OP_ATTR);\n                setFirstChild(node, cur);\n\n                ++offset;\n\n                const name = VALUES[node] = nextSymbol(); //TODO: continue...\n\n                // @ts-ignore\n                setResultType(node, TYPES[resultType(cur)][name]);\n            }\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                if( __SBRY_MODE__ === \"dev\" ) copy_py_code_beg(cur, node);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n\n                if( __SBRY_MODE__ === \"dev\" && fctType === undefined) {\n                    console.warn( VALUES[node], resultType(cur), Types[resultType(cur)]);\n                    throw \"nok\";\n                }\n\n                //TODO: return type...\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr(colon_is_end = true) { //TODO...\n\n    let value = readToken();\n\n    if( ! colon_is_end && curChar === CHAR_COLON) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol();\n        const typeID = getSymbol(type) + 1 as TYPE_ID;\n\n        // @ts-ignore\n        while(curChar === 124) { // |\n            ++offset;\n            nextSymbol();\n        }\n\n        setResultType(value, typeID);\n        addSymbol(VALUES[value], typeID); //TODO...\n\n        consumeSpaces();\n    }\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\n// @ts-ignore\nimport JS_stubs  from \"!!raw-loader!../../stubs/JS/__init__.pyi\";\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    //TODO: better handle imports...\n    let import_offset = 0;\n    while( _code.slice(import_offset, import_offset+5) === \"from \") {\n\n        const start = builtins.length;\n\n        py2ast(JS_stubs, \"JS\");\n\n        for(let i = start; i < builtins.length; ++i)\n            JS[builtins[i][0]] = builtins[i][1]; //TODO: array (?)\n\n        import_offset = _code.indexOf(\"\\n\", import_offset) + 1;\n    }\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __SBRY_MODE__ === \"dev\" ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __SBRY_MODE__ === \"dev\" && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __SBRY_MODE__ === \"dev\" && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __SBRY_MODE__ === \"dev\" && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __SBRY_MODE__ === \"dev\" && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        console.warn(\"at line\", CURSOR[0])\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __SBRY_MODE__ === \"dev\" && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __SBRY_MODE__ === \"dev\" && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    $B.imported[\"JS\"] = $B.jsobj2pyobj( globalThis );\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    $B.debug = 0;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = __SBRY_MODE__ !== 'dev' ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __SBRY_MODE__ === \"dev\" && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __SBRY_MODE__ === \"dev\" && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __SBRY_MODE__ === \"dev\" ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __SBRY_MODE__ === \"dev\" && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __SBRY_MODE__ === \"dev\" && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__SBRY_MODE__ === \"dev\") set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SBRY__.getModules()\");\n    else\n        w_str(`__SBRY__.getModule(\"${value}\")`);\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__SBRY_MODE__ === \"dev\") set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__SBRY_MODE__ === \"dev\") set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { BB, BE, jscode, set_js_cursor, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_STR } from \"./list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        if( jscode.length !== 0 ) w_NL();\n\n        if( type(cur) !== AST_LIT_STR )\n            w_node(cur);\n        else if(__SBRY_MODE__ === \"dev\") {\n            set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`/*${VALUES[cur].slice(1,-1)}*/`);\n            set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__SBRY_MODE__ === \"dev\" && first !== 0 && node !== 0)\n        w_NL();\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","// @ts-nocheck\n\nimport dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, TYPE_ID, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, TYPE_ID> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, TYPE_ID>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","function assert(cond: boolean, msg: string = 'Assertion failed') {\n\n    if( ! cond )\n        throw new Error(msg);\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]}`);\n\n    if( cur !== 0) {\n        w_str(\" extends \");\n    \n        if( nextSibling(cur) === 0) {\n            w_node(cur);\n        } else {\n            w_str(\"_sb_.mix(\");\n            w_node(cur);\n            cur = nextSibling(cur);\n            do {\n                w_str(\", \");\n                w_node(cur);\n                cur = nextSibling(cur);\n            } while(cur !== 0);\n            \n            w_str(\")\");\n        }\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"console.log(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);\n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ return this.constructor.${name}(this, ...args) }`);\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __SBRY_MODE__ === \"dev\" && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\n// @ts-ignore\nglobalThis.assert = function assert(cond: boolean, msg = \"Assertion failed\") {\n    if( ! cond )\n        null;//throw new Error(msg);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = __SBRY_MODE__ === \"test\"; // Benchmark\nconst parser    = search.get(\"parser\") === \"false\" ? false : true;\nconst DEFAULT_COMPAT = (search.get(\"compat\") ?? \"NONE\") as typeof __SBRY_COMPAT__;\n\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = [\n    'basic test suite',\n    'numbers',\n    \"classes\" // ~726\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~616\n// list    ~345\n// dicts   ~205\n// sets    ~224\n// bytes   ~229\n\n// generators ~972...\n\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nconst select = document.querySelector<HTMLSelectElement>('#tests')!;\n\nconst defaultOpt = new Option(\"----\", undefined, true, true);\ndefaultOpt.toggleAttribute('disabled');\nselect.append( defaultOpt );\n\nselect.addEventListener('change', () => {\n\n    let code = select.value;\n\n    const codes = code.split(\"\\n\");\n    for(let l = 1; l < codes.length; ++l) {\n        const idx = codes[l].indexOf('#');\n        if( idx <= 0)\n            continue;\n        const config = JSON.parse( codes[l].slice(idx+1).trim());\n        if( config.COMPAT !== DEFAULT_COMPAT )\n            codes[l] = \"#\" + codes[l];\n        else\n            codes[l] = codes[l].slice(0, idx).trimEnd();\n    }\n\n    code = codes.join('\\n');\n\n    python_input.value = code;\n    localStorage.setItem('sbrython_code', code);\n    oneTimeExec(code);\n    \n});\n\nfor(let i = 0; i < brython_tests.length; ++i) {\n\n    const subtests = test_suites[ brython_tests[i] ];\n\n    for(let j = 0; j < subtests.length; ++j) {\n\n        const code = subtests[j];\n\n        if( code === \"\")\n            continue;\n\n        const name = code.slice(2 , code.indexOf(\"\\n\") );\n\n        const opts = new Option(name, code);\n        select!.append( opts );\n    }\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    globalThis.__SBRY_COMPAT__ = DEFAULT_COMPAT;\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    if( __SBRY_MODE__ === \"dev\" ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    //TODO: réimplémenter différemment ???\n\n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )   // when does it occur ?\n            continue;\n        if( ctype.start.line === 0) {// unprinted node\n            subparts.length -= 2;\n            continue;\n        }\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;        \n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n\n        if( val.__qualname__ !== undefined)\n            val = val.__qualname__;\n        else if( val.__name__ !== undefined)\n            val = val.__name__;\n        else if( val.name !== undefined)\n            val = val.name;\n        else\n            val = JSON.stringify(val);\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(const child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(const gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(const gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n\n    let failed = [];\n\n    const configs: typeof __SBRY_COMPAT__[] = __SBRY_COMPAT__ === \"NONE\"\n        ? [\"NONE\"]\n        : [\"NONE\", \"PERF\"]; //, \"FULL\"];\n\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            for(const config of configs) {\n\n                globalThis.__SBRY_COMPAT__ = config;\n\n                //TODO: second exclude...\n\n                let code = subtests[j];\n\n                if( code === \"\")\n                    continue;\n\n                const codes = code.split(\"\\n\");\n                for(let l = 1; l < codes.length; ++l) {\n                    const idx = codes[l].indexOf('#');\n                    if( idx <= 0)\n                        continue;\n                    const config = JSON.parse( codes[l].slice(idx+1).trim());\n                    if( config.COMPAT !== __SBRY_COMPAT__ )\n                        codes[l] = \"#\" + codes[l];\n                    else\n                        codes[l] = codes[l].slice(0, idx).trimEnd();\n                }\n\n                code = codes.join('\\n');\n        \n                if( merge ) {\n                    const indented_code = code.split('\\n').map(e => `    ${e}`).join('\\n');\n                    fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n                } else {\n                    try {\n                        fullcode = code;\n                        generate(fullcode, results, parser);\n                        execute(results, sbry_print);\n                    } catch(e) {\n                        error = e as Error;\n\n                        failed.push({\n                            code,\n                            error: e,\n                        })\n\n                        // print last error...\n                        try {\n                            const ast = astnode2tree();\n                            try {\n                                print_js( results.sbry.code, ast );\n                            } catch(e) { console.warn(e); }\n                            try {\n                                print_python( fullcode, ast );\n                            } catch(e) { console.warn(e); }\n                            try {\n                                print_ast( ast );\n                            } catch(e) { console.warn(e); }\n                        } catch(e) { console.warn(e); }\n                    }\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n\n        if( error ) {\n\n            try {\n                const ast = astnode2tree();\n                try {\n                    print_js( results.sbry.code, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_python( fullcode, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_ast( ast );\n                } catch(e) { console.warn(e); }\n            } catch(e) { console.warn(e); }\n        }\n    }\n    \n    if(error) {\n\n        console.warn(failed);\n\n        python_input.value = failed[failed.length-1]?.code ?? results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('\\n#');\n\n    parts[0] = parts[0].slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n        \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i) {\n            if( lines[i][0] === '#' ) {\n                if( lines[i].slice(1).trim() === '' ) // commented empty line\n                    ++nbEmptyLines;\n                else\n                    ++nbExcluded\n            }\n        }\n\n        let code_len = lines.length - 1 - nbEmptyLines;\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","export default {};","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return a;\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return a;\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\" || other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"nan\" || other_value === \"NaN\" ){\n                w_str(\"Number.NaN\");\n                return;\n            }\n        }\n\n    \n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\");\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    if( __SBRY_COMPAT__ === \"NONE\") {\n        w_node( nextSibling(firstChild(call)) ); w_str(' .toString()');\n    } else\n        w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __SBRY_MODE__ === \"dev\" && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( __SBRY_COMPAT__ !== \"NONE\" && resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_None               = 2;\nexport const TYPEID_NotImplementedType = 3;\nexport const TYPEID_NotImplemented     = 4;\nexport const TYPEID_type               = 5;\nexport const TYPEID_type_int_          = 6;\nexport const TYPEID_int                = 7;\nexport const TYPEID_type_jsint_        = 8;\nexport const TYPEID_jsint              = 9;\nexport const TYPEID_type_float_        =10;\nexport const TYPEID_float              =11;\nexport const TYPEID_type_bool_         =12;\nexport const TYPEID_bool               =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_str                =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __SBRY_MODE__ === \"dev\" ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__SBRY_MODE__ === \"dev\") {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __SBRY_MODE__ === \"dev\" && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    if( __SBRY_MODE__ !== \"prod\")\n        w_sns(\"assert(\", firstChild(node), \")\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return;\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","// must NOT depends on list.\nimport AST2JS, { AST_CLASSDEF, AST_DEF_FCT, AST_OP_ASSIGN_INIT, AST_SYMBOL } from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, firstChild, JS_CODE, nextSibling, NODE_ID, type, VALUES } from \"../dop\";\n\nexport const CURSOR = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode();\n\n    w_node(0);\n\n    const exported = [];\n    let cur = firstChild(0);\n\n    let node_type;\n    while( cur !== 0) {\n\n        node_type = type(cur);\n\n        if( node_type === AST_CLASSDEF || node_type === AST_DEF_FCT)\n            exported.push( VALUES[cur]);\n        if( node_type === AST_OP_ASSIGN_INIT ) {\n            const child = firstChild(cur);\n            if( type(child) === AST_SYMBOL)\n                exported.push( VALUES[child] );\n        }\n\n        cur = nextSibling(cur);\n    }\n\n    if( __SBRY_EXPORT__ === \"GLOBAL\" )\n        jscode += `\\nglobalThis.__SBRY_LAST_EXPORTED__ = {${exported.join(', ')}};\\n`;\n    if( __SBRY_EXPORT__ === \"SBRY\")\n        jscode += `\\n__SBRY__.register(\"${ast.filename}\", {${exported.join(', ')}});\\n`;\n    if( __SBRY_EXPORT__ === \"ES6\" )\n        jscode += `\\nexport {${exported.join(', ')}};\\n`;\n\n\treturn jscode;\n}\n\nfunction new_jscode() {\n\n    jscode = \"\";\n\n    let nbLines = 1;\n\n    if( __SBRY_COMPAT__ !== \"NONE\") {\n        if( __SBRY_EXPORT__ === \"ES6\" ) {\n            jscode += `import __SBRY__ from \"@SBrython\";\\n`;\n            ++nbLines;\n        }\n\n        if( __SBRY_EXPORT__ !== \"NONE\") {\n            jscode += `const {_r_, _sb_} = __SBRY__;\\n`;\n            ++nbLines;\n        }\n    }\n\n    if(__SBRY_MODE__ === \"dev\") {\n        CURSOR[CODE_LINE] = nbLines;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function hasJSCursor(node: NODE_ID) {\n    return JS_CODE[(node as any)*4 + CODE_LINE] !== 0;\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __SBRY_MODE__ === \"dev\" ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __SBRY_MODE__ === \"dev\" ) {\n        const has = hasJSCursor(node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n    } else {\n        AST2JS[type(node)!](node);\n    }\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __SBRY_MODE__ === \"dev\" ) {\n            const has = hasJSCursor(node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n            AST2JS[type(node)!](node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n        } else {\n            AST2JS[type(node)!](node);\n        }\n\n        jscode += args[i+1] as string;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    //w_str(\"/* not implemented */\");\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js\";\nimport { id2name as id2typename } from \"@SBrython/sbry/types\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string|null,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n\n    const info = Types[typeID];\n\n    const inst_name  = info?.__qualname__ as string ?? info?.__name__ ?? \"\"\n    const klass_name = info?.__class__?.__qualname__ as string ?? info?.__class__?.__name__ ?? \"\"\n\n    const result_type = typeID === 0 ? null : `${inst_name}:${klass_name}`;\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __SBRY_MODE__ === \"dev\" && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __SBRY_MODE__ === \"dev\" && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __SBRY_MODE__ === \"dev\" ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __SBRY_MODE__ === \"dev\") set_py_code(dst, node);\n}"],"names":["convert","dst","node","context","setType","AST_CALL_ARG_KW","coffset","addFirstChild","convert_node","value","setResultType","resultType","VALUES","arg","ast2js","w_str","w_node","firstChild","idx","list","w_sns","nextSibling","_","nops","ops","nb_ops","length","Array","i","op","bname2pyname","constructor","$name","AST_OP_CMP","TYPEID_bool","cur","left","nbChildren","comparators","addSibling","last_id","AST_SYMBOL","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_STRUCT_DICT","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_RAISE","AST_KEY_IMPORT","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_OP_UNARY","AST_OP_BOOL","AST_OP_BIN","AST_OP_NOT","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN_ATTR","AST_OP_ASSIGN","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING","AST_LIT_FSTRING_FVAL","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_DEF_FCT","AST_DEF_METH","AST_DEF_ARGS","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","AST_CALL","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TRYBLOCK_CATCH","AST_CTRL_TERNARY","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CTRL_FOR_RANGE","AST_CTRL_FOR","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","result_type","TYPEID_NoneType","undefined","meta","parentTypeID","__call__","RETURN_TYPE","Py_object","Body","body","type","name","kname","Types","__name__","rchild","TYPEID_jsint","TYPEID_int","Number2Int","w_NL","BB","BE","klass","initBuiltinClass","TYPEID_type_bool_","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","keys","values","TYPEID_str","console","warn","LIST","require","targets","target","rtype","annotation","id","local_symbols","attrname","attrdef","TYPEID","TYPEID_type_jsint_","add_method","RET_JSINT","call","w_subs","addJSBinOps","OP_BIN_POW","OP_BIN_ADD","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","convert_other","OP_BIN_MUL","w_call","a","b","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_INT","builtins","alt","JS_NAME","asname","OP_BOOL_NOT","first","slice","test","cn","beg","end","obj","ARGS_INFO","generate","write_multi_jsop","names","module","return_type","opid2opmethod","p_prio","parentOPPrio","setParentOPPrio","l","opid2jsop","r","TYPEID_unknown","TYPEID_type","OP_CMP_EQ","OP_CMP_NEQ","TYPEID_NotImplemented","TYPEID_type_str_","RET_STR","other","other_type","TYPES","__class__","__str__","WRITE_CALL","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","TYPEID_None","elts","PythonError","Error","python_exception","super","_raw_err_","this","TYPEID_type_int_","TYPEID_float","__int__","RET_INT2INT","orelse","SBrython","register","exported","buildModule","jscode","ast","filename","Function","runJSCode","getModules","getModule","getASTFor","print","args","log","_r_","_sb_","execute","results","sbry_print","offset","bry","code","performance","now","sb","fct","t0","t1","times","executeSBrython","sbry","$B","imported","executeBrython","globalThis","__SBRY__","Py_Exception","fist","ifblock_cur","addProps","newProps","Object","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","curChar","CURRENT_PARAM_TYPE","POSONLY_END","JS","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","getSymbol","setFirstChild","readExpr","KNOWN_SYMBOLS","readToken","cond","setSibling","readBody","genericName","genericType","ret_type","SType_fct","__qualname__","default_call","STypeID","addSymbol","cur_builtin_idx","ret_name","imported_name","inherit","push","SInstID","SType_klass","SType_instance","assign","node_type","CURRENT_INDENTATION","consumeIndentedLines","readLine","createASTNode","readComment","indent","createCallUopNode","count","nextChar","astnode_type","token","symbol","fctType","next","isEndOfExpr","readOp","op_str","opsymbol2opid","colon_is_end","typeID","right","createCallOpNode","rop","rop_prio","lop","lop_prio","pyop_priorities","stack","py2ast","_code","import_offset","start","JS_stubs","indexOf","resetSymbols","nodes","ASTNODES","dop_reset","opnode","pyop_name","atype","method","TYPEID_NotImplementedType","OP_ASSIGN","opid2iopmethod","ltype","opid2ropmethod","use_parser","nb_files","_ast","jsobj2pyobj","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","nb_tokens","buildAST","__ast","convert_ast","generateSBrython","src","debug","future","future_features","symtable","_PySymtable_Build","js_from_root","js","generateBrython","id2name","operand","_context","Py_JSException","FAKE_RETURN_NODE","stype","createSubContext","convert_args","returns","fct_return_type","last_type","args_names","posonlyargs","args_pos","idx_end_pos","idx_vararg","has_kw","method_name","gen","instanceType","instanceTypeID","addType","func","attr","fct_type","keywords","keyword","OP_CMP_GT","OP_CMP_LT","OP_CMP_GE","OP_CMP_LE","jsop_priorities","OP_EQ2IS","float2str","f","str","toExponential","sign_idx","toString","includes","w_JSCmpOp","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","ILIST","buildPyCode","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","Context","symbols","createClassContext","ctx","assert","msg","iter","TYPEID_type_float_","genOpFct","RET_None","create_function","nbBuiltins","opname","lchild","type_obj","Symbol","to_write","writeOp","jop","reversed_operator","find_and_write_call","debug_print_exception","err","isV8","split","e","filter_stack","map","_line","_col","fct_name","pos","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","JSException","total_lines","nb_excluded_lines","resetResults","fill","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","URLSearchParams","location","test_name","get","merge","__SBRY_MODE__","DEFAULT_COMPAT","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","addEventListener","localStorage","setItem","oneTimeExec","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","select","defaultOpt","Option","toggleAttribute","append","codes","JSON","parse","trim","COMPAT","trimEnd","subtests","j","opts","fullcode","__SBRY_COMPAT__","textContent","classList","remove","error","message","add","generate_report","print_code","children","createElement","lineno","pycode","style","setProperty","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","stringify","child","html_child","prev_highlighted","highlight","gui_elem","print_ast","replaceChildren","print_python","print_js","tests","failed","configs","substats","stats","total","excluded","config","astnode2tree","async","fetch","text","lines","exclude","x","parseInt","loadSubTests","parts","t","excl","nbEmptyLines","nbExcluded","code_len","find","v","isArray","exc","labels","tformat","time","unit","toFixed","padStart","tdiff","c","A","B","report","nb_lines","nb_done","tcoef","NOCONVERT","RET_FLOAT","other_value","_op","vtype","qname","create","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","ArrayBuffer","maxByteLength","JS_CODE","NEXT_AST_NODE_ID","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","sibling","brython_node","BRY2SBRY","bname2jsop","handlers","write_arg","defval","write_posarg","TypeKlass","instance","jsname","Klass","RET_TYPE","write","buildJSCode","AST2JS","o","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","KW","kw","getKW","info","left_id","right_id","abs","n","weak_assign","key","instance_TypeID","method_wrapper","klass_type","inst_type","bases","stypeID","ADD_EQ","iop","prio","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","addSblng","pos_defaults","defaults","posonly","doffset","convert_arg","Number","POSITIVE_INFINITY","nb_pos_defaults","min","has_others","cut_off","kwonly","kw_defaults","kwargs","brython_name"],"sourceRoot":""}