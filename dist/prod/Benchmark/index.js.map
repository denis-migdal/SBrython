{"version":3,"file":"Benchmark/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/pages/Benchmark/index.html","webpack://sbrython/./src/sbry/ast2js/symbol.ts"],"sourcesContent":["const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n];\n\nimport ILIST from '.';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[AST_KEY_RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./list\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__[WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] += results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] += results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] += results. bry.times[offset+1];\n    results.sbry.times[offset] += results.sbry.times[offset+1];\n}","import { Context } from \"@SBrython/sbry/py2ast\";\n\nexport const AST_KEY_RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Fct<T extends any[] = unknown[]> = {\n    [AST_KEY_RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = {\n    __name__?: string,\n    __call__: Fct<T> & {\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_AST_KEY_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[AST_KEY_RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[AST_KEY_RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_AST_KEY_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            [AST_KEY_RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[AST_KEY_RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, AST_FCT_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type: Types[resultType(id)]?.__name__,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = AST_OP_ASSIGN;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = AST_OP_ASSIGN_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \".\";\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport { RET_INT, AST_KEY_RETURN_TYPE_FCT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { WRITE_CALL } from \"./types/utils/types\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n\n    console.warn({\n        type     : type(id),\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: AST_KEY_RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname];\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : TYPEID_type_int_,\n        str  : TYPEID_type_str_,\n        float: TYPEID_type_float_,\n        len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)) //TODO...\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/py2ast\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code += jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[AST_KEY_RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport type AST_KEY_RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code += jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry);\n     executeBrython(results.bry );\n\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value];\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[AST_KEY_RETURN_TYPE] === undefined )\n        meta[AST_KEY_RETURN_TYPE] = () => result_type;\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    \n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i];\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[AST_KEY_RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n\n    try {\n        execute(results);\n    } catch(e) {\n        console.warn(e);\n    }\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            if( subtests[j] === \"\")\n                continue;\n       \n            if( id === 5) { // || id > 121) {\n                //console.warn(\"ignored\", id);\n                continue;\n            }\n            \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { Context, convert_node, swapASTNodes } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[AST_KEY_RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]];\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[AST_KEY_RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/py2ast\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","export default [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","export default __webpack_public_path__ + \"Benchmark/index.html\";","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}"],"names":["LIST","require","ILIST","push","id2name","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","w_node","w_sns","convert","dst","context","name","func","id","fct_type","local_symbols","fct","Types","ret_type","__call__","AST_KEY_RETURN_TYPE","setType","AST_FCT_CALL","setResultType","coffset","addChild","args","length","keywords","convert_node","i","keyword","rchild","resultType","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Error","Function","runJSCode","getModules","getModule","getASTFor","_r_","_sb_","Object","assign","TYPE_str","__name__","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","RET_FLOAT","other","other_type","TYPEID_float","__int__","WRITE_CALL","other_value","type","AST_LIT_STR","Int2Number","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","undefined","kwargs","write_arg","isLast","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","generate","code","results","offset","bry","sbry","buildAST","generateSBrython","generateBrython","times","Symbol","FAKE_AST_KEY_RETURN_NODE","constructor","$name","rtype","stype","call","Context","parent_node_context","convert_args","annotation","returns","fct_return_type","last_type","Body","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","bname2pyname","AST_OP_ASSIGN_AUG","target","value","Py_object","TYPE_bool","RET_IJBF2BOOL","astnode2tree","result_type","buildJSCode","pycode","buildPyCode","children","from","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_INIT","start","line","JS_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","str","AST2JS","PY_CODE","convert_ast","dop_reset","createASTNode","ASTNODES","swapASTNodes","ao","ASTNODE_SIZE","bo","brython_node","BRY2SBRY","parent_context","RootContext","type_fct","int","TYPEID_type_int_","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","return_type","left","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","tcoef","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","AST_SYMBOL","AST_OP_ATTR","attr","TYPE_float","arg","RET_IJBF2FLOAT","_node","_op","genUnaryOps","src","beg","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","AST_KEY_IMPORT","names","module","idx","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","console","warn","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","TYPE_int","CONVERT_2INT","write_unary_jsop","_ast","nodes","PythonError","python_exception","super","_raw_err_","execute","executeSBrython","executeBrython","TYPEID_NoneType","float2str","f","toExponential","sign_idx","slice","toString","includes","typedesc","obj","bname2jsop","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","cn","elts","test","window","onerror","log","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","textContent","classList","remove","e","add","print_js","print_python","print_ast","print_code","map","createElement","lineno","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","filter","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","merge","tests","subtests","j","split","join","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","trim","nbEmptyLines","code_len","nbExcluded","l","find","v","isArray","asname","right","ltype","reversed_operator","bases","_context","orelse","debug_print_exception","err","sb","stack","isV8","filter_stack","_line","_col","fct_name","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","write_multi_jsop","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators"],"sourceRoot":""}