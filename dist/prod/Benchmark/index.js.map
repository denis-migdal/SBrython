{"version":3,"file":"Benchmark/index.js","mappings":"sLAMO,SAASA,EAAYC,EACAC,EACAC,EACAC,EAASC,GAGjC,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAIK,SAAUD,EAAG,CAEhC,MAAME,EAAKN,EAAII,IAEfG,EAAAA,EAAAA,IAAWR,EAAQS,EAAAA,GAAcF,GAAKL,GAAcQ,IAChDP,EAAOO,EAAMH,GAAII,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAWF,IAAO,GAEvD,CACJ,CAEO,SAASN,EAAUM,EAAeH,EAAWM,GAEhD,MACMC,GAASC,EAAAA,EAAAA,IAAaL,IAE5BM,EAAAA,EAAAA,IAAgBH,EAHD,IAKf,IAAII,EAAIC,EAAAA,GAAUX,GAASY,EAAI,GAE3BL,EAPW,KAQXG,EAAI,IAAIA,IAAKE,EAAI,MAGrBC,EAAAA,EAAAA,IAAMH,EAAGJ,EAAGM,EAChB,C,oEChCAE,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZ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AUjP,EAAY,IAEpC,IAAI,IAAI5R,EAAI,EAAGA,EAAIggB,EAAO/f,SAAUD,EAEhC0gB,GAAUV,EAAOhgB,GACHigB,EAAQO,EAAEtZ,MAAMlH,GAAK6gB,EAAO,KAC5B,KACAP,EAAME,EAAEtZ,MAAMlH,GAAIygB,EAAEvZ,MAAMlH,IAC1B,KACAigB,EAAQO,EAAEtZ,MAAMlH,GAAI,MACpB,KAKlB,OAAO0gB,CACX,C,wSCnEO,MAAM3L,EAAgB,EAChBC,EAAgB,EAChBF,EAAgB,EAChBG,EAAgB,EAChBC,EAAgB,EAChBjH,EAAgB,EAChBC,EAAgB,EAChBH,EAAgB,EAChBC,EAAgB,EAChBK,EAAgB,EAChBG,EAAgB,GAChBV,EAAgB,GAChBgG,EAAgB,GAChBF,EAAgB,GAChBF,EAAgB,GAChBC,EAAgB,GAChBI,EAAgB,GAChBF,EAAgB,GAChBiN,EAAgB,GAEhBrS,EAAgB,GAChB2G,EAAgB,GAMhB0J,EAAgB,GAKhBiC,EAAkB,CAC9B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,GAKYC,EAAkB,CAC9B,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GAGY5gB,EAAiB,CAC7B,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGY6gB,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYC,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGYrgB,EAAY,CACxB,IACA,IACA,IACA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","sources":["webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/pages/Benchmark/index.html","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/list.js?7e18","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/types/list.js?c7e6","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js?0373","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts"],"sourcesContent":["import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n// @ts-ignore\nglobalThis.int   = BigInt;\n// @ts-ignore\nglobalThis.float = Number;\n// @ts-ignore\nglobalThis.bool  = Boolean;\n// @ts-ignore\nglobalThis.str   = String;\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);\n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","export default __webpack_public_path__ + \"Benchmark/index.html\";","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS, OP_UNR_PLUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","export const TYPEID_unknown            = 0;\nexport const TYPEID_None               = 1;\nexport const TYPEID_NoneType           = 2;\nexport const TYPEID_NotImplemented     = 3;\nexport const TYPEID_NotImplementedType = 4;\nexport const TYPEID_int                = 5;\nexport const TYPEID_jsint              = 6;\nexport const TYPEID_float              = 7;\nexport const TYPEID_bool               = 8;\nexport const TYPEID_str                = 9;\nexport const TYPEID_type               =10;\nexport const TYPEID_type_int_          =11;\nexport const TYPEID_type_jsint_        =12;\nexport const TYPEID_type_float_        =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_type_bool_         =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ return this.constructor.${name}(this, ...args) }`);\n}","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = ! __DEBUG__;\nconst parser    = search.get(\"parser\") === \"false\" ? false : true;\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = [\n    'basic test suite',\n    'numbers',\n    //\"classes\" // ~726\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~616\n// list    ~345\n// dicts   ~205\n// sets    ~224\n// bytes   ~229\n\n// generators ~972...\n\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    if( __DEBUG__ ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )   // when does it occur ?\n            continue;\n        if( ctype.start.line === 0) {// unprinted node\n            subparts.length -= 2;\n            continue;\n        }\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n\n        if( val.__qualname__ !== undefined)\n            val = val.__qualname__;\n        else if( val.__name__ !== undefined)\n            val = val.__name__;\n        else if( val.name !== undefined)\n            val = val.name;\n        else\n            val = JSON.stringify(val);\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(const child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(const gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(const gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n\n    let failed = [];\n\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            const code = subtests[j];\n\n            if( code === \"\")\n                continue;\n       \n            if( merge ) {\n                const indented_code = code.split('\\n').map(e => `    ${e}`).join('\\n');\n                fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n            } else {\n                try {\n                    fullcode = code;\n                    generate(fullcode, results, parser);\n                    execute(results, sbry_print);\n                } catch(e) {\n                    error = e as Error;\n\n                    failed.push({\n                        code,\n                        error: e,\n                    })\n\n                    // print last error...\n                    try {\n                        const ast = astnode2tree();\n                        try {\n                            print_js( results.sbry.code, ast );\n                        } catch(e) { console.warn(e); }\n                        try {\n                            print_python( fullcode, ast );\n                        } catch(e) { console.warn(e); }\n                        try {\n                            print_ast( ast );\n                        } catch(e) { console.warn(e); }\n                    } catch(e) { console.warn(e); }\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n\n        if( error ) {\n\n            try {\n                const ast = astnode2tree();\n                try {\n                    print_js( results.sbry.code, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_python( fullcode, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_ast( ast );\n                } catch(e) { console.warn(e); }\n            } catch(e) { console.warn(e); }\n        }\n    }\n    \n    if(error) {\n\n        console.warn(failed);\n\n        python_input.value = failed[failed.length-1]?.code ?? results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('#').slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n        \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i) {\n            if( lines[i][0] === '#' ) {\n                if( lines[i].slice(1).trim() === '' ) // commented empty line\n                    ++nbEmptyLines;\n                else\n                    ++nbExcluded\n            }\n        }\n\n        let code_len = lines.length - 1 - nbEmptyLines;\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","export default {};","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","export default class Py_object {\n\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__DEBUG__) set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(id, cur.body);\n    }\n}","import Types, { TYPEID_None, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG, AST_CLASSDEF, AST_DEF_METH, AST_OP_ATTR } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport builtins, { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\nimport { printNode } from \"@SBrython/utils/print/printNode\";\nimport { w_sns, w_str } from \"./ast2js/utils\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = offset + code.slice(offset).search(END_OF_SYMBOL);\n\n    curChar = code.charCodeAt(end);\n\n    return code.slice(offset, offset = end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n    \n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => {\n        setType(id, AST_KEY_RETURN);\n        consumeSpaces();\n        if( curChar !== CHAR_NL)\n            setFirstChild(id, readExpr() );\n    },\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        let ret_type = TYPEID_None;\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return ret_type; //TODO...\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        const cur_builtin_idx = builtins.length;\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        curChar = code.charCodeAt(offset);\n\n        const body = readBody();\n        setSibling(args, body);\n\n        cur = firstChild(body);\n        while( nextSibling(cur) !== 0) {\n            cur = nextSibling(cur);\n        }\n\n        if( type(cur) === AST_KEY_RETURN && (cur = firstChild(cur)) !== 0)\n            ret_type = resultType(cur);\n\n        builtins.length = cur_builtin_idx;\n    },\n    \"class\": (id) => {\n\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const inherit: NODE_ID[] = []; //TODO...\n\n        if( curChar === CHAR_PARENTHESIS_LEFT) {\n            //TODO read args like call (?)\n            ++offset; // consume (\n            consumeSpaces();\n\n            // @ts-ignore\n            while( curChar !== CHAR_PARENTHESIS_RIGHT ) {\n\n                inherit.push( readToken() );\n\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset; // consume ,\n                    consumeSpaces();\n                }\n            }\n            ++offset; // consume )\n        }\n\n        ++offset; // \":\"\n        \n        const body = readBody();\n\n        let cur = body;\n        for(let i = 0; i < inherit.length; ++i) {\n            setSibling(cur, inherit[i]);\n            cur = inherit[i];\n        }\n\n        setType(id, AST_CLASSDEF);\n        setFirstChild(id, body); // too lazy to duplicate...\n\n        const STypeID = Types.length as TYPE_ID;\n        const SInstID = Types.length+1 as TYPE_ID;\n\n        const SType_klass: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => SInstID,\n                [WRITE_CALL]: (id: NODE_ID) => {\n                    w_str(\"new \");\n                    default_call(id);\n                },\n            }\n        }\n\n        const SType_instance = {};\n        for(let i = 0; i < inherit.length; ++i)\n            Object.assign(SType_instance, TYPES[resultType(inherit[i]) + 1]);\n\n        // @ts-ignore\n        SType_instance.__class__ = SType_klass;\n    \n        Types[STypeID] = SType_klass;\n        Types[SInstID] = SType_instance;\n\n\n        //TODO: refactor/fix...\n\n        cur = firstChild(body);\n        let node_type: NODE_TYPE;\n        do {\n\n            node_type = type(cur);\n\n            // not ideal : needs it BEFORE...\n            if( node_type === AST_DEF_FCT) {\n\n                // @ts-ignore\n                SType_instance[VALUES[cur]] = resultType(cur);\n\n                setType(cur, AST_DEF_METH);\n            }\n\n            //TODO: fix...\n            if( node_type === AST_OP_ASSIGN_INIT || node_type === AST_OP_ASSIGN) {\n\n                // @ts-ignore\n                SType_instance[VALUES[nextSibling(firstChild(cur))]] = resultType(cur);\n\n                setType(cur, AST_OP_ASSIGN);\n            }\n\n            cur = nextSibling(cur);\n\n        } while( cur !== 0);\n\n        addSymbol(name, STypeID);\n\n        //TODO: inherit...\n\n        //TODO: SType...\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __DEBUG__ ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr();\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== end);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_DOT) { // get attr...\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_OP_ATTR);\n                setFirstChild(node, cur);\n\n                ++offset;\n\n                const name = VALUES[node] = nextSymbol(); //TODO: continue...\n\n                // @ts-ignore\n                setResultType(node, TYPES[resultType(cur)][name]);\n            }\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n\n                if( __DEBUG__ && fctType === undefined) {\n                    console.warn( VALUES[node], resultType(cur), Types[resultType(cur)]);\n                    throw \"nok\";\n                }\n\n                //TODO: return type...\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\nlet nbTypes: number;\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    // h4ck\n    // @ts-ignore\n    if( nbTypes === undefined)\n        nbTypes = TYPES.length;\n\n    TYPES.length = nbTypes;\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __DEBUG__ ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __DEBUG__ && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js\";\nimport { id2name as id2typename } from \"@SBrython/sbry/types\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string|null,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n\n    const info = Types[typeID];\n\n    const inst_name  = info?.__qualname__ as string ?? info?.__name__ ?? \"\"\n    const klass_name = info?.__class__?.__qualname__ as string ?? info?.__class__?.__name__ ?? \"\"\n\n    const result_type = typeID === 0 ? null : `${inst_name}:${klass_name}`;\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"unknown\",\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","// @ts-nocheck\n\nimport dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, TYPE_ID, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, TYPE_ID> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, TYPE_ID>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__DEBUG__)\n        w_str(`/*${VALUES[node]} */`);\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}"],"names":["addJSUnrOps","target","ops","return_type","w_call","w_JSUnrOp","i","length","op","add_method","opid2opmethod","node","nextSibling","firstChild","a","p_prio","parentOPPrio","setParentOPPrio","l","opid2jsop","r","w_sns","LIST","require","id2name","ast2js","BB","cur","w_NL","w_node","BE","convert_node","id","brython_node","context","name","constructor","$name","convert","BRY2SBRY","w_str","value","VALUES","undefined","dst","setType","AST_LIT_FSTRING","setResultType","TYPEID_str","values","nbChildren","addFirstChild","addSibling","console","warn","coffset","__call__","WRITE_CALL","AST_KEY_IMPORT_ALIAS","asname","AST_CTRL_WHILE","test","body","Body","abs","n","_context","AST_KEY_PASS","jscode","ast","filename","buildJSCode","offset","start","line","JS_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","str","AST2JS","type","args","globalThis","int","BigInt","float","Number","bool","Boolean","String","SBrython","browser","buildModule","this","Error","Function","runJSCode","getModules","getModule","getASTFor","print","log","_r_","_sb_","execute","results","sbry_print","bry","code","beg","performance","now","sb","fct","t0","t1","times","executeSBrython","sbry","$B","imported","executeBrython","w_subs","call","to_write","fist","AST_KEY_ASSERT","_","write_arg","defval","resultType","TYPEID_jsint","Number2Int","write_posarg","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_KEY_BREAK","initBuiltinClass","TYPEID_unknown","rchild","lchild","AST_OP_ASSIGN_INIT","TYPEID_int","assert","cond","nops","nb_ops","Array","bname2pyname","AST_OP_CMP","TYPEID_bool","left","comparators","NOCONVERT","CONVERT_INT2FLOAT","Int2Number","CONVERT_2INT","TYPEID_float","AST_LIT_INT","a_value","ltype","rtype","idx","createASTNode","AST_2NUMBER","setFirstChild","AST_2BIGINT","writeOp","count","right","jop","w_JSBinOp","TYPEID_NotImplementedType","method","Types","RETURN_TYPE","reversed_operator","find_and_write_call","Py_Exception","Py_object","debug_print_exception","err","stack","isV8","split","filter","e","includes","filter_stack","map","_line","_col","slice","fct_name","pos","indexOf","nodes","AST_SYMBOL","parse_stack","_raw_err_","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","PythonError","python_exception","JSException","klass","TYPEID_type_float_","RET_FLOAT","other","other_type","TYPES","__int__","AST_LIT_STR","other_value","RET_STR","addJSBinOps","OP_BIN_POW","OP_BIN_MUL","OP_BIN_DIV","OP_BIN_ADD","OP_BIN_SUB","RET_IJBF2FLOAT","convert_other","OP_BIN_FDIV","_op","b","OP_BIN_MOD","OP_UNR_MINUS","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","vtype","qname","AST_LIT_TRUE","AST_LIT_FALSE","__class__","__qualname__","AST_LIT_FLOAT","toString","AST_LIT_NONE","TYPEID_NoneType","AST_STRUCT_TUPLE","elts","AST_LIT_FSTRING_FVAL","last_id","AST_STRUCT_LIST","AST_STRUCT_DICT","AST_KEY_RETURN","AST_KEY_RAISE","AST_KEY_IMPORT","AST_KEY_CONTINUE","AST_OP_OP","AST_OP_UNARY","AST_OP_BOOL","AST_OP_BIN","AST_OP_NOT","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_ATTR","AST_OP_ASSIGN","AST_DEF_FCT","AST_DEF_METH","AST_DEF_ARGS","AST_DEF_ARG_KWARGS","AST_CALL","AST_CALL_ARG_KW","AST_CTRL_TRYBLOCK","AST_CTRL_TRYBLOCK_CATCH","AST_CTRL_TERNARY","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CTRL_FOR_RANGE","AST_CTRL_FOR","AST_CLASSDEF","AST_BODY","AST_COMMENT","nb_tokens","total_lines","nb_excluded_lines","nb_files","resetResults","fill","ARRAY_TYPE","Float64Array","CODE_BEG","CODE_END","PY_CODE","ArrayBuffer","maxByteLength","NEXT_AST_NODE_ID","ASTNODES","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","setSibling","sibling","write_multi_jsop","list","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_LT","OP_CMP_LE","OP_CMP_GT","OP_CMP_GE","w_JSCmpOp","OP_EQ2IS","RET_None","o","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","RET_INT","RET_JSINT","first","TYPEID_type_int_","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","convert_self","OP_BIT_NOT","TYPEID_None","TYPEID_NotImplemented","TYPEID_type","TYPEID_type_jsint_","TYPEID_type_str_","TYPEID_type_bool_","Object","create","targets","result_type","annotation","local_symbols","parentTypeID","attrname","attrdef","TYPEID","cn","obj","__name__","ARGS_INFO","generate","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","search","URLSearchParams","location","test_name","get","merge","parser","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","oneTimeExec","fullcode","textContent","classList","remove","trim","error","message","add","generate_report","print_code","_ast","children","createElement","lineno","pycode","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","push","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","JSON","stringify","child","html_child","startTests","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","print_ast","replaceChildren","print_python","print_js","tests","failed","subtests","substats","j","stats","total","excluded","astnode2tree","async","fetch","text","fromEntries","lines","exclude","x","parseInt","names","loadSubTests","parts","t","excl","nbEmptyLines","nbExcluded","code_len","find","v","isArray","meta","default_call","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","mix","base","extensions","Mix","prototype","builtins","alt","JS_NAME","KW","kw","keywords","getKW","OP_BOOL_NOT","Py_JSException","module","genOpFct","create_function","nbBuiltins","resetSymbols","addSymbol","getSymbol","opname","TypeKlass","instance","jsname","Klass","RET_TYPE","write","kname","arg","labels","tformat","time","unit","toFixed","padStart","tdiff","c","A","B","report","nb_lines","nb_done","tcoef","OP_ASSIGN","pyop_priorities","jsop_priorities","opid2ropmethod","opid2iopmethod","opsymbol2opid","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","ifblock_cur","orelse","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","curChar","CURRENT_PARAM_TYPE","POSONLY_END","consumeEmptyLines","charCodeAt","nextSymbol","nextArg","consumeSpaces","readArg","readExpr","KNOWN_SYMBOLS","readToken","readBody","ret_type","SType_fct","STypeID","cur_builtin_idx","inherit","SInstID","SType_klass","SType_instance","assign","node_type","nbTypes","CURRENT_INDENTATION","consumeIndentedLines","readLine","readComment","indent","createCallUopNode","nextChar","astnode_type","token","symbol","fctType","next","isEndOfExpr","readOp","op_str","createCallOpNode","rop","rop_prio","lop","lop_prio","py2ast","_code","opnode","pyop_name","atype","use_parser","Parser","_PyPegen","run_parser","tokens","tokenizer","buildAST","__ast","convert_ast","generateSBrython","src","future","future_features","symtable","_PySymtable_Build","js_from_root","js","generateBrython","keys","typeID","info","buildPyCode","FAKE_RETURN_NODE","stype","createSubContext","convert_args","returns","fct_return_type","last_type","args_names","posonlyargs","args_pos","idx_end_pos","idx_vararg","has_kw","method_name","gen","instanceType","instanceTypeID","addType","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","addSblng","pos_defaults","defaults","posonly","doffset","convert_arg","POSITIVE_INFINITY","nb_pos_defaults","min","has_others","cut_off","kwonly","kw_defaults","kwargs","brython_name","bname2jsop","Symbol","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","ILIST","Context","symbols","createClassContext","ctx","iter","func","attr","fct_type","__str__","ADD_EQ","iop","prio","float2str","f","toExponential","sign_idx","left_id","right_id","weak_assign","key","instance_TypeID","method_wrapper","klass_type","inst_type","bases","stypeID","operand","type_obj","exc","handlers","super"],"sourceRoot":""}