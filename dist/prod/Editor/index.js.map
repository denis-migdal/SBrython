{"version":3,"file":"Editor/index.js","mappings":"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","sources":["webpack://sbrython/./src/types/type[int].ts","webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/types/str.ts","webpack://sbrython/./src/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/structs/operators/compare.ts","webpack://sbrython/./src/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/structs/operators/binary.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/types/utils/addType.ts","webpack://sbrython/./src/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/bry2sbry/ClassDef.ts","webpack://sbrython/./src/types/jsint.ts","webpack://sbrython/./src/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/bry2sbry/Body.ts","webpack://sbrython/./src/types/type[str].ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/types/utils/types.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/List.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/types/bool.ts","webpack://sbrython/./src/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/core_modules/to_number/ast2js.ts","webpack://sbrython/./src/types/bases.ts","webpack://sbrython/./src/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/types/NoneType.ts","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/bry2sbry/Constant.ts","webpack://sbrython/./src/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/types/type[float].ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/core_modules/to_bigint/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/bry2sbry/list.ts","webpack://sbrython/./src/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/structs/operators/id.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/types/list.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/bry2sbry/functions/Args.ts","webpack://sbrython/./src/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/bry2sbry/Name.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/bry2sbry/import/alias.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/structs/operators/unary.ts","webpack://sbrython/./src/types/index.js","webpack://sbrython/./src/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/types/utils/methods.ts","webpack://sbrython/./src/types/int.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/bry2sbry/functions/Call.ts","webpack://sbrython/./src/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/bry2sbry/import/Import.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/types/NotImplementedType.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/types/float.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts"],"sourcesContent":["import { RET_INT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns } from \"@SBrython/ast2js\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL](node, other);\n        })\n    }\n);","import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_NoneType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`throw new _b_.PythonError(${firstChild(node)})`;\n}","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import dop_reset, {ASTNODE_RESULT_TYPE, ASTNODE_SIZE, ASTNODE_TYPE_ID, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"./types/utils/types\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n\n    console.warn({\n        type     : type(id),\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname];\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : TYPEID_type_int_,\n        str  : TYPEID_type_str_,\n        float: TYPEID_type_float_,\n        len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)) //TODO...\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w( firstChild(node) );\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] += results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] += results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] += results. bry.times[offset+1];\n    results.sbry.times[offset] += results.sbry.times[offset+1];\n}","import { w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"${\", firstChild(node), \"}\")\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"continue\");\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${VALUES[node]}`);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { parentOPPrio, setParentOPPrio, type, VALUES } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { write_unary_jsop } from \"./unary\";\nimport { AST2JS } from \"@SBrython/core_modules/lists\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"@SBrython/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { buildJSCode } from \"@SBrython/ast2js\";\nimport { buildPyCode } from \"@SBrython/py2ast\";\n\nimport Types from \"@SBrython/types/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type: ''+type(id), // TODO convert\n        result_type: Types[resultType(id)]?.__name__,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    let result = r`${first}`;\n    for(let i = 1; i < nbChildren; ++i)\n        result = r`${result} && ${first + i}`; //TODO: better...\n\n    if( p_prio < prio )\n        result = r`(${result})`;\n\n    return result;\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    wt`for(var ${idx} of ${list}){${body}${NL}}`;\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { addType } from \"@SBrython/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_b_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nimport Types from \"@SBrython/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value];\n\n    method[WRITE_CALL]!(node, left);\n}","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n}","import { RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport Types from \"./list\";\nimport { w_node } from \"@SBrython/ast2js\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__[WRITE_CALL](node, other);\n        })\n    }\n);","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { OPERATORS__EQ, OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = OPERATORS__EQ;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = OPERATORS__EQ_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { Context } from \"@SBrython/py2ast\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Fct<T extends any[] = unknown[]> = {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = {\n    __name__?: string,\n    __call__: Fct<T> & {\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\nimport { multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    wr( multi_jsop(node, VALUES[node]) );\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return wt`_b_.assert(${firstChild(node)})`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, type, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    wt`function ${name}(${coffset}){${coffset+1}${NL}}`;\n}","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}","import { r, w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === FUNCTIONS_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code += jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    wt`${coffset}[${coffset+1}]`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w(\"break\");\n}","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"/* not implemented */\");\n}","import { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","export default __webpack_public_path__ + \"Editor/index.html\";","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\ntype Printable = {toString(): string};\n\nlet indent = \"    \";\nlet cur_indent_level = 0;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport const NL = {\n    toString: function() {\n\n        if( __DEBUG__ ) {\n            ++CURSOR[CODE_LINE];\n            CURSOR[CODE_COL] = jscode.length + 1;\n\n            return \"\\n\" + indents![cur_indent_level];\n        } else {\n            return \"\\n\";\n        }\n    }\n}\nexport const BB = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents![++cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\nexport const BE = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents![--cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\n\n// =======================================================================\n\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}\n\n// =======================================================================\n\n// transforms into a template string\nexport function r(...args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    return args;\n}\n\n// write a template string\nexport function wr(args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    if( typeof args === \"string\")\n        return w(args);\n    return wt(...args);\n}\n\n\n// write with template string wt``\nexport function wt(str: TemplateStringsArray, ...args: (Printable|number)[]) {\n    \n    for(let i = 0; i < args.length; ++i) {\n        jscode += str[i];\n        w(args[i]);\n    }\n\n    jscode += str[args.length];\n}\n\n// generic write ?\nexport function w(...args: (Printable|number)[]) {\n\n    for(let i = 0; i < args.length; ++i) {\n\n        let arg = args[i];\n\n        if( Array.isArray(arg) ) { // likely a r``\n            wr(arg as Parameters<typeof wr>[0]);\n            continue;\n        }\n\n        if( typeof arg !== \"number\" ) {\n\n            if( arg === undefined )\n                arg = \"undefined\";\n            if( arg === null )\n                arg = \"null\";\n\n            jscode += arg.toString();\n            continue;\n        }\n\n        const offset = 4*arg;\n        if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n        AST2JS[type(arg)!](arg);\n        if( __DEBUG__ ) set_js_cursor(offset + CODE_END)\n    }\n}\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { LITERALS_BOOL, LITERALS_FLOAT, LITERALS_INT, LITERALS_NONE, LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, LITERALS_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, LITERALS_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, LITERALS_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, LITERALS_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, LITERALS_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { Context, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { default_call } from \"@SBrython/core_modules/functions/call/ast2js\";\nimport { convert_args } from \"./Args\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport Body from \"@SBrython/bry2sbry/Body\";\n\nimport Types from \"@SBrython/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import {py2ast, convert_ast} from \"@SBrython/py2ast\";\nimport {ast2js} from \"@SBrython/ast2js\";\nimport {SBrython, _b_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code += jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { LITERALS_INT, TO_BIGINT, TO_NUMBER } from \"@SBrython/core_modules/lists\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, TO_NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, TO_BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry);\n     executeBrython(results.bry );\n\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { RET_FLOAT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { set_js_cursor, w } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    w(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w(\"`\");\n}","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    \n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`while(${coffset}){${coffset+1}${NL}}}`;\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { wt } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`'${VALUES[node]}'`;\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        wt`${coffset}: ${coffset+1}`;\n\n    for(let i = 2; i < nbChildren; i+=2)\n        wt`, ${i+coffset}: ${i+1+coffset}`;\n\n    w('}');\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n\n    try {\n        execute(results);\n    } catch(e) {\n        console.warn(e);\n    }\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            if( subtests[j] === \"\")\n                continue;\n       \n            if( id === 5) { // || id > 121) {\n                //console.warn(\"ignored\", id);\n                continue;\n            }\n            \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._b_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","export default class Py_object {\n\n}","import { w_node } from \"@SBrython/ast2js\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1)\n        return wt`{${coffset}${NL}}`;\n\n    wt`if(${coffset+1}){${coffset}${NL}}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w(value[0])\n\n    if( value[1] !== undefined)\n        w(\": \", value[1]);\n}","export default [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`${firstChild(node)}.${VALUES[node]}`;\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    w(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_FOR, CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, CONTROLFLOWS_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    wt`if(${coffset++}){${coffset++}${NL}}`;\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        wt`else if(${coffset++}){${coffset++}${NL}}`;\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        wt`else {${coffset}${NL}}`;\n}","import { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n\n    if( Number.isNaN( Number(value) ) ) {\n        console.warn(value);\n        throw new Error(\"??\");\n    }\n\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._b_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"null\");\n}","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let beg : string|number|any  = \"0n\";\n    let incr: string|number|any  = \"1n\";\n\n    let end = Number2Int(body+1);\n\n    if( nbChildren > 2) {\n        beg = end;\n        end = Number2Int(body+1);\n    }\n\n    if( nbChildren === 4)\n        incr = Number2Int(body+2);\n\n    //TODO...\n    return wt`for(var ${idx} = ${beg}; ${idx} < ${end}; ${idx} += ${incr}){${body}${NL}}`;\n}","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { BB, BE, NL, w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    wt`try {${coffset}${NL}}`;\n    wt`catch(_raw_err_){${BB}${NL}`;\n\n        w(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i)\n            w(NL, \"else \", i + coffset );\n\n        // not a catch all...\n        if( nbChild(coffset + nbChildren-1) !== 1)\n            w(NL, \"else { throw _raw_err_ }\");\n\n    w(BE, NL);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`(${coffset} ? ${coffset+1} : ${coffset+2})`;\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { write_id_jsop } from \"@SBrython/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_b_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { BB, BE, NL, w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(BB);\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i)\n        w(NL, i);\n\n    w(BE);\n}","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport Types from \"@SBrython/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import      AST2JS_0 from \"./symbol/ast2js\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\nimport      AST2JS_41 from \"./to_bigint/ast2js\";\nimport      AST2JS_42 from \"./to_number/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nexport const TO_BIGINT = 41;\nexport const TO_NUMBER = 42;\n\nimport type {T_AST2JS} from './'\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n\tAST2JS_41,\n\tAST2JS_42,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let base: string|number = \"_r_.object\";\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    if( nbChildren === 2)\n        base = body+1;\n\n    wt`class ${VALUES[node]} extends ${base} {${body}${NL}}`;\n}","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${value}`);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_b_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_b_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_b_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]];\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        if( i !== 0)\n            w(\", \");\n        w(i + coffset);\n    }\n\n    w('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w(\"__SBRYTHON__.getModules()\");\n    else\n        wt`__SBRYTHON__.getModule(\"${value}\")`;\n}"],"names":["Object","assign","TYPE_type_int_","__name__","__call__","method_wrapper","RET_INT","node","other","firstChild","other_type","resultType","TYPEID_int","w_node","TYPEID_jsint","Number2Int","TYPEID_float","w_sns","TYPEID_str","otype","Types","undefined","__int__","Error","WRITE_CALL","Py_Exception","Py_object","TYPE_str","__class__","TYPE_type_str_","__len__","w_str","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","t","convert","dst","context","setType","KEYWORDS_ASSERT","coffset","addChild","convert_node","test","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","result_type","TYPEID_NoneType","value","RETURN","setResultType","meta","parent_node_context","RETURN_TYPE","ast2js","wt","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","name","getASTFor","_r_","_b_","nops","nb_ops","length","Array","i","bname2pyname","constructor","$name","VALUES","OPERATORS_COMPARE","TYPEID_bool","nbChildren","comparators","left","buildPyCode","id","offset","start","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","set_py_code","brython_node","lineno","col_offset","end_lineno","end_col_offset","set_py_code_from_list","beg","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","CODE_LINE","CODE_COL","convert_ast","dop_reset","createASTNode","Body","body","Context","ASTNODES","swapASTNodes","ao","ASTNODE_SIZE","bo","ap","bp","BRY2SBRY","console","warn","log","type","parent_context","RootContext","local_symbols","type_fct","int","TYPEID_type_int_","str","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","call","w","generate","code","results","bry","sbry","buildAST","generateSBrython","generateBrython","times","OPERATORS_UNARY","operand","TYPEID_NotImplementedType","method","Py_JSException","pyop","other_value","write_unary_jsop","prio","JSOperatorsPrio","p_prio","parentOPPrio","setParentOPPrio","l","r","floordiv_float","Math","floor","floordiv_int","mod_float","mod","mod_int","nbChild","OPERATORS_ATTR","attr","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","set_js_cursor","CODE_BEG","type_id","FUNCTIONS_ARGS_VARG","FUNCTIONS_ARGS_KWARG","defval","CODE_END","astnode2tree","buildJSCode","pycode","children","from","_","BinaryOperators","AssignOperators","JSOperators","JSOperatorsPriority","priority","reversed_operator","multi_jsop","first","idx","list","NL","typedesc","obj","create","STRUCTS_TUPLE","elts","bases","CLASS_CLASSDEF","TYPE_jsint","RET_IJ2INT","CONVERT_2INT","Int2Number","RET_IJBF2FLOAT","RET_JSINT2JSINT","genUnaryOps","RET_JSINT","RET_IJBF2BOOL","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","BODY","cn","RET_STR","__str__","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","tcoef","targets","target","OPERATORS__EQ","OPERATORS__EQ_INIT","rtype","annotation","Symbol","rchild","STRUCTS_LIST","wr","CONTROLFLOWS_WHILE","KEYWORDS_CONTINUE","default_call","nb_call_args","call_args_offset","nb_pos_call","FUNCTIONS_CALL_KEYWORD","max_pos","vararg_array","has_kw","cutoff","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","args_names","args_pos","arg","key","float2str","f","toExponential","sign_idx","slice","toString","includes","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","debug_print_exception","err","sb","stack","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","indexOf","nodes","SYMBOL","parse_stack","_raw_err_","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SBRYTHON__","_err_","PythonError","python_exception","JSException","TYPE_bool","CONTROLFLOWS_TRYBLOCK_CATCH","KEYWORDS_BREAK","OPERATORS__BRACKETS","TYPE_type_float_","TYPE_int","TYPE_float","TYPE_NotImplementedType","TYPE_NoneType","LITERALS_F_STRING","values","OPERATORS_BINARY","right","ltype","CURSOR","ARRAY_TYPE","JS_CODE","indent","cur_indent_level","indents","BB","BE","AST2JS","args","isArray","_context","vtype","qname","LITERALS_BOOL","LITERALS_STR","__qualname__","LITERALS_FLOAT","LITERALS_NONE","LITERALS_INT","stype","convert_args","returns","fct_return_type","last_type","fake_node","push","SType_fct","posonlyargs","STypeID","FUNCTIONS_DEF","find_and_write_call","jsop","_ast","a_value","TO_NUMBER","setFirstChild","TO_BIGINT","execute","executeSBrython","executeBrython","RET_FLOAT","LITERALS_F_STRING_FORMATTEDVALUE","STRUCTS_DICT","keys","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","RET_INT2INT","super","bname2jsop","OPERATORS_BOOLEAN","RUNTIME_0","RUNTIME_1","RUNTIME_2","handlers","CONTROLFLOWS_TRYBLOCK","ExceptHandler","window","onerror","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","textContent","classList","remove","add","print_js","print_python","print_ast","print_code","createElement","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","merge","tests","subtests","j","async","fetch","text","fromEntries","lines","exclude","x","parseInt","names","loadSubTests","trim","nbEmptyLines","code_len","nbExcluded","find","v","Name","require","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","KEYWORDS_RAISE","exc","write_id_jsop","assert","cond","iter","func","CONTROLFLOWS_FOR","CONTROLFLOWS_FOR_RANGE","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","CONTROLFLOWS_TERNARY","Float64Array","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","isNaN","fct","KEYWORDS_IMPORT_ALIAS","asname","incr","OPERATORS_ASSIGNOP","rop","RET_TYPE","write","fct_type","ret_type","FUNCTIONS_CALL","keywords","KEYWORDS_IMPORT","module","PASS","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","AST2JS_41","AST2JS_42","RUNTIME","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","base","_node","_op"],"sourceRoot":""}