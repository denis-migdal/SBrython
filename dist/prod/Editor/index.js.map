{"version":3,"file":"Editor/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/types/type[bool].ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/fct/def_meth.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/ast2js/ids.js","webpack://sbrython/./src/sbry/ast2js/index.ts"],"sourcesContent":["import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"str\",\n        [JS_NAME]: \"String\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = nextSibling(firstChild(node));\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_int } from \".\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { write_id_jsop } from \"../structs/operators/id\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __class__: TYPE_type_int_,\n        __abs__: {\n            __call__: method_wrapper(RET_JSINT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: NODE_ID, self: NODE_ID, op, other: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: NODE_ID, self: NODE_ID, op, other: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[] = unknown[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg: NODE_ID) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self: NODE_ID) => {\n            write_id_jsop(node, self);\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_sns(\"_sb_.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_type_bool_\t= Object.create(null);\nexport const TYPE_type\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\n","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            coffset = addSibling(coffset);\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        coffset = addSibling(coffset);\n        convert_node(coffset, cur.test, context);\n        coffset = addSibling(coffset);\n        Body(coffset, cur.body, context);\n\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n    }\n}","export default class Py_object {\n\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: NODE_ID, a: NODE_ID, op: string, b: NODE_ID, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: NODE_ID, self: NODE_ID, o: NODE_ID, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: NODE_ID, op: string, a: NODE_ID) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: NODE_ID, self: NODE_ID) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: NODE_ID, op: string, a: NODE_ID) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool, TYPE_type_bool_ } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __class__: TYPE_type_bool_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: NODE_ID) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    //TODO: opti...\n    let nb_call_args = 0;\n    let cur = coffset;\n    while( (cur = nextSibling(cur)) !== 0) ++nb_call_args;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n\n    cur = coffset;\n    for(let i = 0; i < nb_call_args; ++i) {\n        cur = nextSibling(cur);\n\n        if( type(cur) === AST_FCT_CALL_KEYWORD ) {\n            nb_pos_call = i;\n            break;\n        }\n    }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    cur = coffset;\n    for(let i = 0; i < cutoff; ++i) {\n        cur = nextSibling(cur);\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, NODE_ID> = {};\n    const kwargs: Record<string, NODE_ID> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            cur = nextSibling(cur);\n            w_node(cur);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                cur = nextSibling(cur);\n                w_node(cur);\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i) {\n            cur = nextSibling(cur);\n            kw[ args_names[i-1] ] = cur;\n        }\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        cur = nextSibling(cur);\n        const name = VALUES[cur];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = cur;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = cur;\n        else {\n            kwargs[name] = cur;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { TYPE_type, TYPE_type_bool_ } from \"./bases\";\nimport { JS_NAME } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_bool_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"bool\",\n        [JS_NAME]: \"Boolean\",\n    }\n);","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    // if\n    w_sns(\"if(\", cur, \"){\", cur = nextSibling(cur), \"}\");\n    cur = nextSibling(cur);\n\n    // else if\n    while(cur !== 0) {\n\n        let cond: NODE_ID = cur;\n        cur = nextSibling(cur);\n\n        if( cur !== 0)\n            w_sns(\"else if(\", cond, \"){\", cur, \"}\");\n        else\n            w_sns(\"else {\", cond, \"}\");\n\n        cur = nextSibling(cur);\n    }   \n}","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n    let result_type = `${typeID}:`;\n    const t   = Types[typeID];\n    result_type += t.__name__ ?? \"\";\n    result_type += \":\";\n    result_type += t.__class__?.__name__ ?? \"\";\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    //TODO...\n\n    let cur    = firstChild(node);\n    let nbChildren = 0;\n    while(cur !== 0) {\n        ++nbChildren;\n        cur = nextSibling(cur);\n    }\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n\n    cur    = firstChild(node);\n\n    let count = 0;\n    while(cur !== 0) {\n\n        //TODO...\n        if( kw_start === count)\n            w_str(\"{\");\n\n        ++count;\n\n        write_arg(cur);\n\n        w_str(\", \");\n        \n        cur = nextSibling(cur);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: NODE_ID) {\n    \n    const offset = 4*(node as number);\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( nextSibling(node) === 0 )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","export default __webpack_public_path__ + \"Editor/index.html\";","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    w_str(\"var \");\n\n    let rchild    = firstChild(node);\n\n    let cur = nextSibling(rchild);\n\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: NODE_ID, a: NODE_ID) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __class__: TYPE_type_str_,\n        __len__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_node( nextSibling(firstChild(node)) );\n                w_str(\".length\");\n            })\n        }\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, number>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n\trequire(\"./type[bool]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[NODE_ID]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"int\",\n        [JS_NAME]: \"BigInt\",\n        __call__: method_wrapper(RET_INT, (node: NODE_ID) => {\n\n            const other = nextSibling(firstChild(node));\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild = firstChild(node);\n    \n    let cur = nextSibling(rchild);\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_node( firstChild(node) );\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg: NODE_ID) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_FLOAT, (node) => {\n                w_sns(\"Math.abs(\", nextSibling(firstChild(node)), \")\");\n            })\n        },\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { AST_OP_BIN } from \"@SBrython/sbry/ast2js\";\n\nexport const opsymbol2opid = {\n    \"+\": AST_OP_BIN //TODO: 1 per op...\n}","import Types from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IFBLOCK, AST_FCT_DEF, AST_FCT_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT } from \"./ast2js\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, NODE_ID, PY_CODE, setFirstChild, setResultType, setSibling, setType, VALUES } from \"./dop\"\nimport { AST, printNode } from \"./py2ast\"\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/fct/call\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types\";\nimport { opsymbol2opid } from \"./structs/operators\";\nimport { TYPEID_str } from \"./types\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_DOT   = 46;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction currentChar() {\n    return code.charCodeAt(offset);\n}\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL)\n            return true;\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n\n    if(__DEBUG__ && code.charCodeAt(offset+end) === CHAR_NL) {\n        ++CURSOR[0];\n        CURSOR[1] = offset + end + 1;\n    }\n\n    return code.slice(offset, offset += end );\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>boolean> = {\n    // for op tests\n    \"1\"    :    (id) => {\n        setType(id, AST_LIT_FLOAT);\n        setResultType(id, TYPEID_float);\n        VALUES[id] = 1;\n\n        return false;\n    },\n    \"True\" :    (id) => { setType(id, AST_LIT_TRUE)    ; return false; },\n    \"False\":    (id) => { setType(id, AST_LIT_FALSE)   ; return false; },\n    \"None\" :    (id) => { setType(id, AST_LIT_NONE)    ; return false; },\n    \"break\":    (id) => { setType(id, AST_KEY_BREAK)   ; return true; },\n    \"continue\": (id) => { setType(id, AST_KEY_CONTINUE); return true; },\n    \"pass\":     (id) => { setType(id, AST_KEY_PASS)    ; return true; },\n    \"return\":   (id) => { setType(id, AST_KEY_RETURN)  ; return true; },\n    \"assert\": (id) => {\n        setType(id, AST_KEY_ASSERT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        setFirstChild(id, readExpr() );\n        ++offset; // this is a \\n\n\n        return true;\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n\n        return true;\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IFBLOCK);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n\n        return true;\n    },\n    \"def\": (id) => {\n\n        setType(id, AST_FCT_DEF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        //TODO: need STypeFct... (fuck)\n        VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_FCT_DEF_ARGS);\n\n        /****/\n        const SType_fct: Callable = {\n            __name__: \"function\",\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    //generate(dst, node, context); // should be the new context\n                    return SType_fct.__call__[RETURN_TYPE]();\n                },\n                [WRITE_CALL]: default_call,\n                [ARGS_INFO]: {\n                    //TODO...\n                    args_names     : [],//new Array(node.args.args.length+node.args.posonlyargs.length),\n                    args_pos       : {},\n                    idx_end_pos    : 0,\n                    idx_vararg     : 0,\n                    has_kw         : false,\n                    generate: null as any,\n                }\n            }\n        }\n    \n        const STypeID = Types.length;\n        Types[STypeID] = SType_fct;\n\n        setResultType(id, STypeID);\n\n        VALUES[args] = SType_fct; //TODO ?\n        /****/\n\n        offset += 3; //TODO: read args + ()\n\n        setSibling(args, readBody() );\n\n        return true;\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    let beg = offset;\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        while( curChar === CHAR_SPACE ) {\n            ++offset;\n            curChar = code.charCodeAt(offset);\n        }\n\n        if(curChar !== CHAR_NL) {\n            CURRENT_INDENTATION = beg - offset;\n            return;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n        beg = offset;\n    }\n\n    --offset;\n    CURRENT_INDENTATION = 0;\n    if(__DEBUG__) CURSOR[1] = offset;\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines();\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readExpr() );\n\n    consumeIndentedLines();\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readExpr() );\n        consumeIndentedLines();\n    }\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readExpr() {\n\n    let left = createASTNode();\n    let op_node = left;\n\n    if( __DEBUG__ ) set_py_code_beg(left); //TODO : for op node too... (copy)\n\n    if( curChar === CHAR_QUOTE ) {\n        // consume str\n        setType(left, AST_LIT_STR);\n        setResultType(left, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== CHAR_QUOTE);\n\n        ++offset;\n\n        VALUES[left] = code.slice(beg, offset);\n    } if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n        // consume number\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n\n        let astnode_type = AST_LIT_INT;\n        let result_type  = TYPEID_int;\n\n        if( curChar === CHAR_DOT ) {\n\n            astnode_type = AST_LIT_FLOAT;\n            result_type  = TYPEID_float;\n        \n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n        } else if( offset - beg <= 9 ) { // opti\n            result_type = TYPEID_jsint\n        }\n\n\n              setType(left, astnode_type);\n        setResultType(left, result_type);\n        \n        VALUES[left] = code.slice(beg, offset);\n    }else {\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined) {\n            // if return true can't be part of an expression (avoid issue in next cond)\n            if( symbol(left) ) { //TODO: search in context ?\n                if( __DEBUG__ ) set_py_code_end(op_node);\n                return op_node;\n            }\n        }\n    }\n\n    consumeSpaces();\n\n    while( curChar !== CHAR_NL && curChar !== CHAR_COLON ) {\n\n        let op    = code[offset];\n        ++offset;\n\n        const type    = opsymbol2opid[op as keyof typeof opsymbol2opid];\n        op_node = createASTNode();\n        setType(op_node, type);\n\n        setFirstChild(op_node, left);\n        VALUES[op_node] = \"__add__\"; //TODO\n\n        // multi = * / > <\n        // TODO: text op (+ not in + is not)\n\n        consumeSpaces();\n\n        const right = addSibling(left);\n\n        let rtoken = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[rtoken];\n        if( symbol !== undefined)\n            symbol(right); //TODO: search in context ?\n\n        curChar = code.charCodeAt(offset);\n    }\n    \n    // /!\\ escaped line...\n\n    if( __DEBUG__ ) set_py_code_end(op_node);\n\n    return op_node;\n\n    // we can have several expr (e.g. assert)\n    //++offset; // we know it is '\\n' or ':'\n}\n\nexport function py2ast(_code: string, filename: string): AST {\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readExpr() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readExpr() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol();\nexport const TYPEID      = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const JS_NAME     = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct<[NODE_ID]>,\n    __int__  ?: Fct<[NODE_ID]>,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: NODE_ID, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \".\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { addType } from \"./utils/addType\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\n// builtin symbols.\nexport default {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    type : TYPEID_type,\n    len  : addType( genUnaryOpFct(\"len\", RET_INT)),\n    abs  : addType( genUnaryOpFct(\"abs\", RET_INT)), //TODO...\n    print: addType({\n        __name__: \"print\",\n        __call__: method_wrapper(RET_None, (call:NODE_ID) => {\n            const coffset  = firstChild(call);\n\n            w_str(\"__SB__.print(\");\n            let cur = nextSibling(coffset);\n            while(cur !== 0) {\n                w_node(cur);\n                w_str(\", \");\n                cur = nextSibling(cur);\n            }\n            w_str(\")\");\n        })\n    }),\n};\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: NODE_ID) => {\n            const left   = nextSibling(firstChild(call));\n            const method = Types[resultType(left)]![opname] as Callable;\n            return method.__call__[WRITE_CALL](call);\n        })\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign_attr\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/true\").default,\n\trequire(\"./lit/false\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/def_meth\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"FCT_DEF\",\n\t\"FCT_DEF_METH\",\n\t\"FCT_DEF_ARGS\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = search.get(\"merge\")  === \"true\" ? true : false;\nconst parser    = search.get(\"parser\") === \"true\" ? true : false;\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers',\n//    \"classes\" // ~1174\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~600\n// list    ~496\n// dicts   ~288\n// sets    ~300\n// bytes   ~300\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n        if( val.__name__ !== undefined)\n            val = val.__name__;\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            const code = subtests[j];\n\n            if( code === \"\")\n                continue;\n       \n            if( merge ) {\n                const indented_code = code.split('\\n').map(e => `\\t${e}`).join('\\n');\n                fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n            } else {\n                try {\n                    fullcode = code;\n                    generate(fullcode, results, parser);\n                    execute(results, sbry_print);\n                } catch(e) {\n                    error = e as Error;\n                    break tests;\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n    }\n\n    if( error || ! merge ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n    \n    if(error) {\n\n        python_input.value = results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('#').slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import Types from \"../list\";\n\nexport function addType(typedesc: any) {\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    Types[id] = obj;\n\n    return id;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, c2);\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","export default {};","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"float\",\n        [JS_NAME]: \"Number\",\n        __call__ : method_wrapper(RET_FLOAT, (node: NODE_ID) => {\n\n            const other = nextSibling(firstChild(node));\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { TYPEID_type } from \"./index\";\nimport { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\nimport { TYPE_type } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\n\nexport default Object.assign(TYPE_type,\n    {\n        __class__: TYPE_type,\n        __name__ : \"type\",\n        __call__ : method_wrapper( () => TYPEID_type, (call: NODE_ID) => {\n            const coffset = nextSibling(firstChild(call));\n            w_sns(\"(\", coffset, \").constructor\");\n        })\n    });","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\nimport { method_wrapper } from \"../types/utils/methods\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport { TYPE_type } from \"../types/bases\";\nimport Types from \"../types\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPE_type,\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = Types[instance_TypeID];\n    const inst_type  = Types[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, Types[stypeID]);\n        weak_assign(inst_type , Types[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\nimport { TYPEID_NoneType } from \"../types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF, AST_FCT_DEF_METH } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_FCT_DEF;\n    if( context.type === \"class\") {\n        type = AST_FCT_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO].generate!;\n        SType_fct.__call__[ARGS_INFO].generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\nconst s = Symbol();\nexport type NODE_ID = 0 | typeof s;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID) {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = Types[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: NODE_ID, self: NODE_ID, other: NODE_ID) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: NODE_ID, self: NODE_ID, other: NODE_ID) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: NODE_ID, self: NODE_ID, other: NODE_ID) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: NODE_ID, a: NODE_ID, op: string, b: NODE_ID) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { printNode } from \"@SBrython/sbry/py2ast\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' ) {\n                printNode(left);\n                printNode(right);\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n            }\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n\n        write_binary_jsop(node, l, jop, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type               = 7;\nexport const TYPEID_type_int_          = 8;\nexport const TYPEID_type_float_        = 9;\nexport const TYPEID_type_str_          =10;\nexport const TYPEID_type_bool_         =11;\n\nexport default [];","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[NODE_ID, NODE_ID]>;\n    method[WRITE_CALL]!(node, coffset, nextSibling(coffset) );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: NODE_ID, op: string ) {\n\n    const first      = firstChild(node);\n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    setParentOPPrio(first, prio);\n\n    let cur = nextSibling(first);\n    while(cur !== 0) {\n\n        setParentOPPrio( cur, prio + 1 );\n\n        w_str(' && ');\n        w_node(cur);\n\n        cur = nextSibling(cur);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","// needs to be JS compatible\n\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Functions\nexport const AST_FCT_DEF            = last_id++;\nexport const AST_FCT_DEF_METH       = last_id++;\nexport const AST_FCT_DEF_ARGS       = last_id++;\nexport const AST_FCT_CALL           = last_id++;\nexport const AST_FCT_CALL_KEYWORD   = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IFBLOCK       = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;","import { NODE_ID } from \"../dop\";\n\nexport * from './ids';\n\nexport default [] as ((node: NODE_ID) => void)[];"],"names":["Object","assign","TYPE_type_str_","__class__","TYPE_type","__name__","JS_NAME","__call__","method_wrapper","RET_STR","node","other","nextSibling","firstChild","other_type","resultType","TYPEID_str","w_node","otype","Types","undefined","__str__","Error","WRITE_CALL","TYPE_jsint","TYPE_type_int_","__abs__","RET_JSINT","w_sns","__ceil__","RET_INT","write_id_jsop","genBinaryOps","RET_IJ2INT","convert_self","CONVERT_2INT","convert_other","write_call","a","op","b","TYPEID_int","Number2Int","Int2Number","write_binary_jsop","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","RET_JSINT2JSINT","self","genUnaryOps","write_unary_jsop","genCmpOps","CMPOPS_LIST","RET_IJBF2BOOL","ast2js","w_str","RET_TYPE","write","r","create","RETURN_TYPE","TYPE_int","_","arg","__int__","RET_INT2INT","TYPEID_float","convert","dst","context","target","id","local_symbols","iter","constructor","$name","func","setType","AST_CTRL_FOR","coffset","addFirstChild","convert_node","body","addSibling","Body","set_py_code_from_list","VALUES","value","args","AST_CTRL_FOR_RANGE","cur","nbChildren","length","i","TYPE_type_float_","TYPE_type_bool_","TYPE_str","TYPE_float","TYPE_bool","TYPE_NotImplementedType","TYPE_NoneType","AST_CTRL_IFBLOCK","test","orelse","Py_object","AST_KEY_CONTINUE","abs","n","reverse","write_compare_jsop","reversed","cop","ops","return_type","NOCONVERT","result","jsop2pyop","o","floordiv_float","Math","floor","floordiv_int","mod_float","mod","mod_int","idx","list","pyop","rop","prio","JSOperatorsPrio","p_prio","parentOPPrio","setParentOPPrio","l","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","AST_CTRL_WHILE","AST_BODY","cn","beg","end","obj","ARGS_INFO","generate","default_call","meta","nb_call_args","nb_pos_call","type","AST_FCT_CALL_KEYWORD","max_pos","idx_end_pos","vararg_array","Number","POSITIVE_INFINITY","has_kw","idx_vararg","cutoff","min","kw","kwargs","call_has_kw","call_has_kwargs","pos","Array","max","varg_nb","args_names","args_pos","name","key","AST_STRUCT_DICT","keys","values","fct","attr","console","warn","fct_type","ret_type","AST_FCT_CALL","setResultType","keywords","keyword","set_py_code","cond","astnode2tree","typeID","result_type","t","children","push","id2name","jscode","buildJSCode","pycode","buildPyCode","AST_KEY_IMPORT_ALIAS","asname","require","SBrython","browser","globalThis","buildModule","ast","filename","this","Function","runJSCode","getModules","getModule","getASTFor","print","log","_r_","_sb_","execute","results","sbry_print","offset","bry","code","performance","now","sb","t0","t1","times","executeSBrython","sbry","$B","imported","executeBrython","kw_start","count","write_arg","set_js_cursor","CODE_BEG","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","TYPEID_jsint","CODE_END","AST_OP_ATTR","type_obj","TYPEID","handlers","AST_CTRL_TRYBLOCK","ExceptHandler","rchild","kname","w_NL","BB","BE","assert","__len__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","LIST","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ILIST","printNode","ret_typeID","start","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","convert_ast","dop_reset","createASTNode","Context","ASTNODES","symbols","builtins","createSubContext","createClassContext","ctx","parentTypeID","PythonError","python_exception","super","_raw_err_","left","AST_KEY_BREAK","AST_STRUCT_LIST","elts","targets","rtype","annotation","AST_OP_ASSIGN","AST_OP_ASSIGN_ATTR","attrname","attrdef","AST_OP_ASSIGN_INIT","AST_OP_BRACKETS","first","slice","RET_FLOAT","_node","_op","debug_print_exception","err","stack","isV8","split","e","includes","filter_stack","map","_line","_col","fct_name","indexOf","nodes","AST_SYMBOL","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","JSException","nb_tokens","total_lines","nb_excluded_lines","nb_files","resetResults","fill","AST_LIT_FSTRING_FVAL","opsymbol2opid","AST_OP_BIN","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","curChar","consumeEmptyLines","charCodeAt","CURSOR","nextSymbol","search","KNOWN_SYMBOLS","AST_LIT_FLOAT","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_KEY_PASS","AST_KEY_RETURN","AST_KEY_ASSERT","setFirstChild","readExpr","setSibling","readBody","AST_FCT_DEF","AST_FCT_DEF_ARGS","SType_fct","STypeID","CURRENT_INDENTATION","consumeIndentedLines","set_py_code_beg","indent","set_py_code_end","consumeSpaces","op_node","AST_LIT_STR","astnode_type","AST_LIT_INT","token","symbol","right","rtoken","py2ast","_code","ARRAY_TYPE","off","use_parser","_ast","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","buildAST","__ast","generateSBrython","src","future","future_features","symtable","_PySymtable_Build","js_from_root","js","generateBrython","bname2jsop","AST_OP_BOOL","AST_LIT_FSTRING","CODE_LINE","CODE_COL","JS_CODE","cur_indent_level","indents","str","AST2JS","Symbol","AST_OP_UNARY","operand","bname2pyname","TYPEID_bool","TYPEID_NotImplementedType","method","int","TYPEID_type_int_","TYPEID_type_str_","float","TYPEID_type_float_","TYPEID_type","len","addType","genUnaryOpFct","RET_None","call","opname","AST_CTRL_TRYBLOCK_CATCH","Py_JSException","Py_Exception","AST_STRUCT_TUPLE","brython_node","BRY2SBRY","lineno","col_offset","end_lineno","end_col_offset","set_py_from_beg_end","dst_beg","dst_end","src_offset","beg_offset","end_offset","_id2name","a_value","ltype","AST_2NUMBER","AST_2BIGINT","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","URLSearchParams","location","test_name","get","merge","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","oneTimeExec","fullcode","textContent","classList","remove","trim","error","message","add","generate_report","print_js","print_python","print_ast","print_code","createElement","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","child","html_child","startTests","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","tests","subtests","substats","j","stats","total","excluded","async","fetch","text","lines","exclude","x","parseInt","names","loadSubTests","parts","excl","nbEmptyLines","code_len","nbExcluded","find","v","isArray","AST_KEY_IMPORT","module","left_id","right_id","reversed_operator","write_multi_jsop","typedesc","AssignOperators","c2","_context","other_value","AST_OP_ASSIGN_AUG","vtype","qname","__qualname__","toString","TYPEID_NoneType","AST_CTRL_TERNARY","nops","nb_ops","AST_OP_CMP","comparators","AST_KEY_RAISE","exc","float2str","f","toExponential","sign_idx","weak_assign","instance_TypeID","klass_type","inst_type","AST_CLASSDEF","bases","stypeID","stype","convert_args","returns","fct_return_type","last_type","fake_node","posonlyargs","AST_FCT_DEF_METH","klass","method_name","gen","instanceType","instanceTypeID","Float64Array","NEXT_AST_NODE_ID","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","parent","sibling","labels","tformat","time","unit","toFixed","padStart","tdiff","c","A","B","report","nb_lines","nb_done","tcoef","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","addSblng","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","alt","writeOp","jop","jsop","find_and_write_call","BinaryOperators","JSOperators","JSOperatorsPriority","priority","parenthesis","last_id"],"sourceRoot":""}