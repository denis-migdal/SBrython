{"version":3,"file":"Editor/index.js","mappings":"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AK,IAAO7C,EAAAA,KAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,KAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,KAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,MAAAA,EACZ6C,EAAAA,GAAK,IAAO7C,EAAAA,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CA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GAGYnF,EAAiB,CAC7B,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGYoF,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYC,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGYX,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,MACA,MACA,KACA,KACA,IACA,GAEA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGYY,EAAiB,CAC7B,IAAKvS,EACL,KAAMA,EAAU,GAChB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAKF,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAc,GACrB,KAAMC,EACN,MAAOA,EAAc,GACrB,IAAKN,EACL,KAAMA,EAAW,GACjB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAKU,EACL,KAAMA,EAAW,GACjB,IAAKQ,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAY,GACnB,IAAKE,EACL,KAAMA,EAAW,GACjB,KAAMzB,EACN,MAAOA,EAAW,GAClB,IAAKiN,EACL,IAAKF,EACL,KAAMF,EACN,KAAMC,EACN,KAAMI,EACN,KAAMF,EACN,IAAKsF,EACL,GAtN4B,GAuN5B,GAtN4B,GAuN5B,SAtN4B,GAuN5B,GAtN4B,GAuN5B,IAtN4B,GAuN5B,SArN4B,IA+NhB/E,EApOgB,GAoOOV,C,yDCzPrB,SAASzW,EAAQC,EAAcC,EAAWC,IAErDmC,EAAAA,EAAAA,IAAQrC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","sources":["webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/list.js","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/types/list.js","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/utils/print/printNode.ts","webpack://sbrython/./stubs/JS/__init__.pyi","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts"],"sourcesContent":["import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __SBRY_MODE__ === \"dev\" && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\nexport class SBrython {\n\n    #registered: Record<string, Record<string, any>> = {};\n\n    register(name: string, exported: Record<string, any>) {\n        this.#registered[name] = exported;\n    }\n\n    //TODO...\n    // executeModule -> ObjectURL + get exports if possible...\n    // jscode  = `//# sourceURL=${filename}\\n`;\n\n    // for AST...\n    #registered_AST: Record<string, AST> = {};\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRY__\", jscode); //TODO...\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#registered[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#registered;\n    }\n    getModule(name: string) {\n        return this.#registered[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return __SBRY_COMPAT__ === \"NONE\" ? null : _r_;\n    }\n    get _sb_() {\n        return __SBRY_COMPAT__ === \"NONE\" ? null : _sb_;\n    }\n}\n\n// give options here ? factory ?\nexport default globalThis.__SBRY__ = new SBrython();","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = __SBRY_MODE__ !== 'dev' ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","function assert(cond: boolean, msg: string = 'Assertion failed') {\n\n    if( ! cond )\n        throw new Error(msg);\n}\n\n\nexport default {\n    assert\n};","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);\n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __SBRY_MODE__ === \"dev\" && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __SBRY_MODE__ === \"dev\" && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","// @ts-nocheck\n\nimport dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, TYPE_ID, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, TYPE_ID> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, TYPE_ID>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __SBRY_MODE__ === \"dev\" && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __SBRY_MODE__ === \"dev\" && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __SBRY_MODE__ === \"dev\" && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\" || other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"nan\" || other_value === \"NaN\" ){\n                w_str(\"Number.NaN\");\n                return;\n            }\n        }\n\n    \n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\");\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    if( __SBRY_COMPAT__ === \"NONE\") {\n        w_node( nextSibling(firstChild(call)) ); w_str(' .toString()');\n    } else\n        w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return;\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __SBRY_MODE__ === \"dev\" && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ return this.constructor.${name}(this, ...args) }`);\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]}`);\n\n    if( cur !== 0) {\n        w_str(\" extends \");\n    \n        if( nextSibling(cur) === 0) {\n            w_node(cur);\n        } else {\n            w_str(\"_sb_.mix(\");\n            w_node(cur);\n            cur = nextSibling(cur);\n            do {\n                w_str(\", \");\n                w_node(cur);\n                cur = nextSibling(cur);\n            } while(cur !== 0);\n            \n            w_str(\")\");\n        }\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { BB, BE, jscode, set_js_cursor, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_STR } from \"./list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        if( jscode.length !== 0 ) w_NL();\n\n        if( type(cur) !== AST_LIT_STR )\n            w_node(cur);\n        else if(__SBRY_MODE__ === \"dev\") {\n            set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`/*${VALUES[cur].slice(1,-1)}*/`);\n            set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__SBRY_MODE__ === \"dev\" && first !== 0 && node !== 0)\n        w_NL();\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_None               = 2;\nexport const TYPEID_NotImplementedType = 3;\nexport const TYPEID_NotImplemented     = 4;\nexport const TYPEID_type               = 5;\nexport const TYPEID_type_int_          = 6;\nexport const TYPEID_int                = 7;\nexport const TYPEID_type_jsint_        = 8;\nexport const TYPEID_jsint              = 9;\nexport const TYPEID_type_float_        =10;\nexport const TYPEID_float              =11;\nexport const TYPEID_type_bool_         =12;\nexport const TYPEID_bool               =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_str                =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default __webpack_public_path__ + \"Editor/index.html\";","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __SBRY_MODE__ === \"dev\" && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./type\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\n\nconst _id2name = __SBRY_MODE__ !== 'dev' ? [] : [\n\t\"unknown\",\n\t\"NoneType\",\n\t\"None\",\n\t\"NotImplementedType\",\n\t\"NotImplemented\",\n\t\"type\",\n\t\"type_int_\",\n\t\"int\",\n\t\"type_jsint_\",\n\t\"jsint\",\n\t\"type_float_\",\n\t\"float\",\n\t\"type_bool_\",\n\t\"bool\",\n\t\"type_str_\",\n\t\"str\",\n];\nexport const id2name = _id2name;\n","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SBRY__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__SBRY_MODE__ === \"dev\") w_str(`/*${VALUES[node]} */`);\n}","export default {};","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(id, cur.body);\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    if( __SBRY_MODE__ !== \"prod\")\n        w_sns(\"assert(\", firstChild(node), \")\");\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __SBRY_MODE__ === \"dev\" ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __SBRY_MODE__ === \"dev\") set_py_code(dst, node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return a;\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return a;\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { id2name } from \"@SBrython/sbry/types\";\nimport TYPES from \"@SBrython/sbry/types/list\";\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : TYPES[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}","export default \"# Missing:\\n# - Final[T]\\n# - Callable[] (requires fct type refactor...)\\n# - TypedDict + NotRequired\\n#        - from typing import TypedDict\\n#        - type NameInfo = TypedDict('NameInfo', {'name': str, 'first-letter': str})\\n# - circular type hints\\n# - static attributes/methods\\n# - async + iterators\\n# - some API (mainly in Window)\\n# - split into separate files\\n# - special stubs parser\\n# - better import system.\\n# - @overload\\n# - add constructors + special methods (__getattr__ etc)\\n# https://developer.mozilla.org/en-US/docs/Web/API (1006 classes)\\n\\nclass Undefined:\\n    pass\\n\\nundefined: Undefined\\n\\nclass Event:\\n    # TODO: read-only : Final[bool] (they are all RO)\\n    bubble: bool\\n    cancelable: bool\\n    composed: bool\\n    currentTarget: EventTarget\\n    defaultPrevented: bool\\n    # TODO: enum ?\\n    eventPhase: float\\n    NONE = 0.\\n    CAPTURING_PHASE = 1.\\n    AT_TARGET = 2.\\n    BUBBLING_PHASE = 3.\\n    isTrusted: bool\\n    target: EventTarget\\n    timeStamp: float\\n    type: str\\n\\n    def composedPath(self) -> EventTarget : ...\\n    def preventDefault(self) -> Undefined: ...\\n    def stopImmediatePropagation(self) -> Undefined: ...\\n    def stopPropagation(self) -> Undefined: ...\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\\nclass EventTarget:\\n    # TODO: listener type...\\n    # TODO: option/capture optional arg...\\n    # TODO: listener: This must be null, an object with a handleEvent() method, or a JavaScript function.\\n    # def addEventListener(self, type: str, listener, /) -> Undefined: ...\\n    # def removeEventListener(self, type: str, listener, /) -> Undefined: ...\\n\\n    def dispatchEvent(self, event: Event, /) -> bool: ...\\n\\nclass NodeList:\\n    length: float\\n    # entries\\n    # values\\n    # keys\\n    # forEach\\n    def item(self, index: float, /) -> Node: ...\\n\\nclass Node(EventTarget):\\n    # TODO: RO\\n    baseURI: str\\n    childNodes: NodeList\\n    firstChild: Node|None\\n    isConnected: bool\\n    lastChild: Node|None\\n    nextSibling: Node|None\\n    nodeName: str\\n    # TODO: enum ?\\n    nodeType: float\\n    ELEMENT_NODE = 0.\\n    ATTRIBUTE_NODE = 1.\\n    TEXT_NODE = 3.\\n    CDATA_SECTION_NODE = 4.\\n    PROCESSING_INSTRUCTION_NODE = 7.\\n    COMMENT_NODE = 8.\\n    DOCUMENT_NODE = 9.\\n    DOCUMENT_TYPE_NODE = 10.\\n    DOCUMENT_FRAGMENT_NODE = 11.\\n    # RW:\\n    nodeValue: str|None\\n    # RO\\n    ownerDocument: Document|None\\n    parentElement: Element|None\\n    parentNode: Node|None\\n    previousSibling: Node|None\\n    textContent: str|None\\n\\n    def appendChild(self, child: Node) -> Node: ...\\n    def cloneNode(self, deep: bool = False) -> Node: ...\\n    def compareDocumentPosition(self, otherNode: Node) -> float: ...\\n    DOCUMENT_POSITION_DISCONNECTED = 1.\\n    DOCUMENT_POSITION_PRECEDING = 2.\\n    DOCUMENT_POSITION_FOLLOWING = 4.\\n    DOCUMENT_POSITION_CONTAINS = 8.\\n    DOCUMENT_POSITION_CONTAINED_BY = 16.\\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32.\\n    def contains(self, otherNode: Node|None) -> bool: ...\\n    # TODO: options\\n    # https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\\n    def getRootNode(self) -> Node: ...\\n    def hasChildNodes(self) -> bool: ...\\n    def insertBefore(self, newNode: Node, referenceNode: Node|None) -> Node: ...\\n    def isDefaultNamespace(self, namespaceURI: str|None) -> bool: ...\\n    def isEqualNode(self, otherNode: Node|None) -> bool: ...\\n    def isSameNode(self, otherNode: Node|None) -> bool: ...\\n    def lookupNamespaceURI(self, prefix: str|None) -> str|None: ...\\n    def lookupPrefix(self, namespace: str|None) -> str|None: ...\\n    def normalize(self) -> Undefined: ...\\n    def removeChild(self, child: Node) -> Undefined: ...\\n    # TODO: can be generic\\n    def replaceChild(self, newChild: Node, oldChild: Node) -> Node: ...\\n\\n# TODO\\n\\n# Getter/setter/deleter\\nclass DOMStringMap:\\n    pass\\n\\nclass CSSStyleDeclaration:\\n    cssFloat: str\\n    cssText: str\\n    length: float\\n    parentRule: CSSRule\\n    \\n    def getPropertyPriority(self, property: str, /) -> str: ...\\n    def getPropertyValue(self, property: str, /) -> str: ...\\n    def item(self, index: float, /) -> str: ...\\n    def removeProperty(self, property: str, /) -> str: ...\\n    def setProperty(self, propertyName: str, value: str, priority: str = \\\"\\\") -> Undefined : ...\\n\\nclass NamedNodeMap:\\n    # RO\\n    length: float\\n    def getNamedItem(self, name: str, /) -> Attr|None: ...\\n    def getNamedItemNS(self, namespace: str, localName: str, /) -> Attr|None: ...\\n    def item(self, index: float, /) -> Attr|None: ...\\n    def removeNamedItem(self, attrName: str, /) -> Attr: ...\\n    def removeNamedItemNS(self, namespace: str, localName: str, /) -> Attr: ...\\n    def setNamedItem(self, attr: Attr, /) -> Attr|None: ...\\n    def setNamedItemNS(self, attr: Attr, /) -> Attr|None: ...\\n\\nclass HTMLCollection:\\n    length: float\\n    def item(self, index: float, /) -> Element|None: ...\\n    def namedItem(self, key: str, /) -> Element|None: ...\\n\\nclass DOMTokenList:\\n    length: float\\n    value: str\\n\\n    def add(self, token1: str, /) -> Undefined: ...\\n    def contains(self, token: str, /) -> bool: ...\\n    # entries : iterator\\n    # forEach\\n    def item(self, index: float, /) -> str|None: ...\\n    # keys\\n    def remove(self, token1: str, /) -> Undefined: ...\\n    def replace(self, oldToken: str, newToken: str, /) -> bool: ...\\n    def supports(self, token: str, /) -> bool: ...\\n    def toggle(self, token: str, force: bool = False, /) -> bool: ...\\n    def toString(self, /) -> str: ...\\n    # values\\n\\nclass StyleSheet:\\n    # RW\\n    disabled: bool\\n    # RO\\n    href: str\\n    # media: MediaList\\n    ownerNode: Node\\n    parentStyleSheet: StyleSheet\\n    title: str\\n    type: str\\n\\nclass CSSRule:\\n    # RO\\n    cssText: str\\n    parentRule: CSSRule|None\\n    parentStyleSheet: StyleSheet\\n\\nclass CSSRuleList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSRule|None: ...\\n\\nclass CSSImportRule(CSSRule):\\n    # RO\\n    href: str\\n    layerName: str|None\\n    # media : MediaList\\n    styleSheet: CSSStyleSheet\\n    supportsText: str|None\\n\\nclass CSSStyleSheet(StyleSheet):\\n    # RO\\n    cssRules: CSSRuleList\\n    ownerRule: CSSImportRule|None\\n\\n    def deleteRule(self, index: float, /) -> Undefined: ...\\n    def insertRule(self, rule: str, index: float = 0., /) -> float: ...\\n    #TODO:  Async : replace\\n    def replaceSync(self, text: str, /) -> Undefined: ...\\n\\n\\nclass StyleSheetList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSStyleSheet|None: ...\\n\\n\\nclass DocumentFragment(Node):\\n    childElementCount: float\\n    children: HTMLCollection\\n    firstElementChild: Element|None\\n    lastElementChild: Element|None\\n    \\n    def append(self, param1: Node, /) -> Undefined: ...\\n    # + make generic\\n    def getElementById(self, id: str, /) -> Element|None: ...\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n\\n\\nclass ShadowRoot(DocumentFragment):\\n    # RO...\\n    activeElement: Element|None\\n    # adoptedStyleSheets (array)\\n    clonable: bool\\n    delegatesFocus: bool\\n    # fullscreenElement (limited)\\n    host: Element\\n    innerHTML: str|None\\n    # TODO: enum ?\\n    mode: str\\n    pointerLockElement: Element|None\\n    serializable: bool\\n    # TODO: enum ?\\n    slotAssignment: str\\n    styleSheets: StyleSheetList\\n\\n    # getAnimations\\n    #TODO: opts\\n    def getHTML(self, /) -> str: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n\\nclass DOMRect:\\n    # RW\\n    height: float\\n    width: float\\n    x: float\\n    y: float\\n    # TODO: static\\n    # fromRect()\\n\\n    # RO\\n    top: float\\n    bottom: float\\n    left: float\\n    right: float\\n\\nclass Attr(Node):\\n    # RO\\n    localName: str\\n    name: str\\n    namespaceURI: str\\n    ownerElement: Element\\n    prefix: str|None\\n    value: str\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Element\\n# no aria (too much)\\nclass Element(Node):\\n    # RO\\n    assignedSlot: HTMLSlotElement|None\\n    attributes: NamedNodeMap\\n    childElementCount: float\\n    children: HTMLCollection\\n    classList: DOMTokenList\\n    # RW\\n    className: str\\n    # RO\\n    clientHeight: float\\n    clientLeft: float\\n    clientTop: float\\n    clientWidth: float\\n    currentCSSZoom: float\\n    firstElementChild: Element|None\\n    id: str\\n    # RW\\n    innerHTML: str\\n    lastElementChild: Element|None\\n    localName: str\\n    namespaceURI: str|None\\n    nextElementSibling: Element|None\\n    outerHTML: str\\n    part: DOMTokenList\\n    prefix: str|None\\n    previousElementSibling: Element|None\\n    # RW\\n    role: str|None\\n    # RW\\n    scrollHeight: float\\n    scrollLeft: float\\n    scrollTop: float\\n    scrollWidth: float\\n    # RO\\n    shadowRoot: ShadowRoot|None\\n    slot: str\\n    tagName: str\\n\\n    #TODO: *args\\n    def after(self, node1: Node, /) -> Undefined: ...\\n    # def animate()\\n    def append(self, param1: None, /) -> Undefined: ...\\n    #TODO: attachShadow\\n    def before(self, node1: Node, /) -> Undefined: ...\\n    #TODO: checkVisibility\\n    def closest(self, selectors: str, /) -> Element|None: ...\\n    # TODO: computedStyleMap (limited)\\n    # TODO: getAnimations\\n    def getAttribute(self, attributeName: str, /) -> str|None: ...\\n    #TODO getAttributeNames (list)\\n    def getAttributeNode(self, attrName: str, /) -> Attr: ...\\n    def getAttributeNodeNS(self, namespace: str, attrName: str, /) -> Attr: ...\\n    def getAttributeNS(self, namespace: str, attributeName: str, /) -> str|None: ...\\n    def getBoundingClientRect(self, /) -> DOMRect: ...\\n    #TODO getClientRects\\n    def getElementsByClassName(self, names: str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, tagName: str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespaceURI: str, localName: str, /) -> HTMLCollection: ...\\n    # TODO: options\\n    def getHTML(self, /) -> str: ...\\n    def hasAttribute(self, name: str, /) -> bool: ...\\n    def hasAttributeNS(self, namespace: str, localName: str, /) -> bool: ...\\n    def hasAttributes(self, /) -> bool: ...\\n    # TODO: pointerId ?\\n    def hasPointerCapture(self, pointerId: float, /) -> bool: ...\\n    # TODO: more restrictive position str\\n    def insertAdjacentElement(self, position: str, element: Element, /) -> Element|None: ...\\n    def insertAdjacentHTML(self, position: str, text: str, /) -> Undefined: ...\\n    def insertAdjacentText(self, where: str, data: str, /) -> Undefined: ...\\n    def matches(self, selectors: str, /) -> bool: ...\\n    # moveBefore\\n    #TODO:\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def releasePointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def removeAttribute(self, attrName: str, /) -> Undefined: ...\\n    def removeAttributeNode(self, attributeNode: Attr, /) -> Node: ...\\n    def removeAttributeNS(self, namespace: str, attrName: str, /) -> Undefined: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    def replaceWith(self, param1: Node, /) -> Undefined: ...\\n    # requestFullScreen (limited)\\n    # requestPointerLock (limited)\\n    # TODO: 2 possibilites :\\n    def scroll(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollBy(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: options\\n    def scrollIntoView(self) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollTo(self, x: float, y: float, /) -> Undefined: ...\\n    def setAttribute(self, name: str, value: str|None, /) -> Undefined: ...\\n    def setAttributeNode(self, attribute: Attr, /) -> Attr|None: ...\\n    def setAttributeNodeNS(self, attributeNode: Attr, /) -> Attr|None: ...\\n    def setAttributeNS(self, namespace: str, name: str, value: str|None, /) -> Undefined: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n    def setPointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def toggleAttribute(self, name: str, toggle: bool = False, /) -> bool: ...\\n\\n\\nclass HTMLElement(Element):\\n\\n    accessKeyLabel: str\\n    autofocus: bool\\n    contentEditable: str\\n    dataset: DOMStringMap\\n    dir: str\\n    draggable: bool\\n    enterKeyHint: str\\n    hidden: bool\\n    inert: bool\\n    innerText: str\\n    inputMode: str\\n    isContentEditable: bool\\n    lang: str\\n    nonce: float\\n    offsetHeight: float\\n    offsetLeft: float\\n    offsetParent: float\\n    offsetTop: float\\n    offsetWidth: float\\n    outerText: str\\n    popover: str\\n    spellcheck: bool\\n    style: CSSStyleDeclaration|None\\n    tabIndex: float\\n    title: str\\n    translate: bool\\n\\n    # attachInternals\\n    def blur(self) -> Undefined: ...\\n    def click(self) -> Undefined: ...\\n    def focus(self) -> Undefined: ...\\n    def hidePopover(self) -> Undefined: ...\\n    # TODO: options\\n    def showPopover(self) -> Undefined: ...\\n    # TODO:\\n    def togglePopover(self, force: bool=False, /) -> Undefined: ...\\n\\nclass HTMLSlotElement(HTMLElement):\\n    pass\\n\\nclass HTMLBodyElement(HTMLElement):\\n    pass\\n\\nclass HTMLHeadElement(HTMLElement):\\n    pass\\n\\nclass HTMLScriptElement:\\n    # async ?\\n    crossOrigin: str\\n    defer: bool\\n    fetchPriority: str\\n    integrity: str\\n    nomodule: bool\\n    referrerPolicy: str\\n    str: str\\n    text: str\\n    type: str\\n    # static support\\n\\nclass DOMStringList:\\n    length: float\\n    def contains(self, string: str, /) -> bool: ...\\n    def item(self, index: float, /) -> str|None: ...\\n\\nclass URLSearchParams:\\n    size: float\\n\\n    def append(self, name: str, value: str, /) -> Undefined: ...\\n    def delete(self, name: str, value: str|Undefined = undefined, /) -> Undefined: ...\\n    # entries/forEach/keys/values\\n    def get(self, name: str) -> str|None: ...\\n    # getAll (array)\\n    def has(self, name: str, value: str|Undefined = undefined, /) -> bool: ...\\n    def set(self, name: str, value: str, /) -> Undefined: ...\\n    def sort(self) -> Undefined: ...\\n    def toString(self) -> str: ...\\n\\nclass URL:\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n    searchParams: URLSearchParams\\n    username: str\\n\\n    # static\\n    # canParse + createObjectURL + parse + revokeObjectURL\\n    def toJSON(self) -> str: ...\\n    def toString(self) -> str: ...\\n\\nclass Location:\\n    ancestorOrigins: DOMStringList\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n\\n    def assign(self, url: str|URL, /) -> Undefined: ...\\n    def reload(self) -> Undefined: ...\\n    def replace(self, url: str|URL, /) -> Undefined: ...\\n    def toString(self) -> Undefined: ...\\n\\nclass Window(EventTarget):\\n    \\\"\\\"\\\"\\n    The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.\\n\\n    See https://developer.mozilla.org/en-US/docs/Web/API/Window\\n    \\\"\\\"\\\"\\n\\n    # caches\\n    closed: bool\\n    # cookieStore\\n    crossOriginIsolated: bool\\n    # crypto\\n    # customElements\\n    document: Document\\n    frameElement: HTMLElement|None\\n    # frames\\n    # history\\n    # indexedDB\\n    innerHeight: float\\n    innerWidth: float\\n    isSecureContext: bool\\n    length: float\\n    # localStorage\\n    location: Location\\n    # locationBar\\n    # menubar\\n    name: str\\n    # navigator\\n    # opener\\n    origin: str\\n    originAgentCluster: bool\\n    outerHeight: float\\n    outerWidth: float\\n    parent: Window\\n    # performance\\n    # personalbar\\n    # screen\\n    screenLeft: float\\n    screenTop: float\\n    screenX: float\\n    screenY: float\\n    # scrollbars\\n    scrollX: float\\n    scrollY: float\\n    self: Window\\n    # sessionStorage\\n    # speechSynthesis\\n    # statusbar\\n    # toolbar\\n    top: Window\\n    # visualViewport\\n    window: Window\\n\\n    def alert(self, message: str = \\\"\\\", /) -> Undefined: ...\\n    def atob(self, encodedData: str, /) -> str: ...\\n    def btoa(self, stringToEncode: str, /) -> str: ...\\n    def cancelAnimationFrame(self, requestID: float, /) -> Undefined: ...\\n    def clearInterval(self, intervalID: float, /) -> Undefined: ...\\n    def clearTimeout(self, timeoutID: float, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def confirm(self, message: str = \\\"\\\", /) -> bool: ...\\n    # createImageBitmap\\n    # fetch\\n    def focus(self) -> Undefined: ...\\n    def getComputedStyle(self, element: Element, pseudoElt: str|None = None, /) -> CSSStyleDeclaration: ...\\n    # getSelection\\n    # matchMedia\\n    def moveBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def moveTo(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def open(self, url: str = \\\"\\\", target: str = \\\"\\\", windowFeatures: str = \\\"\\\", /) -> Window|None: ...\\n    def postMessage(self, message: object, targetOrigin: str = \\\"\\\", /) -> Undefined: ...\\n    def print(self) -> Undefined: ...\\n    def prompt(self, message: str, defaultValue: str|None = None, /) -> str|None: ...\\n    # queueMicrotask\\n    # reportError\\n    # requestAnimationFrame\\n\\n    def resizeBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def resizeTo(self, width: float, height: float, /) -> Undefined: ...\\n    def scroll(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollBy(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollTo(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    # def setInterval(self, )\\n    # def setTimeout\\n    def stop(self) -> Undefined: ...\\n    # TODO: generic\\n    def structuredClone[T](self, value: T, /) -> T: ...\\n\\n\\nwindow: Window\\n\\nclass DocumentType(Node):\\n    name: str\\n    publicId: str\\n    systemId: str\\n\\n    def after(self, param1: Node, /) -> Undefined: ...\\n    def before(self, param1: Node, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def replaceWith(self, node1: Node, /) -> Undefined: ...\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Document/\\n# also lot of methods...\\nclass Document(Node):\\n    activeElement: Element|None\\n    adoptedStyleSheets: CSSStyleSheet\\n    body: HTMLBodyElement\\n    characterSet: str\\n    childElementCount: float\\n    children: HTMLCollection\\n    compatMode: str\\n    contentType: str\\n    cookie: str\\n    currentScript: HTMLScriptElement|None\\n    defaultView: Window|None\\n    designMode: str\\n    dir: str\\n    doctype: DocumentType\\n    documentElement: Element\\n    documentURI: str\\n    embeds: HTMLCollection\\n    firstElementChild: HTMLElement|None\\n    #fonts: FontFaceSet\\n    forms: HTMLCollection\\n    #fragmentDirective: FragmentDirective\\n    head: HTMLHeadElement\\n    hidden: bool\\n    images: HTMLCollection\\n    #implementation: DOMImplementation\\n    lastElementChild: Element|None\\n    lastModified: str\\n    links: HTMLCollection\\n    location: Location\\n    plugins: HTMLCollection\\n    readyState: str\\n    referrer: str\\n    scripts: HTMLCollection\\n    scrollingElement: Element\\n    styleSheets: StyleSheetList\\n    # timeline\\n    title: str\\n    URL: str\\n    visibilityState: str\\n\\n    # static parseHTMLUnsafe\\n    def adoptNode(self, externalNode: Node, /) -> Node: ...\\n    def append(self, param1: Node, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def createAttribute(self, name: str, /) -> Attr: ...\\n    def createAttributeNS(self, namespaceURI: str, qualifiedName: str, /) -> Attr: ...\\n    def createCDATASection(self, data:str, /) -> Node: ...\\n    def createComment(self, data: str, /) -> Node: ...\\n    def createDocumentFragment(self) -> DocumentFragment: ...\\n    # TODO: options\\n    def createElement(self, localName: str, /) -> Element: ...\\n    def createElementNS(self, namespaceURI: str, qualifiedName: str) -> Element: ...\\n    # createExpression\\n    # createNodeIterator\\n    # createProcessingInstruction\\n    # createRange\\n    def createTextNode(self, data: str, /) -> Node: ...\\n    # createTreeWalker\\n    def elementFromPoint(self, x: float, y: float) -> Element: ...\\n    # elementsFromPoint (array)\\n    # evaluate (XPath)\\n    # getAnimations\\n    def getElementById(self, selectors: str, /) -> Element|None: ...\\n    def getElementsByClassName(self, names:str, /) -> HTMLCollection: ...\\n    def getElementsByName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespace: str, name: str, /) -> HTMLCollection: ...\\n    # getSelection\\n    def hasFocus(self) -> bool: ...\\n    def hasStorageAccess(self) -> bool: ...\\n    def importNode[T: Node](self, externalNode: T, deep: bool = False) -> T: ...\\n    def open(self) -> Undefined: ...\\n    def prepend(self, param1: Node) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    # TODO: options + promise\\n    # def requestStorageAccess(self): \\n    def writeln(self, line: str, /) -> Undefined: ...\\n\\ndocument: Document\";","import Types, { TYPEID_None, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG, AST_CLASSDEF, AST_DEF_METH, AST_OP_ATTR } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport builtins, { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\nimport { printNode } from \"@SBrython/utils/print/printNode\";\nimport { w_str } from \"./ast2js/utils\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nlet JS: Record<string, TYPE_ID> = {};\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__SBRY_MODE__ === \"dev\") ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = offset + code.slice(offset).search(END_OF_SYMBOL);\n\n    curChar = code.charCodeAt(end);\n\n    return code.slice(offset, offset = end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n    \n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    if( curChar === CHAR_COLON ) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol(); // type\n        setResultType(id, getSymbol(type) + 1 as TYPE_ID );\n    }\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => {\n        setType(id, AST_KEY_RETURN);\n        consumeSpaces();\n        if( curChar !== CHAR_NL)\n            setFirstChild(id, readExpr() );\n    },\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        let genericName = \"\";\n        let genericType = \"\";\n        if( curChar === CHAR_BRACKET_LEFT) {\n            ++offset;\n            genericName = nextSymbol();\n            offset += 2; // \": \"\n            genericType = nextSymbol();\n            ++offset; // ]\n        }\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        let ret_type: TYPE_ID = 0;\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return ret_type; //TODO...\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        const cur_builtin_idx = builtins.length;\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        ++offset; // )\n\n        consumeSpaces();\n        if( curChar === CHAR_MINUS ) {\n            offset += 2; // ->\n            consumeSpaces();\n            let ret_name = nextSymbol();\n            if( ret_name === genericName)\n                ret_name = genericType;\n            ret_type = getSymbol( ret_name ) + 1 as TYPE_ID;\n\n            // @ts-ignore\n            while(curChar === 124) { // |\n                ++offset;\n                nextSymbol();\n            }\n            consumeSpaces();\n        }\n\n        ++offset; // :\n\n        curChar = code.charCodeAt(offset);\n\n        if( curChar === CHAR_SPACE && code.charCodeAt(++offset) === CHAR_DOT ) {\n            offset += 3; // ...\n        } else {\n\n            const body = readBody();\n            setSibling(args, body);\n\n            if( ret_type === 0 ) {\n\n                ret_type = TYPEID_None;\n\n                cur = firstChild(body);\n                while( nextSibling(cur) !== 0) {\n                    cur = nextSibling(cur);\n                }\n\n                if( type(cur) === AST_KEY_RETURN && (cur = firstChild(cur)) !== 0)\n                    ret_type = resultType(cur);\n            }\n        }\n\n        builtins.length = cur_builtin_idx;\n    },\n    \"from\": (id) => {\n        // only stubs for now...\n        consumeSpaces();\n        const module = nextSymbol();\n\n        consumeSpaces();\n        //TODO...\n        nextSymbol(); // from\n        consumeSpaces();\n        const imported_name = nextSymbol(); //TODO: many\n\n        if(module === \"JS\" ) {\n            addSymbol(imported_name, JS[imported_name] ); //TODO...\n            setType(id, AST_KEY_PASS); //TODO...\n        } else {\n            throw new Error(\"Not implemented !\");\n        }\n        //TODO: parse studs...\n    },\n    \"class\": (id) => {\n\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const inherit: NODE_ID[] = []; //TODO...\n\n        if( curChar === CHAR_PARENTHESIS_LEFT) {\n            //TODO read args like call (?)\n            ++offset; // consume (\n            consumeSpaces();\n\n            // @ts-ignore\n            while( curChar !== CHAR_PARENTHESIS_RIGHT ) {\n\n                inherit.push( readToken() );\n\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset; // consume ,\n                    consumeSpaces();\n                }\n            }\n            ++offset; // consume )\n        }\n\n        ++offset; // \":\"\n        \n        const body = readBody();\n\n        let cur = body;\n        for(let i = 0; i < inherit.length; ++i) {\n            setSibling(cur, inherit[i]);\n            cur = inherit[i];\n        }\n\n        setType(id, AST_CLASSDEF);\n        setFirstChild(id, body); // too lazy to duplicate...\n\n        const STypeID = Types.length as TYPE_ID;\n        const SInstID = Types.length+1 as TYPE_ID;\n\n        const SType_klass: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => SInstID,\n                [WRITE_CALL]: (id: NODE_ID) => {\n                    w_str(\"new \");\n                    default_call(id);\n                },\n            }\n        }\n\n        const SType_instance = {};\n        for(let i = 0; i < inherit.length; ++i)\n            Object.assign(SType_instance, TYPES[resultType(inherit[i]) + 1]);\n\n        // @ts-ignore\n        SType_instance.__class__ = SType_klass;\n    \n        Types[STypeID] = SType_klass;\n        Types[SInstID] = SType_instance;\n\n\n        //TODO: refactor/fix...\n\n        cur = firstChild(body);\n        let node_type: NODE_TYPE;\n        do {\n\n            node_type = type(cur);\n\n            // not ideal : needs it BEFORE...\n            if( node_type === AST_DEF_FCT) {\n\n                // @ts-ignore\n                SType_instance[VALUES[cur]] = resultType(cur);\n\n                setType(cur, AST_DEF_METH);\n            }\n\n            //TODO: fix...\n            if( node_type === AST_OP_ASSIGN_INIT || node_type === AST_OP_ASSIGN) {\n\n                // @ts-ignore\n                SType_instance[VALUES[nextSibling(firstChild(cur))]] = resultType(cur);\n\n                setType(cur, AST_OP_ASSIGN);\n            }\n\n            cur = nextSibling(cur);\n\n        } while( cur !== 0);\n\n        addSymbol(name, STypeID);\n\n        //TODO: inherit...\n\n        //TODO: SType...\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__SBRY_MODE__ === \"dev\") ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr(false); //TODO... : typehint too...\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n\n        if( code.charCodeAt(++offset) ===  end) {\n\n            if( code.charCodeAt(++offset) !==  end ) {\n                // empty str.\n                VALUES[node] = \"\";\n            } else { \n                //TODO: multi-str.\n\n                let count = 0;\n\n                while(true) {\n                    curChar = code.charCodeAt(++offset);\n                    \n                    if( __SBRY_MODE__ === \"dev\" && offset >= code.length)\n                        throw new Error(\"NOK\");\n\n                    if( curChar !== end ) {\n                        count = 0;\n                        continue;\n                    }\n                    \n                    if( ++count === 3)\n                        break;\n                        \n                }\n\n                ++offset;\n                VALUES[node] = \"`\" + code.slice(beg+3, offset-3) + \"`\";\n            }\n        } else {\n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar !== end);\n\n           ++offset;\n            VALUES[node] = code.slice(beg, offset);\n        }\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar !== CHAR_DOT && curChar !== CHAR_BRACKET_LEFT ) {\n\n                //TODO: better way for inlineKlasses\n                if( token === \"int\")\n                    VALUES[node] = __SBRY_COMPAT__ === \"NONE\" ? \"Number\" : \"BigInt\";\n                if( token === \"float\")\n                    VALUES[node] = \"Number\";\n                if( token === \"str\")\n                    VALUES[node] = \"String\";\n                if( token === \"bool\")\n                    VALUES[node] = \"Boolean\";\n            }\n\n            if( curChar === CHAR_DOT) { // get attr...\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_OP_ATTR);\n                setFirstChild(node, cur);\n\n                ++offset;\n\n                const name = VALUES[node] = nextSymbol(); //TODO: continue...\n\n                // @ts-ignore\n                setResultType(node, TYPES[resultType(cur)][name]);\n            }\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                if( __SBRY_MODE__ === \"dev\" ) copy_py_code_beg(cur, node);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n\n                if( __SBRY_MODE__ === \"dev\" && fctType === undefined) {\n                    console.warn( VALUES[node], resultType(cur), Types[resultType(cur)]);\n                    throw \"nok\";\n                }\n\n                //TODO: return type...\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr(colon_is_end = true) { //TODO...\n\n    let value = readToken();\n\n    if( ! colon_is_end && curChar === CHAR_COLON) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol();\n        const typeID = getSymbol(type) + 1 as TYPE_ID;\n\n        // @ts-ignore\n        while(curChar === 124) { // |\n            ++offset;\n            nextSymbol();\n        }\n\n        setResultType(value, typeID);\n        addSymbol(VALUES[value], typeID); //TODO...\n\n        consumeSpaces();\n    }\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\n// @ts-ignore\nimport JS_stubs  from \"!!raw-loader!../../stubs/JS/__init__.pyi\";\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    //TODO: better handle imports...\n    let import_offset = 0;\n    while( _code.slice(import_offset, import_offset+5) === \"from \") {\n\n        const start = builtins.length;\n\n        py2ast(JS_stubs, \"JS\");\n\n        for(let i = start; i < builtins.length; ++i)\n            JS[builtins[i][0]] = builtins[i][1]; //TODO: array (?)\n\n        import_offset = _code.indexOf(\"\\n\", import_offset) + 1;\n    }\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __SBRY_MODE__ === \"dev\" ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __SBRY_MODE__ === \"dev\" && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __SBRY_MODE__ === \"dev\" && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __SBRY_MODE__ === \"dev\" && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __SBRY_MODE__ === \"dev\" && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        console.warn(\"at line\", CURSOR[0])\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __SBRY_MODE__ === \"dev\" && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __SBRY_MODE__ === \"dev\" && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    $B.imported[\"JS\"] = $B.jsobj2pyobj( globalThis );\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    $B.debug = 0;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(body, node.body);\n\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __SBRY_MODE__ === \"dev\" ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__SBRY_MODE__ === \"dev\") {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"console.log(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","export default class Py_object {\n\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__SBRY_MODE__ === \"dev\") set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__SBRY_MODE__ === \"dev\") set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( __SBRY_COMPAT__ !== \"NONE\" && resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst JSType = __SBRY_COMPAT__ === \"NONE\" ? \"Number\" : \"BigInt\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", JSType);\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        if( __SBRY_COMPAT__ === \"NONE\") {\n            w_sns(\"Math.trunc(\", other, \")\");\n        } else {\n            w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        }\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            if( __SBRY_COMPAT__ === \"NONE\")\n                                w_JSBinOp(call, a, op, b);\n                            else\n                                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","// must NOT depends on list.\nimport AST2JS, { AST_CLASSDEF, AST_DEF_FCT, AST_OP_ASSIGN_INIT, AST_SYMBOL } from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, firstChild, JS_CODE, nextSibling, NODE_ID, type, VALUES } from \"../dop\";\n\nexport const CURSOR = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode();\n\n    w_node(0);\n\n    const exported = [];\n    let cur = firstChild(0);\n\n    let node_type;\n    while( cur !== 0) {\n\n        node_type = type(cur);\n\n        if( node_type === AST_CLASSDEF || node_type === AST_DEF_FCT)\n            exported.push( VALUES[cur]);\n        if( node_type === AST_OP_ASSIGN_INIT ) {\n            const child = firstChild(cur);\n            if( type(child) === AST_SYMBOL)\n                exported.push( VALUES[child] );\n        }\n\n        cur = nextSibling(cur);\n    }\n\n    if( __SBRY_EXPORT__ === \"GLOBAL\" )\n        jscode += `\\nglobalThis.__SBRY_LAST_EXPORTED__ = {${exported.join(', ')}};\\n`;\n    if( __SBRY_EXPORT__ === \"SBRY\")\n        jscode += `\\n__SBRY__.register(\"${ast.filename}\", {${exported.join(', ')}});\\n`;\n    if( __SBRY_EXPORT__ === \"ES6\" )\n        jscode += `\\nexport {${exported.join(', ')}};\\n`;\n\n\treturn jscode;\n}\n\nfunction new_jscode() {\n\n    jscode = \"\";\n\n    let nbLines = 1;\n\n    if( __SBRY_COMPAT__ !== \"NONE\") {\n        if( __SBRY_EXPORT__ === \"ES6\" ) {\n            jscode += `import __SBRY__ from \"@SBrython\";\\n`;\n            ++nbLines;\n        }\n\n        if( __SBRY_EXPORT__ !== \"NONE\") {\n            jscode += `const {_r_, _sb_} = __SBRY__;\\n`;\n            ++nbLines;\n        }\n    }\n\n    if(__SBRY_MODE__ === \"dev\") {\n        CURSOR[CODE_LINE] = nbLines;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function hasJSCursor(node: NODE_ID) {\n    return JS_CODE[(node as any)*4 + CODE_LINE] !== 0;\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __SBRY_MODE__ === \"dev\" ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __SBRY_MODE__ === \"dev\" ) {\n        const has = hasJSCursor(node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n    } else {\n        AST2JS[type(node)!](node);\n    }\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __SBRY_MODE__ === \"dev\" ) {\n            const has = hasJSCursor(node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n            AST2JS[type(node)!](node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n        } else {\n            AST2JS[type(node)!](node);\n        }\n\n        jscode += args[i+1] as string;\n    }\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    //w_str(\"/* not implemented */\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __SBRY_MODE__ === \"dev\" && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __SBRY_MODE__ === \"dev\" ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__SBRY_MODE__ === \"dev\") set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __SBRY_MODE__ === \"dev\" && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\n// @ts-ignore\nglobalThis.assert = function assert(cond: boolean, msg = \"Assertion failed\") {\n    if( ! cond )\n        null;//throw new Error(msg);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = __SBRY_MODE__ === \"test\"; // Benchmark\nconst parser    = search.get(\"parser\") === \"false\" ? false : true;\nconst DEFAULT_COMPAT = (search.get(\"compat\") ?? \"NONE\") as typeof __SBRY_COMPAT__;\n\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = [\n    'basic test suite',\n    'numbers',\n    \"classes\" // ~726\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~616\n// list    ~345\n// dicts   ~205\n// sets    ~224\n// bytes   ~229\n\n// generators ~972...\n\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nconst select = document.querySelector<HTMLSelectElement>('#tests')!;\n\nconst defaultOpt = new Option(\"----\", undefined, true, true);\ndefaultOpt.toggleAttribute('disabled');\nselect.append( defaultOpt );\n\nselect.addEventListener('change', () => {\n\n    let code = select.value;\n\n    const codes = code.split(\"\\n\");\n    for(let l = 1; l < codes.length; ++l) {\n        const idx = codes[l].indexOf('#');\n        if( idx <= 0)\n            continue;\n        const config = JSON.parse( codes[l].slice(idx+1).trim());\n        if( config.COMPAT !== DEFAULT_COMPAT )\n            codes[l] = \"#\" + codes[l];\n        else\n            codes[l] = codes[l].slice(0, idx).trimEnd();\n    }\n\n    code = codes.join('\\n');\n\n    python_input.value = code;\n    localStorage.setItem('sbrython_code', code);\n    oneTimeExec(code);\n    \n});\n\nfor(let i = 0; i < brython_tests.length; ++i) {\n\n    const subtests = test_suites[ brython_tests[i] ];\n\n    for(let j = 0; j < subtests.length; ++j) {\n\n        const code = subtests[j];\n\n        if( code === \"\")\n            continue;\n\n        const name = code.slice(2 , code.indexOf(\"\\n\") );\n\n        const opts = new Option(name, code);\n        select!.append( opts );\n    }\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    globalThis.__SBRY_COMPAT__ = DEFAULT_COMPAT;\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    if( __SBRY_MODE__ === \"dev\" ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    //TODO: réimplémenter différemment ???\n\n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )   // when does it occur ?\n            continue;\n        if( ctype.start.line === 0) {// unprinted node\n            subparts.length -= 2;\n            continue;\n        }\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;        \n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n\n        if( val.__qualname__ !== undefined)\n            val = val.__qualname__;\n        else if( val.__name__ !== undefined)\n            val = val.__name__;\n        else if( val.name !== undefined)\n            val = val.name;\n        else\n            val = JSON.stringify(val);\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(const child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(const gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(const gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n\n    let failed = [];\n\n    const configs: typeof __SBRY_COMPAT__[] = __SBRY_COMPAT__ === \"NONE\"\n        ? [\"NONE\"]\n        : [\"NONE\", \"PERF\"]; //, \"FULL\"];\n\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            for(const config of configs) {\n\n                globalThis.__SBRY_COMPAT__ = config;\n\n                //TODO: second exclude...\n\n                let code = subtests[j];\n\n                if( code === \"\")\n                    continue;\n\n                const codes = code.split(\"\\n\");\n                for(let l = 1; l < codes.length; ++l) {\n                    const idx = codes[l].indexOf('#');\n                    if( idx <= 0)\n                        continue;\n                    const config = JSON.parse( codes[l].slice(idx+1).trim());\n                    if( config.COMPAT !== __SBRY_COMPAT__ )\n                        codes[l] = \"#\" + codes[l];\n                    else\n                        codes[l] = codes[l].slice(0, idx).trimEnd();\n                }\n\n                code = codes.join('\\n');\n        \n                if( merge ) {\n                    const indented_code = code.split('\\n').map(e => `    ${e}`).join('\\n');\n                    fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n                } else {\n                    try {\n                        fullcode = code;\n                        generate(fullcode, results, parser);\n                        execute(results, sbry_print);\n                    } catch(e) {\n                        error = e as Error;\n\n                        failed.push({\n                            code,\n                            error: e,\n                        })\n\n                        // print last error...\n                        try {\n                            const ast = astnode2tree();\n                            try {\n                                print_js( results.sbry.code, ast );\n                            } catch(e) { console.warn(e); }\n                            try {\n                                print_python( fullcode, ast );\n                            } catch(e) { console.warn(e); }\n                            try {\n                                print_ast( ast );\n                            } catch(e) { console.warn(e); }\n                        } catch(e) { console.warn(e); }\n                    }\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n\n        if( error ) {\n\n            try {\n                const ast = astnode2tree();\n                try {\n                    print_js( results.sbry.code, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_python( fullcode, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_ast( ast );\n                } catch(e) { console.warn(e); }\n            } catch(e) { console.warn(e); }\n        }\n    }\n    \n    if(error) {\n\n        console.warn(failed);\n\n        python_input.value = failed[failed.length-1]?.code ?? results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('\\n#');\n\n    parts[0] = parts[0].slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n        \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i) {\n            if( lines[i][0] === '#' ) {\n                if( lines[i].slice(1).trim() === '' ) // commented empty line\n                    ++nbEmptyLines;\n                else\n                    ++nbExcluded\n            }\n        }\n\n        let code_len = lines.length - 1 - nbEmptyLines;\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js\";\nimport { id2name as id2typename } from \"@SBrython/sbry/types\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string|null,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n\n    const info = Types[typeID];\n\n    const inst_name  = info?.__qualname__ as string ?? info?.__name__ ?? \"\"\n    const klass_name = info?.__class__?.__qualname__ as string ?? info?.__class__?.__name__ ?? \"\"\n\n    const result_type = typeID === 0 ? null : `${inst_name}:${klass_name}`;\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SBRY__.getModules()\");\n    else\n        w_str(`__SBRY__.getModule(\"${value}\")`);\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __SBRY_MODE__ === \"dev\" && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __SBRY_MODE__ === \"dev\" && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__SBRY_MODE__ === \"dev\") set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}"],"names":["convert","dst","node","context","targets","undefined","target","coffset","addFirstChild","convert_node","value","rtype","resultType","result_type","annotation","id","local_symbols","console","warn","TYPEID_jsint","TYPEID_int","setResultType","nbChildren","length","cur","i","addSibling","type","AST_OP_ASSIGN","AST_OP_ASSIGN_ATTR","VALUES","parentTypeID","attrname","nextSibling","attrdef","TYPEID","Types","AST_OP_ASSIGN_INIT","setType","last_id","AST_SYMBOL","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_STRUCT_DICT","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_RAISE","AST_KEY_IMPORT","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_OP_UNARY","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_NOT","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_AUG","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING","AST_LIT_FSTRING_FVAL","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_DEF_FCT","AST_DEF_METH","AST_DEF_ARGS","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","AST_CALL","AST_CALL_ARG_KW","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TRYBLOCK_CATCH","AST_CTRL_TERNARY","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CTRL_FOR_RANGE","AST_CTRL_FOR","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","ast2js","firstChild","w_sns","require","SBrython","register","name","exported","this","buildModule","jscode","ast","filename","Error","Function","runJSCode","getModules","getModule","getASTFor","print","args","log","_r_","__SBRY_COMPAT__","_sb_","execute","results","sbry_print","offset","bry","code","beg","performance","now","sb","fct","t0","t1","times","executeSBrython","sbry","$B","imported","executeBrython","globalThis","__SBRY__","w_str","w_node","LIST","id2name","RETURN_TYPE","Symbol","WRITE_CALL","JS_NAME","ARGS_INFO","klass","initBuiltinClass","TYPEID_type_jsint_","add_method","RET_JSINT","call","w_subs","addJSBinOps","OP_BIN_POW","OP_BIN_ADD","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","convert_other","OP_BIN_MUL","w_call","a","op","b","Number2Int","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_INT","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","iter","constructor","$name","func","body","Body","set_py_code_from_list","to_write","setParentOPPrio","parentOPPrio","_context","assert","cond","msg","fist","rchild","lchild","w_NL","bname2pyname","left_id","right_id","left","right","ltype","TYPEID_NotImplementedType","method","reversed_operator","__class__","__name__","setFirstChild","setSibling","_","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","Object","assign","ILIST","buildPyCode","start","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","convert_ast","dop_reset","createASTNode","Context","ASTNODES","symbols","builtins","createSubContext","createClassContext","ctx","operand","TYPEID_bool","first","slice","vtype","qname","TYPEID_str","__qualname__","TYPEID_float","toString","TYPEID_NoneType","test","orelse","TYPEID_type_float_","RET_FLOAT","other","other_type","other_value","otype","TYPES","__int__","RET_STR","_op","write_arg","set_js_cursor","CODE_BEG","defval","CODE_END","write_posarg","exc","KW","kw","keywords","getKW","Py_Exception","Py_object","elts","TYPEID_NotImplemented","float2str","f","str","toExponential","sign_idx","includes","OP_BOOL_NOT","PythonError","python_exception","super","_raw_err_","BB","BE","TYPEID_unknown","TYPEID_None","TYPEID_type","TYPEID_type_int_","TYPEID_type_bool_","TYPEID_type_str_","Array","create","meta","__call__","brython_node","BRY2SBRY","lineno","col_offset","set_py_code","end_lineno","end_col_offset","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","CODE_LINE","CODE_COL","alt","names","module","ifblock_cur","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_LT","OP_CMP_LE","OP_CMP_GT","OP_CMP_GE","ops","return_type","opid2opmethod","w_JSCmpOp","OP_EQ2IS","debug_print_exception","err","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","pos","indexOf","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","JSException","convert_args","SType_fct","_args","has_vararg","vararg","has_kwarg","kwarg","args_pos","args_names","total_args","posonlyargs","kwonlyargs","addSblng","pos_defaults","defaults","posonly","doffset","convert_arg","arg","idx_vararg","idx_end_pos","Number","POSITIVE_INFINITY","nb_pos_defaults","Math","min","has_others","cut_off","kwonly","kw_defaults","has_kw","kwargs","py_offset","brython_name","weak_assign","key","instance_TypeID","addType","typeID","method_wrapper","klass_type","inst_type","bases","stypeID","p_prio","opid2jsop","r","NOCONVERT","a_value","idx","type_obj","attr","OP_ASSIGN","pyop_priorities","jsop_priorities","opid2ropmethod","opid2iopmethod","opsymbol2opid","asname","list","__str__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","abs","n","nb_tokens","total_lines","nb_excluded_lines","nb_files","resetResults","fill","printNode","ret_typeID","ret_type","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","curChar","CURRENT_PARAM_TYPE","POSONLY_END","JS","consumeEmptyLines","charCodeAt","CURSOR","nextSymbol","search","nextArg","consumeSpaces","readArg","getSymbol","readExpr","KNOWN_SYMBOLS","readToken","readBody","genericName","genericType","default_call","STypeID","addSymbol","cur_builtin_idx","ret_name","imported_name","inherit","push","SInstID","SType_klass","SType_instance","node_type","CURRENT_INDENTATION","consumeIndentedLines","readLine","set_py_code_beg","set_py_code_end","readComment","indent","createCallUopNode","count","nextChar","astnode_type","token","symbol","copy_py_code_beg","fctType","next","isEndOfExpr","readOp","op_str","colon_is_end","createCallOpNode","rop","rop_prio","lop","lop_prio","py2ast","_code","import_offset","JS_stubs","resetSymbols","copy_py_code_end","opnode","dst_off","src_beg","src_end","pyop_name","atype","ARRAY_TYPE","off","src_off","generate","use_parser","_ast","jsobj2pyobj","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","buildAST","__ast","generateSBrython","debug","future","future_features","symtable","_PySymtable_Build","js_from_root","js","generateBrython","RET_None","o","RET_INT2INT","Float64Array","CODE_BUFFER_SIZE","PY_CODE_BUFFER","ArrayBuffer","maxByteLength","JS_CODE_BUFFER","JS_CODE","NEXT_AST_NODE_ID","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","sibling","bname2jsop","values","genOpFct","create_function","nbBuiltins","opname","floordiv_float","floor","floordiv_int","result","mod_float","mod","mod_int","keys","JSType","TypeKlass","instance","jsname","Klass","RET_TYPE","write","nbLines","__SBRY_EXPORT__","new_jscode","child","buildJSCode","hasJSCursor","cur_indent_level","indents","has","AST2JS","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","handlers","cn","obj","writeOp","jop","find_and_write_call","Py_JSException","stype","returns","fct_return_type","last_type","fake_node","method_name","gen","instanceType","instanceTypeID","nops","nb_ops","comparators","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","URLSearchParams","location","test_name","get","merge","__SBRY_MODE__","DEFAULT_COMPAT","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","addEventListener","localStorage","setItem","oneTimeExec","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","select","defaultOpt","Option","toggleAttribute","append","codes","JSON","parse","trim","COMPAT","trimEnd","subtests","j","opts","fullcode","textContent","classList","remove","error","message","add","generate_report","astnode2tree","print_js","print_python","print_ast","print_code","children","createElement","pycode","style","setProperty","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","stringify","html_child","prev_highlighted","highlight","gui_elem","replaceChildren","tests","failed","configs","substats","stats","total","excluded","config","async","fetch","text","lines","exclude","x","parseInt","loadSubTests","parts","t","excl","nbEmptyLines","nbExcluded","code_len","find","v","isArray","labels","tformat","time","unit","toFixed","padStart","tdiff","c","A","B","report","nb_lines","nb_done","tcoef","info","kname","ADD_EQ","iop","prio","write_multi_jsop","fct_type"],"sourceRoot":""}