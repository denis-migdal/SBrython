{"version":3,"file":"Editor/index.js","mappings":"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","sources":["webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/core_modules/body/astconvert.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/core_modules/class/classdef/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/for/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/astconvert.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/while/astconvert.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/core_modules/functions/args/astconvert.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/astconvert.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/astconvert.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/break/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/continue/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/import/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/astconvert.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/core_modules/literals/None/astconvert.ts","webpack://sbrython/./src/core_modules/literals/None/stype.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/literals/bool/astconvert.ts","webpack://sbrython/./src/core_modules/literals/bool/stype.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/astconvert.ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/astconvert.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/astconvert.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/core_modules/literals/float/stype.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/core_modules/literals/int/astconvert.ts","webpack://sbrython/./src/core_modules/literals/int/stype.ts","webpack://sbrython/./src/core_modules/literals/int/stype_jsint.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/literals/str/astconvert.ts","webpack://sbrython/./src/core_modules/literals/str/stype.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/core_modules/operators/=/astconvert.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/core_modules/operators/=_init/astconvert.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/astconvert.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/operators/[]/astconvert.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/operators/attr/astconvert.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/core_modules/operators/binary/astconvert.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/core_modules/operators/boolean/astconvert.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/core_modules/operators/compare/astconvert.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/core_modules/operators/unary/astconvert.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/core_modules/pass/astconvert.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/return/astconvert.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/astconvert.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/core_modules/structs/list/astconvert.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/astconvert.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/symbol/astconvert.ts","webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/structs/STypes.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/utils/results.ts"],"sourcesContent":["export default __webpack_public_path__ + \"Editor/index.html\";","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\nexport const CURSOR = new ARRAY_TYPE(2);\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    CURSOR[CODE_LINE] = 3;\n    CURSOR[CODE_COL] = jscode.length;\n}\n\ntype Printable = {toString(): string};\n\nlet indent = \"    \";\nlet cur_indent_level = 0;\n//let cur_indent = \"\";\n\nconst indents = [\n    \"\",\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n]\n\nexport const NL = {\n    toString: function() {\n\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length + 1;\n\n        return \"\\n\" + indents[cur_indent_level];\n    }\n}\nexport const BB = {\n    toString: function() {\n        return indents[++cur_indent_level];\n    }\n}\nexport const BE = {\n    toString: function() {\n        return indents[--cur_indent_level];\n    }\n}\n\n// transforms into a template string\nexport function r(...args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    return args;\n}\n\n// write a template string\nexport function wr(args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    if( typeof args === \"string\")\n        return w(args);\n    return wt(...args);\n}\n\n\n// write with template string wt``\nexport function wt(str: TemplateStringsArray, ...args: (Printable|number)[]) {\n    \n    for(let i = 0; i < args.length; ++i) {\n        jscode += str[i];\n        w(args[i]);\n    }\n\n    jscode += str[args.length];\n}\n\n// generic write ?\nexport function w(...args: (Printable|number)[]) {\n\n    for(let i = 0; i < args.length; ++i) {\n\n        let arg = args[i];\n\n        if( Array.isArray(arg) ) { // likely a r``\n            wr(arg as Parameters<typeof wr>[0]);\n            continue;\n        }\n\n        if( typeof arg !== \"number\" ) {\n\n            if( arg === undefined )\n                arg = \"undefined\";\n            if( arg === null )\n                arg = \"null\";\n\n            jscode += arg.toString();\n            continue;\n        }\n\n        const offset = 4*arg;\n        \n        set_js_cursor(offset + CODE_BEG);\n        AST2JS[type(arg)!](arg);\n        set_js_cursor(offset + CODE_END)\n    }\n}\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { BB, BE, NL, w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(BB);\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i)\n        w(NL, i);\n\n    w(BE);\n}","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node[i], context);\n}\n\nconvert.brython_name = \"Body\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let base: string|number = \"_r_.object\";\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    if( nbChildren === 2)\n        base = body+1;\n\n    wt`class ${VALUES[node]} extends ${base} {${body}${NL}}`;\n}","import { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = getSTypeID(node.name);\n    context = new Context(\"class\", context);\n\n    if( node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    convert_body(coffset, node.body, context);\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}\n\nconvert.brython_name = \"ClassDef\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    wt`for(var ${idx} of ${list}){${body}${NL}}`;\n}","import { CONTROLFLOWS_FOR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\")\n        return false;\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    setType(dst, CONTROLFLOWS_FOR);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.iter, context);\n    convert_body(coffset+1, node.body, context);\n\n    VALUES[dst] = target;\n}\n\nconvert.brython_name = \"For\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let beg : string|number|any  = \"0n\";\n    let incr: string|number|any  = \"1n\";\n\n    let end = Number2Int(body+1);\n\n    if( nbChildren > 2) {\n        beg = end;\n        end = Number2Int(body+1);\n    }\n\n    if( nbChildren === 4)\n        incr = Number2Int(body+2);\n\n    return wt`for(var ${idx} = ${beg}; ${idx} < ${end}; ${idx} += ${incr}){${body}${NL}}`;\n}","import { CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    if( node.iter.constructor.$name !== \"Call\" || node.iter.func.id !== \"range\")\n        return false;\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n    context.local_symbols[node.value] = STYPE_INT;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    convert_body(coffset, node.body, context);\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}\n\nconvert.brython_name = \"For\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    wt`if(${coffset++}){${coffset++}${NL}}`;\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        wt`else if(${coffset++}){${coffset++}${NL}}`;\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        wt`else {${coffset}${NL}}`;\n}","import { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n    convert_body(coffset++, node.body, context);\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n        convert_body(coffset++, cur.body, context);\n\n        childCount += 2;\n    }\n}\n\nconvert.brython_name = \"If\";","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`(${coffset} ? ${coffset+1} : ${coffset+2})`;\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}\n\nconvert.brython_name = \"IfExp\";","import { BB, BE, NL, w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    wt`try {${coffset}${NL}}`;\n    wt`catch(_raw_err_){${BB}${NL}`;\n\n        w(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i)\n            w(NL, \"else \", i + coffset );\n\n        // not a catch all...\n        if( nbChild(coffset + nbChildren-1) !== 1)\n            w(NL, \"else { throw _raw_err_ }\");\n\n    w(BE, NL);\n\n}","import { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    convert_body(coffset, node.body, context);\n\n    for(let i = 1; i < nbChildren; ++i)\n        convert_node(i+coffset, node.handlers[i-1], context);\n\n}\n\nconvert.brython_name = \"Try\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1)\n        return wt`{${coffset}${NL}}`;\n\n    wt`if(${coffset+1}){${coffset}${NL}}`;\n}","import { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    convert_body(coffset, node.body, context);\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}\n\nconvert.brython_name = \"ExceptHandler\";","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`while(${coffset}){${coffset+1}${NL}}}`;\n}","import { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_body, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n    convert_body(coffset+1, node.body, context);\n\n}\n\nconvert.brython_name = \"While\";","import { set_js_cursor, w, wr, wt } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT } from \"@SBrython/structs/STypes\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"./astconvert\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as STypeFct;\n\n    const meta = SType_fct.__call__;\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w(\", \");\n\n        if( kw_start === i)\n            w(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            wt`...${name}`;\n        else\n            wr( binary_jsop(node, name, '=', \"[]\") );\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        wr( binary_jsop(node, name, '=', \"{}\") );\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === STYPE_JSINT )\n            defval = Number2Int(defval);\n\n        wr( binary_jsop(node, name, '=', defval) );\n    }else {\n        w(name);\n    }\n\n    set_js_cursor(offset + CODE_END);\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: STypeFct, context: Context) {\n\n    const meta = SType_fct.__call__;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( total_args !== 0) {\n\n        set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n    } else {\n        // an estimation...\n        const col = node.col_offset + 4 + node.name.length + 1;\n\n        const py_offset = 4*dst;\n        PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n        PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    //TODO: convert annotation type...\n    let result_type = node.annotation?.id; \n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === undefined ) {\n            result_type = resultType(coffset);\n            if(result_type === STYPE_JSINT)\n                result_type = STYPE_INT;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    set_py_code(dst, node);\n}","import { r, wr } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\n\nfunction print_obj(obj: Record<string, any>) {\n\n    const keys = Object.keys(obj);\n    if(keys.length === 0)\n        return [[]];\n\n    const str = new Array(keys.length+1);\n    str[0] = `{${keys[0]}: `;\n    let i;\n    for(i = 1; i < keys.length; ++i)\n        str[i]  = `, ${keys[i]}: `;\n\n    str[i] = \"}\";\n\n    return [str, ...Object.values(obj)];\n}\n\nfunction join(data: any[], sep=\", \") {\n\n    if(data.length === 0)\n        return [[\"\"]];\n\n    const str = new Array(data.length+1);\n    str[0] = \"\";\n    let i;\n    for(i = 1; i < data.length; ++i)\n        str[i] = sep;\n    str[i] = \"\";\n\n    return [str, ...data];\n}\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as STypeFct).__call__;\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let kw_pos = nbChildren;\n    for(let i = 1; i < nbChildren; ++i)\n        if( type( i + coffset) === FUNCTIONS_CALL_KEYWORD) {\n            kw_pos = i;\n            break;\n        }\n\n    let nb_pos = meta.idx_end_pos;\n    if( nb_pos === Number.POSITIVE_INFINITY)\n        nb_pos = Math.max(meta.idx_vararg, kw_pos-1);\n\n    let pos_size = nb_pos+1;\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY )\n        pos_size = meta.idx_vararg+2;\n    let pos = new Array(pos_size);\n    \n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let has_kw = false;\n\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY ) {\n\n        const cutoff = Math.min(kw_pos, meta.idx_vararg);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const varg_start = meta.idx_vararg+1;\n        const varg_nb = kw_pos - varg_start;\n        if( varg_nb !== 0 ) {\n\n            // template string... [ [..str], ...idx ]\n            // => [ (a), (b), (c), (d) ] ...\n            let str = new Array(varg_nb + 1);\n            let idx = new Array(varg_nb + 1);\n\n            str[0]       = \"[\";\n\n            idx[0]       = str;\n            idx[1]       = coffset + varg_start;\n            for(let i = 1; i < varg_nb; ++i) {\n                str[i]  = \", \";\n                idx[i+1]= coffset + varg_start + i;\n            }\n\n            str[varg_nb] = \"]\"; // prevents sparse array ?\n        }\n    } else {\n\n        const cutoff = Math.min(kw_pos, nb_pos+1);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < kw_pos; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        has_kw = cutoff !== kw_pos;\n    }\n\n    let has_kwargs = false;\n\n    const args_pos = meta.args_pos;\n    \n\n    for(let i = kw_pos; i < nbChildren; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) {\n            pos[idx] = arg;\n            continue;\n        }\n\n        has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            has_kwargs = true;\n        }\n    }\n\n    let obj: Record<string, any> = kw;\n    //TODO: only the ones at -1...\n    if( has_kwargs && ! meta.has_kw ){\n        obj = kwargs;\n    } else if( has_kwargs ) {\n        obj[meta.kwargs!] = print_obj(kwargs);\n    }\n\n    if( has_kw )\n        pos[pos.length-1] = print_obj(obj);\n    else {\n        while(pos.length > 0 && pos[pos.length-1] === undefined)\n            --pos.length;\n    }\n\n    return r`${coffset}(${join(pos)})`; // args ?\n}\n\nexport default function ast2js(node: number) {\n    wr( (VALUES[node] as STypeFct).__call__.substitute_call!(node) );\n}","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = STypes[fct_type];\n    const ret_type = (fct.__call__ as STypeFctSubs).return_type();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context );\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n    for(let i = 0; i < node.keywords.length; ++i)\n        convert_node(coffset++, node.keywords[i], context );\n\n    VALUES[dst] = fct;\n}\n\nconvert.brython_name = \"Call\";","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w( firstChild(node) );\n}","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}\n\nconvert.brython_name = \"keyword\";","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, type, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    wt`function ${name}(${coffset}){${coffset+1}${NL}}`;\n}","import { Context, convert_body } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport { default_call } from \"../call/ast2js\";\nimport { convert_args } from \"../args/astconvert\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = STypes[rtype] as STypeFct;\n    const meta    = stype.__call__;\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    meta.return_type = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = getSTypeID(annotation);\n        // force the type.\n        meta.return_type = () => fct_return_type!;\n    }\n\n    convert_body(coffset+1, node.body, context);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: STypeFct = {\n        __name__: \"function\",\n        __call__: {\n            args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n            args_pos       : {},\n            idx_end_pos    : -1,\n            idx_vararg     : -1,\n            has_kw         : false,\n            generate,\n            return_type    : () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__.return_type();\n            },\n            substitute_call: default_call\n        }\n    }\n\n    const STypeID = STypes.length;\n    STypes[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        const fake_node = {\n            constructor: {\n                $name: \"Return\"\n            },\n                lineno: node.end_lineno,\n            end_lineno: node.end_lineno,\n                col_offset: node.end_col_offset,\n            end_col_offset: node.end_col_offset,\n        }\n        node.body.push( fake_node );\n    }\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}\n\nconvert.brython_name = \"FunctionDef\";","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return wt`_b_.assert(${firstChild(node)})`;\n}","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}\n\nconvert.brython_name = \"Assert\";","function assert(cond: boolean) {\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w(\"break\");\n}","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}\n\nconvert.brython_name = \"Break\";","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"continue\");\n}","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}\n\nconvert.brython_name = \"Continue\";","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w(value[0])\n\n    if( value[1] !== undefined)\n        w(\": \", value[1]);\n}","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}\n\nconvert.brython_name = [\"alias\"];","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        if( i !== 0)\n            w(\", \");\n        w(i + coffset);\n    }\n\n    w('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w(\"__SBRYTHON__.getModules()\");\n    else\n        wt`__SBRYTHON__.getModule(\"${value}\")`;\n}","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context);\n\n    VALUES[dst] = node.module;\n}\n\nconvert.brython_name = [\"Import\", \"ImportFrom\"];","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`throw new _b_.PythonError(${firstChild(node)})`;\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}\n\nconvert.brython_name = \"Raise\";","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import AST_CONVERT_0 from \"./symbol/astconvert\";\nimport      AST2JS_0 from \"./symbol/ast2js\";\nimport AST_CONVERT_1 from \"./structs/tuple/astconvert\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport AST_CONVERT_2 from \"./structs/list/astconvert\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport AST_CONVERT_3 from \"./structs/dict/astconvert\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport AST_CONVERT_4 from \"./return/astconvert\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport AST_CONVERT_5 from \"./pass/astconvert\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport AST_CONVERT_6 from \"./operators/unary/astconvert\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport AST_CONVERT_7 from \"./operators/compare/astconvert\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport AST_CONVERT_8 from \"./operators/boolean/astconvert\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport AST_CONVERT_9 from \"./operators/binary/astconvert\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport AST_CONVERT_10 from \"./operators/attr/astconvert\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport AST_CONVERT_11 from \"./operators/[]/astconvert\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport AST_CONVERT_12 from \"./operators/AssignOp/astconvert\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport AST_CONVERT_13 from \"./operators/=_init/astconvert\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport AST_CONVERT_14 from \"./operators/=/astconvert\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport AST_CONVERT_15 from \"./literals/str/astconvert\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport AST_CONVERT_16 from \"./literals/int/astconvert\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport AST_CONVERT_17 from \"./literals/float/astconvert\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport AST_CONVERT_18 from \"./literals/f-string/astconvert\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport AST_CONVERT_19 from \"./literals/f-string/FormattedValue/astconvert\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport AST_CONVERT_20 from \"./literals/bool/astconvert\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport AST_CONVERT_21 from \"./literals/None/astconvert\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport AST_CONVERT_22 from \"./keywords/raise/astconvert\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport AST_CONVERT_23 from \"./keywords/import/astconvert\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport AST_CONVERT_24 from \"./keywords/import/alias/astconvert\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport AST_CONVERT_25 from \"./keywords/continue/astconvert\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport AST_CONVERT_26 from \"./keywords/break/astconvert\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport AST_CONVERT_27 from \"./keywords/assert/astconvert\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport AST_CONVERT_28 from \"./functions/def/astconvert\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport AST_CONVERT_29 from \"./functions/call/astconvert\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport AST_CONVERT_30 from \"./functions/call/keyword/astconvert\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport AST_CONVERT_31 from \"./functions/args/astconvert\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport AST_CONVERT_32 from \"./controlflows/while/astconvert\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport AST_CONVERT_33 from \"./controlflows/tryblock/astconvert\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport AST_CONVERT_34 from \"./controlflows/tryblock/catch/astconvert\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport AST_CONVERT_35 from \"./controlflows/ternary/astconvert\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport AST_CONVERT_36 from \"./controlflows/ifblock/astconvert\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport AST_CONVERT_37 from \"./controlflows/for_range/astconvert\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport AST_CONVERT_38 from \"./controlflows/for/astconvert\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport AST_CONVERT_39 from \"./class/classdef/astconvert\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport AST_CONVERT_40 from \"./body/astconvert\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nimport type {T_ASTCONVERT, T_AST2JS} from './'\n\nexport const AST_CONVERT: T_ASTCONVERT[] = [\n\tAST_CONVERT_0,\n\tAST_CONVERT_1,\n\tAST_CONVERT_2,\n\tAST_CONVERT_3,\n\tAST_CONVERT_4,\n\tAST_CONVERT_5,\n\tAST_CONVERT_6,\n\tAST_CONVERT_7,\n\tAST_CONVERT_8,\n\tAST_CONVERT_9,\n\tAST_CONVERT_10,\n\tAST_CONVERT_11,\n\tAST_CONVERT_12,\n\tAST_CONVERT_13,\n\tAST_CONVERT_14,\n\tAST_CONVERT_15,\n\tAST_CONVERT_16,\n\tAST_CONVERT_17,\n\tAST_CONVERT_18,\n\tAST_CONVERT_19,\n\tAST_CONVERT_20,\n\tAST_CONVERT_21,\n\tAST_CONVERT_22,\n\tAST_CONVERT_23,\n\tAST_CONVERT_24,\n\tAST_CONVERT_25,\n\tAST_CONVERT_26,\n\tAST_CONVERT_27,\n\tAST_CONVERT_28,\n\tAST_CONVERT_29,\n\tAST_CONVERT_30,\n\tAST_CONVERT_31,\n\tAST_CONVERT_32,\n\tAST_CONVERT_33,\n\tAST_CONVERT_34,\n\tAST_CONVERT_35,\n\tAST_CONVERT_36,\n\tAST_CONVERT_37,\n\tAST_CONVERT_38,\n\tAST_CONVERT_39,\n\tAST_CONVERT_40,\n]\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"null\");\n}","import { LITERALS_NONE } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_NONETYPE } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( ! (typeof node.value === \"object\")\n            || !(\"__class__\" in node.value)\n            || node.value.__class__.__qualname__ !== \"NoneType\" )\n        return false;\n\n    setType(dst, LITERALS_NONE);\n    setResultType(dst, STYPE_NONETYPE);\n}\n\nconvert.brython_name = \"Constant\";","import { addSType } from \"@SBrython/structs/STypes\";\n\naddSType('NoneType', {});","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { LITERALS_BOOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_BOOL } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( typeof node.value !== \"boolean\" )\n        return false;\n\n    setType(dst, LITERALS_BOOL);\n    setResultType(dst, STYPE_BOOL);\n    \n    VALUES[dst] = node.value; // TODO: 2 types instead of one ?\n}\n\nconvert.brython_name = \"Constant\";","import { CMPOPS_LIST, genCmpOps } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType  } from \"@SBrython/structs/STypes\";\n\naddSType('bool', {\n    ...genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"${\", firstChild(node), \"}\")\n}","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}\n\nconvert.brython_name = \"FormattedValue\";","import { set_js_cursor, w } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    w(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === STYPE_STR) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            set_js_cursor(offset + CODE_BEG);\n            w(VALUES[i]);\n            set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w(\"`\");\n}","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, STYPE_STR);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context);\n}\n\nconvert.brython_name = \"JoinedStr\";","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${VALUES[node]}`);\n}","import { LITERALS_FLOAT } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_FLOAT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( ! (node.value instanceof Object) || node.value.__class__?.__qualname__ !== \"float\")\n        return false;\n\n    setType(dst, LITERALS_FLOAT);\n    setResultType(dst, STYPE_FLOAT);\n    \n    VALUES[dst] = node.value.value;\n}\n\nconvert.brython_name = \"Constant\";","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { r } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport const SType_type_float = addSType('type[float]', {\n    __call__: {\n        //TODO...\n        return_type: RET_FLOAT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return Int2Number(other);\n            if( other_type === STYPE_FLOAT || other_type === STYPE_INT)\n                return other_type;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" )\n                        return \"Number.POSITIVE_INFINITY\";\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\")\n                        return \"Number.NEGATIVE_INFINITY\";\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`parseFloat(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('float', {\n\n    // @ts-ignore\n    __class__: SType_type_float,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`_b_.float2str(${node})`;\n        }\n    },\n    \n    ...genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    ...genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.mod_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genUnaryOps(['u.-']    , RET_FLOAT),\n    ...genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { w } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === STYPE_INT ) {\n        // force str write (else might assume this is an AST node ID)...\n        w(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${value}`);\n}","import { LITERALS_INT } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    let value = node.value;\n\n    if(value.__class__?.__qualname__ === \"int\")\n        value = value.value;\n\n    if( typeof value !== \"number\" && typeof value !== \"bigint\" )\n        return false;\n\n    const real_type = typeof value !== \"number\" ? STYPE_INT : STYPE_JSINT;\n\n    setType(dst, LITERALS_INT);\n    setResultType(dst, real_type);\n    \n    VALUES[dst] = value;\n}\n\nconvert.brython_name = \"Constant\";","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, id_jsop, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_IJ2INT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_JSINT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_int = addSType('type[int]', {\n    __call__: {\n        //TODO...\n        return_type: RET_INT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return other;\n            if( other_type === STYPE_JSINT)\n                return Number2Int(other);\n            if( other_type === STYPE_FLOAT )\n                return r`BigInt(Math.trunc(${other}))`;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`BigInt(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('int', {\n\n    //TODO: fix type...\n    // @ts-ignore\n    __class__: SType_type_int,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`${node}.toString()`;\n        }\n    },\n\n    __int__: {\n        return_type: RET_INT,\n        substitute_call(node, self) {\n            return id_jsop(node, self);\n        }\n    },\n    /* */\n    ...genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_INT2INT,\n        {\n            substitute_call(node, a, b) {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_int(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_INT,\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    return unary_jsop(node, '-', Int2Number(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps( ['~'], RET_INT),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n\n});","import { r } from \"@SBrython/ast2js\";\nimport { resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType, STYPE_FLOAT, STYPE_INT } from \"@SBrython/structs/STypes\";\n\naddSType('jsint', {\n\n    ...genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_IJ2INT,\n        {\n            substitute_call: (node, a, b) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, Number2Int(a), '*', Number2Int(b) );\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_INT )\n                    return unary_jsop(node, '-', Number2Int(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps(['~'], // min_safe_integer == max_safe_integer.\n        RET_INT,\n        {\n            convert_self : CONVERT_2INT\n        }\n    ),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /*\n    __int__: {\n        return_type: () => 'int',\n        call_substitute(node, self) {\n            return id_jsop(node, self);\n        }\n    },*/\n});","import { wt } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`'${VALUES[node]}'`;\n}","import { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    if( typeof node.value !== \"string\")\n        return false;\n\n    setType(dst, LITERALS_STR);\n    setResultType(dst, STYPE_STR);\n\n    VALUES[dst] = node.value;\n}\n\nconvert.brython_name = \"Constant\";","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps} from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_str = addSType('type[str]', {\n    __call__: {\n        //TODO...\n        return_type: RET_STR,\n        substitute_call: (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_STR )\n                return other;\n\n            const method = STypes[other_type]?.__str__ as STypeFctSubs;\n            if( method === undefined )\n                throw new Error(`${STypes[other_type].__name__}.__str__ not defined`);\n            return method.substitute_call!(other);\n        }\n    }\n});\n\naddSType('str', {\n\n    // @ts-ignore\n    __class__: SType_type_str,\n\n    __len__: {\n        return_type: RET_INT,\n        substitute_call: (_) => {\n            return r`${firstChild(_) + 1}.length`;\n        }\n    },\n\n    ...genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    ...genBinaryOps([\"+\"]      , RET_STR2STR),\n    ...genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            substitute_call: (node: number, a: number, b: number) => {\n                \n                if( resultType(a) !== STYPE_STR )\n                    [a,b] = [b,a];\n\n                return r`${a}.repeat(${b})`;\n            }\n        }),\n});","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { OPERATORS__EQ, SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID, STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const isMultiTarget = \"targets\" in node;\n    const targets = isMultiTarget ? node.targets : [node.target];\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && !(targets[0].id in context.local_symbols)\n    )\n        return false;\n\n    setType(dst, OPERATORS__EQ);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node?.annotation?.id;\n    if( annotation !== undefined)\n        result_type = getSTypeID(annotation);\n\n    if( result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === STYPE_JSINT)\n            result_type = STYPE_INT; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n\n/*\n        // could be improved I guess.\n        if( type(i+coffset) === SYMBOL) {\n    \n            // if exists, ensure type.\n            const ltype = context.local_symbols[i+coffset];\n            if( ltype !== undefined ) {\n                if( ltype !== 0 && rtype !== ltype)\n                    {}//console.warn(\"Wrong result_type\");\n    \n                // annotation_type\n            }\n        }\n*/\n    }\n}\n\nconvert.brython_name = [\"Assign\", \"AnnAssign\"];","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    w(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID, STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const isMultiTarget = \"targets\" in node;\n    const targets = isMultiTarget ? node.targets : [node.target];\n\n    if(    context.type === \"class\"\n        || targets[0].constructor.$name !== \"Name\"\n        || targets[0].id in context.local_symbols\n    )\n        return false;\n\n    setType(dst, OPERATORS__EQ_INIT);\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node?.annotation?.id;\n    if( annotation !== undefined)\n        result_type = getSTypeID(annotation);\n\n\n    if( result_type !== null && result_type !== rtype )\n            console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === STYPE_JSINT)\n            result_type = STYPE_INT; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\nconvert.brython_name = [\"Assign\", \"AnnAssign\"];","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(resultType(coffset+1)!);\n\n    // try a = a + b\n    if( type === STYPE_NOT_IMPLEMENTED) {\n        throw new Error(`${resultType(coffset+1)} ${op}= ${resultType(coffset)} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}\n\nconvert.brython_name = [\"AugAssign\"];","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    wt`${coffset}[${coffset+1}]`;\n}","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}\n\nconvert.brython_name = [\"Subscript\"];","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`${firstChild(node)}.${VALUES[node]}`;\n}","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}\n\nconvert.brython_name = [\"Attribute\"];","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = STypes[resultType(coffset)]![VALUES[node]] as STypeFctSubs;\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(rtype);\n\n    // try reversed operator\n    if( type === STYPE_NOT_IMPLEMENTED) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined)\n            type   = method.return_type(ltype!);\n\n        if( type === STYPE_NOT_IMPLEMENTED)\n            throw new Error(`${rtype} ${op} ${ltype} NOT IMPLEMENTED!`);\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n\nconvert.brython_name = [\"BinOp\"];","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { wr } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\nimport { multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    wr( multi_jsop(node, VALUES[node]) );\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}\n\nconvert.brython_name = [\"BoolOp\"];","import { w, wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\n\nfunction find_and_call_substitute(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n    if( method !== undefined )\n        type = method.return_type(rtype!);\n\n    if( type === STYPE_NOT_IMPLEMENTED) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined )\n            type   = method.return_type(ltype!);\n        \n        if( type === STYPE_NOT_IMPLEMENTED) {\n            if( op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            return binary_jsop(node, left, jsop, right);\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    return method.substitute_call!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            wr( binary_jsop(node, left, '===', right) );\n            continue;\n        }\n        if( op === 'is not' ) {\n            wr( binary_jsop(node, left, '!==', right) );\n            continue;\n        }\n        \n        wr( find_and_call_substitute(node, left, op, right) );\n    }\n}","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const ops = node.ops.map( (e: any) => {\n        const op = bname2pyname[e.constructor.$name as keyof typeof bname2pyname];\n        if( op === undefined)\n            throw new Error(`${e.constructor.$name} not implemented!`);\n        return op;\n    });\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, STYPE_BOOL);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n\nconvert.brython_name = \"Compare\";","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not')\n        return wr( unary_jsop(node, '!', Int2Number(left, STYPE_JSINT) ) );\n\n    const method = STypes[resultType(left)!][value] as STypeFctSubs;\n\n    wr( method.substitute_call!(node, left) );\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL, STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') {\n\n        setResultType(dst, STYPE_BOOL);\n        return;\n    }\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type();\n\n    if( type === STYPE_NOT_IMPLEMENTED)\n        throw new Error(`${op} ${resultType(coffset)} NOT IMPLEMENTED!`);\n\n    setResultType(dst, type);\n}\n\nconvert.brython_name = [\"UnaryOp\"];","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"/* not implemented */\");\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}\n\n\nconvert.brython_name = \"Pass\";","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w(\"return null\");\n\n    return wt`return ${coffset}`;\n}","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_NONETYPE, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = STYPE_NONETYPE;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (STypes[resultType(context.parent_node_context!)] as STypeFct).__call__;\n    if( meta.return_type === undefined )\n        meta.return_type = () => result_type;\n}\n\nconvert.brython_name = \"Return\";","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        wt`${coffset}: ${coffset+1}`;\n\n    for(let i = 2; i < nbChildren; i+=2)\n        wt`, ${i+coffset}: ${i+1+coffset}`;\n\n    w('}');\n}","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}\n\nconvert.brython_name = \"Dict\";","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}\n\nconvert.brython_name = \"List\";","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}\n\nconvert.brython_name = \"Tuple\";","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import _r_ from \"../../core_runtime/lists\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}\n\n\nconvert.brython_name = \"Name\";","import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","export default class Py_object {\n\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = new ARRAY_TYPE(4*MAX_NB_ASTNODES);\nexport const JS_CODE = new ARRAY_TYPE(4*MAX_NB_ASTNODES);\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}\n","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n    execute(results);\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n    console.warn(nodes, ast);\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n            if( id === 5 )\n                continue;\n\n            if( subtests[j] === \"\")\n                continue;\n        \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._b_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","// Brython must be imported before.\ndeclare var $B: any;\n\nimport { AST_CONVERT } from \"./core_modules/lists\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport dop_reset, {ASTNODE_RESULT_TYPE, ASTNODE_SIZE, ASTNODE_TYPE_ID, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : ASTNODES[ASTNODE_SIZE*id+ASTNODE_TYPE_ID],\n        ret_type : STypes[ASTNODES[ASTNODE_SIZE*id+ASTNODE_RESULT_TYPE]],\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nconst modules: Record<string, number[]> = {}\n\nfor(let i = 0 ; i < AST_CONVERT.length; ++i) {\n\n    const module = AST_CONVERT[i];\n\n    let names = [\"null\"];\n    if( \"brython_name\" in module) {\n\n        if( Array.isArray(module.brython_name) )\n            names = module.brython_name;\n        else\n            names = [module.brython_name as string]\n    }\n\n    for(const name of names)\n        (modules[name] ??= []).push(i);\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    convert_body(createASTNode(), ast.body, new Context() );\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n\nfunction getNodeType(brython_node: any): string {\n\n    // likely a body.\n    if( Array.isArray(brython_node) )\n        return \"Body\";\n\n    return brython_node.constructor.$name;\n}\n\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    const ap = 4*a;\n    const bp = 4*b;\n    for(let i = 0; i < 4; ++i) {\n        t = PY_CODE[ap+i];\n        PY_CODE[ap+i] = PY_CODE[bp+i];\n        PY_CODE[bp+i] = t;\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nconst body = modules.Body[0]\n\nexport function convert_body(id: number, brython_node: any, context: Context) {\n\n    AST_CONVERT[body]    (id, brython_node, context);\n    set_py_code_from_list(id, brython_node);\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    let name = getNodeType(brython_node);\n\n    if(name === \"Expr\") {\n        brython_node = brython_node.value;\n        name = getNodeType(brython_node);\n    }\n\n    const candidates = modules[name];\n\n    if( candidates === undefined ) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        name = \"null\"\n    }\n\n    // we may have many modules for the same node type.\n    for(let i = 0; i < candidates.length; ++i)\n        if( AST_CONVERT[candidates[i]](id, brython_node, context) !== false) {\n\n            set_py_code(id, brython_node);\n\n            return;\n        }\n\n    console.error(brython_node);\n    throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : {\n            //TODO: I need a self...\n            return_type    : return_type,\n            // not really :?\n            substitute_call: (call: number) => {\n                const left   = firstChild(call)+1;\n                const method = STypes[resultType(left)]![opname] as STypeFctSubs;\n                return method.substitute_call!(call);\n            }\n        }\n    }\n}\n\n//TODO: not a type !!!\nconst len = addSType(\"len\", genUnaryOpFct(\"len\", RET_INT));\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : getSTypeID('type[int]'),\n        str  : getSTypeID('type[str]'),\n        float: getSTypeID('type[float]'),\n        len,\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { r } from \"@SBrython/ast2js\";\nimport { STypeFctSubs } from \"./SType\";\nimport { STYPE_FLOAT, STYPE_INT, STYPE_JSINT} from \"./STypes\";\nimport { LITERALS_INT } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, parentOPPrio, resultType, setParentOPPrio, setResultType, type, VALUES } from \"@SBrython/dop\";\nimport { Converter, NOCONVERT } from \"./Converters\";\nimport { RETURN_TYPE_FCT } from \"./ReturnTypeFcts\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\nexport function Int2Number(a: number, target = STYPE_FLOAT) {\n\n    if( resultType(a) !== STYPE_INT) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === STYPE_FLOAT )\n            setResultType(a, STYPE_JSINT);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === STYPE_INT || ltype === STYPE_JSINT)\n            && (rtype === STYPE_INT || rtype === STYPE_JSINT)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === STYPE_INT) {\n        setResultType(a, target);\n        return a;\n    }\n    if( target === STYPE_FLOAT )\n        return r`Number(${a})`;\n\n    // int -> jsint cast is facultative...\n    return a;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === STYPE_INT)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, STYPE_INT); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === STYPE_JSINT) {\n        setResultType(a, STYPE_INT);\n        return a;\n    }\n\n    return r`BigInt(${a})`;\n}\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    let result = r`${first}`;\n    for(let i = 1; i < nbChildren; ++i)\n        result = r`${result} && ${first + i}`; //TODO: better...\n\n    if( p_prio < prio )\n        result = r`(${result})`;\n\n    return result;\n}\n\n// null operation, the node has the same priority as his father.\n// 2*int(1+1) => 2*(1+1)\nexport function id_jsop(node: number, a: number) { // TODO remove arg ?\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    return r`${a}`;\n}\n\nexport function binary_jsop(node: number, a: number|any, op: string, b: number|any) {\n\n    const   prio = JSOperatorsPriority[op];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    if(typeof b === \"number\")\n        setParentOPPrio(b, prio);\n\n    let cmp = r`${a}${op}${b}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\nexport function unary_jsop(node: number, op: string, a: number|any) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPriority[rop];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    let cmp = r`${op}${a}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\n\ntype GenUnaryOps_Opts = {\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, a: number) => any\n};\n\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_self = NOCONVERT,\n                                substitute_call\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        substitute_call ??= (node: number, self: number) => {\n            return unary_jsop(node, op, convert_self(self) );\n        };\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call\n        };\n    }\n    \n    return result;\n}\n\ntype GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, self: number|any, other: number|any) => any\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            substitute_call,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === '//')\n            op = '/';\n\n        let cs  = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_self(self), op, convert_other(other) );\n        }\n\n        let rcs = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_other(other), op, convert_self(self) );\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_self(self), convert_other(o) );\n            };\n        \n            // same_order ? fct : \n            rcs = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_other(o), convert_self(self) );\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n        result[`__r${pyop}__`] = {\n            return_type,\n            substitute_call: rcs,\n        };\n        if( convert_self === NOCONVERT && substitute_call === undefined)\n            result[`__i${pyop}__`] = {\n                return_type,\n                substitute_call: (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return unary_jsop(node, '--', self);\n                    \n                    return binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            };\n    }\n    \n    return result;\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                substitute_call,\n                             }: GenBinaryOps_Opts = {} ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        let cs  = (node: number, self: number, other: number, reversed: boolean) => {\n\n            let cop = op;\n\n            let a = convert_self(self);\n            let b = convert_other(other);\n            if( reversed ) {\n                [a,b] = [b,a];\n                cop = reverse[cop];\n            }\n\n            if( cop[0] === '=' || cop[0] === '!' ) {\n                if( resultType(self) === resultType(other) )\n                    cop = cop + '=';\n            }\n\n            return binary_jsop(node, a, cop, b);\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number, _: boolean) => {\n                return substitute_call(node, convert_self(self), convert_other(o) ); //TODO...\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n    }\n    \n    return result;\n}","import { resultType } from \"@SBrython/dop\";\nimport { Int2Number, Number2Int } from \"./BinaryOperators\";\nimport { STYPE_INT } from \"./STypes\";\n\ntype Printable = { toString(): string };\n\nexport type Converter = (node: number) => number | [TemplateStringsArray, ...(number | Printable)[]];\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function generateConvert(convert: number[]) {\n\n    const table = new Array<number>();\n    for(let i = 0; i < convert.length; i+=2)\n        table[convert[i]] = convert[i+1];\n\n    return (node: number) => {\n        const src    = resultType(node);\n        const target = table[src];\n        if( target === undefined )\n            return node;\n\n        //TODO: improve:\n        if( src === STYPE_INT)\n            return Int2Number(node, target);\n        if( target === STYPE_INT )\n            return Number2Int(node);\n\n        throw new Error(\"Unfound conversion\");\n    };\n}","import { STYPE_NOT_IMPLEMENTED, STYPE_BOOL, STYPE_FLOAT, STYPE_INT, STYPE_STR, STYPE_JSINT } from \"./STypes\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_FLOAT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === STYPE_JSINT)\n        return STYPE_JSINT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === STYPE_INT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_FLOAT(_: number) { return STYPE_FLOAT; }\nexport function RET_INT  (_: number) { return STYPE_INT;   }\nexport function RET_JSINT(_: number) { return STYPE_JSINT; }\nexport function RET_STR  (_: number) { return STYPE_STR;   }\n\n//TODO...\nexport function generate_return_type() {\n\n}","import { STypeObj } from \"./SType\";\n\nexport const STypes  = new Array<STypeObj>();\nconst STypename2id: Record<string, number> = {};\n\nexport function getSTypeFromName<T extends STypeObj>(name: string): T {\n    return STypes[getSTypeID(name)] as T;\n}\n\nexport function getSTypeID(name: string): number {\n\n    let id = STypename2id[name];\n    if( id === undefined ) {\n        id = STypename2id[name] = STypes.length;\n        STypes[id] = {__name__: name};\n    }\n\n    return id;\n}\n\nexport function addSType(name: string, type: Omit<STypeObj, '__name__'>) {\n\n    const id = getSTypeID(name);\n    Object.assign( STypes[id], type );\n    return id;\n}\n\nexport const STYPE_NONETYPE           = getSTypeID(\"NoneType\"); // 0...\nexport const STYPE_INT                = getSTypeID(\"int\");\nexport const STYPE_JSINT              = getSTypeID(\"jsint\");\nexport const STYPE_BOOL               = getSTypeID(\"bool\");\nexport const STYPE_FLOAT              = getSTypeID(\"float\");\nexport const STYPE_STR                = getSTypeID(\"str\");\nexport const STYPE_NOT_IMPLEMENTED    = getSTypeID(\"NotImplementedType\");","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._b_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry);\n     executeBrython(results.bry );\n\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n\n    //console.warn(tokens);\n\n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code += jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import {py2ast, convert_ast} from \"@SBrython/py2ast\";\nimport {ast2js} from \"@SBrython/ast2js\";\nimport {py2ast as py2ast_fast} from \"@SBrython/py2ast_fast\";\nimport {SBrython, _b_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\nimport '@SBrython/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code += jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] += results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] += results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] += results. bry.times[offset+1];\n    results.sbry.times[offset] += results.sbry.times[offset+1];\n}","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { buildPyCode } from \"@SBrython/py2ast\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type: ''+type(id), // TODO convert\n        result_type: ''+resultType(id), // TODO convert\n        value      : VALUES[id],\n        jscode  : buildPyCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}"],"names":["CURSOR","ARRAY_TYPE","jscode","set_js_cursor","idx","JS_CODE","CODE_LINE","CODE_COL","length","indent","cur_indent_level","indents","NL","toString","BB","BE","r","args","wr","w","wt","str","i","arg","Array","isArray","undefined","offset","CODE_BEG","AST2JS","type","CODE_END","ast2js","ast","filename","node","coffset","firstChild","nbChildren","nbChild","convert","dst","context","setType","BODY","addChild","convert_node","brython_name","base","body","VALUES","local_symbols","name","getSTypeID","Context","bases","Error","CLASS_CLASSDEF","convert_body","list","iter","constructor","$name","func","id","target","CONTROLFLOWS_FOR","beg","incr","end","Number2Int","value","STYPE_INT","CONTROLFLOWS_FOR_RANGE","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","test","CONTROLFLOWS_TERNARY","setResultType","resultType","handlers","CONTROLFLOWS_TRYBLOCK","CONTROLFLOWS_TRYBLOCK_CATCH","debug_print_exception","err","sb","console","warn","stack","isV8","split","filter","e","includes","filter_stack","map","l","_","_line","_col","slice","fct_name","line","col","pos","indexOf","getASTFor","nodes","SYMBOL","parse_stack","_raw_err_","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SBRYTHON__","_err_","_b_","PythonError","python_exception","_r_","JSException","CONTROLFLOWS_WHILE","meta","__call__","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","type_id","FUNCTIONS_ARGS_VARG","binary_jsop","FUNCTIONS_ARGS_KWARG","defval","STYPE_JSINT","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_POS","convert_args","SType_fct","_args","has_vararg","vararg","has_kwarg","kwarg","args_pos","args_names","total_args","posonlyargs","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","Math","min","has_others","cut_off","kwonly","kw_defaults","has_kw","set_py_from_beg_end","col_offset","py_offset","PY_CODE","CODE_BEG_LINE","CODE_END_LINE","lineno","CODE_BEG_COL","CODE_END_COL","result_type","annotation","set_py_code","print_obj","obj","keys","Object","values","default_call","kw_pos","FUNCTIONS_CALL_KEYWORD","nb_pos","max","pos_size","kw","cutoff","varg_start","varg_nb","has_kwargs","data","sep","substitute_call","fct_type","fct","STypes","ret_type","return_type","FUNCTIONS_CALL","keywords","generate","rtype","stype","parent_node_context","returns","fct_return_type","__name__","STypeID","last_type","fake_node","end_lineno","end_col_offset","push","FUNCTIONS_DEF","KEYWORDS_ASSERT","assert","cond","KEYWORDS_BREAK","KEYWORDS_CONTINUE","KEYWORDS_IMPORT_ALIAS","asname","KEYWORDS_IMPORT","names","module","KEYWORDS_RAISE","exc","super","this","STRUCTS_TUPLE","STRUCTS_LIST","STRUCTS_DICT","RETURN","PASS","OPERATORS_UNARY","OPERATORS_COMPARE","OPERATORS_BOOLEAN","OPERATORS_BINARY","OPERATORS_ATTR","OPERATORS__BRACKETS","OPERATORS_ASSIGNOP","OPERATORS__EQ_INIT","OPERATORS__EQ","LITERALS_STR","LITERALS_INT","LITERALS_FLOAT","LITERALS_F_STRING","LITERALS_F_STRING_FORMATTEDVALUE","LITERALS_BOOL","LITERALS_NONE","AST_CONVERT","AST_CONVERT_0","AST_CONVERT_1","AST_CONVERT_2","AST_CONVERT_3","AST_CONVERT_4","AST_CONVERT_5","AST_CONVERT_6","AST_CONVERT_7","AST_CONVERT_8","AST_CONVERT_9","AST_CONVERT_10","AST_CONVERT_11","AST_CONVERT_12","AST_CONVERT_13","AST_CONVERT_14","AST_CONVERT_15","AST_CONVERT_16","AST_CONVERT_17","AST_CONVERT_18","AST_CONVERT_19","AST_CONVERT_20","AST_CONVERT_21","AST_CONVERT_22","AST_CONVERT_23","AST_CONVERT_24","AST_CONVERT_25","AST_CONVERT_26","AST_CONVERT_27","AST_CONVERT_28","AST_CONVERT_29","AST_CONVERT_30","AST_CONVERT_31","AST_CONVERT_32","AST_CONVERT_33","AST_CONVERT_34","AST_CONVERT_35","AST_CONVERT_36","AST_CONVERT_37","AST_CONVERT_38","AST_CONVERT_39","AST_CONVERT_40","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","RUNTIME","assign","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","_context","__class__","__qualname__","STYPE_NONETYPE","addSType","STYPE_BOOL","genCmpOps","CMPOPS_LIST","RET_IJBF2BOOL","STYPE_STR","STYPE_FLOAT","float2str","f","toExponential","sign_idx","SType_type_float","RET_FLOAT","other","other_type","Int2Number","other_value","otype","method","__int__","__str__","RET_STR","genBinaryOps","RET_IJBF2FLOAT","convert_other","CONVERT_INT2FLOAT","self","genUnaryOps","real_type","SType_type_int","RET_INT","id_jsop","RET_IJ2INT","CONVERT_2INT","RET_INT2INT","a","b","convert_self","unary_jsop","RET_JSINT2JSINT","RET_JSINT","SType_type_str","__len__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","rchild","targets","op","AssignOperators","STYPE_NOT_IMPLEMENTED","bname2pyname","attr","left","right","ltype","reversed_operator","swapASTNodes","floordiv_float","floor","floordiv_int","result","mod_float","mod","mod_int","multi_jsop","bname2jsop","find_and_call_substitute","reversed","jsop","ops","comparators","operand","elts","Py_Exception","Py_object","Py_JSException","RUNTIME_0","RUNTIME_1","RUNTIME_2","Float64Array","NEXT_AST_NODE_ID","parent","ASTNODE_SIZE","ASTNODES","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","createASTNode","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","parentOPPrio","setParentOPPrio","window","onerror","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","results","resetResults","textContent","classList","remove","execute","add","generate_report","nb_tokens","bry","sbry","astnode2tree","print_js","code","print_python","print_ast","print_code","_ast","children","createElement","pycode","start","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","merge","tests","subtests","j","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","t","trim","nbEmptyLines","code_len","nbExcluded","find","v","buildPyCode","brython_node","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","modules","convert_ast","getNodeType","ao","bo","ap","bp","Body","set_py_code_from_list","candidates","error","parent_context","RootContext","type_fct","len","call","int","float","SBrython","browser","globalThis","buildModule","Function","runJSCode","getModules","getModule","BinaryOperators","jsop2pyop","JSOperators","a_value","JSOperatorsPriority","priority","first","prio","p_prio","cmp","rop","NOCONVERT","pyop","cs","rcs","o","reverse","cop","STypename2id","executeBrython","performance","now","t0","$B","imported","t1","times","executeSBrython","buildAST","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","generateBrython","future","future_features","symtable","_PySymtable_Build","js_from_root","js","generateSBrython","from","labels","tformat","time","unit","toFixed","padStart","tdiff","c","A","B","report","tcoef","fill"],"sourceRoot":""}