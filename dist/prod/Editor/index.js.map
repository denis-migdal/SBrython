{"version":3,"file":"Editor/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/types/type[bool].ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/fct/def_meth.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts"],"sourcesContent":["const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n\trequire(\"./fct/def_meth\").default,\n\trequire(\"./op/assign_attr\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"FCT_DEF_METH\",\n\t\"OP_ASSIGN_ATTR\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren > 2 ) {\n        w_str(\"_sb_.mix(\");\n        for (let i = 1; i < nbChildren; ++i) {\n            w_node(body+i);\n            w_str(\", \");\n        }\n        w_str(\")\");\n    } else if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\" {\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let fct: Type;\n    let coffset: number;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        coffset = addChild(dst, 1 + node.args.length + node.keywords.length + 1);\n        convert_node(coffset, node.func.value, context );\n        const type = resultType(coffset);\n\n        ++coffset;\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n        coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __class__: TYPE_type_str_,\n        __len__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_node( firstChild(node) + 1 );\n                w_str(\".length\");\n            })\n        }\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"float\",\n        [JS_NAME]: \"Number\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"str\",\n        [JS_NAME]: \"String\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport const RETURN_TYPE = Symbol();\nexport const TYPEID      = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const JS_NAME     = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct<[number]>,\n    __int__  ?: Fct<[number]>,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF, AST_FCT_DEF_METH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_FCT_DEF;\n    if( context.type === \"class\") {\n        type = AST_FCT_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO].generate!;\n        SType_fct.__call__[ARGS_INFO].generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { TYPE_type, TYPE_type_bool_ } from \"./bases\";\nimport { JS_NAME } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_bool_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"bool\",\n        [JS_NAME]: \"Boolean\",\n    }\n);","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool, TYPE_type_bool_ } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __class__: TYPE_type_bool_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    const typeID = resultType(id);\n    let result_type = `${typeID}:`;\n    const t   = Types[typeID];\n    result_type += t.__name__ ?? \"\";\n    result_type += \":\";\n    result_type += t.__class__?.__name__ ?? \"\";\n\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, firstChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport { printNode } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[coffset+1];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, number>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"int\",\n        [JS_NAME]: \"BigInt\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild } from \"../dop\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_FLOAT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node) + 1, \")\");\n            })\n        },\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { AST_BODY, AST_LIT_BOOL } from \"./ast2js\";\nimport dop_reset, { addChild, ASTNODES, createASTNode, setType, VALUES } from \"./dop\"\nimport { AST, Context } from \"./py2ast\"\n\nconst END_OF_SYMBOL = /[^\\w]/;\n\nlet offset = 0;\nlet code: string;\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n    return code.slice(offset, offset += end );\n}\n\nconst KNOWN_SYMBOLS: Record<string, (id: number)=>void> = {\n    \"True\" : (id) => {\n        setType(id, AST_LIT_BOOL);\n        VALUES[id] = true; //TODO...\n    },\n    \"False\": (id) => {\n        setType(id, AST_LIT_BOOL);\n        VALUES[id] = false; //TODO...\n    }\n}\n\nexport function py2ast(_code: string, filename: string): AST {\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n    \n    const id = createASTNode();\n\n    setType(id, AST_BODY);\n    const coffset = addChild(id, 1); // we don't know the number of child in advance...\n\n    const symbol = KNOWN_SYMBOLS[nextSymbol()];\n    if( symbol !== undefined)\n        symbol(coffset); //TODO: add node...\n\n    //TODO indent...\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\nimport { TYPEID_NoneType } from \"../types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN_ATTR = 44;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_METH = 43;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","export default __webpack_public_path__ + \"Editor/index.html\";","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            write_id_jsop(node, self);\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_sns(\"_sb_.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type               = 7;\nexport const TYPEID_type_int_          = 8;\nexport const TYPEID_type_float_        = 9;\nexport const TYPEID_type_str_          =10;\nexport const TYPEID_type_bool_         =11;\n\nexport default [];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(typedesc: any) {\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[number]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parentTypeID!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default {};","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: number) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n\n    w_NL();\n    const name = VALUES[coffset+1];\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_type_bool_\t= Object.create(null);\nexport const TYPE_type\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 40 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \".\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { addType } from \"./utils/addType\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { Callable, Fct, WRITE_CALL } from \"./utils/types\";\n\n// builtin symbols.\nexport default {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    type : TYPEID_type,\n    len  : addType( genUnaryOpFct(\"len\", RET_INT)),\n    abs  : addType( genUnaryOpFct(\"abs\", RET_INT)), //TODO...\n    print: addType({\n        __name__: \"print\",\n        __call__: method_wrapper(RET_None, (call:number) => {\n            const coffset  = firstChild(call);\n            const nb_child = nbChild(call);\n\n            w_str(\"__SB__.print(\");\n            for(let i = 1; i < nb_child; ++i) {\n                w_node(coffset + i);\n                w_str(\", \");\n            }\n            w_str(\")\");\n        })\n    }),\n};\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname] as Callable;\n            return method.__call__[WRITE_CALL](call);\n        })\n    }\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = search.get(\"merge\")  === \"true\" ? true : false;\nconst parser    = search.get(\"parser\") === \"true\" ? true : false;\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers',\n//    \"classes\" // ~1174\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~600\n// list    ~496\n// dicts   ~288\n// sets    ~300\n// bytes   ~300\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n        if( val.__name__ !== undefined)\n            val = val.__name__;\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            const code = subtests[j];\n\n            if( code === \"\")\n                continue;\n       \n            if( merge ) {\n                const indented_code = code.split('\\n').map(e => `\\t${e}`).join('\\n');\n                fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n            } else {\n                try {\n                    fullcode = code;\n                    generate(fullcode, results, parser);\n                    execute(results, sbry_print);\n                } catch(e) {\n                    error = e as Error;\n                    break tests;\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n    }\n\n    if( error || ! merge ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n    \n    if(error) {\n\n        python_input.value = results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('#').slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { type Context, convert_node, swapASTNodes } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, firstChild, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\nimport { method_wrapper } from \"../types/utils/methods\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport { TYPE_type } from \"../types/bases\";\nimport Types from \"../types\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPE_type,\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = Types[instance_TypeID];\n    const inst_type  = Types[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i){\n        convert_node(i+coffset, node.bases[i-1], context);\n        const stypeID = resultType(i+coffset);\n\n        // could be optimized...\n        weak_assign(klass_type, Types[stypeID]);\n        weak_assign(inst_type , Types[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[number, number]>;\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' || op === \"is not\") {\n            let jop = '===';\n            if( op === \"is not\")\n                jop = '!==';\n\n            const ltype = resultType(left);\n            const rtype = resultType(right);\n\n            let l = left;\n            let r = right;\n\n            if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n                l = Number2Int(l);\n            else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n                r = Number2Int(r);\n\n\n            write_binary_jsop(node, l, jop, r);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, PY_CODE, VALUES } from \"../dop\";\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = Types[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n\trequire(\"./type[bool]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", coffset+1, \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { TYPEID_type } from \"./index\";\nimport { w_sns } from \"../ast2js/utils\";\nimport { firstChild } from \"../dop\";\nimport { TYPE_type } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\n\nexport default Object.assign(TYPE_type,\n    {\n        __class__: TYPE_type,\n        __name__ : \"type\",\n        __call__ : method_wrapper( () => TYPEID_type, (call: number) => {\n            const coffset = firstChild(call);\n            w_sns(\"(\", coffset+1, \").constructor\");\n        })\n    });","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_int } from \".\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { write_id_jsop } from \"../structs/operators/id\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __class__: TYPE_type_int_,\n        __abs__: {\n            __call__: method_wrapper(RET_JSINT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}"],"names":["LIST","require","ILIST","push","_id2name","id2name","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","i","w_node","w_sns","convert","dst","context","fct","coffset","func","name","attr","addChild","args","length","keywords","convert_node","value","type","resultType","Types","undefined","console","warn","Error","id","fct_type","local_symbols","ret_type","__call__","RETURN_TYPE","setType","AST_FCT_CALL","setResultType","keyword","set_py_code","rchild","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","getASTFor","print","log","_r_","_sb_","Object","assign","TYPE_str","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","TYPE_type","__name__","JS_NAME","RET_FLOAT","other","other_type","Int2Number","TYPEID_float","other_value","AST_LIT_STR","otype","__int__","WRITE_CALL","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","offset","set_js_cursor","CODE_BEG","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","CODE_END","generate","code","results","use_parser","bry","sbry","nb_files","buildAST","generateSBrython","generateBrython","times","Symbol","TYPEID","rtype","stype","call","createSubContext","parentTypeID","convert_args","annotation","returns","fct_return_type","last_type","constructor","$name","fake_node","lineno","end_lineno","col_offset","end_col_offset","Body","set_py_code_from_list","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_FCT_DEF_METH","klass","method_name","gen","instanceType","instanceTypeID","addType","abs","n","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","TYPE_type_bool_","bname2pyname","AST_OP_ASSIGN_AUG","target","Py_object","TYPE_bool","RET_IJBF2BOOL","astnode2tree","typeID","result_type","buildJSCode","pycode","buildPyCode","children","from","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_ATTR","attrname","attrdef","AST_OP_ASSIGN_INIT","CURSOR","ARRAY_TYPE","CODE_LINE","CODE_COL","start","line","JS_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","idx","indent","cur_indent_level","indents","str","AST2JS","PY_CODE","convert_ast","dop_reset","createASTNode","Context","ASTNODES","symbols","builtins","createClassContext","ctx","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","nb_lines","total_lines","nb_done","nb_excluded_lines","tcoef","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","alt","AST_SYMBOL","AST_OP_ATTR","type_obj","TYPE_float","arg","__abs__","RET_IJBF2FLOAT","_node","_op","genUnaryOps","_ast","src","beg","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","AST_KEY_IMPORT","names","module","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","END_OF_SYMBOL","KNOWN_SYMBOLS","AST_LIT_BOOL","py2ast","_code","nodes","AST_BODY","symbol","slice","search","nextSymbol","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_None","TYPEID_NoneType","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_2BIGINT","AST_2NUMBER","TYPE_int","__ceil__","CONVERT_2INT","write_unary_jsop","__ast","PythonError","python_exception","super","_raw_err_","execute","sbry_print","executeSBrython","executeBrython","TYPEID_type","TYPEID_type_int_","TYPEID_type_float_","TYPEID_type_str_","float2str","f","toExponential","sign_idx","toString","includes","typedesc","obj","left","bname2jsop","kname","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","Float64Array","NEXT_AST_NODE_ID","parent","ASTNODE_SIZE","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","cn","elts","int","float","len","genUnaryOpFct","nb_child","opname","test","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","URLSearchParams","location","test_name","get","merge","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","oneTimeExec","fullcode","textContent","classList","remove","split","l","trim","error","e","message","add","print_js","print_python","print_ast","print_code","map","createElement","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur","cur_line","print_node","val","child","html_child","startTests","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","tests","subtests","substats","j","stats","total","excluded","join","async","fetch","text","lines","exclude","x","parseInt","loadSubTests","parts","excl","nbEmptyLines","code_len","nbExcluded","find","v","isArray","asname","right","ltype","reversed_operator","swapASTNodes","weak_assign","instance_TypeID","klass_type","inst_type","bases","stypeID","_context","orelse","debug_print_exception","err","sb","stack","isV8","filter_stack","_line","_col","fct_name","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","jop","write_multi_jsop","ao","bo","ap","bp","brython_node","BRY2SBRY","set_py_from_beg_end","dst_beg","dst_end","src_offset","beg_offset","end_offset","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators"],"sourceRoot":""}