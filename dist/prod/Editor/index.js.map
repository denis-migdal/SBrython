{"version":3,"file":"Editor/index.js","mappings":"+IAAA,MAAMA,EAAO,CACZC,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,GAIDC,EAAAA,GAAMC,QAAQH,GAGd,IAAII,EAAqB,GACTA,EAAW,CAC1B,SACA,eACA,cACA,cACA,aACA,WACA,WACA,SACA,UACA,SACA,UACA,cACA,gBACA,iBACA,YACA,UACA,UACA,YACA,cACA,mBACA,WACA,WACA,YACA,aACA,mBACA,eACA,YACA,aACA,UACA,WACA,mBACA,eACA,aACA,gBACA,sBACA,eACA,eACA,iBACA,WACA,WACA,OACA,UACA,WAEM,MAAMC,EAAUD,C,yDC7FR,SAASE,EAAOC,GAE3B,MAAMC,GAAaC,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BK,EAAAA,EAAAA,IAAM,SAASC,EAAAA,GAAON,eAEH,IAAfG,GACAI,EAAAA,EAAAA,IAAON,EAAK,IAEZI,EAAAA,EAAAA,IAAM,eAEVG,EAAAA,EAAAA,IAAM,IAAKP,EAAM,IACrB,C,iGCTe,SAASQ,EAAQC,EAAaV,EAAWW,GAEpD,MAAMC,EAAOZ,EAAKa,KAAKC,GACjBC,EAAWJ,EAAQK,cAAcJ,GACvC,QAA8BK,IAAbF,EAGb,MAFAG,QAAQC,KAAKnB,GACbkB,QAAQC,KAAKR,EAAQK,eACf,IAAII,MAAM,YAAYR,iBAGhC,MAAMS,EAAMC,EAAAA,EAAMP,GACZQ,EAAW,EAAKC,SAAiBC,EAAAA,OAEvCC,EAAAA,EAAAA,IAAchB,EAAKiB,EAAAA,KACnBC,EAAAA,EAAAA,IAAclB,EAAKa,GACnB,IAAIM,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,EAAIV,EAAK+B,KAAKC,OAAShC,EAAKiC,SAASD,SAEjEE,EAAAA,EAAAA,IAAaL,IAAW7B,EAAKa,KAAMF,GAEnC,IAAI,IAAIwB,EAAI,EAAGA,EAAInC,EAAK+B,KAAKC,SAAUG,GACnCD,EAAAA,EAAAA,IAAaL,IAAW7B,EAAK+B,KAAKI,GAAIxB,GAE1C,IAAI,IAAIwB,EAAI,EAAGA,EAAInC,EAAKiC,SAASD,SAAUG,GACvCC,EAAAA,EAAAA,GAAQP,EAAS7B,EAAKiC,SAASE,GAAIxB,IACrB0B,EAAAA,EAAAA,IAAYR,EAAS7B,EAAKiC,SAASE,MAC/CN,EAGNvB,EAAAA,GAAOI,GAAOW,CAClB,C,6EC/Be,SAAStB,EAAOC,GAE3B,MAAMG,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAEN,IACTxB,EAAAA,EAAAA,IAAM,OAGV,IAAIiC,EAAiBT,GACjBU,EAAAA,EAAAA,IAAWV,KAAaW,EAAAA,KAAgBD,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,KAC7DH,GAASI,EAAAA,EAAAA,IAAWb,KAExBtB,EAAAA,EAAAA,IAAO+B,EACX,C,yDCVO,MAAMK,EAET,GAAuC,CAAC,EACxC,GAAiD,CAC7CC,QAASC,YAObC,WAAAA,CAAYC,EAAgBC,GACxB,GAAGA,EAAIC,YAAYC,MAAK,EACpB,MAAM,IAAI9B,MAAM,OAAO4B,EAAIC,gCAM/B,OAHAC,MAAK,EAAgBF,EAAIC,UAAYD,EAG9B,IAAIG,SAAS,SAAU,GAAGJ,0BACrC,CAEAK,SAAAA,CAAUL,EAAgBC,GACtBE,MAAK,EAAUF,EAAIC,UAAYC,KAAKJ,YAAYC,EAAQC,EAAzBE,CAA8BA,KACjE,CAEAG,UAAAA,GACI,OAAOH,MAAK,CAChB,CACAI,SAAAA,CAAU1C,GACN,OAAOsC,MAAK,EAAUtC,EAC1B,CAEA2C,SAAAA,CAAUN,GACN,OAAOC,MAAK,EAAgBD,EAChC,CAEAO,KAAAA,IAASzB,GACLb,QAAQuC,OAAO1B,EACnB,CAEA,OAAI2B,GACA,OAAOA,EAAAA,CACX,CACA,QAAIC,GACA,OAAOA,EAAAA,CACX,E,yDCrDW,SAAS5D,EAAOC,IAC3BO,EAAAA,EAAAA,KAAOL,EAAAA,EAAAA,IAAWF,KAAQK,EAAAA,EAAAA,IAAM,IAAIC,EAAAA,GAAON,KAC/C,C,yICMA,QAAe4D,OAAOC,OAAOC,EAAAA,GACzB,CACIC,UAAWC,EAAAA,GACXC,SAASC,EAAAA,EAAAA,GAAeC,EAAAA,IAAUnE,KAC9BO,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWF,GAAQ,IAC3BK,EAAAA,EAAAA,IAAM,UAAU,MAGxB+D,EAAAA,EAAAA,GAAaC,EAAAA,GAAaC,EAAAA,KAC1BC,EAAAA,EAAAA,GAAa,CAAC,KAAYC,EAAAA,KAC1BD,EAAAA,EAAAA,GAAa,CAAC,KAAYE,EAAAA,GACtB,CACIC,cAAiBC,EAAAA,GACjBC,WAAY,CAAC5E,EAAc6E,EAAWC,EAAIC,KAEtC,IAAIxC,EAAAA,EAAAA,IAAWsC,KAAOG,EAAAA,GAAY,CAC9B,MAAMC,EAAIJ,EACVA,EAAIE,EAAGA,EAAIE,CACf,EAEAzE,EAAAA,EAAAA,IAAM,GAAIqE,EAAG,WAAYE,EAAG,IAAI,I,+CC7BjC,SAAShF,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,wBACV,C,iCCJA,SACC,OAAUX,EAAAA,MAAAA,EACV,YAAeA,EAAAA,MAAAA,EACf,UAAaA,EAAAA,MAAAA,E,+HCQd,QAAekE,OAAOC,OAAOqB,EAAAA,GACzB,CACInB,UAAWoB,EAAAA,GACXC,SAAW,QACX,CAACC,EAAAA,IAAU,SACX7D,UAAW0C,EAAAA,EAAAA,GAAeoB,EAAAA,IAAYtF,IAElC,MAAMuF,GAAQrF,EAAAA,EAAAA,IAAWF,GAAM,EACzBwF,GAAajD,EAAAA,EAAAA,IAAWgD,GAG9B,GAAIC,IAAe/C,EAAAA,GAEf,YADAlC,EAAAA,EAAAA,KAAOkF,EAAAA,EAAAA,IAAWF,IAGtB,GAAIC,IAAeE,EAAAA,IAAgBF,IAAehD,EAAAA,GAE9C,YADAjC,EAAAA,EAAAA,IAAOiF,GAKX,GAAIA,IAAeR,EAAAA,GAAa,CAE5B,MAAMW,EAAcrF,EAAAA,GAAOiF,GAE3B,IAAIK,EAAAA,EAAAA,IAAKL,KAAWM,EAAAA,GAAc,CAC9B,GAAoB,QAAhBF,GAAyC,aAAhBA,EAEzB,YADAtF,EAAAA,EAAAA,IAAM,4BAGV,GAAoB,SAAhBsF,GAAyC,cAAhBA,EAEzB,YADAtF,EAAAA,EAAAA,IAAM,2BAGd,CAOA,YADAG,EAAAA,EAAAA,IAAM,cAAe+E,EAAO,IAEhC,CAEA,MAAMO,EAAQxE,EAAAA,GAAMkE,GACpB,QAA4BvE,IAAV6E,QAAyC7E,IAAlB6E,EAAMC,QAC3C,MAAM,IAAI3E,MAAM,GAAG0E,GAAOV,gCAE9BU,EAAMC,QAASC,EAAAA,IAAahG,EAAMuF,EAAM,K,yDCvDrC,SAAS9E,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKuF,EAAAA,GAEjB,C,yDCLe,SAASlG,EAAOC,IAE3BkG,EAAAA,EAAAA,MAEA,MAAMrE,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAImC,EAAIN,EAASM,EAAIhC,EAAW0B,IAAWM,GAC3CgE,EAAAA,EAAAA,OAAQ5F,EAAAA,EAAAA,IAAO4B,IAGnBiE,EAAAA,EAAAA,MAE+B,IAAfjG,GAA6B,IAATH,IAChCmG,EAAAA,EAAAA,KACR,C,kCCTA,SACIE,OAVJ,SAAgBC,GAEZ,IAAIA,EAGJ,MAAM,IAAIlF,MAAM,mBACpB,E,gDCJe,SAASrB,EAAOwG,IAC3BlG,EAAAA,EAAAA,IAAM,QACV,C,4GCKA,QAAeuD,OAAOC,OAAOG,EAAAA,GACzB,CACID,UAAWoB,EAAAA,GACXC,SAAW,MACX,CAACC,EAAAA,IAAU,SACX7D,UAAU0C,EAAAA,EAAAA,GAAesC,EAAAA,IAAUxG,IAE/B,MAAMuF,GAAQrF,EAAAA,EAAAA,IAAWF,GAAM,EACzBwF,GAAajD,EAAAA,EAAAA,IAAWgD,GAG9B,GAAIC,IAAeR,EAAAA,GAEf,YADAzE,EAAAA,EAAAA,IAAOgF,GAIX,MAAMO,EAAQxE,EAAAA,GAAMkE,GACpB,QAA4BvE,IAAV6E,QAAyC7E,IAAlB6E,EAAMW,QAC3C,MAAM,IAAIrF,MAAM,GAAG0E,GAAOV,gCAE9BU,EAAMW,QAAST,EAAAA,IAAYhG,EAAMuF,EAAM,K,kGCtBpC,SAASxF,EAAOC,GAE3B,MAAM6B,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAIrB0G,EAFYpG,EAAAA,GAAON,GAEFwB,SAASmF,EAAAA,IAEhC,IAAIC,EAAWF,EAAKG,YAChBD,IAAaE,OAAOC,oBACpBH,EAAWF,EAAKM,WAAa,QAEb/F,IAAhByF,EAAKO,QAAwBL,IAAazG,EAAa,KACrDyG,EAEN,IAAI,IAAIzE,EAAI,EAAIA,EAAIhC,IAAegC,EACrB,IAANA,IACA9B,EAAAA,EAAAA,IAAM,MAENuG,IAAazE,IACb9B,EAAAA,EAAAA,IAAM,KAGV6G,EAAU/E,EAAIN,EADCM,IAAMuE,EAAKM,YAAc7E,IAAMhC,EAAW,GAIzDyG,EAAWzG,IACXE,EAAAA,EAAAA,IAAM,SACd,CAEA,SAAS6G,EAAUlH,EAAcmH,GAE7B,MAAMC,EAAS,EAAEpH,GACDqH,EAAAA,EAAAA,IAAcD,EAASE,EAAAA,IAEvC,MAAM1G,EAAON,EAAAA,GAAON,GACduH,GAAU3B,EAAAA,EAAAA,IAAK5F,GAErB,GAAIuH,IAAYC,EAAAA,GACRL,GACA9G,EAAAA,EAAAA,IAAM,MAAMO,MAEZP,EAAAA,EAAAA,IAAM,GAAGO,eACV,GAAI2G,IAAYE,EAAAA,IACnBpH,EAAAA,EAAAA,IAAM,GAAGO,eACN,GAAsB,KAAlBR,EAAAA,EAAAA,IAAQJ,GAAc,CAE7B,IAAI0H,GAAcxH,EAAAA,EAAAA,IAAWF,IACzBuC,EAAAA,EAAAA,IAAWmF,KAAYlF,EAAAA,KACvBkF,GAAShF,EAAAA,EAAAA,IAAWgF,KAExBrH,EAAAA,EAAAA,IAAM,GAAGO,SACTL,EAAAA,EAAAA,IAAOmH,EACX,MACIrH,EAAAA,EAAAA,IAAMO,IAGMyG,EAAAA,EAAAA,IAAcD,EAASO,EAAAA,GAC3C,C,0DC/De,SAAS5H,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,GAE3B,OAAgB,IAAZ6B,GACOxB,EAAAA,EAAAA,IAAM,iBAEVG,EAAAA,EAAAA,IAAM,UAAWqB,EAAS,IACrC,C,0DCRe,SAAS9B,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,IAAIC,EAAAA,GAAON,MACrB,C,0DCFe,SAASD,EAAOC,GAE3B,OAAOQ,EAAAA,EAAAA,IAAM,gBAAgBN,EAAAA,EAAAA,IAAWF,GAAO,IACnD,C,oECDe,SAAS4H,EAASC,EAAcC,GAE3CA,EAAQC,IAAIX,OAAU,EACtBU,EAAQE,KAAKZ,OAAS,EAEtBU,EAAQD,KAAOA,EAEf,MAAMT,EAASU,EAAQC,IAAIX,OAC3BU,EAAQC,IAAIX,QAAU,EACtBU,EAAQE,KAAKZ,QAAS,IAEpBU,EAAQG,SAEV,MAAMjF,GAAMkF,EAAAA,EAAAA,GAASL,EAAMC,IAE3BK,EAAAA,EAAAA,GAAiBnF,EAAW8E,EAAQE,OACpCI,EAAAA,EAAAA,GAAiBpF,EAAK6E,EAAMC,EAAQC,KAGpCD,EAASC,IAAIM,MAAMjB,EAAO,GAAKU,EAASC,IAAIM,MAAMjB,EAAO,GAAKU,EAASC,IAAIM,MAAMjB,EAAO,GAAKU,EAASC,IAAIM,MAAMjB,EAAO,GACvHU,EAAQE,KAAKK,MAAMjB,EAAO,GAAKU,EAAQE,KAAKK,MAAMjB,EAAO,GAAKU,EAAQE,KAAKK,MAAMjB,EAAO,GAAKU,EAAQE,KAAKK,MAAMjB,EAAO,GAGvHU,EAASC,IAAIM,MAAMjB,GAAUU,EAASC,IAAIM,MAAMjB,EAAO,GACvDU,EAAQE,KAAKK,MAAMjB,GAAUU,EAAQE,KAAKK,MAAMjB,EAAO,EAE3D,C,8DC7BO,MAAM3F,EAAc6G,SACdtC,EAAcsC,SACdjD,EAAciD,SACd3B,EAAc2B,Q,0DCFZ,SAASvI,EAAOC,GAE3B,MAAM6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAIZ,KAHCI,EAAAA,EAAAA,IAAQJ,IAQ3BQ,EAAAA,EAAAA,IAAM,MAAOqB,EAAQ,EAAG,KAAMA,EAAS,MAJnCrB,EAAAA,EAAAA,IAAM,IAAKqB,EAAS,IAK5B,C,sHCGA,SAAS+F,EAASlH,EAAaV,EAAWW,GAEtC,MAAM4H,GAAUhG,EAAAA,EAAAA,IAAW7B,GACrBmB,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,GAGxB8H,EAAUlH,EAAAA,EAAMiH,GAChBE,EAAUD,EAAMhH,SAChBkF,EAAU+B,EAAK9B,EAAAA,KAGrBhG,EAAUA,EAAQ+H,iBAAiB,QAC3BC,oBAAsBjI,GAG9BkI,EAAAA,EAAAA,IAAa/G,EAAS7B,EAAMwI,EAAO7H,GAQnC+F,EAAKkB,cAAW3G,EAEhBwH,EAAKhH,EAAAA,SAAeR,EAEpB,MAAM4H,EAAa7I,EAAK8I,SAAShI,GACjC,QAAmBG,IAAf4H,EAA2B,CAC3B,IAAIE,EAAkBpI,EAAQK,cAAc6H,GAE5CJ,EAAKhH,EAAAA,IAAe,IAAMsH,CAC9B,CAGA,MAAMC,EAAchJ,EAAKC,KAAKD,EAAKC,KAAK+B,OAAO,GAAGiH,YAAYC,MAC9D,GAAkB,WAAdF,GAAwC,UAAdA,EAEV,CACZ,MAAMG,EAAY,CACdF,YAAa,CACTC,MAAO,UAEPE,OAAQpJ,EAAKqJ,WACjBA,WAAYrJ,EAAKqJ,WACbC,WAAYtJ,EAAKuJ,eACrBA,eAAgBvJ,EAAKuJ,gBAEzBvJ,EAAKC,KAAKL,KAAMuJ,EACpB,EAKJK,EAAAA,EAAAA,GAAK3H,EAAQ,EAAG7B,EAAKC,KAAMU,IACb8I,EAAAA,EAAAA,IAAsB5H,EAAQ,EAAG7B,EAAKC,KACxD,CAEe,SAASQ,EAAQC,EAAaV,EAAWW,GAIpD,MAAM+I,EAAsB,CACxBtE,SAAU,WACV5D,SAAU,CACN4D,SAAU,WACV,CAAC3D,EAAAA,IAAc,KACXmG,EAASlH,EAAKV,EAAMW,GACb+I,EAAUlI,SAASC,EAAAA,OAE9B,CAACuE,EAAAA,IAAa2D,EAAAA,EACd,CAAChD,EAAAA,IAAY,CAETiD,WAAiB,IAAIC,MAAM7J,EAAK+B,KAAKA,KAAKC,OAAOhC,EAAK+B,KAAK+H,YAAY9H,QACvE+H,SAAiB,CAAC,EAClBlD,aAAkB,EAClBG,YAAkB,EAClBgD,QAAiB,EACjBpC,cAKNqC,EAAU3I,EAAAA,EAAMU,OACtBV,EAAAA,EAAM2I,GAAWP,EAIjB/I,EAAQK,cAAchB,EAAKY,MAAQqJ,GAEnCvI,EAAAA,EAAAA,IAAchB,EAAKwJ,EAAAA,KACnBtI,EAAAA,EAAAA,IAAclB,EAAKuJ,GAEnB3J,EAAAA,GAAOI,GAAOV,EAAKY,IACvB,C,oEC5Ge,SAASH,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKyJ,EAAAA,IACb,MAAMtI,GAAUC,EAAAA,EAAAA,IAASpB,EAAwB,EAAnBV,EAAKoK,KAAKpI,QAExC,IAAI,IAAIG,EAAI,EAAGA,EAAInC,EAAKoK,KAAKpI,SAAUG,GACnCD,EAAAA,EAAAA,IAAa,EAAEC,EAAEN,EAAS7B,EAAOoK,KAAKjI,GAAIxB,IAC1CuB,EAAAA,EAAAA,IAAa,EAAEC,EAAE,EAAEN,EAAS7B,EAAKqK,OAAOlI,GAAIxB,EAEpD,C,0DCVO,SAAS2J,EAActK,EAAc6E,IAExC0F,EAAAA,EAAAA,IAAiB1F,GAAG2F,EAAAA,EAAAA,IAAaxK,KAEjCO,EAAAA,EAAAA,IAAOsE,EACX,C,0DCLe,SAAS9E,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,EAAYgC,GAAG,GAC9B3B,EAAAA,EAAAA,IAAM,GAAI2B,EAAEN,EAAS,KAAMM,EAAE,EAAEN,EAAS,OAE5CxB,EAAAA,EAAAA,IAAM,IACV,C,8ECTe,SAASI,EAAQC,EAAaV,EAAWW,GAEpD,IAAImE,EAAK2F,EAAAA,GAAazK,EAAK8E,GAAGmE,YAAYC,OAC1C,QAAwBjI,IAAP6D,EAEb,MADA5D,QAAQC,KAAK,KAAMnB,EAAK8E,GAAGmE,YAAYC,OACjC,IAAI9H,MAAM,mBAEpBd,EAAAA,GAAOI,GAAOoE,GAEdpD,EAAAA,EAAAA,IAAQhB,EAAKgK,EAAAA,IACb,MAAM7I,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAK2K,OAAQhK,IACrCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAK4K,MAAQjK,IAErCiB,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,GAClC,C,kCCrBe,MAAMgJ,G,8ECKrB,QAAejH,OAAOC,OAAOiH,EAAAA,GACzB,CAEA,GACA1G,EAAAA,EAAAA,GAAUC,EAAAA,GAAa0G,EAAAA,I,sFCiBZ,SAASC,EAAalK,EAAK,GAEtC,MAAMe,GAAa3B,EAAAA,EAAAA,IAAWY,GAE9B,MAAO,CACH8E,KAAa9F,EAAAA,GAAQ8F,EAAAA,EAAAA,IAAK9E,IAC1BmK,YAAa3J,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWzB,KAAMiD,WAAWqB,SAC/CwF,MAAatK,EAAAA,GAAOQ,GACpBiC,QAAUmI,EAAAA,EAAAA,GAAYpK,GACtBqK,QAAUC,EAAAA,EAAAA,IAAYtK,GACtBuK,SAAUxB,MAAMyB,KAAK,CAACtJ,QAAQ5B,EAAAA,EAAAA,IAAQU,KAAM,CAACyF,EAAEpE,IAAM6I,EAAanJ,EAAQM,KAElF,C,8ECjCe,SAAS1B,EAAQC,EAAaV,EAAWW,GAEpD,IAAI4K,EAAUvL,EAAKuL,aACHtK,IAAZsK,IACAA,EAAU,CAACvL,EAAK2K,SAEpB,IAAI/E,EAAO4F,EAAAA,GAEa,UAAjB7K,EAAQiF,MACyB,SAAjC2F,EAAQ,GAAGtC,YAAYC,OACpBqC,EAAQ,GAAGzK,MAAMH,EAAQK,gBAE/B4E,EAAO6F,EAAAA,KAGX/J,EAAAA,EAAAA,IAAQhB,EAAKkF,GAEb,MAAMzF,EAAaoL,EAAQvJ,OAAS,EAC9BH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAE9B+B,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK4K,MAAOjK,GAClC,IAAI4H,GAAQhG,EAAAA,EAAAA,IAAWV,GAEnBoJ,EAAc,KAElB,MAAMpC,EAAa7I,EAAK6I,YAAY/H,QACjBG,IAAf4H,IACAoC,EAActK,EAAQK,cAAc6H,IAEP,OAAhBoC,GAAwBA,IAAgB1C,GACrDrH,QAAQC,KAAK,qBAEG,OAAhB8J,IACAA,EAAc1C,EACVA,IAAU/F,EAAAA,KACVyI,EAAcxI,EAAAA,MAItBb,EAAAA,EAAAA,IAAclB,EAAKuK,GAEnB,IAAI,IAAI9I,EAAI,EAAGA,EAAIhC,IAAcgC,GAE7BD,EAAAA,EAAAA,IAAaL,EAAQM,EAAGoJ,EAAQpJ,EAAE,GAAIxB,GACtCA,EAAQK,cAAcuK,EAAQpJ,EAAE,GAAGrB,IAAMmK,CAEjD,C,kIC9CO,MAAMS,EAAqB,IAAIC,EAAAA,GAAW,GAE1C,IAAI5I,EAIJ,SAAShD,EAAOiD,GA2BvB,IAAoBC,EAHnB,OAGmBA,EAzBLD,EAAIC,SA2BfF,EAAU,iBAAiBE,MAC3BF,GAAU,gCAGN2I,EAAOE,EAAAA,IAAa,EACpBF,EAAOG,EAAAA,IAAY9I,EAAOf,OA9B9BzB,EAAO,GAGPwC,GAAU,+BAiBNA,CACR,CAaO,SAASmI,EAAYpK,GACxB,MAAMsG,EAAS,EAAEtG,EAEjB,MAAO,CACHgL,MAAO,CACHC,KAAMC,EAAAA,GAAS5E,EAAS6E,EAAAA,IACxBC,IAAMF,EAAAA,GAAS5E,EAAS+E,EAAAA,KAE5BC,IAAO,CACHL,KAAMC,EAAAA,GAAS5E,EAASiF,EAAAA,IACxBH,IAAMF,EAAAA,GAAS5E,EAASkF,EAAAA,KAGpC,CAEO,SAASjF,EAAckF,GAC1BP,EAAAA,GAAQO,EAAMX,EAAAA,IAAaF,EAAOE,EAAAA,IAClCI,EAAAA,GAAQO,EAAMV,EAAAA,IAAa9I,EAAQf,OAAS0J,EAAOG,EAAAA,GACvD,CAIA,IAAIW,EAAS,OACTC,GAAoB,EAGxB,MAAMC,EAAsB,CACxB,GACAF,EACAA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,GAGL,SAASrG,IAEZpD,GAAU,OAGJ2I,EAAOE,EAAAA,IACTF,EAAOG,EAAAA,IAAY9I,EAAOf,OAE1Be,GAAU2J,EAASD,EAE3B,CACO,SAASvG,MACVuG,CACN,CAEO,SAASrG,MACVqG,CACN,CAGO,SAASpM,EAAMsM,GAClB5J,GAAU4J,CACd,CACO,SAASpM,EAAOP,GACHqH,EAAc,EAAErH,EAAOsH,EAAAA,IACvCsF,EAAAA,IAAOhH,EAAAA,EAAAA,IAAK5F,IAAQA,GACJqH,EAAc,EAAErH,EAAO2H,EAAAA,GAC3C,CAOO,SAASnH,KAASuB,GAErBgB,GAAUhB,EAAK,GAEf,IAAI,IAAII,EAAI,EAAGA,EAAIJ,EAAKC,OAAQG,GAAG,EAAG,CAElC,MAAMnC,EAAO+B,EAAKI,GAEFkF,EAAc,EAAErH,EAAOsH,EAAAA,IACvCsF,EAAAA,IAAOhH,EAAAA,EAAAA,IAAK5F,IAAQA,GACJqH,EAAc,EAAErH,EAAO2H,EAAAA,IAEvC5E,GAAUhB,EAAKI,EAAE,EACrB,CACJ,C,0DCtIe,SAASpC,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAE3BQ,EAAAA,EAAAA,IAAM,SAAUqB,EAAS,KAAMA,EAAQ,EAAG,IAC9C,C,0DCLe,SAAS9B,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,WAEN,MAAMwB,GAAU3B,EAAAA,EAAAA,IAAWF,GACrBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAIN,IAAUxB,EAAAA,EAAAA,IAAM,OAG/BA,EAAAA,EAAAA,IAAM,QAEN,MAAMuK,EAAQtK,EAAAA,GAAON,GAER,OAAV4K,GACCvK,EAAAA,EAAAA,IAAM,wBAENA,EAAAA,EAAAA,IAAM,qBAAqBuK,MACnC,C,0DCnBe,SAAS7K,EAAOC,GAE3B,IAOImC,EAPAN,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAOzB,KAJAQ,EAAAA,EAAAA,IAAM,MAAOqB,IAAW,IAAKA,IAAW,KAIpCM,EAAI,EAAGA,EAAIhC,EAAa,EAAGgC,GAAK,GAChC3B,EAAAA,EAAAA,IAAM,WAAYqB,IAAW,KAAMA,IAAW,KAI9CM,IAAMhC,EAAa,IACnBK,EAAAA,EAAAA,IAAM,SAAUqB,EAAS,IACjC,C,kHCDO,SAASuJ,EAAYtK,GACxB,MAAMsG,EAAS,EAAEtG,EAEjB,MAAO,CACHgL,MAAO,CACHC,KAAMc,EAAAA,GAASzF,EAAS6E,EAAAA,IACxBC,IAAMW,EAAAA,GAASzF,EAAS+E,EAAAA,KAE5BC,IAAO,CACHL,KAAMc,EAAAA,GAASzF,EAASiF,EAAAA,IACxBH,IAAMW,EAAAA,GAASzF,EAASkF,EAAAA,KAGpC,CAmBO,SAASQ,EAAY9J,IAExB+J,EAAAA,EAAAA,MAEA,MAAMjM,GAAKkM,EAAAA,EAAAA,MAIX,OAHAxD,EAAAA,EAAAA,GAAK1I,EAAIkC,EAAI/C,KAAM,IAAIgN,IACTxD,EAAAA,EAAAA,IAAsB3I,EAAIkC,EAAI/C,MAErCiN,EAAAA,EAUX,CAEO,MAAMD,EACThE,WAAAA,CAAYrD,EAA0B,IAAKuH,EAAkCC,EAAAA,GACzElK,KAAK0C,KAAOA,EACZ1C,KAAKlC,cAAgB,IAAImM,EAC7B,CAEAzE,gBAAAA,CAAiB9C,EAA0B,KACvC,OAAO,IAAIqH,EAAQrH,EAAM1C,KAAKlC,cAClC,CAEAA,cACA2H,oBACA/C,K,0DChFW,SAAS7F,EAAOC,IAG3BK,EAAAA,EAAAA,IAAM,GAAGC,EAAAA,GAAON,KACpB,C,0DCJe,SAASD,EAAOC,IAE3BQ,EAAAA,EAAAA,IAAM,MAAMN,EAAAA,EAAAA,IAAWF,GAAO,IAClC,C,kCCJA,MAAMqN,EAAS,CACX,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBAGJ,SAASC,EAAQC,EAAcC,GAC3B,OAAOD,EAAKE,QAAQ,GAAGC,SAAS,GAAKF,CACzC,CAEA,SAASG,EAAM9I,EAAWE,GAEtB,MAAM6I,EAAI/I,EAAEE,EAEZ,OAAU,IAAN6I,EACO,UAEPA,EAAI,EACG,IAAMA,EAAEH,QAAQ,GAAGC,SAAS,GAEhC,OAAS,IAAI7I,EAAEE,EAAI,MAAM0I,QAAQ,GAAGC,SAAS,GAAK,GAC7D,CAEO,SAASG,EAAgB/F,EAAkBjD,EAAiBE,GAE/D,MAAM+I,EAAYhG,EAAQgG,UACpBC,EAAIjG,EAAQjD,GACZmJ,EAAIlG,EAAQ/C,GAElB,IAAIkJ,EAAS,GAOb,MAAMC,EAAcpG,EAAQqG,YAEtBC,EAAcF,EADApG,EAAQuG,kBAI5BJ,GAAU,oBAAoBG,KAAWF,OAAcE,EAAQF,EAAS,KAAKT,QAAQ,SACrFQ,GAAU,oBAAoBH,aAAqBhG,EAAQG,mBAC3DgG,GAAU,oBAAsBN,EAAMI,EAAElG,KAAK7F,OAAQgM,EAAEnG,KAAK7F,QAAU,KACtEiM,GAAU,KAEV,MAAMK,EAAQ,IAAUR,EAAY,IAEpC,IAAI,IAAI3L,EAAI,EAAGA,EAAIkL,EAAOrL,SAAUG,EAEhC8L,GAAUZ,EAAOlL,GACHmL,EAAQS,EAAE1F,MAAMlG,GAAKmM,EAAO,KAC5B,KACAX,EAAMI,EAAE1F,MAAMlG,GAAI6L,EAAE3F,MAAMlG,IAC1B,KACAmL,EAAQS,EAAE1F,MAAMlG,GAAI,MACpB,KAKlB,OAAO8L,CACX,C,gDCnEe,MAAMM,UAAqB1D,EAAAA,G,4GCM3B,SAASpK,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK8N,EAAAA,IACb,MAAM3M,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAKyO,QAAU9N,GAErC,IAAImE,EAAK2F,EAAAA,GAAazK,EAAK8E,GAAGmE,YAAYC,OAE1C,QAAwBjI,IAAP6D,EAEb,MADA5D,QAAQC,KAAK,KAAMnB,EAAK8E,GAAGmE,YAAYC,OACjC,IAAI9H,MAAM,mBAKpB,GAFAd,EAAAA,GAAOI,GAAOoE,EAEH,QAAPA,EAEA,YADAlD,EAAAA,EAAAA,IAAclB,EAAKgO,EAAAA,IAIvB,IAAI9I,EAAO+I,EAAAA,GACPC,EAAStN,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUiD,GAKxC,QAHe7D,IAAX2N,IACAhJ,EAAOgJ,EAAOnN,EAAAA,OAEDmE,IAAS+I,EAAAA,GAEtB,MADAzN,QAAQC,KAAKG,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUuD,UAClC,IAAIhE,MAAM,GAAG0D,KAAMxD,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUuD,8BAGxDxD,EAAAA,EAAAA,IAAclB,EAAKkF,EACvB,C,gDCvCe,MAAMiJ,UAAuBN,EAAAA,G,oECE7B,SAAS9N,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKoO,EAAAA,IACb,MAAMjN,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK+O,IAAKpO,EAEpC,C,sHCAA,QAAeiD,OAAOC,OAAOmL,EAAAA,GACzB,CACIjL,UAAWoB,EAAAA,GACXC,SAAW,MACX,CAACC,EAAAA,IAAU,SACX7D,UAAU0C,EAAAA,EAAAA,GAAeC,EAAAA,IAAUnE,IAE/B,MAAMuF,GAAQrF,EAAAA,EAAAA,IAAWF,GAAQ,EAC3BwF,GAAYjD,EAAAA,EAAAA,IAAWgD,GAG7B,GAAIC,IAAe/C,EAAAA,GAEf,YADAlC,EAAAA,EAAAA,IAAOgF,GAGX,GAAIC,IAAehD,EAAAA,GAEf,YADAjC,EAAAA,EAAAA,KAAQmC,EAAAA,EAAAA,IAAW6C,IAGvB,GAAIC,IAAeE,EAAAA,GAEf,YADAlF,EAAAA,EAAAA,IAAM,qBAAsB+E,EAAO,MAKvC,GAAIC,IAAeR,EAAAA,GAQf,YAFAxE,EAAAA,EAAAA,IAAM,UAAW+E,EAAO,KAK5B,MAAMO,EAAQxE,EAAAA,GAAMkE,GACpB,QAA4BvE,IAAV6E,QAAyC7E,IAAlB6E,EAAMC,QAC3C,MAAM,IAAI3E,MAAM,GAAG0E,GAAOV,gCAE9BU,EAAMC,QAASC,EAAAA,IAAYhG,EAAMuF,EAAM,K,wFCtCpC,SAAS9E,EAAQC,EAAaV,EAAWW,GAEpD,IAAIsK,EAAc,EACdL,EAAQ5K,EAAKc,GAEjB,GAAc,SAAV8J,EACAA,EAAQ,YACP,GAAGA,KAASwC,EAAAA,EAAW,CACxBnC,EAAcmC,EAAAA,EAASxC,GAEvB,MAAMqE,EAAM3N,EAAAA,GAAM2J,GAAa5F,EAAAA,SACnBpE,IAARgO,IACArE,EAAQqE,EAEhB,MAAWrE,KAASjK,EAAQK,gBACxBiK,EAActK,EAAQK,cAAc4J,KAYxClJ,EAAAA,EAAAA,IAAQhB,EAAKwO,EAAAA,KACbtN,EAAAA,EAAAA,IAAclB,EAAKuK,GAEnB3K,EAAAA,GAAOI,GAAOkK,CAClB,C,0DCxCe,SAAS7K,EAAOC,IAC3BQ,EAAAA,EAAAA,IAAM,+BAA+BN,EAAAA,EAAAA,IAAWF,GAAO,IAC3D,C,oECDe,SAASS,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKyO,EAAAA,IACb,MAAMtN,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK4K,MAAOjK,GAGlC,IAAIiK,EAAQ5K,EAAKoP,KACH,cAAVxE,IACAA,EAAQ,eAEZtK,EAAAA,GAAOI,GAAOkK,CAClB,C,gICPA,QAAehH,OAAOC,OAAOwL,EAAAA,GACzB,CACItL,UAAWmB,EAAAA,GAEXuB,SAASvC,EAAAA,EAAAA,GAAesC,EAAAA,IAAS,CAACxG,EAAMsP,MACpC9O,EAAAA,EAAAA,IAAM,kBAAmB8O,EAAK,IAAI,MAG1C/K,EAAAA,EAAAA,GAAa,CAAC,KAAM,IAAK,IAAK,IAAK,KAAMgL,EAAAA,GACzB,CACI7K,cAAeC,EAAAA,MAGnCJ,EAAAA,EAAAA,GAAa,CAAC,MAAOgL,EAAAA,GACjB,CACI7K,cAAeC,EAAAA,GACfC,WAAe,CAAC4K,EAAO3K,EAAG4K,EAAK1K,KACpBvE,EAAAA,EAAAA,IAAM,uBAAwBqE,EAAG,KAAME,EAAG,QAI7DR,EAAAA,EAAAA,GAAa,CAAC,KAAMgL,EAAAA,GAChB,CACI7K,cAAeC,EAAAA,GACfC,WAAe,CAAC4K,EAAO3K,EAAG4K,EAAK1K,MAC3BvE,EAAAA,EAAAA,IAAM,kBAAmBqE,EAAG,KAAME,EAAG,IAAI,KAIrD2K,EAAAA,EAAAA,GAAY,CAAC,OAAYpK,EAAAA,KACzBlB,EAAAA,EAAAA,GAAYC,EAAAA,GAAa0G,EAAAA,I,0DCrCd,SAAShL,EAAOC,GAE3B,MAAMY,EAAON,EAAAA,GAAON,GACd6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAE3BQ,EAAAA,EAAAA,IAAM,YAAYI,KAASiB,EAAS,KAAMA,EAAQ,EAAG,IACzD,C,iBCHe,SAASuG,EAAgBpF,EAAU2M,EAAY7H,GAE1D,MAAM8H,EAAMC,YAAYC,MAGlBC,EAASC,GAAGC,gBAAgBjN,EADjB,KAKjB,IAAIkN,EAAWF,GAAGG,kBAAkBnN,EALnB,IAKkC+M,GAEnD,MAAMK,EAAKP,YAAYC,MAGjB/M,EAAUiN,GAAGK,aAAa,CAACrN,MACHkN,WACAjN,SAZb,IAaa0M,MACAW,cAL1BA,IAKqCC,GAEnCC,EAAKX,YAAYC,MAQvB,OANAhI,EAAQD,KAAO9E,EAGf+E,EAAQO,MAAMP,EAAQV,WAAagJ,EAAKR,EACxC9H,EAAQO,MAAMP,EAAQV,WAAaoJ,EAAKJ,EAEjCrN,CACX,C,kDC5BA,MAAM+E,EAAU,CAEZD,KAAM,GAENiG,UAAW,EAEXK,YAAmB,EACnBE,kBAAmB,EACnBpG,SAAmB,EAEnBF,IAAK,CACDX,OAAQ,EACRiB,MAAQ,IAAIwB,MAAM,GAClBhC,KAAQ,IAEZG,KAAM,CACFZ,OAAQ,EACRiB,MAAQ,IAAIwB,MAAM,GAClBhC,KAAQ,GACR7E,IAAQ,OAMD,SAASyN,IAmBpB,OAjBA3I,EAAQD,KAAO,GACfC,EAAQqG,YAAmB,EAC3BrG,EAAQuG,kBAAmB,EAC3BvG,EAAQG,SAAmB,EAE3BH,EAAQgG,UAAY,EAEpBhG,EAAQC,IAAIX,OAAS,EACrBU,EAAQC,IAAIM,MAAMqI,KAAK,GACvB5I,EAAQC,IAAIF,KAAO,GAEnBC,EAAQE,KAAKZ,OAAS,EACtBU,EAAQE,KAAKK,MAAMqI,KAAK,GACxB5I,EAAQE,KAAKH,KAAO,GAEpBC,EAAQE,KAAKhF,IAAM,KAEZ8E,CACX,C,oEChDe,SAASrH,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKiQ,EAAAA,IACb,MAAMxQ,EAAaH,EAAK4Q,MAAM5O,OACxBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAK4Q,MAAMzO,GAAIxB,GAE7CL,EAAAA,GAAOI,GAAOV,EAAK6Q,MACvB,C,0DCXe,SAAS9Q,EAAOC,GAE3B,MAAMuM,EAAOjM,EAAAA,GAAON,GAEd8Q,GAAO5Q,EAAAA,EAAAA,IAAWF,GAClBC,EAAO6Q,EAAK,GAElBtQ,EAAAA,EAAAA,IAAM,WAAW+L,QAAWuE,EAAM,KAAM7Q,EAAM,IAClD,C,8ECNe,SAASQ,EAAQC,EAAaV,EAAWW,GAEpD,IAAIR,EAAa,OACCc,IAAdjB,EAAK4F,OACLzF,EAAa,IAEjBuB,EAAAA,EAAAA,IAAQhB,EAAKqQ,EAAAA,IACb,MAAMlP,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAE9BqJ,EAAAA,EAAAA,GAAK3H,EAAS7B,EAAKC,KAAMU,IACX8I,EAAAA,EAAAA,IAAsB5H,EAAS7B,EAAKC,MAE/B,IAAfE,IACA+B,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAK4F,KAAMjF,GAEvCL,EAAAA,GAAOI,GAAOV,EAAKY,IACvB,C,gDCnBO,SAASsD,EACgB8M,EACAC,GAC5B,MAAMC,EAAItN,OAAOuN,OAAO,MAKxB,OAHAD,EAAEzP,EAAAA,IAAeuP,EACjBE,EAAElL,EAAAA,IAAeiL,EAEVC,CACX,C,wFCLe,SAASzQ,EAAQC,EAAaV,EAAWW,GAEpD,MAAMgK,EAAS3K,EAAK2K,OAAO7J,GAI3B,GAHAH,EAAQK,cAAc2J,GAAU,EAGI,SAAhC3K,EAAKoR,KAAKnI,YAAYC,OAA0C,UAAtBlJ,EAAKoR,KAAKvQ,KAAKC,GAAiB,EAE1EY,EAAAA,EAAAA,IAAQhB,EAAK2Q,EAAAA,IACb,MAAMxP,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,GAS9B,OAPAwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKoR,KAAMzQ,IAEnC6I,EAAAA,EAAAA,GAAK3H,EAAQ,EAAG7B,EAAKC,KAAMU,IACb8I,EAAAA,EAAAA,IAAsB5H,EAAQ,EAAG7B,EAAKC,WAEpDK,EAAAA,GAAOI,GAAOiK,EAGlB,CAEAhK,EAAQK,cAAchB,EAAK4K,OAASnI,EAAAA,GAGpC,MAAMV,EAAO/B,EAAKoR,KAAKrP,MAEvBL,EAAAA,EAAAA,IAAQhB,EAAK4Q,EAAAA,IACb,MAAMnR,EAAa4B,EAAKC,OAAS,EAC3BH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,IAEjCqJ,EAAAA,EAAAA,GAAK3H,EAAS7B,EAAKC,KAAMU,IACX8I,EAAAA,EAAAA,IAAsB5H,EAAS7B,EAAKC,MAElD,IAAI,IAAIkC,EAAI,EAAGA,EAAIhC,IAAegC,GAC9BD,EAAAA,EAAAA,IAAaC,EAAEN,EAASE,EAAKI,EAAE,GAAIxB,GAEvCL,EAAAA,GAAOI,GAAOiK,CAClB,C,8ECtCe,SAASlK,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK6Q,EAAAA,KACb3P,EAAAA,EAAAA,IAAclB,EAAKsE,EAAAA,IAEnB,MAAM7E,EAAaH,EAAKqK,OAAOrI,OACzBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,EAC7BjB,QAAQC,KAAMnB,EAAKqK,OAAOlI,GAAG8G,YAAYC,QACzChH,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKqK,OAAOlI,GAAIxB,EAElD,C,0DCde,SAASZ,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAIN,IACXxB,EAAAA,EAAAA,IAAM,OAGVA,EAAAA,EAAAA,IAAM,IACV,C,wFCRA,MAAMmR,EAAU,CACZ,KAAM,KACN,KAAM,KACN,IAAK,IACL,IAAK,IACL,KAAM,KACN,KAAM,MAKH,SAASC,EAAmBzR,EAAc6E,EAAWC,EAAYC,EAAW2M,GAE/E,IAAIC,EAAM7M,EAEN4M,KACC7M,EAAEE,GAAK,CAACA,EAAEF,GACX8M,EAAMH,EAAQG,IAGC,MAAXA,EAAI,IAAyB,MAAXA,EAAI,KACvBpP,EAAAA,EAAAA,IAAWsC,MAAOtC,EAAAA,EAAAA,IAAWwC,KAC5B4M,GAAO,MAEfC,EAAAA,EAAAA,GAAkB5R,EAAM6E,EAAG8M,EAAK5M,EACpC,CAQO,SAASX,EAAYyN,EACAC,GACA,cACIpN,EAAkBqN,EAAAA,GAAS,aAC3BC,EAAkBD,EAAAA,GAAS,WAC3BnN,EAAkB6M,GACD,CAAC,GAE9C,IAAIQ,EAA4D,CAAC,EAEjE,IAAI,MAAMnN,KAAM+M,EAIZI,EAAO,KAFMC,EAAAA,GAAUpN,SAECZ,EAAAA,EAAAA,GAAe4N,GAAa,CAAC9R,EAAcmS,EAAcC,EAAWV,KACxF9M,EAAW5E,EAAMgS,EAAaG,GAAOrN,EAAIJ,EAAc0N,GAAIV,EAAAA,IAInE,OAAOO,CACX,C,6JCxDO,SAASI,EAASD,GACrB,OAAOE,EAAAA,EACX,CAEO,SAASvH,EAAcqH,GAC1B,OAAI3P,EAAAA,IAAc2P,GAAKA,GAAK1M,EAAAA,GACjBgJ,EAAAA,GACJC,EAAAA,EACX,CAEO,SAASY,EAAe6C,GAC3B,OAAI3P,EAAAA,IAAc2P,GAAKA,GAAK1M,EAAAA,GACjBA,EAAAA,GACJiJ,EAAAA,EACX,CAEO,SAAS4D,EAAgBH,GAC5B,OAAIA,IAAM5P,EAAAA,GACCA,EAAAA,GACJmM,EAAAA,EACX,CAQO,SAAS6D,EAAWJ,GACvB,OAAIA,IAAM3P,EAAAA,IAAc2P,IAAM5P,EAAAA,GACnBC,EAAAA,GACJkM,EAAAA,EACX,CACO,SAAS8D,EAAYL,GACxB,OAAIA,IAAM3P,EAAAA,GACCA,EAAAA,GACJkM,EAAAA,EACX,CAEO,SAASrK,EAAa8N,GACzB,OAAIA,IAAMpN,EAAAA,GACC0J,EAAAA,GACJC,EAAAA,EACX,CACO,SAASnK,EAAY4N,GACxB,OAAIA,IAAMpN,EAAAA,GACCA,EAAAA,GACJ2J,EAAAA,EACX,CACO,SAASlK,EAAW2N,GACvB,OAAIA,IAAM3P,EAAAA,IAAc2P,IAAM5P,EAAAA,GACnBwC,EAAAA,GACJ2J,EAAAA,EACX,CAEO,SAASrJ,EAAUiB,GAAa,OAAOb,EAAAA,EAAc,CACrD,SAASvB,EAAUoC,GAAa,OAAO9D,EAAAA,EAAc,CACrD,SAASiQ,EAAUnM,GAAa,OAAO/D,EAAAA,EAAc,CACrD,SAASgE,EAAUD,GAAa,OAAOvB,EAAAA,EAAc,C,8EC1D7C,SAASjF,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,QAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAEN,IACTxB,EAAAA,EAAAA,IAAM,OAGV,IAAIiC,EAAiBT,GACjBU,EAAAA,EAAAA,IAAWV,KAAaW,EAAAA,KAAgBD,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,KAC7DH,GAASI,EAAAA,EAAAA,IAAWb,KAExBtB,EAAAA,EAAAA,IAAO+B,EACX,C,wFChBe,SAASvC,EAAOC,GAE3B,IAAI8E,EAAK6N,EAAAA,GAAgBrS,EAAAA,GAAON,IAEhC,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,GAE3B,IAAI4F,EAAO+I,EAAAA,GACPC,EAAStN,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUiD,GAMxC,QAJe7D,IAAX2N,IACAhJ,EAAOgJ,EAAOnN,EAAAA,KAAac,EAAAA,EAAAA,IAAWV,EAAQ,KAGjC+D,IAAS+I,EAAAA,GACtB,MAAM,IAAIvN,MAAM,GAAGE,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUuD,YAAYN,KAAMxD,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,EAAQ,IAAIuD,6BAcjGwJ,EAAO5I,EAAAA,IAAYhG,EAAM6B,EAASA,EAAQ,EAC9C,C,saCnCO,MAAMqN,EAAa,EAEb0D,EAAmB,EACnBC,EAAkB,EAClB1I,EAAkB,EAElB2I,EAAiB,EACjBC,EAAe,EACfjE,EAAgB,GAChB6B,EAAiB,GACjBqC,EAAuB,GACvBC,EAAmB,GACnBhN,EAAgB,GAChBiN,EAAiB,GAEjB1E,EAAe,EACf2E,EAAa,EACbC,EAAc,EACdC,EAAa,EACblE,EAAc,GACdmE,EAAkB,GAClB5I,EAAoB,GACpBe,EAAqB,GACrBD,EAAgB,GAEhB3F,EAAc,GACd0N,EAAc,GACdC,EAAgB,GAChBjC,EAAkB,GAClBkC,EAAuB,GACvBC,EAAe,GACfC,EAAe,GAEfzJ,EAAc,GACd0J,EAAmB,GACnBjS,EAAe,GACfkS,EAAuB,GAEvBC,EAAiB,GACjBC,EAAoB,GACpBhD,EAA0B,GAC1BiD,EAAmB,GACnBC,EAAmB,GACnB3C,EAAqB,GACrBD,EAAe,GAEf6C,EAAe,GACfC,EAAW,GACXC,EAAc,GACdC,EAAc,GAE3B,I,6BCnDe,G,8JCaf,QAAezQ,OAAOC,OAAOyQ,EAAAA,GACzB,CACIvQ,UAAWiL,EAAAA,GACXvI,SAAWvC,EAAAA,EAAAA,GAAesC,EAAAA,IAAS,CAACD,EAAG+I,MACnC/O,EAAAA,EAAAA,IAAO+O,IAAMjP,EAAAA,EAAAA,IAAM,cAAc,IAErC0F,SAAS7B,EAAAA,EAAAA,GAAeC,EAAAA,IAAS,CAACnE,EAAMmS,KAC7B7H,EAAAA,EAAAA,GAActK,EAAMmS,OAGnC5N,EAAAA,EAAAA,GAAa,CAEL,KAAM,IAAK,IACX,IAAK,IAAK,IAAK,KAAM,MAEzBiO,EAAAA,GACA,CACI9N,cAAe6P,EAAAA,MAGvBhQ,EAAAA,EAAAA,GAAa,CAAC,KAAMkO,EAAAA,GAChB,CACI7N,WAAY,CAAC5E,EAAM6E,EAAG0B,EAAGxB,MAEjBxC,EAAAA,EAAAA,IAAWvC,KAAU0F,EAAAA,KACrBb,GAAIY,EAAAA,EAAAA,IAAWZ,GACfE,GAAIU,EAAAA,EAAAA,IAAWV,KAGnB6M,EAAAA,EAAAA,GAAkB5R,EAAM6E,EAAG,IAAKE,EAAE,KAI9CR,EAAAA,EAAAA,GAAa,CAAC,KAAMgL,EAAAA,GAChB,CACIyC,aAAerN,EAAAA,GACfD,cAAeC,EAAAA,MAGvBJ,EAAAA,EAAAA,GAAa,CAAC,MAAOiO,EAAAA,GACjB,CACI9N,cAAiB6P,EAAAA,GACjB3P,WAAY,CAAC5E,EAAcmS,EAAcrN,EAAYS,MACjD/E,EAAAA,EAAAA,IAAM,qBAAsB2R,EAAM,KAAM5M,EAAO,IAAI,KAI/DhB,EAAAA,EAAAA,GAAa,CAAC,KAAMiO,EAAAA,GAChB,CACI9N,cAAe6P,EAAAA,GACf3P,WAAY,CAAC5E,EAAcmS,EAAcrN,EAAYS,MAEjD/E,EAAAA,EAAAA,IAAM,gBAAiB2R,EAAM,KAAM5M,EAAO,IAAI,KAI1DmK,EAAAA,EAAAA,GAAY,CAAC,OAAQvL,EAAAA,GACjB,CACIS,WAAY,CAAC5E,EAAM8E,EAAID,MAEftC,EAAAA,EAAAA,IAAWvC,KAAU0F,EAAAA,KACrBb,GAAIY,EAAAA,EAAAA,IAAWZ,KAEnB2P,EAAAA,EAAAA,GAAiBxU,EAAM,IAAK6E,EAAE,KAI1C6K,EAAAA,EAAAA,GAAa,CAAC,KAAMvL,EAAAA,KACpBC,EAAAA,EAAAA,GAAYC,EAAAA,GAAa0G,EAAAA,I,0DC9Ed,SAAShL,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAC3BQ,EAAAA,EAAAA,IAAM,IAAKqB,EAAS,IAAKA,EAAQ,EAAG,MAAOA,EAAQ,EAAG,IAC1D,C,0DCIe,SAASsG,EAAiBsM,EAAc3M,GAEnD,MAAM8H,EAAMC,YAAYC,MAIlB9M,EAAM,CACR0R,OAAO5H,EAAAA,EAAAA,IAAY2H,GACnBxR,SAJa,KAOXmN,EAAKP,YAAYC,MAEjB/M,GAAShD,EAAAA,EAAAA,GAAOiD,GAEhBwN,EAAKX,YAAYC,MASvB,OAPAhI,EAAQD,KAAQ9E,EAChB+E,EAAQ9E,IAAQA,EAGhB8E,EAAQO,MAAMP,EAAQV,WAAagJ,EAAKR,EACxC9H,EAAQO,MAAMP,EAAQV,WAAaoJ,EAAKJ,EAEjCrN,CACX,C,0DCjCe,SAAShD,EAAOC,IAE3BO,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWF,GACvB,C,kCCNO,MAAM2U,UAAoBvT,MAEpBwT,iBAET3L,WAAAA,CAAY2L,GACRC,QACAD,EAAiBE,UAAY5R,KAC7BA,KAAK0R,iBAAmBA,CAC5B,EAIJ,SACID,c,0DCVW,SAAS5U,EAAOC,IAC3BK,EAAAA,EAAAA,IAAOC,EAAAA,GAAON,GAClB,C,0DCDe,SAAS+U,EAAQjN,EAAkBkN,GAE9C,MAAM5N,EAASU,EAAQC,IAAIX,QAE3B6N,EAAAA,EAAAA,GAAgBnN,EAAQE,KAAMgN,IAC7BE,EAAAA,EAAAA,GAAepN,EAAQC,KAGxBD,EAASC,IAAIM,MAAM,IAAMP,EAASC,IAAIM,MAAMjB,GAC5CU,EAAQE,KAAKK,MAAM,IAAMP,EAAQE,KAAKK,MAAMjB,EAChD,C,sICZO,MAAMuH,EAA4B,EAC5B2D,EAA4B,EAC5B7P,EAA4B,EAC5BD,EAA4B,EAC5BkD,EAA4B,EAC5BgJ,EAA4B,EAC5B1J,EAA4B,EAC5BmQ,EAA4B,EAC5BC,EAA4B,EAC5BC,EAA4B,EAC5BC,EAA2B,GAExC,I,kCCdA,SACIC,UAAYC,IACR,GAAIA,GAAK,MAAQA,GAAK,KAAM,CAExB,IAAI7I,EAAM6I,EAAEC,gBACZ,MAAMC,EAAW/I,EAAI3K,OAAO,EAG5B,MAFqB,MAAlB2K,EAAI+I,IAAuC,MAAlB/I,EAAI+I,KAC5B/I,EAAMA,EAAIgJ,MAAM,EAAED,EAAS,GAAK,IAAM/I,EAAIgJ,MAAMD,EAAS,IACtD/I,CACX,CAEA,IAAIA,EAAM6I,EAAEI,WAGZ,OAFMjJ,EAAIkJ,SAAS,OACflJ,GAAO,MACJA,CAAG,E,0DCXH,SAAS5M,EAAOC,GAE3B,MAAM6B,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BQ,EAAAA,EAAAA,IAAM,QAASqB,EAAS,wBACxBqE,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAEI9F,EAAAA,EAAAA,IAAM,0DAEFF,EAAa,IACbI,EAAAA,EAAAA,IAAQ,EAAEsB,GAEd,IAAI,IAAIM,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BgE,EAAAA,EAAAA,OAAQ9F,EAAAA,EAAAA,IAAM,UAAUE,EAAAA,EAAAA,IAAO4B,EAAIN,GAIC,KAApCzB,EAAAA,EAAAA,IAAQyB,EAAU1B,EAAW,MAC7BgG,EAAAA,EAAAA,OACA9F,EAAAA,EAAAA,IAAM,8BAGd+F,EAAAA,EAAAA,KAEJ,C,gDC3BO,SAAS0P,EAAQlV,EAAcmV,GAElC,MAAMjV,EAAKQ,EAAAA,EAAMU,OAEXgU,EAAMpS,OAAOC,OAAOD,OAAOuN,OAAO,MAAO4E,GAK/C,OAJAC,EAAI5Q,SAAWxE,EAEfU,EAAAA,EAAMR,GAAMkV,EAELlV,CACX,C,kGCJe,SAASf,EAAOC,GAE3B,MAAMiW,GAAQ/V,EAAAA,EAAAA,IAAWF,GACnB4K,EAAQtK,EAAAA,GAAON,GAEP,QAAV4K,EAKWtJ,EAAAA,GAAMiB,EAAAA,EAAAA,IAAW0T,IAAQrL,GAEjC5E,EAAAA,IAAahG,EAAMiW,IANtBzB,EAAAA,EAAAA,GAAiBxU,EAAM,KAAKyF,EAAAA,EAAAA,IAAWwQ,EAAMzT,EAAAA,IAOrD,C,kGCbe,SAAS/B,EAAQC,EAAYV,EAAWW,GAGnD,IAAIsK,EAAcqH,EAAAA,GAElB,QAAkBrR,IAAfjB,EAAK4K,MAAqB,CACzB,MAAM/I,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK4K,MAAOjK,GAClCsK,GAAc1I,EAAAA,EAAAA,IAAWV,EAC7B,EAEAH,EAAAA,EAAAA,IAAQhB,EAAKoS,EAAAA,KACblR,EAAAA,EAAAA,IAAclB,EAAKuK,GAEnB,MAAMvE,EAAO,KAAOnE,EAAAA,EAAAA,IAAW5B,EAAQgI,sBAAoCnH,cACjDP,IAAtByF,EAAKjF,EAAAA,MACLiF,EAAKjF,EAAAA,IAAe,IAAMwJ,EAClC,C,kCCzBA,SAAiB,C,oECIjB,MAAMiL,EAAa,CACf,IAAO,KACP,GAAO,MAGI,SAASzV,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK0S,EAAAA,IACb,MAAMjT,EAAaH,EAAKqK,OAAOrI,OACzBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKqK,OAAOlI,GAAIxB,IAE9CiB,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,IAE9BvB,EAAAA,GAAOI,GAAOwV,EAAWlW,EAAK8E,GAAGmE,YAAYC,MACjD,C,0DClBe,WAASlJ,IACpBQ,EAAAA,EAAAA,IAAM,WAAWN,EAAAA,EAAAA,IAAWF,GAAO,IACvC,C,sFCAO,SAAS2J,EAAa3J,GAEzB,MAAM0G,EAAO,KAAQ1G,GAAmBwB,SAASmF,EAAAA,IAE3C9E,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BO,EAAAA,EAAAA,IAAOsB,IACPxB,EAAAA,EAAAA,IAAM,KAEN,MAAM8V,EAAehW,EAAa,EAC5BiW,EAAoBvU,EAAU,EAGpC,IAAIwU,EAAcF,EAClB,IAAI,IAAIhU,EAAI,EAAGA,EAAIgU,IAAgBhU,EAC/B,IAAIyD,EAAAA,EAAAA,IAAMzD,EAAIiU,KAAsBvC,EAAAA,GAAsB,CACtDwC,EAAclU,EACd,KACJ,CAGJ,IAAImU,EAAU5P,EAAKG,YACnB,MAAM0P,EAAeD,IAAYxP,OAAOC,mBAAqBL,EAAKsD,OAC9DuM,IACAD,EAAU5P,EAAKM,YAEnB,MAAMwP,EAASC,KAAKC,IAAIL,EAAaC,GACrC,IAAI,IAAInU,EAAI,EAAGA,EAAIqU,IAAUrU,GACzB5B,EAAAA,EAAAA,IAAO4B,EAAIN,EAAU,IACrBxB,EAAAA,EAAAA,IAAM,MAGV,MAAMsW,EAAiC,CAAC,EAClC1P,EAAiC,CAAC,EAExC,IAAI2P,GAAkB,EAClBC,GAAkB,EAEtB,MAAMC,EAAa,IAAIjN,MAAM4M,KAAKM,IAAIrQ,EAAKM,WAAawP,EAAO,IAG/D,GAAGD,EAAc,CACb,MAAMS,EAAatQ,EAAKM,WAClBiQ,EAAaZ,EAAcW,EAEjC,GAAIC,EAAU,EAAI,EAEd5W,EAAAA,EAAAA,IAAM,MAENE,EAAAA,EAAAA,IAAOyW,EAAaZ,GAEpB,IAAI,IAAIjU,EAAI,EAAGA,EAAI8U,IAAW9U,GAC1B9B,EAAAA,EAAAA,IAAM,OACNE,EAAAA,EAAAA,IAAO4B,EAAI6U,EAAaZ,IAG5B/V,EAAAA,EAAAA,IAAM,IACV,CACJ,KAAO,CAEH,MAAMuJ,EAAalD,EAAKkD,WACxB,IAAI,IAAIzH,EAAIqU,EAAQrU,EAAIkU,IAAelU,EACnCwU,EAAI/M,EAAWzH,EAAE,IAAOA,EAAIN,EAEhC+U,EAAcJ,IAAWH,CAC7B,CAEA,MAAMtM,EAAWrD,EAAKqD,SAEtB,IAAI,IAAI5H,EAAIkU,EAAalU,EAAIgU,IAAgBhU,EAAG,CAE5C,MAAMmN,EAAOnN,EAAIN,EACXjB,EAAON,EAAAA,GAAOgP,GACd/C,EAAOxC,EAAUnJ,GAEnB2L,GAAO,EACPuK,EAAIvK,EAAMiK,GAAUlH,GAIxBsH,GAAc,GAED,IAATrK,EACAoK,EAAG/V,GAAQ0O,GAEXrI,EAAOrG,GAAQ0O,EACfuH,GAAkB,GAE1B,CAGA,IAAKD,IAAiBC,EAAkB,CACpC,IAAI1U,EACJ,IAAIA,EAAI2U,EAAI9U,OAAS,EAAGG,GAAK,QACVlB,IAAX6V,EAAI3U,KADsBA,GAIlC2U,EAAI9U,OAASG,EAAE,CACnB,CAGA,IAAI,IAAIA,EAAI,EAAGA,EAAI2U,EAAI9U,SAAUG,EAAG,CAChC,MAAMmN,EAAMwH,EAAI3U,QACJlB,IAARqO,GACAjP,EAAAA,EAAAA,IAAM,iBAENE,EAAAA,EAAAA,IAAO+O,IACPjP,EAAAA,EAAAA,IAAM,MAEd,CAEA,GAAIuW,EAAc,EACdvW,EAAAA,EAAAA,IAAM,KACN,IAAI,IAAI6W,KAAOP,GACXnW,EAAAA,EAAAA,IAAM,GAAG0W,MAASP,EAAGO,GAAM,MAE/B,GAAIL,EAAkB,EAClBxW,EAAAA,EAAAA,IAAM,GAAGqG,EAAKO,aACd,IAAI,IAAIiQ,KAAOjQ,GACXzG,EAAAA,EAAAA,IAAM,GAAG0W,MAASjQ,EAAOiQ,GAAM,OACnC7W,EAAAA,EAAAA,IAAM,IACV,EAEAA,EAAAA,EAAAA,IAAM,KACV,CAEA,IAAMqG,EAAKsD,QAAU6M,EAAkB,EACnCxW,EAAAA,EAAAA,IAAM,KACN,IAAI,IAAI6W,KAAOjQ,GACXzG,EAAAA,EAAAA,IAAM,GAAG0W,MAASjQ,EAAOiQ,GAAM,OACnC7W,EAAAA,EAAAA,IAAM,IACV,EAEAA,EAAAA,EAAAA,IAAM,IACV,CAEe,SAASN,EAAOC,GAC1BM,EAAAA,GAAON,GAAmBwB,SAASwE,EAAAA,IAAahG,EACrD,C,0DC5Ie,SAASS,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKuS,EAAAA,GAEjB,C,iBCJe,SAAS/K,EAASL,EAAcC,GAE3C,MAAM8H,EAAMC,YAAYC,MAElBqH,EAAS,IAAInH,GAAGoH,OAAOvP,EAAM,IAAK,QAClC4M,EAASzE,GAAGqH,SAASC,WAAWH,GAEhC/G,EAAKP,YAAYC,MAEvBhI,EAAQC,IAAKM,MAAMP,EAAQC,IAAKX,WAAagJ,EAAKR,EAClD9H,EAAQE,KAAKK,MAAMP,EAAQE,KAAKZ,WAAagJ,EAAKR,EAGlD,MAAM2H,EAASvH,GAAGwH,UAAU3P,EAAM,KAIlC,OAFAC,EAAQgG,WAAayJ,EAAOvV,OAErByS,CACX,C,6ICtBO,MAAMzQ,EAAiBJ,OAAOuN,OAAO,MAC/BnC,EAAiBpL,OAAOuN,OAAO,MAC/BjM,EAAmBtB,OAAOuN,OAAO,MACjChM,EAAYvB,OAAOuN,OAAO,MAC1BrN,EAAWF,OAAOuN,OAAO,MACzBsG,EAAa7T,OAAOuN,OAAO,MAC3BmD,EAAW1Q,OAAOuN,OAAO,MAEzB9B,GADazL,OAAOuN,OAAO,MACdvN,OAAOuN,OAAO,OAC3BrG,EAAYlH,OAAOuN,OAAO,MAC1BuG,EAA0B9T,OAAOuN,OAAO,MACxCwG,EAAgB/T,OAAOuN,OAAO,K,gDCT5B,SAASpR,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,WACV,C,oQCJO,MAAMsL,EAAeiM,aAIfhM,EAAY,EACZC,EAAY,EACZvE,EAAY,EACZK,EAAY,EACZsE,EAAgB3E,EAAWsE,EAC3BO,EAAgB7E,EAAWuE,EAC3BQ,EAAgB1E,EAAWiE,EAC3BU,EAAgB3E,EAAWkE,EAE3BgB,EAAsB,IAAIlB,EAAW,MACrCK,EAAsB,IAAIL,EAAW,MAGrCrL,EAAS,IAAIuJ,MAE1B,IAAIgO,EAAmB,EAEhB,SAAS/V,EAASgW,EAAgB1X,GAErC,MAAMgH,EAAS0Q,EAASC,EAExB7K,EAAS9F,EAAS4Q,GAAuB5X,EACzC,MAAMU,EAAKoM,EAAS9F,EAAS6Q,GAA0BJ,EAGvD,OAFAA,GAAoBzX,EAEbU,CACX,CAEO,SAASkM,IACZ,OAAO6K,GACX,CAMe,SAAS9K,IACpBzM,EAAO0B,OAAS,EAChB6V,EAAmB,EAEnBK,EAAOC,OAAQ,GAEfD,EAAOC,OAAQC,EACnB,CAEO,MAAMC,EAA6B,EAC7BC,EAA6B,EAC7BL,EAA6B,EAC7BD,EAA6B,EAC7BO,EAA6B,EAC7BR,EAA6B,EAEpCK,EAvDY,EAuDEL,EAtDI,KAwDlBG,EAAS,IAAIM,YAAYJ,EAAa,CAACK,cAAeL,IAE/ClL,EAAW,IAAIvB,EAAWuM,GAEhC,SAAStS,EAAK5F,GACjB,OAAOkN,EAASlN,EAAO+X,EAAeM,EAC1C,CACO,SAASjY,EAAQ0X,GACpB,OAAO5K,EAAS4K,EAASC,EAAeC,EAC5C,CACO,SAAS9X,EAAW4X,GACvB,OAAO5K,EAAS4K,EAASC,EAAeE,EAC5C,CACO,SAAS1V,EAAWvC,GACvB,OAAOkN,EAASlN,EAAO+X,EAAeQ,EAC1C,CACO,SAAS/N,EAAaxK,GACzB,OAAOkN,EAASlN,EAAO+X,EAAeO,EAC1C,CAEO,SAASI,EAAcZ,EAAgBlN,GAC1C,OAAOsC,EAAS4K,EAASC,EAAeE,GAA0BrN,CACtE,CACO,SAASlJ,EAAQ1B,EAAc4K,GAClC,OAAOsC,EAASlN,EAAO+X,EAAeM,GAAmBzN,CAC7D,CACO,SAAShJ,EAAc5B,EAAc4K,GACxCsC,EAASlN,EAAO+X,EAAeQ,GAAuB3N,CAC1D,CACO,SAASL,EAAgBvK,EAAc4K,GAC1CsC,EAASlN,EAAO+X,EAAeO,GAA8B1N,CACjE,C,kCCvFA,Q,QAA4B+M,E,wFCKb,SAASlX,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKyT,EAAAA,IAEb,MAAMhU,EAAaH,EAAKgC,OAClBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAE3ByP,EAAMtO,EAAAA,EAAMU,OAElB,IAAI,IAAIG,EAAI,EAAGA,EAAIhC,IAAcgC,EAAG,CAEhC,IAAIwW,EAAK3Y,EAAKmC,GACc,SAAzBwW,EAAG1P,YAAYC,QACdyP,EAAKA,EAAG/N,QAEZ1I,EAAAA,EAAAA,IAAaC,EAAIN,EAAS8W,EAAIhY,EAClC,CAGA,MAAMyL,EAAM9K,EAAAA,EAAMU,OAClB,IAAI,IAAIG,EAAIyN,EAAKzN,EAAIiK,IAAOjK,EAAG,CAC3B,MAAM6T,EAAM1U,EAAAA,EAAMa,GACG,aAAjB6T,EAAI5Q,gBAGSnE,IADA+U,EAAIxU,SAASmF,EAAAA,IAAWiB,UAErCoO,EAAIxU,SAASC,EAAAA,MACrB,CACJ,C,oEC/Be,SAAShB,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKmS,EAAAA,IACb,MAAM1S,EAAaH,EAAK4Y,KAAK5W,OACvBH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,GAE9B,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAK4Y,KAAKzW,GAAIxB,EAChD,C,4GCHA,SACIkY,IAAOzD,EAAAA,GACPzI,IAAO2I,EAAAA,GACPwD,MAAOzD,EAAAA,GACPzP,KAAOuP,EAAAA,GACP4D,KAAOjD,EAAAA,EAAAA,GAAQ,OAmBkBhE,EAnBU3N,EAAAA,GAqBpC,CAEH3C,UAAW0C,EAAAA,EAAAA,GAAe4N,GAAcrJ,IACpC,MAAMwN,GAAS/V,EAAAA,EAAAA,IAAWuI,GAAM,EAEhC,OADenH,EAAAA,IAAMiB,EAAAA,EAAAA,IAAW0T,IAAc,QAChCjQ,EAAAA,IAAYyC,EAAK,OAzBvCjF,OAAOsS,EAAAA,EAAAA,GAAQ,QAAS,CACpBtU,UAAU0C,EAAAA,EAAAA,GAAemO,EAAAA,IAAW5J,IAChC,MAAM5G,GAAW3B,EAAAA,EAAAA,IAAWuI,GACtBuQ,GAAW5Y,EAAAA,EAAAA,IAAQqI,IAEzBpI,EAAAA,EAAAA,IAAM,iBACN,IAAI,IAAI8B,EAAI,EAAGA,EAAI6W,IAAY7W,GAC3B5B,EAAAA,EAAAA,IAAOsB,EAAUM,IACjB9B,EAAAA,EAAAA,IAAM,OAEVA,EAAAA,EAAAA,IAAM,IAAI,OAQtB,IAAqCyR,C,kCCjCrC,YACIpS,EAAAA,MAAAA,MACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,E,kCCHJ,Q,QAAsCgY,E,gDCAvB,SAAS3X,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,OACV,C,8ECCe,SAASN,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMwB,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAImC,EAAIN,EAASM,EAAIhC,EAAa0B,IAAWM,EAE7C,IAAII,EAAAA,EAAAA,IAAWJ,KAAO6C,EAAAA,GAAtB,CAaA,IAAIY,EAAAA,EAAAA,IAAKzD,KAAOsR,EAAAA,GAKhB,MAAM,IAAIrS,MAAM,gBAJZb,EAAAA,EAAAA,IAAO4B,EAHX,KAXA,CAEI,MAAMiF,EAAS,EAAEjF,GAGHkF,EAAAA,EAAAA,IAAcD,EAASE,EAAAA,KACrC/G,EAAAA,EAAAA,IAAOD,EAAAA,GAAO6B,KACAkF,EAAAA,EAAAA,IAAcD,EAASO,EAAAA,GAIzC,EAUJtH,EAAAA,EAAAA,IAAM,IACV,C,oEChCe,SAASI,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKwS,EAAAA,IACb,MAAMrR,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAKiZ,KAAMtY,EACrC,C,+FCFAuY,OAAOC,QAAU,IAAIpX,KACpBb,QAAQuC,IAAI1B,EAAK,EAMlB,MAAOqX,EAAcC,SAASC,cAAgB,mBACxCC,EAAeF,SAASC,cAAc,oBACtCE,EAAeH,SAASC,cAAgC,WAExDG,EAAgBJ,SAASC,cAAc,iBACvCI,EAAgBL,SAASC,cAAc,QACvCK,EAAgBN,SAASC,cAAc,OAEvCtE,EAAa,IAAIjT,KACnBb,QAAQuC,IAAI,YAAa1B,EAAK,EAG5B6X,EAAS,IAAIC,gBAAiBC,SAASF,QACvCG,EAAYH,EAAOI,IAAI,QACvBC,EAAoC,SAAxBL,EAAOI,IAAI,SAEvBE,EAAqE,CAAC,EACtEC,QAAqBC,IAErBC,EAAgB,CAAC,mBAAoB,WACrCC,QAAsBC,KAAaF,GAoCzC,SAASG,EAAYC,GAEjB,MAAM3S,GAAU2I,EAAAA,EAAAA,KAgDhB8I,EAAYmB,YAAc,GACzBtB,EAAWsB,YAAc,GAE1Bf,EAAce,YAAc,GAC5BjB,EAAciB,YAAc,GAC5BhB,EAAcgB,YAAc,GAE5BnB,EAAYoB,UAAUC,OAAO,UAAW,SAnDxC9S,EAAQqG,YAAcsM,EAASI,MAAM,MAAMC,QAAOC,GAAkB,KAAbA,EAAEC,SAAehZ,OAExE,IAAIiZ,EAAoB,KAExB,KACIrT,EAAAA,EAAAA,GAAS6S,EAAU3S,IACnBiN,EAAAA,EAAAA,GAAQjN,EAASkN,EACrB,CAAE,MAAMkG,GACJD,EAAQC,CACZ,CAIc,OAAVD,GACA1B,EAAYmB,aAAeO,EAAME,QAAU,KAC3C5B,EAAYoB,UAAUS,IAAI,SAC1Bla,QAAQ+Z,MAAMA,IAEd1B,EAAYoB,UAAUS,IAAI,WAG7BhC,EAAWsB,cAAe7M,EAAAA,EAAAA,GAAgB/F,EAAS,MAAQ,QAC5DyR,EAAYmB,cAAe7M,EAAAA,EAAAA,GAAgB/F,EAAS,OAAQ,OAE5D,MAAM9E,GAAMgI,EAAAA,EAAAA,KACZ,IACCqQ,EAAUvT,EAAQE,KAAKH,KAAM7E,EAC9B,CAAE,MAAMkY,GAAKha,QAAQC,KAAK+Z,EAAI,CAC9B,IACII,EAAcb,EAAUzX,EAC5B,CAAE,MAAMkY,GAAKha,QAAQC,KAAK+Z,EAAI,CAC9B,IACIK,EAAWvY,EACf,CAAE,MAAMkY,GAAKha,QAAQC,KAAK+Z,EAAI,CAKlC,CAiBA,SAASM,EAAW3T,EAAc4M,EAAY7O,GA2B1C,OAzBY6O,EAAKpJ,SAECoQ,KAAMzb,IAEpB,MAAM+L,EAAOsN,SAASqC,cAAc,OAE9BtS,EAASiQ,SAASqC,cAAc,QACtCtS,EAAOsR,YAAc,GAAI1a,EAAKmL,OAAOW,MAAMC,QAE3C3C,EAAOuS,MAAMC,YAAY,iBAAkB,OAC3CxS,EAAOuS,MAAMC,YAAY,cAAe,QAExC7P,EAAK8P,OAAOzS,GAGZ,MAAM0S,EAAOC,EAAgB/b,EAAM6H,EAAMjC,GAOzC,OANAkW,EAAKH,MAAMC,YAAY,UAAW,gBAClC7P,EAAK8P,OAAOC,GAKL/P,CAAI,GAInB,CAEA,SAASgQ,EAAgB/b,EAAW6H,EAAcjC,GAE9C,MAAMoW,EAAY3C,SAASqC,cAAc,QAEzCM,EAAUC,MAAQjc,EAClBA,EAAKkc,aAAe,GACpBlc,EAAKkc,WAAWtc,KAAMoc,GAEtB,IAAI3Q,EAAWrL,EAAKqL,SAASyP,QAASjW,QAAuB5D,IAAZ4D,EAAEe,KACtBuW,MAAM,CAACtX,EAAME,IAElCF,EAAEe,GAAMkG,MAAMC,OAAShH,EAAEa,GAAMkG,MAAMC,KAC9BlH,EAAEe,GAAMkG,MAAMI,IAAMnH,EAAEa,GAAMkG,MAAMI,IAGtCrH,EAAEe,GAAMkG,MAAMC,KAAOhH,EAAEa,GAAMkG,MAAMC,OAG1CqQ,EAAW,IAAIvS,MAAwB,EAAlBwB,EAASrJ,OAAa,GAC3Cqa,EAASrc,EAAK4F,GAAMkG,MACpB1E,EAAS,EAEb,IAAI,IAAIjF,EAAI,EAAGA,EAAIkJ,EAASrJ,SAAUG,EAAG,CACrC,MAAMma,EAAQjR,EAASlJ,GAAGyD,QACZ3E,IAAVqb,IAEJF,EAAShV,KAAYmV,EAAW1U,EAAMwU,EAAQC,EAAMxQ,OACpDsQ,EAAShV,KAAY2U,EAAgB1Q,EAASlJ,GAAI0F,EAAMjC,GACxDyW,EAAShR,EAASlJ,GAAGyD,GAAMwG,IAC/B,CAKA,OAJAgQ,EAAShV,KAAYmV,EAAW1U,EAAMwU,EAAQrc,EAAK4F,GAAMwG,KAEzD4P,EAAUH,UAAUO,GAEbJ,CACX,CAIA,SAASO,EAAW1U,EAAc2U,EAAyCpQ,EAAgB,MAEvF,IAAIN,EAAQ0Q,EACD,OAARpQ,KACGN,QAAOM,OAAOoQ,GAGpB,IAAIC,EAAUC,EAAS7U,EAAMiE,GACzB6Q,EAAUD,EAAS7U,EAAOuE,GAE9B,OAAOvE,EAAK8N,MAAO8G,EAASE,EAChC,CAEA,SAASD,EAAS7U,GAAc,KAACkE,EAAI,IAAEG,IAEnC,GAAY,IAATH,EACC,OAAOG,EAEX,IAAI0Q,EAAM,EACNC,EAAW,EACf,KAAOD,EAAM/U,EAAK7F,QAAQ,CACtB,GAAkB,OAAd6F,EAAK+U,OACHC,EACE9Q,IAAS8Q,GAAW,GAClBD,EACF,KACJ,GAEFA,CACN,CAEA,OAAOA,EAAM1Q,CACjB,CAGA,SAAS4Q,EAAW9c,GAChB,MAAMgc,EAAY3C,SAASqC,cAAc,OAMzC,GALAM,EAAUC,MAAQjc,EAClBA,EAAKkc,aAAe,GACpBlc,EAAKkc,WAAWtc,KAAMoc,GAEtBA,EAAUtB,YAAc1a,EAAK4F,KACX,MAAd5F,EAAK4K,MAAe,CACpB,IAAImS,EAAM/c,EAAK4K,WACM3J,IAAjB8b,EAAI3X,WACJ2X,EAAMA,EAAI3X,UACd4W,EAAUtB,aAAe,IAAIqC,GACjC,CACyB,OAArB/c,EAAKiL,cAEL+Q,EAAUtB,aAAe,KAAK1a,EAAKiL,gBAa1C,IAAI,IAAI+R,KAAShd,EAAKqL,SAAU,CACzB,MAAM4R,EAAaH,EAAWE,GAC9BC,EAAWtB,MAAMC,YAAY,cAAe,QAC5CI,EAAUH,OAAQoB,EACtB,CAEH,OAAOjB,CACR,CA1OkB,OAAdjC,GACAmD,EAAWnD,EAAWE,GAE1BT,EAAa2D,iBAAiB,SAC1B,KACI,MAAMtV,EAAO2R,EAAa5O,MAC1BwS,aAAaC,QAAQ,gBAAiBxV,GACtC2S,EAAY3S,EAAK,IAGzB2R,EAAa2D,iBAAiB,WAAYG,IAEtC,GAAe,QAAZA,EAAGzV,KAAgB,CACdyV,EAAGC,iBAEH,IAAI3N,EAAM4J,EAAagE,eACnBpR,EAAMoN,EAAaiE,aAEvB,MAAMC,EAAMlE,EAAa5O,MACnB+S,EAAWD,EAAI/H,MAAM,EAAK/F,GAC1BgO,EAAWF,EAAI/H,MAAMvJ,EAAKsR,EAAI1b,QAEpCwX,EAAa5O,MAAQ+S,EAAU,OAASC,EAExC,MAAM9G,EAAMlH,EAAI,EAChB4J,EAAaqE,kBAAkB/G,EAAKA,EACxC,KAGuB,KAA3BoC,OAAOY,SAASF,SAChBJ,EAAa5O,MAAQwS,aAAaU,QAAQ,kBAAoB,GAC9DtD,EAAYhB,EAAa5O,QA8M7B,IAAImT,EAAqC,KAEzC,SAASC,EAAUrT,GAEf,GAAIoT,IAAqBpT,EACrB,OACJ,GAAyB,OAArBoT,EAA2B,CAE3B,IAAI,IAAIE,KAAY,EAA0B/B,WAC1C+B,GAAUtD,UAAUC,OAAO,aAC/BmD,EAAmB,IACvB,CAEA,MAAM9B,EAAQ,EAAgBA,MAC9B,QAAchb,IAAVgb,EAAJ,CAGA8B,EAAmB9B,EACnB,IAAI,IAAIgC,KAAYhC,EAAMC,WACtB+B,GAAUtD,UAAUS,IAAI,YAJlB,CAKd,CA+BA,SAASG,EAAUvY,GAEf,MAAM0R,EAAQ1R,EAAIqI,SAASoQ,KAAMzb,IAE7B,MAAM+L,EAAOsN,SAASqC,cAAc,OAE9BtS,EAASiQ,SAASqC,cAAc,QACtCtS,EAAOsR,YAAc,GAAG1a,EAAKmL,OAAOW,MAAMC,QAE1C3C,EAAOuS,MAAMC,YAAY,iBAAkB,OAC3CxS,EAAOuS,MAAMC,YAAY,cAAe,QAExC7P,EAAK8P,OAAOzS,GAEZ,MAAM0S,EAAOgB,EAAW9c,GAKxB,OAJA8b,EAAKH,MAAMC,YAAY,UAAW,gBAClC7P,EAAK8P,OAAOC,GAGL/P,CAAI,IAGlB2N,EAAWwE,mBAAoBxJ,EAEhC,CAEA,SAAS4G,EAAanQ,EAAgBnI,GACrCyW,EAAcyE,mBAAoB1C,EAAWrQ,EAAQnI,EAAK,UAC3D,CAEA,SAASqY,EAAStY,EAAgBC,GACjC2W,EAAUuE,mBAAoB1C,EAAWzY,EAAQC,EAAK,UACvD,CAIA,SAASka,EAAWnD,EAAmBE,GAEnC,MAAMnS,GAAU2I,EAAAA,EAAAA,KAEhB,IAAI0N,EAAkB,CAACpE,GACL,YAAdA,IACAoE,EAAQ9D,GAEZ,IAAIY,EAAoB,KACpBR,EAAW,GAEX3Z,GAAM,EAEVqd,EAAO,IAAI,IAAIhc,EAAI,EAAGA,EAAIgc,EAAMnc,SAAUG,EAAG,CAEzC,MAAMic,EAAW9D,EAAY6D,EAAMhc,IAC7Bkc,EAAWnE,EAAciE,EAAMhc,IAErC,IAAI,IAAImc,EAAI,EAAGA,EAAIF,EAASpc,SAAUsc,EAAG,GAEnCxd,EAEF,MAAMyd,EAAQF,EAASC,GACvBxW,EAAQqG,aAAqBoQ,EAAMC,MACnC1W,EAAQuG,mBAAqBkQ,EAAME,SAEnC,MAAM5W,EAAOuW,EAASE,GAEtB,GAAa,KAATzW,EAGJ,GAAIoS,EAEAQ,GAAY,QAAQ3Z,SADE+G,EAAKgT,MAAM,MAAMY,KAAIP,GAAK,KAAKA,MAAKwD,KAAK,MACjB,mBAAmB5d,aAEjE,IACI2Z,EAAW5S,GACXD,EAAAA,EAAAA,GAAS6S,EAAU3S,IACnBiN,EAAAA,EAAAA,GAAQjN,EAASkN,EACrB,CAAE,MAAMkG,GACJD,EAAQC,EACR,MAAMiD,CACV,CAER,CACJ,CAEA,GAAIlE,EACA,KACIrS,EAAAA,EAAAA,GAAS6S,EAAU3S,IACnBiN,EAAAA,EAAAA,GAAQjN,EAASkN,EACrB,CAAE,MAAMkG,GACJD,EAAQC,CACZ,CAGJ,GAAGD,EAAH,CAEIzB,EAAa5O,MAAQ9C,EAAQD,KAE7B0R,EAAYoB,UAAUS,IAAI,SAC1B7B,EAAYmB,YAAcO,EAAME,QAChCja,QAAQC,KAAK8Z,GAEb,MAAMjY,GAAMgI,EAAAA,EAAAA,KACZ,IACIqQ,EAAUvT,EAAQE,KAAKH,KAAM7E,EACjC,CAAE,MAAMkY,GAAKha,QAAQC,KAAK+Z,EAAI,CAC9B,IACII,EAAcb,EAAUzX,EAC5B,CAAE,MAAMkY,GAAKha,QAAQC,KAAK+Z,EAAI,CAC9B,IACIK,EAAWvY,EACf,CAAE,MAAMkY,GAAKha,QAAQC,KAAK+Z,EAAI,CAGlC,MAEA1B,EAAa5O,MAAQ,GAErB2O,EAAYoB,UAAUS,IAAI,WAEzBhC,EAAWsB,aAAc7M,EAAAA,EAAAA,GAAgB/F,EAAS,MAAQ,QAC3DyR,EAAYmB,aAAc7M,EAAAA,EAAAA,GAAgB/F,EAAS,OAAQ,MAE/D,CAGA6W,eAAevE,IACX,MAAMD,cAA4ByE,MAAM,6BAA6BC,OACrE,OAAOjb,OAAOkb,YAAa3E,EAAaU,MAAM,KAAKlF,MAAM,GAAG8F,KAAIP,IAE5D,IAAI6D,EAAQ7D,EAAEL,MAAM,MAChBja,EAAOme,EAAM,GAAGpJ,MAAM,GAEtBqJ,EAAUD,EAAMpJ,MAAM,GAAGmF,QAAOI,GAAc,MAATA,EAAE,IAA2B,IAAbA,EAAElZ,SAAcyZ,KAAKwD,IAC1E,MAAM/D,EAAI+D,EAAEpE,MAAM,KAClB,OAAiB,IAAbK,EAAElZ,OACW,MAATkZ,EAAE,GACKA,EAAE,GACNgE,SAAShE,EAAE,IAEf,CAACgE,SAAShE,EAAE,IAAKgE,SAAShE,EAAE,IAAI,IAG3C,MAAO,CAACta,EAAMoe,EAAQ,IAE9B,CAEAL,eAAepE,KAAa3J,GAExB,MAAMuN,EAAkC,CAAC,EAEzC,IAAI,IAAIhc,EAAI,EAAGA,EAAIyO,EAAM5O,SAAUG,EAC/Bgc,EAAMvN,EAAMzO,UAAYgd,EAAavO,EAAMzO,IAE/C,OAAOgc,CACX,CAEAQ,eAAeQ,EAAapF,EAAmBiF,EAAU7E,GAErD,MAAMtS,cAAoB+W,MAAM,qBAAqB7E,SAAiB8E,OAItE,OAFA3E,EAAcH,GAAa,GAEpBlS,EAAKgT,MAAM,KAAKlF,MAAM,GAAG8F,KAAKxW,IAEjC,IAAM8Z,EAAQ9Z,EAAE4V,MAAM,MACtB,MAAMja,EAAQme,EAAM,GAAG/D,OACjBoE,EAAW,GAAGrF,KAAanZ,IAEjCme,EAAQjE,EAAOiE,EAAMpJ,MAAM,GAAIqJ,EAAQI,IAEvC,IAAIC,EAAe,EACnB,IAAI,IAAIld,EAAI,EAAGA,EAAI4c,EAAM/c,SAAUG,EACR,KAApB4c,EAAM5c,GAAG6Y,UACNqE,EAEV,IAAIC,EAAWP,EAAM/c,OAASqd,EAE1BE,EAAa,EACjB,IAAI,IAAIpd,EAAI,EAAGA,EAAI4c,EAAM/c,SAAUG,EAC/Bod,KAAgC,MAAhBR,EAAM5c,GAAG,IAO7B,OALA+X,EAAcH,GAAWna,KAAK,CAC1B6e,SAAUc,EACVf,MAAUc,IAGXA,IAAaC,EACL,GAEJR,EAAML,KAAK,MAAQ,IAAI,GAEtC,CAEA,SAAS5D,EAAOiE,EAAiBjO,GAqB7B,OAnBAA,IAAS,GAEIiO,EAAMtD,KAAK,CAACV,EAAGxO,KACxBA,EAAMA,EAAM,EAAI,OASTtL,IARQ6P,EAAK0O,MAAOC,GACb,MAANA,GAEAlT,IAAQkT,MAER5V,MAAM6V,QAAQD,IAAMA,EAAE,GAAK,GAAKlT,GAAOkT,EAAE,GAAK,GAAKlT,KAMhD,KAAKwO,IACTA,IAIf,CAhOArB,EAAWyD,iBAAiB,aAAaG,IACrCU,EAAUV,EAAG3S,OAAM,IAEvB8O,EAAc0D,iBAAiB,aAAaG,IACxCU,EAAUV,EAAG3S,OAAM,IAEvBgP,EAAUwD,iBAAiB,aAAaG,IACpCU,EAAUV,EAAG3S,OAAM,I,yIC7TR,SAASlK,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKsS,EAAAA,IAEb1S,EAAAA,GAAOI,GAAO,CAACV,EAAKY,KAAMZ,EAAK2f,OAEnC,C,4GCFe,SAASlf,EAAQC,EAAaV,EAAWW,GAEpD,IAAImE,EAAK2F,EAAAA,GAAazK,EAAK8E,GAAGmE,YAAYC,OAC1C,QAAwBjI,IAAP6D,EAEb,MADA5D,QAAQC,KAAK,KAAMnB,EAAK8E,GAAGmE,YAAYC,OACjC,IAAI9H,MAAM,oBAGpBM,EAAAA,EAAAA,IAAQhB,EAAK2S,EAAAA,IAEb,MAAMxR,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKiW,KAAOtV,IACpCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAK4f,MAAOjf,GAEpC,MAAMkf,GAAQtd,EAAAA,EAAAA,IAAWV,GACnB0G,GAAQhG,EAAAA,EAAAA,IAAWV,EAAQ,GAEjC,IAAI+D,EAAO+I,EAAAA,GACPC,EAAStN,EAAAA,EAAMue,GAAO/a,GAM1B,QAJe7D,IAAX2N,IACAhJ,EAAOgJ,EAAOnN,EAAAA,IAAa8G,IAG3B3C,IAAS+I,EAAAA,GAA2B,CAOpC,GANA7J,GAASgb,EAAAA,EAAAA,IAAkBhb,GAE3B8J,EAAStN,EAAAA,EAAMiH,GAAOzD,QACP7D,IAAX2N,IACAhJ,EAASgJ,EAAOnN,EAAAA,IAAaoe,IAEhBja,IAAS+I,EAAAA,GACtB,MAAM,IAAIvN,MAAM,GAAGE,EAAAA,EAAMiH,GAAOnD,YAAYN,KAAMxD,EAAAA,EAAMue,GAAOza,8BAGnE2a,EAAAA,EAAAA,IAAale,EAASA,EAAQ,EAClC,CAEAvB,EAAAA,GAAOI,GAAOoE,GAEdlD,EAAAA,EAAAA,IAAclB,EAAKkF,EACvB,C,wFC3Ce,SAASnF,EAAQC,EAAaV,EAAWW,GAKpD,GAHAA,EAAQK,cAAchB,EAAKY,OAAQkV,EAAAA,EAAAA,GAAQ9V,EAAKY,KAAM,CAAC,GACvDD,EAAUA,EAAQ+H,iBAAiB,SAElB1I,EAAKggB,MAAMhe,OAAS,EACjC,MAAM,IAAIZ,MAAM,oBAEpBM,EAAAA,EAAAA,IAAQhB,EAAMwT,EAAAA,IACd,MAAM/T,EAAa,EAAIH,EAAKggB,MAAMhe,OAC5BH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,IAEjCqJ,EAAAA,EAAAA,GAAK3H,EAAS7B,EAAKC,KAAMU,IACX8I,EAAAA,EAAAA,IAAsB5H,EAAS7B,EAAKC,MAElD,IAAI,IAAIkC,EAAI,EAAGA,EAAIhC,IAAegC,GAC9BD,EAAAA,EAAAA,IAAaC,EAAEN,EAAS7B,EAAKggB,MAAM7d,EAAE,GAAIxB,GAE7CL,EAAAA,GAAOI,GAAOV,EAAKY,IACvB,C,oECrBe,SAASH,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKkS,EAAAA,IACb,MAAMzS,EAAaH,EAAK4Y,KAAK5W,OACvBH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,GAE9B,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAK4Y,KAAKzW,GAAIxB,EAEhD,C,0DCTe,SAASF,EAAQC,EAAaV,EAAWigB,IACpDve,EAAAA,EAAAA,IAAQhB,EAAKqS,EAAAA,GACjB,C,oECFe,SAAStS,EAAQC,EAAaV,EAAWW,GAEpD,MAAMkB,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKiZ,KAAQtY,IACrCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAKC,KAAQU,IACrCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAKkgB,OAAQvf,IAErCe,EAAAA,EAAAA,IAAQhB,EAAMsT,EAAAA,KACdpS,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,EAAQ,GAC1C,C,oECVe,SAASpB,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKiQ,EAAAA,IACb,MAAMxQ,EAAaH,EAAK4Q,MAAM5O,OACxBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAK4Q,MAAMzO,GAAIxB,GAE7CL,EAAAA,GAAOI,GAAOV,EAAK6Q,MACvB,C,0DCXe,SAAS9Q,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAE3BQ,EAAAA,EAAAA,IAAM,GAAIqB,EAAS,IAAKA,EAAQ,EAAG,IACvC,C,oECJe,SAAS9B,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,GAEZsB,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAWvB,EAAAA,GAAON,IAC3CgG,EAAAA,IAAahG,EAAM6B,EAASA,EAAQ,EAC/C,C,2DCiFA,SAASse,EAAsBC,EAAmBC,GAE9Cnf,QAAQC,KAAK,YAAaif,GAE1B,MAAME,EAhDH,SAAqBA,EAAYD,GAMpC,MAAME,EAAmB,WAFzBD,EAAQA,EAAMzF,MAAM,OAED,GAEnB,OAlDJ,SAAsByF,GACpB,OAAOA,EAAMxF,QAAQI,GAAKA,EAAErF,SAAS,aACvC,CAgDW2K,CAAaF,GAAO7E,KAAKV,IAE9B,IAAKxU,EAAGka,EAAOC,GAAQ3F,EAAEF,MAAM,KAEH,MAAxB6F,EAAKA,EAAK1e,OAAO,KACnB0e,EAAOA,EAAK/K,MAAM,GAAG,IAEvB,IAKIgL,EALA5U,GAAQ0U,EAAQ,EAChBvU,GAAQwU,EAKZ,KAHExU,EAGEqU,EAAO,CACT,IAAIzJ,EAAMvQ,EAAEqa,QAAQ,IAAK,GACzBD,EAAWpa,EAAEoP,MAAM,EAAGmB,GACL,SAAb6J,IACFA,EAAW,YAGb,MACM3gB,GADMqgB,EAAG9c,UAAU,sBACqBmR,MA7C7C,OA8CG9O,EAAAA,EAAAA,IAAK5F,KAAUkP,EAAAA,KACjBhD,GAAO5L,EAAAA,GAAON,GAAMgC,OAExB,KAAO,CACL,IAAI8U,EAAMvQ,EAAEqa,QAAQ,KACpBD,EAAWpa,EAAEoP,MAAM,EAAGmB,GACL,cAAb6J,IACFA,EAAW,WACf,CAEA,MAAO,CAACA,EAAU5U,EAAMG,EAAI,GAElC,CAMkB2U,CAAa,EAAa/L,UAAUwL,MAAOD,IArDtD,SAAwBC,EAAoBD,GAC1CC,EAAM7E,KAAKP,GATb,SAA2B4F,EAAsBT,GAEtD,OADYA,EAAG9c,UAAU,sBACemR,MAAOoM,EAAU,GAAIA,EAAU,GALhE,IAMT,CAMyBC,CAAkB7F,EAAGmF,IAC9C,CAoDkBW,CAAeV,EAAOD,GAKpC,IAAIY,EACR,yCAHsBX,EAAM7E,KAAK,CAACV,EAAE5Y,IAAM,6BAAgCme,EAAMne,GAAG,OAIrEuc,KAAK,4BAGfxd,QAAQuC,IAAIwd,EAChB,CAcA,SACId,wBACAe,iBAdJ,SAA0BpM,EAAgBqM,GAExC,MAAMC,EAAQtM,aAAqBnR,KAAKgR,YAC1BG,EAAUF,iBAEV,IAAIlR,IAAI2d,YAAYvM,GAIlC,OAFAqL,EAAsBiB,EAAOD,GAEtBC,CACT,E,oECnHe,SAASrhB,EAAOC,GAE3B,IAAI4K,EAAQtK,EAAAA,GAAON,IAEfuC,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,IAKJ,iBAAVmI,IACPA,EAAQ9D,OAAO8D,KAGnBvK,EAAAA,EAAAA,IAAM,GAAGuK,OAPLvK,EAAAA,EAAAA,IAAM,GAAGuK,KAQjB,C,oECde,SAAS7K,EAAOC,GAE3B,MAAMuM,EAAOjM,EAAAA,GAAON,GAEdC,GAAaC,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAIoM,GAAM1J,EAAAA,EAAAA,IAAWzC,EAAK,IAE1BI,EAAAA,EAAAA,IAAM,WAAWkM,QAEbpM,EAAa,IAEbI,EAAAA,EAAAA,IAAO6L,GACPA,GAAM1J,EAAAA,EAAAA,IAAWzC,EAAK,KAGtBI,EAAAA,EAAAA,IAAM,OAGVG,EAAAA,EAAAA,IAAM,KAAK+L,OAAUH,EAAK,KAAKG,SAEZ,IAAfpM,GACAI,EAAAA,EAAAA,KAAQmC,EAAAA,EAAAA,IAAWzC,EAAK,KAExBI,EAAAA,EAAAA,IAAM,OAGVG,EAAAA,EAAAA,IAAM,KAAMP,EAAM,IACtB,C,4GCxBA,SAASqhB,EAAoBthB,EAAciW,EAAanR,EAAY8a,GAEhE,IAAIlO,GAAW,EACf,MAAMnJ,GAAQhG,EAAAA,EAAAA,IAAWqd,GACnBC,GAAQtd,EAAAA,EAAAA,IAAW0T,GAEzB,IAAIrQ,EAAO+I,EAAAA,GAEPC,EAAStN,EAAAA,EAAMue,GAAO/a,GAI1B,QAHe7D,IAAX2N,IACAhJ,EAAOgJ,EAAOnN,EAAAA,IAAa8G,IAE3B3C,IAAS+I,EAAAA,GAA2B,CAOpC,GALA7J,GAASgb,EAAAA,EAAAA,IAAkBhb,GAC3B8J,EAAStN,EAAAA,EAAMiH,GAAOzD,QACP7D,IAAX2N,IACAhJ,EAASgJ,EAAOnN,EAAAA,IAAaoe,IAE7Bja,IAAS+I,EAAAA,GAA2B,CACpC,GAAwB,WAAP7J,GAA0B,WAAPA,EAChC,MAAM,IAAI1D,MAAM,GAAGye,KAAS/a,KAAMyD,sBAEtC,MAAMgZ,EAAc,WAAPzc,EAAkB,MAAQ,MAIvC,YAFA8M,EAAAA,EAAAA,GAAkB5R,EAAMiW,EAAMsL,EAAM3B,EAGxC,CAEAlO,GAAW,GACVuE,EAAM2J,GAAS,CAACA,EAAO3J,EAC5B,CAEArH,EAAO5I,EAAAA,IAAahG,EAAMiW,EAAM2J,EAAOlO,EAC3C,CAEe,SAAS3R,EAAOC,GAE3B,MAAM4K,EAAQtK,EAAAA,GAAON,GAEf6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIyI,EAAM5I,SAAUG,EAAG,CACxB,IAANA,IACA9B,EAAAA,EAAAA,IAAM,QAEV,MAAMyE,EAAQ8F,EAAMzI,GACd8T,EAAQ9T,EAAEN,EACV+d,EAAQzd,EAAE,EAAEN,EAEP,OAAPiD,EAIO,WAAPA,EAKJwc,EAAoBthB,EAAMiW,EAAMnR,EAAI8a,IAJhChO,EAAAA,EAAAA,GAAkB5R,EAAMiW,EAAM,MAAO2J,IAJrChO,EAAAA,EAAAA,GAAkB5R,EAAMiW,EAAM,MAAO2J,EAS7C,CACJ,C,8EClEe,SAASnf,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKoT,EAAAA,IACb,MAAMjS,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKiZ,KAAMtY,IAEnC6I,EAAAA,EAAAA,GAAK3H,EAAQ,EAAG7B,EAAKC,KAAMU,IACb8I,EAAAA,EAAAA,IAAsB5H,EAAQ,EAAG7B,EAAKC,KAExD,C,0DCZe,SAASF,EAAOC,GAE3B,MAAM4K,EAAQtK,EAAAA,GAAON,IAErBK,EAAAA,EAAAA,IAAMuK,EAAM,SAEK3J,IAAb2J,EAAM,KACNvK,EAAAA,EAAAA,IAAM,KAAOuK,EAAM,GAC3B,C,0DCRe,SAAS7K,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,mBAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAIN,IACXxB,EAAAA,EAAAA,IAAM,OAGVA,EAAAA,EAAAA,IAAM,KACV,C,+CCbe,SAAS4U,EAAgBnN,EAAqBtE,GAEzD,MAAMoM,EAAMC,YAAYC,MAElBuQ,EAAK,IAAI1d,EAAAA,GACf0d,EAAG7c,MAAQA,EACX,MAAMnC,EAAMgf,EAAGvd,YAAYgF,EAAQD,KAAM,CAAC5E,SAAU,MAE9CmN,EAAKP,YAAYC,MAEvBzO,EAAIgf,GAEJ,MAAM7P,EAAKX,YAAYC,MAEvBhI,EAAQO,MAAMP,EAAQV,WAAaoJ,EAAKZ,EACxC9H,EAAQO,MAAMP,EAAQV,WAAagJ,EAAKR,EACxC9H,EAAQO,MAAMP,EAAQV,WAAaoJ,EAAKJ,CAC5C,C,0DCjBe,SAASrQ,EAAOC,IAC3BwhB,EAAAA,EAAAA,IAAiBxhB,EAAMM,EAAAA,GAAON,GAClC,C,oECDe,SAASS,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKmT,EAAAA,IAEb,MAAMhS,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAcL,EAAS7B,EAAK4K,MAAOjK,IACnCiB,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,IAE9BvB,EAAAA,GAAOI,GAAOV,EAAKsP,GACvB,C,+FCLO,SAASyQ,EAAalb,EAAWE,GAEpC,MAAM0c,EAAK1J,EAAAA,GAAelT,EACpB6c,EAAK3J,EAAAA,GAAehT,EAE1B,IAAIE,EACJ,IAAI,IAAI9C,EAAI,EAAGA,EAAI4V,EAAAA,KAAgB5V,EAC/B8C,EAAIiI,EAAAA,GAASuU,EAAGtf,GAChB+K,EAAAA,GAASuU,EAAGtf,GAAK+K,EAAAA,GAASwU,EAAGvf,GAC7B+K,EAAAA,GAASwU,EAAGvf,GAAK8C,EAGL,CACZ,MAAM0c,EAAK,EAAE9c,EACP+c,EAAK,EAAE7c,EACb,IAAI,IAAI5C,EAAI,EAAGA,EAAI,IAAKA,EACpB8C,EAAI4H,EAAAA,GAAQ8U,EAAGxf,GACf0K,EAAAA,GAAQ8U,EAAGxf,GAAK0K,EAAAA,GAAQ+U,EAAGzf,GAC3B0K,EAAAA,GAAQ+U,EAAGzf,GAAK8C,CAExB,CAEAA,EAAI3E,EAAAA,GAAOuE,GACXvE,EAAAA,GAAOuE,GAAKvE,EAAAA,GAAOyE,GACnBzE,EAAAA,GAAOyE,GAAKE,CAChB,CAEO,SAAS/C,EAAapB,EAAY+gB,EAAmBlhB,GAExD,MAAMC,EAAOihB,EAAa5Y,YAAYC,MAEhCzI,EAAUqhB,EAAAA,EAASlhB,GAEzB,QAA6BK,IAAZR,EAIb,MAHAS,QAAQC,KAAK,yBAA0BP,GACvCM,QAAQC,KAAK,MAAM0gB,EAAazY,UAAUyY,EAAavY,cACvDpI,QAAQuC,IAAKoe,GACP,IAAIzgB,MAAM,oBAAoBR,QAAWihB,EAAazY,UAAUyY,EAAavY,cAGvF7I,EAAQK,EAAI+gB,EAAclhB,GACV0B,EAAYvB,EAAI+gB,EAEpC,CAIO,SAASxf,EAAYvB,EAAY+gB,GAEpC,MAAMza,EAAS,EAAEtG,EACjB+L,EAAAA,GAASzF,EAAS6E,EAAAA,IAAkB4V,EAAazY,OACjDyD,EAAAA,GAASzF,EAAS+E,EAAAA,IAAkB0V,EAAavY,WACjDuD,EAAAA,GAASzF,EAASiF,EAAAA,IAAkBwV,EAAaxY,WACjDwD,EAAAA,GAASzF,EAASkF,EAAAA,IAAkBuV,EAAatY,cACrD,CAEO,SAASE,EAAsB3I,EAAY+gB,GAE9C,MAAMza,EAAS,EAAEtG,EAEX8O,EAAMiS,EAAa,GACnBzV,EAAMyV,EAAaA,EAAa7f,OAAO,GAE7C6K,EAAAA,GAASzF,EAAS6E,EAAAA,IAAkB2D,EAAIxG,OACxCyD,EAAAA,GAASzF,EAAS+E,EAAAA,IAAkByD,EAAItG,WACxCuD,EAAAA,GAASzF,EAASiF,EAAAA,IAAkBD,EAAI/C,WACxCwD,EAAAA,GAASzF,EAASkF,EAAAA,IAAkBF,EAAI7C,cAC5C,CAGO,SAASwY,EAAqBpS,EAAaqS,EAAiBC,GAE/D,MAAMC,EAAa,EAAEvS,EACfwS,EAAa,EAAEH,EACfI,EAAa,EAAEH,EAAU,EAE/BpV,EAAAA,GAASqV,EAAajW,EAAAA,IAAkBY,EAAAA,GAASsV,EAAavW,EAAAA,IAC9DiB,EAAAA,GAASqV,EAAa/V,EAAAA,IAAkBU,EAAAA,GAASsV,EAAatW,EAAAA,IAE9DgB,EAAAA,GAASqV,EAAa7V,EAAAA,IAAkBQ,EAAAA,GAASuV,EAAaxW,EAAAA,IAC9DiB,EAAAA,GAASqV,EAAa5V,EAAAA,IAAkBO,EAAAA,GAASuV,EAAavW,EAAAA,GAClE,C,iHCvEO,MAAMpB,EAAe,CACxB,KAAQ,UACR,IAAQ,MAER,IAAQ,UAER,KAAY,UACZ,IAAY,cACZ,SAAY,eACZ,IAAY,UAEZ,IAAY,UACZ,IAAY,UAEZ,GAAY,KACZ,MAAY,SACZ,GAAY,SACZ,MAAY,SAEZ,GAAY,SACZ,IAAY,SACZ,GAAY,SACZ,IAAY,SAEZ,OAAY,UAEZ,MAAY,SACZ,OAAY,UACZ,OAAY,UACZ,OAAY,aACZ,OAAY,cAGH4X,EAAkB,CAC3B,QAAgB,WAChB,QAAgB,WAChB,YAAgB,eAChB,aAAgB,gBAChB,QAAgB,WAEhB,QAAe,WACf,QAAe,WAEf,OAAe,SACf,OAAe,SAEf,OAAe,SACf,OAAe,SACf,OAAe,SACf,OAAe,SAEf,QAAe,WACf,OAAe,UACf,QAAe,WACf,QAAe,WACf,WAAe,cACf,WAAe,eAIN1P,EAAkB,CAC3B,QAAgB,WAChB,QAAgB,WAChB,YAAgB,eAChB,aAAgB,gBAChB,QAAgB,WAEhB,QAAe,WACf,QAAe,WAEf,OAAe,UACf,QAAe,WACf,QAAe,WACf,WAAe,cACf,WAAe,eAINT,EAAY,CACrB,KAAM,MACN,IAAM,MACN,IAAM,UACN,KAAM,WACN,IAAM,MAEN,IAAO,MACP,IAAO,MACP,MAAO,MAEP,KAAO,KACP,KAAO,KACP,IAAO,KACP,KAAO,KACP,KAAO,KACP,IAAO,KAEP,IAAM,MACN,IAAM,KACN,IAAM,MACN,IAAM,MACN,KAAM,SACN,KAAM,UAOGoQ,EAAc,CACvB,GACA,CAAC,KACD,CAAC,KAAM,MACP,CAAC,MACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KAAM,KAAM,MAAO,OACpB,CAAC,IAAK,KAAM,KAAM,KAClB,CAAC,KAAM,KAAM,OACb,CAAC,IAAK,KACN,CAAC,IAAK,IAAK,KACX,CAAC,MACD,CAAC,IAAK,KAAM,KAAM,IAAK,QA4J3B,IAAIC,EAA8C,CAAC,EACnD,IAAI,IAAIpgB,EAAI,EAAGA,EAAImgB,EAAYtgB,SAAUG,EAAG,CAExC,MAAMqgB,EAAWrgB,EACjB,IAAI,MAAM2C,KAAMwd,EAAYngB,GACxBogB,EAAoBzd,GAAM0d,CAElC,CAEO,MAAMC,EAAkBF,EAExB,SAASzC,EAA0Dhb,GACtE,OAAOud,EAAgBvd,EAC3B,CAKO,SAAS0c,EAAiBxhB,EAAc8E,GAE3C,MAAM4d,GAAaxiB,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAErB2iB,EAASJ,EAAoBzd,GAC7B8d,EAASL,EAAoBzd,IAEnCyF,EAAAA,EAAAA,IAAgBmY,EAAOC,GAEvB,IAAI,IAAIxgB,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BoI,EAAAA,EAAAA,IAAiBmY,EAAQvgB,EAAGwgB,EAAO,GAEvC,MAAME,EAAcD,EAASD,EACzBE,IACAxiB,EAAAA,EAAAA,IAAM,MAEVE,EAAAA,EAAAA,IAAOmiB,GAEP,IAAI,IAAIvgB,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B9B,EAAAA,EAAAA,IAAM,SACNE,EAAAA,EAAAA,IAAOmiB,EAAM,GAGbG,IACAxiB,EAAAA,EAAAA,IAAM,IACd,CAEO,MAAMgE,EAAc,CAAC,KAAM,KAAM,IAAK,IAAK,KAAM,K,oHC/UzC,SAAS5D,IAGxB,CAEO,MAAMqiB,EAA2B,EAC3Brb,EAA2B,EAC3Bsb,EAA2B,EAC3Bvb,EAA2B,EAC3Bwb,EAA2B,EAKjC,SAASpa,EAAalI,EAAaV,EAAW0J,EAAqB/I,GAEtE,MAAM+F,EAAOgD,EAAUlI,SAASmF,EAAAA,IAG1Bsc,EAAQjjB,EAAK+B,KACbmhB,OAA8BjiB,IAAjBgiB,EAAME,OACnBC,OAA8BniB,IAAjBgiB,EAAMI,MACnBtZ,EAAarD,EAAKqD,SAClBH,EAAalD,EAAKkD,WAElB0Z,EAAaL,EAAMnZ,YAAY9H,OAClBihB,EAAMlhB,KAAKC,SACVkhB,EACDD,EAAMM,WAAWvhB,SAChBohB,GAEpB1hB,EAAAA,EAAAA,IAAQhB,EAAKkT,EAAAA,IAEb,MAAM/R,GAAUC,EAAAA,EAAAA,IAASpB,EAAK4iB,GAExBE,EAAexjB,EAAK+B,KAAK0hB,SACzBC,EAAUT,EAAMnZ,YAChBgN,EAAUmM,EAAMlhB,KAGtB,IAAI4hB,EAAUH,EAAaxhB,OAAS0hB,EAAQ1hB,OAAS8U,EAAI9U,OACzD,IAAI,IAAIG,EAAI,EAAGA,EAAIuhB,EAAQ1hB,SAAUG,EACjCyhB,EAAYzhB,EAAIN,EAAS6hB,EAAQvhB,GAAIqhB,EAAarhB,EAAIwhB,GAAUb,EAA0BniB,GAC1FA,EAAQK,cAAc0iB,EAAQvhB,GAAGmN,MAAO/M,EAAAA,EAAAA,IAAWJ,EAAEN,GAIzD,IAAIuF,EAASsc,EAAQ1hB,OACnB2hB,GAAWD,EAAQ1hB,OACrB,IAAI,IAAIG,EAAI,EAAGA,EAAI2U,EAAI9U,SAAUG,EAE7ByhB,EAAYxc,EAASvF,EAASiV,EAAI3U,GAAIqhB,EAAarhB,EAAIwhB,GAAUX,EAAsBriB,GAEvFiJ,EAAWxC,KAAY0P,EAAI3U,GAAGmN,IAMlC,GAHA5I,EAAKM,WAAaI,EAGd8b,EACAxc,EAAKG,YAAcC,OAAOC,kBAE1B6c,EAAYxc,EAASvF,EAASohB,EAAME,YAAQliB,EAAWuG,EAAuB7G,KAE5EyG,MACC,CAEHV,EAAKG,YAAcO,EAEnB,MAAMyc,EAAkBpN,KAAKC,IAAI8M,EAAaxhB,OAAQ8U,EAAI9U,QACpD8hB,EAAaN,EAAaxhB,OAAS8U,EAAI9U,QAAUshB,IAAelc,GAElEyc,EAAkB,GAAyB,IAApBA,GAAyBC,KAChDpd,EAAKG,aAAegd,EAC5B,CAEA,IAAIE,EAAYrd,EAAKG,YACjBkd,IAAYjd,OAAOC,oBACnBgd,EAAUrd,EAAKM,YACnB,IAAI,IAAI7E,EAAIuhB,EAAQ1hB,OAAQG,EAAI4hB,IAAW5hB,EACvC4H,EAASzJ,EAAAA,GAAO6B,EAAIN,IAAYM,EAEpC,MAAMiK,EAAM1F,EAAKM,WAAa+c,EAC9B,IAAI,IAAI5hB,EAAI,EAAGA,EAAIiK,IAAOjK,EACtB4H,EAASzJ,EAAAA,GAAO6B,EAAIN,KAAa,EAKrC,MAAMmiB,EAAcf,EAAMM,WACpBU,EAAchB,EAAMgB,YAE1Bvd,EAAKsD,OAAStD,EAAKM,aAAe+c,GAA6B,IAAlBC,EAAOhiB,OAEpD2hB,EAAUM,EAAYjiB,OAASgiB,EAAOhiB,OACtC,IAAI,IAAIG,EAAI,EAAGA,EAAI6hB,EAAOhiB,SAAUG,EAEhCyhB,EAAYxc,EAASvF,EAASmiB,EAAO7hB,GAAI8hB,EAAY9hB,GAAI4gB,EAAyBpiB,GAElFoJ,EAASia,EAAO7hB,GAAGmN,MAAQ,IAEzBlI,EAwBF,GApBAgc,IAEAQ,EAAYxc,EAASvF,EAASohB,EAAMI,WAAOpiB,EAAWwG,EAAwB9G,GAE9E+F,EAAKO,OAASgc,EAAMI,MAAM/T,MAExBlI,GAWN9G,EAAAA,GAAOI,GAAOgJ,EAGS,IAAf4Z,GAEAvB,EAAAA,EAAAA,IAAoBrhB,EAAKmB,EAASA,EAAUyhB,EAAa,OAEtD,CAEH,MAAMpX,EAAMlM,EAAKsJ,WAAa,EAAItJ,EAAKY,KAAKoB,OAAS,EAE/CkiB,EAAY,EAAExjB,EACpBmM,EAAAA,GAASqX,EAAYjY,EAAAA,IAAkBY,EAAAA,GAASqX,EAAY7X,EAAAA,IAAkBrM,EAAKoJ,OACnFyD,EAAAA,GAASqX,EAAY/X,EAAAA,IAAkBU,EAAAA,GAASqX,EAAY5X,EAAAA,IAAkBJ,CAClF,CAER,CACO,SAAS0X,EAAYljB,EAAaV,EAAW0H,EAAa9B,EAAajF,GAE1E,MAAMC,EAAOZ,EAAKsP,IAElB,IAAIrE,EAAc0D,EAAAA,GAElB,MAAM9F,EAAa7I,EAAK6I,YAAY/H,GAIpC,QAHmBG,IAAf4H,IACAoC,EAActK,EAAQK,cAAc6H,SAEzB5H,IAAXyG,EAAuB,CAEvB,MAAM7F,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS6F,EAAQ/G,GAE1BsK,IAAgB0D,EAAAA,KAChB1D,GAAc1I,EAAAA,EAAAA,IAAWV,GACtBoJ,IAAgBzI,EAAAA,KACfyI,EAAcxI,EAAAA,IAE1B,EAEAf,EAAAA,EAAAA,IAAQhB,EAAKkF,IACbhE,EAAAA,EAAAA,IAAclB,EAAKuK,GAEnB3K,EAAAA,GAAOI,GAAOE,EACdD,EAAQK,cAAcJ,GAAQqK,GAEf5I,EAAAA,EAAAA,IAAY3B,EAAKV,EACpC,CA5JAS,EAAQ0jB,aAAe,W,+BCnBvB,MAAM1kB,EAAO,CACZ2kB,KAAM1kB,EAAAA,MAAAA,EACN2kB,SAAU3kB,EAAAA,MAAAA,EACV4kB,SAAU5kB,EAAAA,MAAAA,EACV8J,KAAM9J,EAAAA,MAAAA,EACN6kB,MAAO7kB,EAAAA,MAAAA,EACP8kB,KAAM9kB,EAAAA,MAAAA,EACN+kB,KAAM/kB,EAAAA,MAAAA,EACNglB,QAAShlB,EAAAA,MAAAA,EACTilB,UAAWjlB,EAAAA,MAAAA,EACXklB,QAASllB,EAAAA,MAAAA,EACTmlB,OAAQnlB,EAAAA,MAAAA,EACRolB,MAAOplB,EAAAA,MAAAA,EACPqlB,UAAWrlB,EAAAA,MAAAA,EACXslB,UAAWtlB,EAAAA,MAAAA,EACXulB,OAAQvlB,EAAAA,MAAAA,EACRwlB,OAAQxlB,EAAAA,MAAAA,EACRylB,MAAOzlB,EAAAA,MAAAA,EACP0lB,KAAM1lB,EAAAA,MAAAA,EACN2lB,SAAU3lB,EAAAA,MAAAA,EACV4lB,MAAO5lB,EAAAA,KAAAA,EACP6lB,OAAQ7lB,EAAAA,MAAAA,EACR8lB,MAAO9lB,EAAAA,MAAAA,EACP+lB,WAAY/lB,EAAAA,MAAAA,EACZgmB,OAAQhmB,EAAAA,MAAAA,EACR0C,QAAS1C,EAAAA,MAAAA,EACTimB,YAAajmB,EAAAA,MAAAA,EACbkmB,KAAMlmB,EAAAA,KAAAA,EACNmmB,KAAMnmB,EAAAA,MAAAA,GACNomB,UAAWpmB,EAAAA,MAAAA,EACXqmB,eAAgBrmB,EAAAA,MAAAA,EAChBsmB,MAAOtmB,EAAAA,MAAAA,EACPumB,IAAKvmB,EAAAA,MAAAA,EACLwmB,MAAOxmB,EAAAA,MAAAA,EACPymB,GAAIzmB,EAAAA,MAAAA,EACJ0mB,IAAK1mB,EAAAA,MAAAA,EACL2mB,cAAe3mB,EAAAA,MAAAA,GAIhBkE,OAAOC,OAAOlE,EAAAA,EAAOF,E,kCCxCrB,SACI6mB,eAAgB,CAACzhB,EAAWE,IACjB0R,KAAK8P,MAAO1hB,EAAEE,GAEzByhB,aAAc,CAAC3hB,EAAWE,KAEtB,IAAIkN,EAASpN,EAAEE,EACf,OAAIkN,EAAS,GAAKpN,EAAEE,IAAM,GACfkN,IAEFA,CAAM,EAEnBwU,UAAW,CAAI5hB,EAAWE,KAEtB,MAAM2hB,GAAO7hB,EAAIE,EAAIA,GAAKA,EAC1B,OAAY,IAAR2hB,GAAa3hB,EAAI,GACT,EACL2hB,CAAG,EAEdC,QAAS,CAAI9hB,EAAWE,KAEZF,EAAIE,EAAIA,GAAKA,E,gDCrB7B,MAAMtF,EAAO,CACZC,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,GAIDC,EAAAA,GAAMC,QAAQH,GACd,QAAeE,EAAKA,E,iBCZL,SAASuV,EAAepN,GAEnC,MAAM8H,EAAMC,YAAYC,MAElBzO,EAAM,IAAI8B,SAAS2E,EAAQD,MAE3BuI,EAAKP,YAAYC,MAEvBE,GAAGM,SAAY,EAAI,CAAC,EACpBjP,IAEA,MAAMmP,EAAKX,YAAYC,MAEvBhI,EAAQO,MAAMP,EAAQV,WAAaoJ,EAAKZ,EACxC9H,EAAQO,MAAMP,EAAQV,WAAagJ,EAAKR,EACxC9H,EAAQO,MAAMP,EAAQV,WAAaoJ,EAAKJ,CAC5C,C,8FCfe,SAAS3P,EAAQC,EAAaV,EAAWW,GAEpD,IAAIimB,EAAa,EAEbhK,EAAM5c,EACV,KAAO,WAAY4c,GAA6B,IAAtBA,EAAIsD,OAAOle,QAAe,CAEhD,KAAO,SAAU4a,EAAIsD,OAAO,IAAM,GAC5B0G,EACF,KACJ,CACAhK,EAAMA,EAAIsD,OAAO,GACjB0G,GAAc,CAClB,EAEAllB,EAAAA,EAAAA,IAAQhB,EAAKuT,EAAAA,IACb,IAAIpS,GAAUC,EAAAA,EAAAA,IAASpB,EAAKkmB,GAW5B,KARA1kB,EAAAA,EAAAA,IAAaL,IAAW7B,EAAKiZ,KAAMtY,IAEnC6I,EAAAA,EAAAA,GAAK3H,EAAS7B,EAAKC,KAAMU,IACX8I,EAAAA,EAAAA,IAAsB5H,EAAS7B,EAAKC,QAChD4B,EAGF+a,EAAM5c,EACC,WAAY4c,GAA6B,IAAtBA,EAAIsD,OAAOle,QAAe,CAGhD,KAAO,SAAU4a,EAAIsD,OAAO,IAAM,EAC9Bhe,EAAAA,EAAAA,IAAaL,EAAS+a,EAAIsD,OAAQvf,GAClC,KACJ,CAEAic,EAAMA,EAAIsD,OAAO,IAEjBhe,EAAAA,EAAAA,IAAaL,IAAW+a,EAAI3D,KAAMtY,IAElC6I,EAAAA,EAAAA,GAAK3H,EAAS+a,EAAI3c,KAAMU,IACV8I,EAAAA,EAAAA,IAAsB5H,EAAS+a,EAAI3c,QAC/C4B,EAEF+kB,GAAc,CAClB,CACJ,C,wFC5Ce,SAASnmB,EAAQC,EAAaV,EAAWW,GAEpD,MAAMR,EAAaH,EAAK6mB,SAAS7kB,OAAO,GAExCN,EAAAA,EAAAA,IAAQhB,EAAKqT,EAAAA,IACb,MAAMlS,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAG9BqJ,EAAAA,EAAAA,GAAK3H,EAAS7B,EAAKC,KAAMU,IACX8I,EAAAA,EAAAA,IAAsB5H,EAAS7B,EAAKC,MAElD,IAAI,IAAIkC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BkkB,EAAAA,EAAAA,GAAclkB,EAAEN,EAAS7B,EAAK6mB,SAAS1kB,EAAE,GAAIxB,IAC/B8I,EAAAA,EAAAA,IAAsBtH,EAAEN,EAAS7B,EAAK6mB,SAAS1kB,EAAE,GAGvE,C,0DCnBe,WAASnC,IACpBQ,EAAAA,EAAAA,IAAM,WAAWN,EAAAA,EAAAA,IAAWF,GAAO,IACvC,C,oECAe,SAASS,EAAQC,EAAaV,EAAWigB,GAEpD,MAAMrV,EAAQ5K,EAAK4K,MACbkc,SAAelc,EACrB,IAAImc,EAEJ,GAAa,WAAVD,EAAoB,CAEnB,GAAc,YAAVA,EAOA,OALAplB,EAAAA,EAAAA,IAAchB,EAAKgT,EAAAA,KACnB9R,EAAAA,EAAAA,IAAclB,EAAKgO,EAAAA,SAEnBpO,EAAAA,GAAOI,GAAOkK,GAKlB,GAAc,WAAVkc,EAOA,OALAplB,EAAAA,EAAAA,IAAchB,EAAKmF,EAAAA,KACnBjE,EAAAA,EAAAA,IAAclB,EAAKsE,EAAAA,SAEnB1E,EAAAA,GAAOI,GAAOkK,EAKtB,KAAO,CAGH,GAFAmc,EAAQnc,EAAM7G,UAAUijB,aAEV,UAAVD,EAOA,OALArlB,EAAAA,EAAAA,IAAchB,EAAK8S,EAAAA,KACnB5R,EAAAA,EAAAA,IAAclB,EAAKgF,EAAAA,SAEnBpF,EAAAA,GAAOI,GAAOkK,EAAMA,OAKxB,GAAc,aAAVmc,EAKA,OAHArlB,EAAAA,EAAAA,IAAchB,EAAKiT,EAAAA,SACnB/R,EAAAA,EAAAA,IAAclB,EAAK4R,EAAAA,GAI3B,CAEA,GAA2B,QAAVyU,GAA6B,WAAVD,EAChC,MAAM,IAAI1lB,MAAM,gBAAgB0lB,KAASC,MAE7CrlB,EAAAA,EAAAA,IAAchB,EAAK6S,EAAAA,IAEL,QAAVwT,IACAnlB,EAAAA,EAAAA,IAAclB,EAAK+B,EAAAA,IACnBnC,EAAAA,GAAOI,GAAOkK,EAAMA,SAEpBhJ,EAAAA,EAAAA,IAAclB,EAAK8B,EAAAA,IACnBlC,EAAAA,GAAOI,GAAOkK,EAEtB,C,sFCvDO,SAAS8E,EAAYmC,EACAC,GACA,WAEIlN,EAAe4P,GACG,CAAC,GAG/C,IAAIvC,EAA4D,CAAC,EAEjE,IAAI,IAAInN,KAAM+M,EAAK,CAEf,MAAMoV,EAAO/U,EAAAA,GAAUpN,GACZ,QAAPA,IACAA,EAAK,KAETmN,EAAO,KAAKgV,QAAY/iB,EAAAA,EAAAA,GAAe4N,GACnC,CAAC9R,EAAcmS,IACJvN,EAAW5E,EAAM8E,EAAIqN,IAGxC,CAEA,OAAOF,CACX,CAEO,SAASuC,EAAiBxU,EAAc8E,EAAYD,GAEvD,IAAIqiB,EAAMpiB,EACE,MAARoiB,IACAA,EAAM,OAGV,MAAMvE,EAASF,EAAAA,GAAgByE,GACzBtE,GAASpY,EAAAA,EAAAA,IAAaxK,IAE5BuK,EAAAA,EAAAA,IAAgB1F,EAAG8d,GAEnB,IAAI5H,EAAIjW,EAAQoM,EAAI,GAEhB0R,EAASD,IACT5H,EAAI,IAAIjW,IAAMoM,EAAI,MAGtB1Q,EAAAA,EAAAA,IAAMua,EAAGlW,EAAGqM,EAChB,C,oECrDe,SAASzQ,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK+S,EAAAA,IACb,MAAM5R,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK4K,MAAOjK,EACtC,C,yGCJO,MAAMoR,EAAa/R,GAAiBA,EAE9B2E,EAAoBc,EACpB8O,EAAoB7R,EAE1B,SAAS+C,EAAWZ,EAAW8F,EAASjF,EAAAA,IAE3C,IAAInD,EAAAA,EAAAA,IAAWsC,KAAOpC,EAAAA,GAClB,OAAOoC,EAEX,IAAIe,EAAAA,EAAAA,IAAKf,KAAO0O,EAAAA,GAIZ,OAFI5I,IAAWjF,EAAAA,KACX9D,EAAAA,EAAAA,IAAciD,EAAGrC,EAAAA,IACdqC,EAGX,MAAMsiB,EAAU7mB,EAAAA,GAAOuE,GAEjBhD,GAAU3B,EAAAA,EAAAA,IAAW2E,GAE3B,GAAgB,YAAZsiB,GAAqC,aAAZA,EAAyB,CAClD,MAAMtH,GAAQtd,EAAAA,EAAAA,IAAWV,GACnB0G,GAAQhG,EAAAA,EAAAA,IAAWV,EAAQ,GACjC,KAAQge,IAAUpd,EAAAA,IAAcod,IAAUrd,EAAAA,IAClC+F,IAAU9F,EAAAA,IAAc8F,IAAU/F,EAAAA,IAGtC,OADAZ,EAAAA,EAAAA,IAAciD,EAAG8F,GACV9F,CAEf,CACA,GAAgB,YAAZsiB,IAAyB5kB,EAAAA,EAAAA,IAAWV,KAAaY,EAAAA,GAEjD,OADAb,EAAAA,EAAAA,IAAciD,EAAG8F,GACV9F,EAGX,GAAI8F,IAAWjF,EAAAA,GAEX,OAAOb,EAEX,MAAM0H,GAAMS,EAAAA,EAAAA,MAIZ,OAHAtL,EAAAA,EAAAA,IAAQ6K,EAAK8H,EAAAA,KACbqE,EAAAA,EAAAA,IAAcnM,EAAK1H,GAEZ0H,CACX,CAEO,SAAS7J,EAAWmC,GAEvB,IAAItC,EAAAA,EAAAA,IAAWsC,KAAOpC,EAAAA,GAClB,OAAOoC,EAEX,IAAIe,EAAAA,EAAAA,IAAKf,KAAO0O,EAAAA,GAEZ,OADA3R,EAAAA,EAAAA,IAAciD,EAAGpC,EAAAA,IACVoC,EAEX,GAAkB,YAAdvE,EAAAA,GAAOuE,KAAoBtC,EAAAA,EAAAA,KAAWrC,EAAAA,EAAAA,IAAW2E,MAAQrC,EAAAA,GAEzD,OADAZ,EAAAA,EAAAA,IAAciD,EAAGpC,EAAAA,IACVoC,EAGX,MAAM0H,GAAMS,EAAAA,EAAAA,MAIZ,OAHAtL,EAAAA,EAAAA,IAAQ6K,EAAK6H,EAAAA,KACbsE,EAAAA,EAAAA,IAAcnM,EAAK1H,GAEZ0H,CACX,C,wFClEe,SAAS9L,EAAQC,EAAaV,EAAWW,GAEpD,MAAMymB,EAAOpnB,EAAK6R,IACZwV,EAASD,EAAKplB,OACd6P,EAAM,IAAIhI,MAAMwd,GACtB,IAAI,IAAIllB,EAAI,EAAGA,EAAIklB,IAAUllB,EAAG,CAE5B,MAAM2C,EAAK2F,EAAAA,GAAa2c,EAAKjlB,GAAG8G,YAAYC,OAC5C,QAAwBjI,IAAP6D,EACb,MAAM,IAAI1D,MAAM,GAAGgmB,EAAKjlB,GAAG8G,YAAYC,0BAE3C2I,EAAI1P,GAAK2C,CACb,CAEAxE,EAAAA,GAAOI,GAAOmR,GAEdnQ,EAAAA,EAAAA,IAAQhB,EAAKyS,EAAAA,KACbvR,EAAAA,EAAAA,IAAclB,EAAKgO,EAAAA,IACnB,MAAMvO,EAAaH,EAAKsnB,YAAYtlB,OAAS,EACvCH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAE9B+B,EAAAA,EAAAA,IAAaL,EAAS7B,EAAKiW,KAAMtV,GACjC,IAAI,IAAIwB,EAAI,EAAIA,EAAIhC,IAAcgC,GAC9BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKsnB,YAAYnlB,EAAE,GAAIxB,EACzD,C,wFCxBA,QAAeiD,OAAOC,OAAOsB,EAAAA,GACzB,CACIpB,UAAWoB,EAAAA,GACXC,SAAW,OACX5D,UAAW0C,EAAAA,EAAAA,IAAgB,IAAMiR,EAAAA,KAAc1M,IAC3C,MAAM5G,GAAU3B,EAAAA,EAAAA,IAAWuI,IAC3BjI,EAAAA,EAAAA,IAAM,IAAKqB,EAAQ,EAAG,gBAAgB,K,0GCE3C,SAAS0C,EAAasN,EACDC,GACH,cACGpN,EAAkBqN,EAAAA,GAAS,aAC3BC,EAAkBD,EAAAA,GAAS,WAC3BnN,EAAkBgN,GACE,CAAC,GAE7C,IAAIK,EAA4D,CAAC,EAEjE,IAAI,IAAInN,KAAM+M,EAAK,CAEf,MAAMoV,EAAO/U,EAAAA,GAAUpN,GACZ,OAAPA,IACAA,EAAK,KAETmN,EAAO,KAAKgV,QAAa/iB,EAAAA,EAAAA,GAAe4N,GACpC,CAAC9R,EAAcmS,EAAc5M,IACtBX,EAAW5E,EAAMgS,EAAaG,GAAOrN,EAAIJ,EAAca,MAGlE0M,EAAO,MAAMgV,QAAY/iB,EAAAA,EAAAA,GAAe4N,GACpC,CAAC9R,EAAcmS,EAAc5M,IACtBX,EAAW5E,EAAM0E,EAAca,GAAQT,EAAIkN,EAAaG,MAG/DH,IAAiBD,EAAAA,IAAanN,IAAegN,IAE7CK,EAAO,MAAMgV,QAAY/iB,EAAAA,EAAAA,GAAe4N,GAEpC,CAAC9R,EAAcmS,EAAc5M,KAEzB,MAAMI,EAAcrF,EAAAA,GAAOiF,GAE3B,MAAW,MAAPT,GAA8B,IAAhBa,GACP6O,EAAAA,EAAAA,GAAiBxU,EAAM,KAAMmS,GAC7B,MAAPrN,GAA8B,IAAhBa,GACP6O,EAAAA,EAAAA,GAAiBxU,EAAM,KAAMmS,GAEjCP,EAAkB5R,EAAMmS,EAAMrN,EAAG,IAAKJ,EAAca,GAAAA,IAI3E,CAEA,OAAO0M,CACX,CAEO,SAASL,EAAkB5R,EAAc6E,EAAWC,EAAYC,GAEnE,MAAQ4d,EAAOF,EAAAA,GAAgB3d,GACzB8d,GAASpY,EAAAA,EAAAA,IAAaxK,IAE5BuK,EAAAA,EAAAA,IAAgB1F,EAAG8d,IACnBpY,EAAAA,EAAAA,IAAgBxF,EAAG4d,GAEnB,IAAI5H,EAAI,GAAQ7J,EAAI,GAEhB0R,EAASD,IACT5H,EAAI,IAAK7J,EAAI,MAGjB1Q,EAAAA,EAAAA,IAAMua,EAAGlW,EAAGC,EAAIC,EAAGmM,EACvB,C,oECzEe,SAASzQ,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK4S,EAAAA,IACb,MAAMzR,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAK4K,MAAOjK,IACpCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAK2V,MAAOhV,EACxC,C,0ICAA,QAAeiD,OAAOC,OAAO4T,EAAAA,GACzB,CACI1T,UAAWiL,EAAAA,KAEfzK,EAAAA,EAAAA,GAEI,CACI,KAAM,IAAK,IACX,IAAK,IAAK,IAAK,KAAM,MAEzBiO,EAAAA,GACA,CACIR,aAAeuC,EAAAA,GACf7P,cAAe6P,EAAAA,MAGvBhQ,EAAAA,EAAAA,GAAa,CAAC,KAAMiO,EAAAA,GAChB,CACI5N,WAAY,CAAC5E,EAAM6E,EAAGC,EAAIC,MAClBxC,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,IACrBoC,GAAInC,EAAAA,EAAAA,IAAWmC,GACfE,GAAIrC,EAAAA,EAAAA,IAAWqC,KAEfF,GAAIY,EAAAA,EAAAA,IAAWZ,GACfE,GAAIU,EAAAA,EAAAA,IAAWV,KAGnB6M,EAAAA,EAAAA,GAAkB5R,EAAM6E,EAAG,IAAKE,EAAE,KAI9CR,EAAAA,EAAAA,GAAa,CAAC,KAAMgL,EAAAA,GAChB,CACI7K,cAAeC,EAAAA,MAGvBJ,EAAAA,EAAAA,GAAa,CAAC,MAAOgO,EAAAA,GACjB,CACI3N,WAAY,CAAC5E,EAAcmS,EAAcrN,EAAIS,MACzC/E,EAAAA,EAAAA,IAAM,uBAAwB2R,EAAM,KAAM5M,EAAO,IAAI,KAIjEhB,EAAAA,EAAAA,GAAa,CAAC,KAAMgO,EAAAA,GAChB,CACI3N,WAAY,CAAC5E,EAAcmS,EAAcrN,EAAIS,MAEzC/E,EAAAA,EAAAA,IAAM,gBAAiB2R,EAAM,KAAM5M,EAAO,IAAI,KAI1DmK,EAAAA,EAAAA,GAAY,CAAC,OAAQgD,EAAAA,GACjB,CACI9N,WAAY,CAAC5E,EAAM8E,EAAID,MAEftC,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,KACrBoC,GAAInC,EAAAA,EAAAA,IAAWmC,KAEZ2P,EAAAA,EAAAA,GAAiBxU,EAAM,IAAK6E,OAI/C6K,EAAAA,EAAAA,GAAY,CAAC,KAAMvL,EAAAA,GACf,CACIS,WAAY,CAAC5E,EAAM8E,EAAID,MACnB2P,EAAAA,EAAAA,GAAiBxU,EAAM,KAAK0C,EAAAA,EAAAA,IAAWmC,GAAAA,KAInDT,EAAAA,EAAAA,GAAYC,EAAAA,GAAa0G,EAAAA,I,0DC7Ed,SAAShL,EAAOC,IAC3BK,EAAAA,EAAAA,IAAOC,EAAAA,GAAON,GAClB,C","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts"],"sourcesContent":["const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"float\",\n        [JS_NAME]: \"Number\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"str\",\n        [JS_NAME]: \"String\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const JS_NAME     = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct<[number]>,\n    __int__  ?: Fct<[number]>,\n    [JS_NAME]?: string\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, AST_FCT_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type: Types[resultType(id)]?.__class__?.__name__!,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = AST_OP_ASSIGN;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = AST_OP_ASSIGN_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : id2name[type(id)],\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; // is it used ?\n    type; //TODO: remove\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"int\",\n        [JS_NAME]: \"BigInt\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\nimport { TYPEID_NoneType } from \"../types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","export default __webpack_public_path__ + \"Editor/index.html\";","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type               = 7;\nexport const TYPEID_type_int_          = 8;\nexport const TYPEID_type_float_        = 9;\nexport const TYPEID_type_str_          =10;\n\nexport default [];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[number]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default {};","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    \n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_type\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \".\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { addType } from \"./utils/addType\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { Fct, WRITE_CALL } from \"./utils/types\";\n\n// builtin symbols.\nexport default {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    type : TYPEID_type,\n    len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)),\n    print: addType(\"print\", {\n        __call__: method_wrapper(RET_None, (call:number) => {\n            const coffset  = firstChild(call);\n            const nb_child = nbChild(call);\n\n            w_str(\"__SB__.print(\");\n            for(let i = 1; i < nb_child; ++i) {\n                w_node(coffset + i);\n                w_str(\", \");\n            }\n            w_str(\")\");\n        })\n    }),\n};\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        //__name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname] as Fct;\n            return method[WRITE_CALL](call);\n        })\n    }\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = search.get(\"merge\") === \"true\" ? true : false;\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n        if( val.__name__ !== undefined)\n            val = val.__name__;\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            const code = subtests[j];\n\n            if( code === \"\")\n                continue;\n       \n            if( merge ) {\n                const indented_code = code.split('\\n').map(e => `\\t${e}`).join('\\n');\n                fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n            } else {\n                try {\n                    fullcode = code;\n                    generate(fullcode, results);\n                    execute(results, sbry_print);\n                } catch(e) {\n                    error = e as Error;\n                    break tests;\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n    }\n    \n    if(error) {\n\n        python_input.value = results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        const fullname = `${test_name}.${name}`;\n\n        lines = filter(lines.slice(1), exclude[fullname]);\n\n        let nbEmptyLines = 0;\n        for(let i = 0; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 0; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { type Context, convert_node, swapASTNodes } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = context.createSubContext(\"class\");\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[number, number]>;\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, PY_CODE, VALUES } from \"../dop\";\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { TYPEID_type } from \"./index\";\nimport { w_sns } from \"../ast2js/utils\";\nimport { firstChild } from \"../dop\";\nimport { TYPE_type } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\n\nexport default Object.assign(TYPE_type,\n    {\n        __class__: TYPE_type,\n        __name__ : \"type\",\n        __call__ : method_wrapper( () => TYPEID_type, (call: number) => {\n            const coffset = firstChild(call);\n            w_sns(\"(\", coffset+1, \").constructor\");\n        })\n    });","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}"],"names":["LIST","require","ILIST","push","_id2name","id2name","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","w_node","w_sns","convert","dst","context","name","func","id","fct_type","local_symbols","undefined","console","warn","Error","fct","Types","ret_type","__call__","RETURN_TYPE","setType","AST_FCT_CALL","setResultType","coffset","addChild","args","length","keywords","convert_node","i","keyword","set_py_code","rchild","resultType","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","getASTFor","print","log","_r_","_sb_","Object","assign","TYPE_str","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","TYPE_type","__name__","JS_NAME","RET_FLOAT","other","other_type","Int2Number","TYPEID_float","other_value","type","AST_LIT_STR","otype","__int__","WRITE_CALL","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","offset","set_js_cursor","CODE_BEG","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","CODE_END","generate","code","results","bry","sbry","nb_files","buildAST","generateSBrython","generateBrython","times","Symbol","rtype","stype","call","createSubContext","parent_node_context","convert_args","annotation","returns","fct_return_type","last_type","constructor","$name","fake_node","lineno","end_lineno","col_offset","end_col_offset","Body","set_py_code_from_list","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","bname2pyname","AST_OP_ASSIGN_AUG","target","value","Py_object","TYPE_bool","RET_IJBF2BOOL","astnode2tree","result_type","buildJSCode","pycode","buildPyCode","children","from","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_INIT","CURSOR","ARRAY_TYPE","CODE_LINE","CODE_COL","start","line","JS_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","idx","indent","cur_indent_level","indents","str","AST2JS","PY_CODE","convert_ast","dop_reset","createASTNode","Context","ASTNODES","symbols","builtins","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","nb_lines","total_lines","nb_done","nb_excluded_lines","tcoef","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","alt","AST_SYMBOL","AST_OP_ATTR","attr","TYPE_float","arg","RET_IJBF2FLOAT","_node","_op","genUnaryOps","src","beg","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","AST_KEY_IMPORT","names","module","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_None","TYPEID_NoneType","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","TYPE_int","CONVERT_2INT","write_unary_jsop","_ast","nodes","PythonError","python_exception","super","_raw_err_","execute","sbry_print","executeSBrython","executeBrython","TYPEID_type","TYPEID_type_int_","TYPEID_type_float_","TYPEID_type_str_","float2str","f","toExponential","sign_idx","slice","toString","includes","addType","typedesc","obj","left","bname2jsop","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","Float64Array","NEXT_AST_NODE_ID","parent","ASTNODE_SIZE","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","cn","elts","int","float","len","nb_child","test","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","search","URLSearchParams","location","test_name","get","merge","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","oneTimeExec","fullcode","textContent","classList","remove","split","filter","l","trim","error","e","message","add","print_js","print_python","print_ast","print_code","map","createElement","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur","cur_line","print_node","val","child","html_child","startTests","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","tests","subtests","substats","j","stats","total","excluded","join","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","fullname","nbEmptyLines","code_len","nbExcluded","find","v","isArray","asname","right","ltype","reversed_operator","swapASTNodes","bases","_context","orelse","debug_print_exception","err","sb","stack","isV8","filter_stack","_line","_col","fct_name","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","write_multi_jsop","ao","bo","ap","bp","brython_node","BRY2SBRY","set_py_from_beg_end","dst_beg","dst_end","src_offset","beg_offset","end_offset","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators"],"sourceRoot":""}