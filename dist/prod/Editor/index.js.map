{"version":3,"file":"Editor/index.js","mappings":"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AAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,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CA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGYK,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYI,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGYM,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,MACA,MACA,KACA,KACA,IACA,GAEA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGYwpB,EAAiB,CAC7B,IAAK3iB,EACL,KAAMA,EAAU,GAChB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAKF,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAc,GACrB,KAAMC,EACN,MAAOA,EAAc,GACrB,IAAKxH,EACL,KAAMA,EAAW,GACjB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAK0H,EACL,KAAMA,EAAW,GACjB,IAAKG,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAY,GACnB,IAAKC,EACL,KAAMA,EAAW,GACjB,KAAMf,EACN,MAAOA,EAAW,GAClB,IAAK0e,EACL,IAAKF,EACL,KAAMzP,EACN,KAAMC,EACN,KAAM2P,EACN,KAAMF,EACN,IAAKsF,EACL,GAtN4B,GAuN5B,GAtN4B,GAuN5B,SAtN4B,GAuN5B,GAtN4B,GAuN5B,IAtN4B,GAuN5B,SArN4B,IA+NhBlF,EApOgB,GAoOO9P,C,sFCxP7B,SAASgB,EAAazc,GAEzB,IAAIQ,GAAMD,EAAAA,EAAAA,IAAWP,GAKrB,KAHAW,EAAAA,EAAAA,IAAOH,IACPH,EAAAA,EAAAA,IAAM,MAE8B,KAA5BG,GAAMC,EAAAA,EAAAA,IAAYD,MAAe8B,EAAAA,EAAAA,IAAK9B,KAASwP,EAAAA,KACnDrP,EAAAA,EAAAA,IAAOH,IACPH,EAAAA,EAAAA,IAAM,MAGV,GAAY,IAARG,EAAW,CAMX,KAJAH,EAAAA,EAAAA,IAAM,cAENM,EAAAA,EAAAA,IAAOH,GAE6B,KAA5BA,GAAMC,EAAAA,EAAAA,IAAYD,MACtBH,EAAAA,EAAAA,IAAM,OACNM,EAAAA,EAAAA,IAAOH,IAGXH,EAAAA,EAAAA,IAAM,MACV,EAEAA,EAAAA,EAAAA,IAAM,IACV,CAEe,SAASN,EAAOC,GAI3BG,EAAAA,GAAOH,GAAMoE,SAASJ,EAAAA,IAAahE,EACvC,C,0DCpCe,WAASA,IACpB4C,EAAAA,EAAAA,IAAM,WAAWrC,EAAAA,EAAAA,IAAWP,GAAO,IACvC,C,0DCFe,SAASD,EAAOC,IAC3BW,EAAAA,EAAAA,KAAOJ,EAAAA,EAAAA,IAAWP,KAAQK,EAAAA,EAAAA,IAAM,IAAIF,EAAAA,GAAOH,KAC/C,C,4JCDO,SAASiZ,EAAS+Y,GACrB,OAAO9rB,EAAAA,EACX,CAEO,SAAS+H,EAAc+jB,GAC1B,OAAIlxB,EAAAA,IAAckxB,GAAKA,GAAKvrB,EAAAA,GACjBpE,EAAAA,GACJE,EAAAA,EACX,CAEO,SAAS+K,EAAe0kB,GAC3B,OAAIlxB,EAAAA,IAAckxB,GAAKA,GAAKvrB,EAAAA,GACjBA,EAAAA,GACJlE,EAAAA,EACX,CAEO,SAASwvB,EAAgBC,GAC5B,OAAIA,IAAMnxB,EAAAA,GACCA,EAAAA,GACJ0B,EAAAA,EACX,CAQO,SAASyK,EAAWglB,GACvB,OAAIA,IAAMlxB,EAAAA,IAAckxB,IAAMnxB,EAAAA,GACnBC,EAAAA,GACJyB,EAAAA,EACX,CACO,SAAS4K,EAAY6kB,GACxB,OAAIA,IAAMlxB,EAAAA,GACCA,EAAAA,GACJyB,EAAAA,EACX,CAEO,SAASwT,EAAaic,GACzB,OAAIA,IAAMprB,EAAAA,GACCvE,EAAAA,GACJE,EAAAA,EACX,CACO,SAASyT,EAAYgc,GACxB,OAAIA,IAAMprB,EAAAA,GACCA,EAAAA,GACJrE,EAAAA,EACX,CACO,SAAS0T,EAAW+b,GACvB,OAAIA,IAAMlxB,EAAAA,IAAckxB,IAAMnxB,EAAAA,GACnB+F,EAAAA,GACJrE,EAAAA,EACX,CAEO,SAASugB,EAAU5d,GAAa,OAAOuB,EAAAA,EAAc,CACrD,SAAS0F,EAAUjH,GAAa,OAAOpE,EAAAA,EAAc,CACrD,SAASgxB,EAAU5sB,GAAa,OAAOrE,EAAAA,EAAc,CACrD,SAAS2L,EAAUtH,GAAa,OAAO0B,EAAAA,EAAc,C","sources":["webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/sbry/types/list.js","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/list.js","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/utils/print/printNode.ts","webpack://sbrython/./src/stubs/Document.pyi","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts"],"sourcesContent":["import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);\n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_None               = 2;\nexport const TYPEID_NotImplementedType = 3;\nexport const TYPEID_NotImplemented     = 4;\nexport const TYPEID_type               = 5;\nexport const TYPEID_type_int_          = 6;\nexport const TYPEID_int                = 7;\nexport const TYPEID_type_jsint_        = 8;\nexport const TYPEID_jsint              = 9;\nexport const TYPEID_type_float_        =10;\nexport const TYPEID_float              =11;\nexport const TYPEID_type_bool_         =12;\nexport const TYPEID_bool               =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_str                =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__DEBUG__) set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(id, cur.body);\n    }\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","export default __webpack_public_path__ + \"Editor/index.html\";","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./type\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"unknown\",\n\t\"NoneType\",\n\t\"None\",\n\t\"NotImplementedType\",\n\t\"NotImplemented\",\n\t\"type\",\n\t\"type_int_\",\n\t\"int\",\n\t\"type_jsint_\",\n\t\"jsint\",\n\t\"type_float_\",\n\t\"float\",\n\t\"type_bool_\",\n\t\"bool\",\n\t\"type_str_\",\n\t\"str\",\n];\nexport const id2name = _id2name;\n","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS, OP_UNR_PLUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            if( __COMPAT_LEVEL__ === \"JS\")\n                                w_JSBinOp(call, a, op, b);\n                            else\n                                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function hasJSCursor(node: NODE_ID) {\n    return JS_CODE[(node as any)*4 + CODE_LINE] !== 0;\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) {\n        const has = hasJSCursor(node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n    } else {\n        AST2JS[type(node)!](node);\n    }\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) {\n            const has = hasJSCursor(node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n            AST2JS[type(node)!](node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n        } else {\n            AST2JS[type(node)!](node);\n        }\n\n        jscode += args[i+1] as string;\n    }\n}","export default {};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","export default class Py_object {\n\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","// @ts-nocheck\n\nimport dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, TYPE_ID, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, TYPE_ID> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, TYPE_ID>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    //w_str(\"/* not implemented */\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__DEBUG__)\n        w_str(`/*${VALUES[node]} */`);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js\";\nimport { id2name as id2typename } from \"@SBrython/sbry/types\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string|null,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n\n    const info = Types[typeID];\n\n    const inst_name  = info?.__qualname__ as string ?? info?.__name__ ?? \"\"\n    const klass_name = info?.__class__?.__qualname__ as string ?? info?.__class__?.__name__ ?? \"\"\n\n    const result_type = typeID === 0 ? null : `${inst_name}:${klass_name}`;\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n// @ts-ignore\nglobalThis.int   = BigInt;\n// @ts-ignore\nglobalThis.float = Number;\n// @ts-ignore\nglobalThis.bool  = Boolean;\n// @ts-ignore\nglobalThis.str   = String;\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return __COMPAT_LEVEL__ === \"JS\" ? null : _r_;\n    }\n    get _sb_() {\n        //TODO...\n        return __COMPAT_LEVEL__ === \"JS\" ? {assert: _sb_.assert} : _sb_;\n    }\n}\n\n","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ return this.constructor.${name}(this, ...args) }`);\n}","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n    \n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\");\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    if( __COMPAT_LEVEL__ === \"JS\") {\n        w_node( nextSibling(firstChild(call)) ); w_str(' .toString()');\n    } else\n        w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = ! __DEBUG__;\nconst parser    = search.get(\"parser\") === \"false\" ? false : true;\nconst DEFAULT_COMPAT_LEVEL = search.get(\"compat_level\") ?? \"JS\";\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = [\n    'basic test suite',\n    'numbers',\n    //\"classes\" // ~726\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~616\n// list    ~345\n// dicts   ~205\n// sets    ~224\n// bytes   ~229\n\n// generators ~972...\n\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nconst select = document.querySelector<HTMLSelectElement>('#tests')!;\n\nconst defaultOpt = new Option(\"----\", undefined, true, true);\ndefaultOpt.toggleAttribute('disabled');\nselect.append( defaultOpt );\n\nselect.addEventListener('change', () => {\n\n    let code = select.value;\n\n    const codes = code.split(\"\\n\");\n    for(let l = 1; l < codes.length; ++l) {\n        const idx = codes[l].indexOf('#');\n        if( idx <= 0)\n            continue;\n        const config = JSON.parse( codes[l].slice(idx+1).trim());\n        if( config.COMPAT_LEVEL !== DEFAULT_COMPAT_LEVEL )\n            codes[l] = \"#\" + codes[l];\n        else\n            codes[l] = codes[l].slice(0, idx).trimEnd();\n    }\n\n    code = codes.join('\\n');\n\n    python_input.value = code;\n    localStorage.setItem('sbrython_code', code);\n    oneTimeExec(code);\n    \n});\n\nfor(let i = 0; i < brython_tests.length; ++i) {\n\n    const subtests = test_suites[ brython_tests[i] ];\n\n    for(let j = 0; j < subtests.length; ++j) {\n\n        const code = subtests[j];\n\n        if( code === \"\")\n            continue;\n\n        const name = code.slice(2 , code.indexOf(\"\\n\") );\n\n        const opts = new Option(name, code);\n        select!.append( opts );\n    }\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    globalThis.__COMPAT_LEVEL__ = DEFAULT_COMPAT_LEVEL;\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    if( __DEBUG__ ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    //TODO: réimplémenter différemment ???\n\n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )   // when does it occur ?\n            continue;\n        if( ctype.start.line === 0) {// unprinted node\n            subparts.length -= 2;\n            continue;\n        }\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;        \n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n\n        if( val.__qualname__ !== undefined)\n            val = val.__qualname__;\n        else if( val.__name__ !== undefined)\n            val = val.__name__;\n        else if( val.name !== undefined)\n            val = val.name;\n        else\n            val = JSON.stringify(val);\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(const child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(const gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(const gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n\n    let failed = [];\n\n    const configs = __COMPAT_LEVEL__ === \"JS\" ? [\"JS\"] : [\"JS\", \"Mix\"];\n\n    // build merged code\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            for(const config of configs) {\n\n                globalThis.__COMPAT_LEVEL__ = config;\n\n                //TODO: second exclude...\n\n                let code = subtests[j];\n\n                if( code === \"\")\n                    continue;\n\n                const codes = code.split(\"\\n\");\n                for(let l = 1; l < codes.length; ++l) {\n                    const idx = codes[l].indexOf('#');\n                    if( idx <= 0)\n                        continue;\n                    const config = JSON.parse( codes[l].slice(idx+1).trim());\n                    if( config.COMPAT_LEVEL !== __COMPAT_LEVEL__ )\n                        codes[l] = \"#\" + codes[l];\n                    else\n                        codes[l] = codes[l].slice(0, idx).trimEnd();\n                }\n\n                code = codes.join('\\n');\n        \n                if( merge ) {\n                    const indented_code = code.split('\\n').map(e => `    ${e}`).join('\\n');\n                    fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n                } else {\n                    try {\n                        fullcode = code;\n                        generate(fullcode, results, parser);\n                        execute(results, sbry_print);\n                    } catch(e) {\n                        error = e as Error;\n\n                        failed.push({\n                            code,\n                            error: e,\n                        })\n\n                        // print last error...\n                        try {\n                            const ast = astnode2tree();\n                            try {\n                                print_js( results.sbry.code, ast );\n                            } catch(e) { console.warn(e); }\n                            try {\n                                print_python( fullcode, ast );\n                            } catch(e) { console.warn(e); }\n                            try {\n                                print_ast( ast );\n                            } catch(e) { console.warn(e); }\n                        } catch(e) { console.warn(e); }\n                    }\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n\n        if( error ) {\n\n            try {\n                const ast = astnode2tree();\n                try {\n                    print_js( results.sbry.code, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_python( fullcode, ast );\n                } catch(e) { console.warn(e); }\n                try {\n                    print_ast( ast );\n                } catch(e) { console.warn(e); }\n            } catch(e) { console.warn(e); }\n        }\n    }\n    \n    if(error) {\n\n        console.warn(failed);\n\n        python_input.value = failed[failed.length-1]?.code ?? results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('\\n#');\n\n    parts[0] = parts[0].slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n        \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i) {\n            if( lines[i][0] === '#' ) {\n                if( lines[i].slice(1).trim() === '' ) // commented empty line\n                    ++nbEmptyLines;\n                else\n                    ++nbExcluded\n            }\n        }\n\n        let code_len = lines.length - 1 - nbEmptyLines;\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { id2name } from \"@SBrython/sbry/types\";\nimport TYPES from \"@SBrython/sbry/types/list\";\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : TYPES[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}","export default \"# 1. AoT commands/tools\\n# 2. Generate TS\\n# 3. Example of Python/TS pipelines (?)\\n#\\n#\\n# 4. Solve Circular type def.\\n#   Somehow lazy parse (types) on demand ???\\n#       -> only for classes/classesType (fct/methods no circularity ?)\\n#       -> import : fixer ID, class X : search ID if exists. (only top level import)\\n#           -> structure to store...\\n#       -> ...\\n#   - 1. import system + several files + circular imports... (detect and resolve) [now = better ?]\\n#       import JS.document (etc.) ??\\n#   - 2. ignore : from __future__ import annotations at top of the file.\\n#   - 3. pre-creer le symbole...\\n#       -> SBrython exported {\\\"package\\\": [...]} -> top level body add/search\\n# 5. Callable (+ refactor functions type)\\n# 6. TypedDict + NotRequired\\n# 7. Final (for TS)\\n\\n# TODO special : other than window + not found -> search in window\\n# TODO: constructors too...\\n# Missing features\\n#   static attribute/methods...\\n#   + async/iterators...\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API\\n# 1006 classes...\\n\\nclass Undefined:\\n    pass\\n\\nundefined: Undefined\\n\\nclass Event:\\n    # TODO: read-only : Final[bool] (they are all RO)\\n    bubble: bool\\n    cancelable: bool\\n    composed: bool\\n    #TODO: Require circular type decl.\\n    # currentTarget: EventTarget\\n    defaultPrevented: bool\\n    # TODO: enum ?\\n    eventPhase: float\\n    NONE = 0.\\n    CAPTURING_PHASE = 1.\\n    AT_TARGET = 2.\\n    BUBBLING_PHASE = 3.\\n    isTrusted: bool\\n    #TODO: Require circular type decl.\\n    # target: EventTarget\\n    timeStamp: float\\n    type: str\\n\\n    #TODO: Require circular type decl.\\n    # def composedPath(self) -> EventTarget : ...\\n    def preventDefault() -> Undefined: ...\\n    def stopImmediatePropagation() -> Undefined: ...\\n    def stopPropagation() -> Undefined: ...\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\\nclass EventTarget:\\n    # TODO: listener type...\\n    # TODO: option/capture optional arg...\\n    # TODO: listener: This must be null, an object with a handleEvent() method, or a JavaScript function.\\n    def addEventListener(type: str, listener) -> Undefined: ...\\n    def removeEventListener(type: str, listener) -> Undefined: ...\\n\\n    def dispatchEvent(event: Event) -> bool: ...\\n\\n# TODO\\nclass NodeList:\\n    length: float\\n    # entries\\n    # values\\n    # keys\\n    # forEach\\n    #def item(self, index:float, /) -> None: ...\\n\\nclass Node(EventTarget):\\n    # TODO: RO\\n    baseURI: str\\n    childNodes: NodeList\\n    firstChild: Node|None\\n    isConnected: bool\\n    lastChild: Node|None\\n    nextSibling: Node|None\\n    nodeName: str\\n    # TODO: enum ?\\n    nodeType: float\\n    ELEMENT_NODE = 0.\\n    ATTRIBUTE_NODE = 1.\\n    TEXT_NODE = 3.\\n    CDATA_SECTION_NODE = 4.\\n    PROCESSING_INSTRUCTION_NODE = 7.\\n    COMMENT_NODE = 8.\\n    DOCUMENT_NODE = 9.\\n    DOCUMENT_TYPE_NODE = 10.\\n    DOCUMENT_FRAGMENT_NODE = 11.\\n    # RW:\\n    nodeValue: str|None\\n    # TODO: Circular types + RO\\n    # ownerDocument: Document|None\\n    # parentElement: Element|None\\n    parentNode: Node|None\\n    previousSibling: Node|None\\n    textContent: str|None\\n\\n    def appendChild(self, child: Node) -> Node: ...\\n    def cloneNode(self, deep: bool = False) -> Node: ...\\n    def compareDocumentPosition(self, otherNode: Node) -> float: ...\\n    DOCUMENT_POSITION_DISCONNECTED = 1.\\n    DOCUMENT_POSITION_PRECEDING = 2.\\n    DOCUMENT_POSITION_FOLLOWING = 4.\\n    DOCUMENT_POSITION_CONTAINS = 8.\\n    DOCUMENT_POSITION_CONTAINED_BY = 16.\\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32.\\n    def contains(self, otherNode: Node|None) -> bool: ...\\n    # TODO: options\\n    # https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\\n    def getRootNode(self) -> Node: ...\\n    def hasChildNodes(self) -> bool: ...\\n    def insertBefore(self, newNode: Node, referenceNode: Node|None) -> Node: ...\\n    def isDefaultNamespace(self, namespaceURI: str|None) -> bool: ...\\n    def isEqualNode(self, otherNode: Node|None) -> bool: ...\\n    def isSameNode(self, otherNode: Node|None) -> bool: ...\\n    def lookupNamespaceURI(self, prefix: str|None) -> str|None: ...\\n    def lookupPrefix(self, namespace: str|None) -> str|None: ...\\n    def normalize(self) -> Undefined: ...\\n    def removeChild(self, child: Node) -> Undefined: ...\\n    # TODO: can be generic\\n    def replaceChild(self, newChild: Node, oldChild: Node) -> Node: ...\\n\\n# TODO\\n\\n# Getter/setter/deleter\\nclass DOMStringMap:\\n    pass\\n\\nclass CSSStyleDeclaration:\\n    cssFloat: str\\n    cssText: str\\n    length: float\\n    #parentRule: CSSRule\\n    \\n    def getPropertyPriority(self, property: str, /) -> str: ...\\n    def getPropertyValue(self, property: str, /) -> str: ...\\n    def item(self, index: float, /) -> str: ...\\n    def removeProperty(self, property: str, /) -> str: ...\\n    def setProperty(self, propertyName: str, value: str, priority: str = \\\"\\\") -> Undefined : ...\\n\\n# TODO extends (Element) [out of order too...]\\nclass HTMLElement:\\n\\n    accessKeyLabel: str\\n    autofocus: bool\\n    contentEditable: str\\n    dataset: DOMStringMap\\n    dir: str\\n    draggable: bool\\n    enterKeyHint: str\\n    hidden: bool\\n    inert: bool\\n    innerText: str\\n    inputMode: str\\n    isContentEditable: bool\\n    lang: str\\n    nonce: float\\n    offsetHeight: float\\n    offsetLeft: float\\n    offsetParent: float\\n    offsetTop: float\\n    offsetWidth: float\\n    outerText: str\\n    popover: str\\n    spellcheck: bool\\n    style: CSSStyleDeclaration|None\\n    tabIndex: float\\n    title: str\\n    translate: bool\\n\\n    # attachInternals\\n    def blur(self) -> Undefined: ...\\n    def click(self) -> Undefined: ...\\n    def focus(self) -> Undefined: ...\\n    def hidePopover(self) -> Undefined: ...\\n    # TODO: options\\n    def showPopover(self) -> Undefined: ...\\n    # TODO:\\n    def togglePopover(self, force=False, /) -> Undefined: ...\\n\\n\\n\\n\\nclass HTMLSlotElement(HTMLElement):\\n    pass\\n\\nclass NamedNodeMap:\\n    # RO\\n    length: float\\n    # def getNamedItem(self, name: str, /) -> Attr|None: ...\\n    # def getNamedItemNS(self, namespace: str, localName: str, /) -> Attr|None: ...\\n    # def item(self, index: float, /) -> Attr|None: ...\\n    # def removeNamedItem(self, attrName: str, /) -> Attr: ...\\n    # def removeNamedItemNS(self, namespace: str, localName: str, /) -> Attr: ...\\n    # def setNamedItem(self, attr: Attr, /) -> Attr|None: ...\\n    # def setNamedItemNS(self, attr: Attr, /) -> Attr|None: ...\\n\\nclass HTMLCollection:\\n    length: float\\n    # def item(self, index: float, /) -> Element|None: ...\\n    # def namedItem(self, key: str, /) -> Element|None: ...\\n\\nclass DOMTokenList:\\n    length: float\\n    value: str\\n\\n    def add(self, token1: str, /) -> Undefined: ...\\n    def contains(self, token: str, /) -> bool: ...\\n    # entries : iterator\\n    # forEach\\n    def item(self, index: float, /) -> str|None: ...\\n    # keys\\n    def remove(self, token1: str, /) -> Undefined: ...\\n    def replace(self, oldToken: str, newToken: str, /) -> bool: ...\\n    def supports(self, token: str, /) -> bool: ...\\n    def toggle(self, token: str, force: bool = False, /) -> bool: ...\\n    def toString(self, /) -> str: ...\\n    # values\\n\\nclass StyleSheet:\\n    # RW\\n    disabled: bool\\n    # RO\\n    href: str\\n    # media: MediaList\\n    ownerNode: Node\\n    parentStyleSheet: StyleSheet\\n    title: str\\n    type: str\\n\\nclass CSSRule:\\n    # RO\\n    cssText: str\\n    parentRule: CSSRule|None\\n    parentStyleSheet: StyleSheet\\n\\nclass CSSRuleList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSRule|None: ...\\n\\nclass CSSImportRule(CSSRule):\\n    # RO\\n    href: str\\n    layerName: str|None\\n    # media : MediaList\\n    # styleSheet: CSSStyleSheet\\n    supportsText: str|None\\n\\nclass CSSStyleSheet(StyleSheet):\\n    # RO\\n    cssRules: CSSRuleList\\n    ownerRule: CSSImportRule|None\\n\\n    def deleteRule(self, index: float, /) -> Undefined: ...\\n    def insertRule(self, rule: str, index: float = 0., /) -> float: ...\\n    #TODO:  Async : replace\\n    def replaceSync(self, text: str, /) -> Undefined: ...\\n\\n\\nclass StyleSheetList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSStyleSheet|None: ...\\n\\n\\nclass DocumentFragment(Node):\\n    childElementCount: float\\n    children: HTMLCollection\\n    #firstElementChild: Element|None\\n    lastElementChild: Element|None\\n    \\n    def append(self, param1: Node, /) -> Undefined: ...\\n    #def getElementById(self, id: str, /) -> Element|None: ... + generic\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    #def querySelector[T: Element](self, selectors: str, /) -> T|None:: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n\\n\\nclass ShadowRoot(DocumentFragment):\\n    # RO + circular...\\n    # activeElement: Element|None\\n    # adoptedStyleSheets (array)\\n    clonable: bool\\n    delegatesFocus: bool\\n    # fullscreenElement (limited)\\n    # host: Element\\n    innerHTML: str|None\\n    # TODO: enum ?\\n    mode: str\\n    # pointerLockElement: Element|None\\n    serializable: bool\\n    # TODO: enum ?\\n    slotAssignment: str\\n    styleSheets: StyleSheetList\\n\\n    # getAnimations\\n    #TODO: opts\\n    def getHTML(self, /) -> str: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n\\nclass DOMRect:\\n    # RW\\n    height: float\\n    width: float\\n    x: float\\n    y: float\\n    # TODO: static\\n    # fromRect()\\n\\n    # RO\\n    top: float\\n    bottom: float\\n    left: float\\n    right: float\\n\\nclass Attr(Node):\\n    # RO\\n    localName: str\\n    name: str\\n    namespaceURI: str\\n    # ownerElement: Element # circular ?\\n    prefix: str|None\\n    value: str\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Element\\n# no aria (too much)\\nclass Element(Node):\\n    # RO\\n    assignedSlot: HTMLSlotElement|None\\n    attributes: NamedNodeMap\\n    childElementCount: float\\n    children: HTMLCollection\\n    classList: DOMTokenList\\n    # RW\\n    className: str\\n    # RO\\n    clientHeight: float\\n    clientLeft: float\\n    clientTop: float\\n    clientWidth: float\\n    currentCSSZoom: float\\n    firstElementChild: Element|None\\n    id: str\\n    # RW\\n    innerHTML: str\\n    lastElementChild: Element|None\\n    localName: str\\n    namespaceURI: str|None\\n    nextElementSibling: Element|None\\n    outerHTML: str\\n    part: DOMTokenList\\n    prefix: str|None\\n    previousElementSibling: Element|None\\n    # RW\\n    role: str|None\\n    # RW\\n    scrollHeight: float\\n    scrollLeft: float\\n    scrollTop: float\\n    scrollWidth: float\\n    # RO\\n    shadowRoot: ShadowRoot|None\\n    slot: str\\n    tagName: str\\n\\n    #TODO: *args\\n    def after(self, node1: Node, /) -> Undefined: ...\\n    # def animate()\\n    def append(self, param1: None, /) -> Undefined: ...\\n    #TODO: attachShadow\\n    def before(self, node1: Node, /) -> Undefined: ...\\n    #TODO: checkVisibility\\n    def closest(self, selectors: str, /) -> Element|None: ...\\n    # TODO: computedStyleMap (limited)\\n    # TODO: getAnimations\\n    def getAttribute(self, attributeName: str, /) -> str|None: ...\\n    #TODO getAttributeNames (list)\\n    def getAttributeNode(self, attrName: str, /) -> Attr: ...\\n    def getAttributeNodeNS(self, namespace: str, attrName: str, /) -> Attr: ...\\n    def getAttributeNS(self, namespace: str, attributeName: str, /) -> str|None: ...\\n    def getBoundingClientRect(self, /) -> DOMRect: ...\\n    #TODO getClientRects\\n    def getElementsByClassName(self, names: str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, tagName: str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespaceURI: str, localName: str, /) -> HTMLCollection: ...\\n    # TODO: options\\n    def getHTML(self, /) -> str: ...\\n    def hasAttribute(self, name: str, /) -> bool: ...\\n    def hasAttribute(self, namespace: str, localName: str, /) -> bool: ...\\n    def hasAttributes(self, /) -> bool: ...\\n    # TODO: pointerId ?\\n    def hasPointerCapture(self, pointerId: float, /) -> bool: ...\\n    # TODO: more restrictive position str\\n    def insertAdjacentElement(self, position: str, element: Element, /) -> Element|None: ...\\n    def insertAdjacentHTML(self, position: str, text: str, /) -> Undefined: ...\\n    def insertAdjacentText(self, where: str, data: str, /) -> Undefined: ...\\n    def matches(self, selectors: str, /) -> bool: ...\\n    # moveBefore\\n    #TODO:\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    def querySelector[T: Element](self, selectors: str, /) -> T|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def releasePointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def removeAttribute(self, attrName: str, /) -> Undefined: ...\\n    def removeAttributeNode(self, attributeNode: Attr, /) -> Node: ...\\n    def removeAttributeNS(self, namespace: str, attrName: str, /) -> Undefined: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    def replaceWith(self, param1: Node, /) -> Undefined: ...\\n    # requestFullScreen (limited)\\n    # requestPointerLock (limited)\\n    # TODO: 2 possibilites :\\n    def scroll(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollBy(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: options\\n    def scrollIntoView(self) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollTo(self, x: float, y: float, /) -> Undefined: ...\\n    def setAttribute(self, name: str, value: str|None, /) -> Undefined: ...\\n    def setAttributeNode(self, attribute: Attr, /) -> Attr|None: ...\\n    def setAttributeNodeNS(self, attributeNode: Attr, /) -> Attr|None: ...\\n    def setAttributeNS(self, namespace: str, name: str, value: str|None, /) -> Undefined: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n    def setPointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def toggleAttribute(self, name: str, toggle: bool = False, /) -> bool: ...\\n\\nclass HTMLBodyElement(HTMLElement):\\n    pass\\n\\nclass HTMLHeadElement(HTMLElement):\\n    pass\\n\\nclass HTMLScriptElement:\\n    # async ?\\n    crossOrigin: str\\n    defer: bool\\n    fetchPriority: str\\n    integrity: str\\n    nomodule: bool\\n    referrerPolicy: str\\n    str: str\\n    text: str\\n    type: str\\n    # static support\\n\\nclass DOMStringList:\\n    length: float\\n    def contains(self, string: str, /) -> bool: ...\\n    def item(self, index: float, /) -> str|None: ...\\n\\nclass URLSearchParams:\\n    size: float\\n\\n    def append(self, name: str, value: str, /) -> Undefined: ...\\n    def delete(self, name: str, value: str|Undefined = undefined, /) -> Undefined: ...\\n    # entries/forEach/keys/values\\n    def get(self, name: str) -> str|None: ...\\n    # getAll (array)\\n    def has(self, name: str, value: str|Undefined = undefined, /) -> bool: ...\\n    def set(self, name: str, value: str, /) -> Undefined: ...\\n    def sort(self) -> Undefined: ...\\n    def toString(self) -> str: ...\\n\\nclass URL:\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n    searchParams: URLSearchParams\\n    username: str\\n\\n    # static\\n    # canParse + createObjectURL + parse + revokeObjectURL\\n    def toJSON(self) -> str: ...\\n    def toString(self) -> str: ...\\n\\nclass Location:\\n    ancestorOrigins: DOMStringList\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n\\n    def assign(self, url: str|URL, /) -> Undefined: ...\\n    def reload(self) -> Undefined: ...\\n    def replace(self, url: str|URL, /) -> Undefined: ...\\n    def toString(self) -> Undefined: ...\\n\\nclass Window(EventTarget):\\n    # caches\\n    closed: bool\\n    # cookieStore\\n    crossOriginIsolated: bool\\n    # crypto\\n    # customElements\\n    # document: Document\\n    frameElement: HTMLElement|None\\n    # frames\\n    # history\\n    # indexedDB\\n    innerHeight: float\\n    innerWidth: float\\n    isSecureContext: bool\\n    length: float\\n    # localStorage\\n    location: Location\\n    # locationBar\\n    # menubar\\n    name: str\\n    # navigator\\n    # opener\\n    origin: str\\n    originAgentCluster: bool\\n    outerHeight: float\\n    outerWidth: float\\n    parent: Window\\n    # performance\\n    # personalbar\\n    # screen\\n    screenLeft: float\\n    screenTop: float\\n    screenX: float\\n    screenY: float\\n    # scrollbars\\n    scrollX: float\\n    scrollY: float\\n    self: Window\\n    # sessionStorage\\n    # speechSynthesis\\n    # statusbar\\n    # toolbar\\n    top: Window\\n    # visualViewport\\n    window: Window\\n\\n    def alert(self, message: str = \\\"\\\", /) -> Undefined: ...\\n    def atob(self, encodedData: str, /) -> str: ...\\n    def btoa(self, stringToEncode: str, /) -> str: ...\\n    def cancelAnimationFrame(self, requestID: float, /) -> Undefined: ...\\n    def clearInterval(self, intervalID: float, /) -> Undefined: ...\\n    def clearTimeout(self, timeoutID: float, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def confirm(self, message: str = \\\"\\\", /) -> bool: ...\\n    # createImageBitmap\\n    # fetch\\n    def focus(self) -> Undefined: ...\\n    def getComputedStyle(self, element: Element, pseudoElt: str|None = None, /) -> CSSStyleDeclaration: ...\\n    # getSelection\\n    # matchMedia\\n    def moveBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def moveTo(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def open(self, url: str = \\\"\\\", target: str = \\\"\\\", windowFeatures: str = \\\"\\\", /) -> Window|None: ...\\n    def postMessage(self, message, targetOrigin: str = \\\"\\\", /) -> Undefined: ...\\n    def print(self) -> Undefined: ...\\n    def prompt(self, message: str, defaultValue: str|None = None, /) -> str|None: ...\\n    # queueMicrotask\\n    # reportError\\n    # requestAnimationFrame\\n\\n    def resizeBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def resizeTo(self, width: float, height: float, /) -> Undefined: ...\\n    def scroll(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollBy(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollTo(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    # def setInterval(self, )\\n    # def setTimeout\\n    def stop(self) -> Undefined: ...\\n    # TODO: generic\\n    def structuredClone(self, value, /): ...\\n\\n\\nwindow: Window\\n\\nclass DocumentType(Node):\\n    name: str\\n    publicId: str\\n    systemId: str\\n\\n    def after(self, param1: Node, /) -> Undefined: ...\\n    def before(self, param1: Node, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def replaceWith(self, node1: Node, /) -> Undefined: ...\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Document/\\n# also lot of methods...\\nclass Document(Node):\\n    activeElement: Element|None\\n    adoptedStyleSheets: CSSStyleSheet\\n    body: HTMLBodyElement\\n    characterSet: str\\n    childElementCount: float\\n    children: HTMLCollection\\n    compatMode: str\\n    contentType: str\\n    cookie: str\\n    currentScript: HTMLScriptElement|None\\n    defaultView: Window|None\\n    designMode: str\\n    dir: str\\n    doctype: DocumentType\\n    documentElement: Element\\n    documentURI: str\\n    embeds: HTMLCollection\\n    firstElementChild: HTMLElement|None\\n    #fonts: FontFaceSet\\n    forms: HTMLCollection\\n    #fragmentDirective: FragmentDirective\\n    head: HTMLHeadElement\\n    hidden: bool\\n    images: HTMLCollection\\n    #implementation: DOMImplementation\\n    lastElementChild: Element|None\\n    lastModified: str\\n    links: HTMLCollection\\n    location: Location\\n    plugins: HTMLCollection\\n    readyState: str\\n    referrer: str\\n    scripts: HTMLCollection\\n    scrollingElement: Element\\n    styleSheets: StyleSheetList\\n    # timeline\\n    title: str\\n    URL: str\\n    visibilityState: str\\n\\n    # static parseHTMLUnsafe\\n    def adoptNode(self, externalNode: Node, /) -> Node: ...\\n    def append(self, param1: Node, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def createAttribute(self, name: str, /) -> Attr: ...\\n    def createAttributeNS(self, namespaceURI: str, qualifiedName: str, /) -> Attr: ...\\n    def createCDATASection(self, data:str, /) -> Node: ...\\n    def createComment(self, data: str, /) -> Node: ...\\n    def createDocumentFragment(self) -> DocumentFragment: ...\\n    # TODO: options\\n    def createElement(self, localName: str, /) -> Element: ...\\n    def createElementNS(self, namespaceURI: str, qualifiedName: str) -> Element: ...\\n    # createExpression\\n    # createNodeIterator\\n    # createProcessingInstruction\\n    # createRange\\n    def createTextNode(self, data: str, /) -> Node: ...\\n    # createTreeWalker\\n    def elementFromPoint(self, x: float, y: float) -> Element: ...\\n    # elementsFromPoint (array)\\n    # evaluate (XPath)\\n    # getAnimations\\n    def getElementById[T: Element](self, selectors: str, /) -> T|None: ...\\n    def getElementsByClassName(self, names:str, /) -> HTMLCollection: ...\\n    def getElementsByName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespace: str, name: str, /) -> HTMLCollection: ...\\n    # getSelection\\n    def hasFocus(self) -> bool: ...\\n    def hasStorageAccess(self) -> bool: ...\\n    def importNode[T: Node](self, externalNode: T, deep: bool = False) -> T: ...\\n    def open(self) -> Undefined: ...\\n    def prepend(self, param1: Node) -> Undefined: ...\\n    def querySelector[T: Element](self, selectors: str, /) -> T|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    # TODO: options + promise\\n    # def requestStorageAccess(self): \\n    def writeln(self, line: str, /) -> Undefined: ...\\n\\n# TODO (inherit EventTarget)\\n# https://developer.mozilla.org/en-US/docs/Web/API/Window\\n# 49 props + 34 methods\\n\\n# TODO: other API...\\n\\ndocument: Document\";","import Types, { TYPEID_None, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG, AST_CLASSDEF, AST_DEF_METH, AST_OP_ATTR, AST_KEY_IMPORT } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport builtins, { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\nimport { printNode } from \"@SBrython/utils/print/printNode\";\nimport { w_sns, w_str } from \"./ast2js/utils\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nlet JS: Record<string, TYPE_ID> = {};\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = offset + code.slice(offset).search(END_OF_SYMBOL);\n\n    curChar = code.charCodeAt(end);\n\n    return code.slice(offset, offset = end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n    \n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    if( curChar === CHAR_COLON ) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol(); // type\n        setResultType(id, getSymbol(type) + 1 as TYPE_ID );\n    }\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => {\n        setType(id, AST_KEY_RETURN);\n        consumeSpaces();\n        if( curChar !== CHAR_NL)\n            setFirstChild(id, readExpr() );\n    },\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        let genericName = \"\";\n        let genericType = \"\";\n        if( curChar === CHAR_BRACKET_LEFT) {\n            ++offset;\n            genericName = nextSymbol();\n            offset += 2; // \": \"\n            genericType = nextSymbol();\n            ++offset; // ]\n        }\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        let ret_type: TYPE_ID = 0;\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return ret_type; //TODO...\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        const cur_builtin_idx = builtins.length;\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        ++offset; // )\n\n        consumeSpaces();\n        if( curChar === CHAR_MINUS ) {\n            offset += 2; // ->\n            consumeSpaces();\n            let ret_name = nextSymbol();\n            if( ret_name === genericName)\n                ret_name = genericType;\n            ret_type = getSymbol( ret_name ) + 1 as TYPE_ID;\n\n            // @ts-ignore\n            while(curChar === 124) { // |\n                ++offset;\n                nextSymbol();\n            }\n            consumeSpaces();\n        }\n\n        ++offset; // :\n\n        curChar = code.charCodeAt(offset);\n\n        if( curChar === CHAR_SPACE && code.charCodeAt(++offset) === CHAR_DOT ) {\n            offset += 3; // ...\n        } else {\n\n            const body = readBody();\n            setSibling(args, body);\n\n            if( ret_type === 0 ) {\n\n                ret_type = TYPEID_None;\n\n                cur = firstChild(body);\n                while( nextSibling(cur) !== 0) {\n                    cur = nextSibling(cur);\n                }\n\n                if( type(cur) === AST_KEY_RETURN && (cur = firstChild(cur)) !== 0)\n                    ret_type = resultType(cur);\n            }\n        }\n\n        builtins.length = cur_builtin_idx;\n    },\n    \"from\": (id) => {\n        // only stubs for now...\n        consumeSpaces();\n        const module = nextSymbol();\n\n        consumeSpaces();\n        //TODO...\n        nextSymbol(); // from\n        consumeSpaces();\n        const imported_name = nextSymbol(); //TODO: many\n\n        if(module === \"JS\") {\n            addSymbol(imported_name, JS[imported_name] ); //TODO...\n            setType(id, AST_KEY_PASS); //TODO...\n        } else {\n            throw new Error(\"Not implemented !\");\n        }\n        //TODO: parse studs...\n    },\n    \"class\": (id) => {\n\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const inherit: NODE_ID[] = []; //TODO...\n\n        if( curChar === CHAR_PARENTHESIS_LEFT) {\n            //TODO read args like call (?)\n            ++offset; // consume (\n            consumeSpaces();\n\n            // @ts-ignore\n            while( curChar !== CHAR_PARENTHESIS_RIGHT ) {\n\n                inherit.push( readToken() );\n\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset; // consume ,\n                    consumeSpaces();\n                }\n            }\n            ++offset; // consume )\n        }\n\n        ++offset; // \":\"\n        \n        const body = readBody();\n\n        let cur = body;\n        for(let i = 0; i < inherit.length; ++i) {\n            setSibling(cur, inherit[i]);\n            cur = inherit[i];\n        }\n\n        setType(id, AST_CLASSDEF);\n        setFirstChild(id, body); // too lazy to duplicate...\n\n        const STypeID = Types.length as TYPE_ID;\n        const SInstID = Types.length+1 as TYPE_ID;\n\n        const SType_klass: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => SInstID,\n                [WRITE_CALL]: (id: NODE_ID) => {\n                    w_str(\"new \");\n                    default_call(id);\n                },\n            }\n        }\n\n        const SType_instance = {};\n        for(let i = 0; i < inherit.length; ++i)\n            Object.assign(SType_instance, TYPES[resultType(inherit[i]) + 1]);\n\n        // @ts-ignore\n        SType_instance.__class__ = SType_klass;\n    \n        Types[STypeID] = SType_klass;\n        Types[SInstID] = SType_instance;\n\n\n        //TODO: refactor/fix...\n\n        cur = firstChild(body);\n        let node_type: NODE_TYPE;\n        do {\n\n            node_type = type(cur);\n\n            // not ideal : needs it BEFORE...\n            if( node_type === AST_DEF_FCT) {\n\n                // @ts-ignore\n                SType_instance[VALUES[cur]] = resultType(cur);\n\n                setType(cur, AST_DEF_METH);\n            }\n\n            //TODO: fix...\n            if( node_type === AST_OP_ASSIGN_INIT || node_type === AST_OP_ASSIGN) {\n\n                // @ts-ignore\n                SType_instance[VALUES[nextSibling(firstChild(cur))]] = resultType(cur);\n\n                setType(cur, AST_OP_ASSIGN);\n            }\n\n            cur = nextSibling(cur);\n\n        } while( cur !== 0);\n\n        addSymbol(name, STypeID);\n\n        //TODO: inherit...\n\n        //TODO: SType...\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __DEBUG__ ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr(false); //TODO... : typehint too...\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== end);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_DOT) { // get attr...\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_OP_ATTR);\n                setFirstChild(node, cur);\n\n                ++offset;\n\n                const name = VALUES[node] = nextSymbol(); //TODO: continue...\n\n                // @ts-ignore\n                setResultType(node, TYPES[resultType(cur)][name]);\n            }\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                if( __DEBUG__ ) copy_py_code_beg(cur, node);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n\n                if( __DEBUG__ && fctType === undefined) {\n                    console.warn( VALUES[node], resultType(cur), Types[resultType(cur)]);\n                    throw \"nok\";\n                }\n\n                //TODO: return type...\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr(colon_is_end = true) { //TODO...\n\n    let value = readToken();\n\n    if( ! colon_is_end && curChar === CHAR_COLON) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol();\n        const typeID = getSymbol(type) + 1 as TYPE_ID;\n\n        // @ts-ignore\n        while(curChar === 124) { // |\n            ++offset;\n            nextSymbol();\n        }\n\n        setResultType(value, typeID);\n        addSymbol(VALUES[value], typeID); //TODO...\n\n        consumeSpaces();\n    }\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\n// @ts-ignore\nimport JS_stubs  from \"!!raw-loader!../stubs/Document.pyi\";\nimport buildAST from \"@SBrython/utils/generate/AST\";\n\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    if( filename !== \"JS\") { //TODO...\n\n        const start = builtins.length;\n\n        py2ast(JS_stubs, \"JS\");\n\n        for(let i = start; i < builtins.length; ++i)\n            JS[builtins[i][0]] = builtins[i][1]; //TODO: array (?)\n    }\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __DEBUG__ ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __DEBUG__ && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }"],"names":["ast2js","node","kname","Types","VALUES","__name__","w_str","rchild","firstChild","cur","nextSibling","name","w_node","resultType","TYPEID_jsint","TYPEID_int","Number2Int","w_NL","BB","BE","convert","dst","context","setType","AST_OP_UNARY","coffset","addFirstChild","convert_node","operand","op","bname2pyname","constructor","$name","undefined","console","warn","Error","setResultType","TYPEID_bool","type","TYPEID_NotImplementedType","method","RETURN_TYPE","lchild","AST_OP_ASSIGN_INIT","w_sns","bname2jsop","AST_OP_BOOL","nbChildren","values","length","i","addSibling","writeOp","value","count","left","right","jop","ltype","rtype","l","r","w_JSBinOp","reversed_operator","WRITE_CALL","find_and_write_call","assert","cond","__call__","AST_KEY_CONTINUE","addJSBinOps","target","ops","return_type","convert_other","NOCONVERT","convert_self","w_call","ADD_EQ","add_method","opid2opmethod","call","_","a","b","opid2ropmethod","iop","OP_BIN_ADD","OP_BIN_SUB","opid2iopmethod","prio","jsop_priorities","p_prio","parentOPPrio","setParentOPPrio","opid2jsop","AST_OP_ASSIGN_AUG","TYPEID_unknown","TYPEID_NoneType","TYPEID_None","TYPEID_NotImplemented","TYPEID_type","TYPEID_type_int_","TYPEID_type_jsint_","TYPEID_type_float_","TYPEID_float","TYPEID_type_bool_","TYPEID_type_str_","TYPEID_str","TYPES","Array","Object","create","PythonError","python_exception","super","_raw_err_","this","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","results","nb_tokens","A","B","report","nb_lines","total_lines","nb_done","nb_excluded_lines","nb_files","code","tcoef","times","fct","func","attr","id","fct_type","local_symbols","ret_type","AST_CALL","args","keywords","keyword","set_py_code","bry","offset","sbry","ast","resetResults","fill","AST_CTRL_IF","test","Body","body","set_py_code_from_list","ifblock_cur","orelse","AST_CTRL_ELSE","AST_CTRL_ELIF","first","abs","n","LIST","require","id2name","fist","set_js_cursor","CODE_BEG","CODE_END","AST_LIT_FSTRING_FVAL","AST_KEY_BREAK","AST_OP_BRACKETS","slice","_context","vtype","qname","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_STR","__class__","__qualname__","AST_LIT_FLOAT","toString","AST_LIT_NONE","AST_LIT_INT","klass","initBuiltinClass","RET_INT","other","other_type","otype","__int__","RET_STR","w_subs","OP_BIN_POW","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","CONVERT_2INT","OP_BIN_MUL","RET_INT2INT","Int2Number","OP_BIN_DIV","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","OP_BIN_FDIV","OP_BIN_MOD","__COMPAT_LEVEL__","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","KW","kw","getKW","last_id","AST_SYMBOL","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_STRUCT_DICT","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_RAISE","AST_KEY_IMPORT","AST_KEY_IMPORT_ALIAS","AST_KEY_ASSERT","AST_OP_OP","AST_OP_CMP","AST_OP_BIN","AST_OP_NOT","AST_OP_ATTR","AST_OP_ASSIGN_ATTR","AST_OP_ASSIGN","AST_LIT_FSTRING","AST_DEF_FCT","AST_DEF_METH","AST_DEF_ARGS","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","AST_CALL_ARG_KW","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TRYBLOCK_CATCH","AST_CTRL_TERNARY","AST_CTRL_FOR_RANGE","AST_CTRL_FOR","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","CURSOR","ARRAY_TYPE","jscode","filename","CODE_LINE","CODE_COL","buildJSCode","start","line","JS_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","hasJSCursor","idx","indent","cur_indent_level","indents","str","has","AST2JS","float2str","f","toExponential","sign_idx","includes","Py_object","Py_JSException","Py_Exception","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","assign","ILIST","buildPyCode","PY_CODE","convert_ast","dop_reset","createASTNode","Context","ASTNODES","symbols","builtins","createSubContext","createClassContext","ctx","parentTypeID","arg","__str__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","debug_print_exception","err","sb","stack","isV8","split","e","filter_stack","map","_line","_col","fct_name","pos","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","Symbol","TYPEID","JS_NAME","ARGS_INFO","genOpFct","RET_None","create_function","nbBuiltins","resetSymbols","addSymbol","getSymbol","opname","list","names","module","result_type","meta","Float64Array","CODE_BUFFER_SIZE","PY_CODE_BUFFER","ArrayBuffer","maxByteLength","JS_CODE_BUFFER","NEXT_AST_NODE_ID","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","setFirstChild","setSibling","sibling","write_arg","defval","write_posarg","nops","nb_ops","comparators","write_multi_jsop","OP_BOOL_NOT","OP_CMP_EQ","OP_CMP_NEQ","generate","stype","convert_args","annotation","returns","fct_return_type","last_type","fake_node","lineno","end_lineno","col_offset","end_col_offset","push","SType_fct","default_call","args_names","posonlyargs","args_pos","idx_end_pos","idx_vararg","has_kw","STypeID","method_name","gen","instanceType","instanceTypeID","addType","alt","weak_assign","src","key","instance_TypeID","typeID","method_wrapper","klass_type","inst_type","bases","stypeID","type_obj","exc","iter","elts","brython_node","BRY2SBRY","beg","set_py_from_beg_end","dst_beg","dst_end","src_offset","beg_offset","end_offset","astnode2tree","info","children","pycode","to_write","left_id","right_id","globalThis","int","BigInt","float","Number","bool","Boolean","String","SBrython","browser","buildModule","Function","runJSCode","getModules","getModule","print","execute","sbry_print","performance","now","t0","t1","executeSBrython","$B","imported","executeBrython","targets","attrname","attrdef","a_value","asname","cn","obj","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","addSblng","pos_defaults","defaults","posonly","doffset","convert_arg","POSITIVE_INFINITY","nb_pos_defaults","Math","min","has_others","cut_off","kwonly","kw_defaults","kwargs","py_offset","brython_name","RET_FLOAT","other_value","_op","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","search","URLSearchParams","location","test_name","get","merge","parser","DEFAULT_COMPAT_LEVEL","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","addEventListener","localStorage","setItem","oneTimeExec","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","select","defaultOpt","Option","toggleAttribute","append","codes","JSON","parse","trim","COMPAT_LEVEL","trimEnd","subtests","j","opts","fullcode","textContent","classList","remove","error","message","add","print_js","print_python","print_ast","print_code","_ast","createElement","style","setProperty","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","stringify","child","html_child","prev_highlighted","highlight","gui_elem","replaceChildren","tests","failed","configs","substats","stats","total","excluded","config","async","fetch","text","lines","exclude","x","parseInt","loadSubTests","parts","t","excl","nbEmptyLines","nbExcluded","code_len","find","v","isArray","TypeKlass","instance","jsname","Klass","RET_TYPE","write","floordiv_float","floor","floordiv_int","result","mod_float","mod","mod_int","OP_CMP_LT","OP_CMP_LE","OP_CMP_GT","OP_CMP_GE","w_JSCmpOp","OP_EQ2IS","printNode","ret_typeID","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","curChar","CURRENT_PARAM_TYPE","POSONLY_END","JS","consumeEmptyLines","charCodeAt","nextSymbol","nextArg","consumeSpaces","readArg","readExpr","KNOWN_SYMBOLS","readToken","readBody","genericName","genericType","cur_builtin_idx","ret_name","imported_name","inherit","SInstID","SType_klass","SType_instance","node_type","CURRENT_INDENTATION","consumeIndentedLines","readLine","set_py_code_beg","set_py_code_end","readComment","createCallUopNode","nextChar","astnode_type","token","symbol","copy_py_code_beg","fctType","next","isEndOfExpr","readOp","op_str","opsymbol2opid","colon_is_end","createCallOpNode","rop","rop_prio","lop","lop_prio","pyop_priorities","py2ast","_code","JS_stubs","copy_py_code_end","opnode","dst_off","src_beg","src_end","pyop_name","atype","OP_ASSIGN","off","src_off","use_parser","Parser","_PyPegen","run_parser","tokens","tokenizer","buildAST","__ast","generateSBrython","future","future_features","symtable","_PySymtable_Build","js_from_root","js","generateBrython","keys","handlers","RET_JSINT","RET_JSINT2JSINT","o"],"sourceRoot":""}