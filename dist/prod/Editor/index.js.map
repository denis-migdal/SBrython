{"version":3,"file":"Editor/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/ast2js/ast2js.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts"],"sourcesContent":["export default [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n]\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[AST_KEY_RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./list\";\nimport { w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__[WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results) {\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    const ast = buildAST(code, results);\n    \n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] += results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] += results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] += results. bry.times[offset+1];\n    results.sbry.times[offset] += results.sbry.times[offset+1];\n}","import { Context } from \"@SBrython/sbry/py2ast\";\n\nexport const AST_KEY_RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Fct<T extends any[] = unknown[]> = {\n    [AST_KEY_RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = {\n    __name__?: string,\n    __call__: Fct<T> & {\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_AST_KEY_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[AST_KEY_RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[AST_KEY_RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_AST_KEY_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            [AST_KEY_RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[AST_KEY_RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, AST_FCT_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js/list\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id = 0): NODE {\n\n    const coffset    = firstChild(id);\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type: Types[resultType(id)]?.__name__,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children: Array.from({length: nbChild(id)}, (_,i) => astnode2tree(coffset+i) )\n    };\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = AST_OP_ASSIGN;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = AST_OP_ASSIGN_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport { RET_INT, AST_KEY_RETURN_TYPE_FCT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { WRITE_CALL } from \"./types/utils/types\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n\n    console.warn({\n        type     : type(id),\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: AST_KEY_RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname];\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : TYPEID_type_int_,\n        str  : TYPEID_type_str_,\n        float: TYPEID_type_float_,\n        len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)) //TODO...\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(nb_tokens: number, A: SubResults, B: SubResults) {\n\n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    report += \"Status         : SUCCESS\\n\";\n    report += \"Tested         : 194/1866 (1672 excluded)\\n\";\n    report += \"Py code        : \" + nb_tokens + \" tokens (1 file)\\n\";\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/py2ast\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(ast: any, src:string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code += jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    nb_tokens: 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[AST_KEY_RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport type AST_KEY_RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;","export default __webpack_public_path__ + \"Editor/index.html\";","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: string, results: SubResults) {\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n\n    const ast = {\n        nodes: convert_ast(_ast),\n        filename\n    }\n\n    const t0 = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code += jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}","import { w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry);\n     executeBrython(results.bry );\n\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value];\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[AST_KEY_RETURN_TYPE] === undefined )\n        meta[AST_KEY_RETURN_TYPE] = () => result_type;\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results) {\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    const _ast   = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n    results.sbry.times[results.sbry.offset++] += t0 - beg;\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    \n    results.nb_tokens += tokens.length;\n\n    return _ast;\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i];\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[AST_KEY_RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import generate from \"@SBrython/utils/generate\";\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = true; // search.get(\"merge\") === \"true\" ? true : false;\n\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers'];\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\n// handle GUI...\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    generate(fullcode, results);\n\n    try {\n        execute(results);\n    } catch(e) {\n        console.warn(e);\n    }\n\n    //TODO: AST+code trees...\n\n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )\n            continue;\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null)\n        html_bloc.textContent += `:${node.value}`;\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(let child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(let gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(let gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let fullcode = \"\";\n\n    // build merged code\n    let id = -1;\n    for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            if( subtests[j] === \"\")\n                continue;\n       \n            if( id === 5) { // || id > 121) {\n                //console.warn(\"ignored\", id);\n                continue;\n            }\n            \n            const indented_code = subtests[j].split('\\n').map(e => `\\t${e}`).join('\\n');\n            fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n        }\n\n    }\n\n    /* \n        let error = false;\n        let lastResults;\n        window.clearResults();\n    */\n\n    generate(fullcode, results);\n\n    execute(results);\n    \n    //TODO\n    \n    /* if(error) {\n        window.updateFromResults(lastResults);\n\n        const python_input = document.querySelector('#python');\n        python_input.value = lastResults.sbrython.pycode;\n\n        return;\n    }*/\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results.nb_tokens, results. bry , results.sbry );\n    sbry_output.textContent = generate_report(results.nb_tokens, results.sbry, results. bry);\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    return code.split('#').slice(1).map( t => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n\n        lines = filter(lines.slice(1), exclude[`${test_name}.${name}`]);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n    \n        //total          += code_len;\n        //excluded_count += nbExcluded;\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1 + 2;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] - 2 <= idx && v[1] - 2 >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import AST2JS, { id2name } from \"@SBrython/sbry/ast2js/list\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/sbry/dop\";\nimport { AST } from \"@SBrython/sbry/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// =======================================================================\n\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}\n\n// =======================================================================\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { Context, convert_node, swapASTNodes } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[AST_KEY_RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]];\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[AST_KEY_RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/py2ast\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","export default [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}"],"names":["require","_id2name","id2name","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","w_node","w_sns","convert","dst","context","name","func","id","fct_type","local_symbols","undefined","console","warn","Error","fct","Types","ret_type","__call__","AST_KEY_RETURN_TYPE","setType","AST_FCT_CALL","setResultType","coffset","addChild","args","length","keywords","convert_node","i","keyword","set_py_code","rchild","resultType","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","getASTFor","_r_","_sb_","Object","assign","TYPE_str","__name__","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","RET_FLOAT","other","other_type","Int2Number","TYPEID_float","other_value","type","AST_LIT_STR","otype","__int__","WRITE_CALL","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","offset","set_js_cursor","CODE_BEG","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","CODE_END","generate","code","results","bry","sbry","buildAST","generateSBrython","generateBrython","times","Symbol","rtype","stype","call","Context","parent_node_context","convert_args","annotation","returns","fct_return_type","last_type","constructor","$name","fake_node","lineno","end_lineno","col_offset","end_col_offset","push","Body","set_py_code_from_list","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","bname2pyname","AST_OP_ASSIGN_AUG","target","value","Py_object","TYPE_bool","RET_IJBF2BOOL","astnode2tree","result_type","buildJSCode","pycode","buildPyCode","children","from","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_INIT","start","line","PY_CODE","CODE_BEG_LINE","col","CODE_BEG_COL","end","CODE_END_LINE","CODE_END_COL","brython_node","beg","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","CODE_LINE","CODE_COL","convert_ast","dop_reset","createASTNode","ASTNODES","swapASTNodes","ao","ASTNODE_SIZE","bo","ap","bp","BRY2SBRY","log","parent_context","RootContext","type_fct","int","TYPEID_type_int_","str","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","return_type","left","labels","tformat","time","unit","toFixed","padStart","tdiff","c","generate_report","nb_tokens","A","B","report","tcoef","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","AST_SYMBOL","AST_OP_ATTR","attr","nb_call_args","call_args_offset","nb_pos_call","AST_FCT_CALL_KEYWORD","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","arg","idx","key","performance","now","future","$B","future_features","symtable","_PySymtable_Build","t0","js_from_root","imported","js","t1","resetResults","fill","AST_KEY_IMPORT","names","module","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_IJBF2FLOAT","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","TYPE_int","CONVERT_2INT","genUnaryOps","write_unary_jsop","_ast","nodes","PythonError","python_exception","super","_raw_err_","execute","executeSBrython","executeBrython","TYPEID_NoneType","float2str","f","toExponential","sign_idx","slice","toString","includes","typedesc","obj","bname2jsop","TYPE_float","_node","_op","parser","Parser","_PyPegen","run_parser","tokens","tokenizer","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","ARRAY_TYPE","Float64Array","JS_CODE","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","cn","elts","test","window","onerror","bry_output","document","querySelector","sbry_output","python_input","test_name","URLSearchParams","location","search","get","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","startTests","python_output","ast_output","js_output","oneTimeExec","fullcode","textContent","classList","remove","e","add","print_js","print_python","print_ast","print_code","map","createElement","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","filter","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur","cur_line","print_node","child","html_child","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","merge","tests","subtests","j","split","join","async","fetch","text","fromEntries","lines","exclude","x","parseInt","loadSubTests","trim","nbEmptyLines","code_len","nbExcluded","l","find","v","isArray","CURSOR","indent","cur_indent_level","indents","AST2JS","asname","right","ltype","reversed_operator","bases","_context","orelse","debug_print_exception","err","sb","stack","isV8","filter_stack","_line","_col","fct_name","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","write_multi_jsop","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators"],"sourceRoot":""}