{"version":3,"file":"Editor/index.js","mappings":"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AEA,EACA,EAEA,EACA,EAEA,GACA,GACA,GACA,GAEA,GAEA,EACA,EACA,EACA,EACA,EACA,EAEA,GACA,GACA,GAEA,EACA,EAEA,EACA,EAEA,EACA,EACA,GAKS2J,EAAkB,CAC3B,EACA,EACA,EAEA,GACA,GAEA,GACA,GAEA,GACA,GACA,GACA,GAEA,GAEA,EACA,EACA,EACA,EACA,EACA,EAEA,GACA,GACA,GAEA,EACA,EAEA,EACA,EAEA,EACA,EACA,IAIS9Q,EAAgB,CACzB,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,UACA,SACA,SACA,SACA,SAEA,UACA,UACA,UACA,eACA,GAGA,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WAEA,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGSiB,EAAY,CACrB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,IACA,MAWS2F,EAAgB,CACzB,IAAU1R,EACV,IAAUC,EACV,IAAUF,EACV,KAAUG,EACV,KAAUC,EACV,IAAUN,EACV,IAAUC,EACV,IAAUU,EACV,IAAUW,EACV,KAAUG,EACV,IAAUE,EACV,KAAU5B,EACV,KAAU0K,EACV,KAAUC,EACV,IAAUG,EACV,KAAUC,EACV,IAAUH,EACV,KAAUC,EACV,GA/MyB,GAgNzB,SA/MyB,GAgNzB,GA7MyB,GA8MzB,SA7MyB,GA8MzB,GA5MyB,GA6MzB,IA5MyB,G,0DCvCd,SAASxI,EAAOvB,GAE3B,IAAIsF,GAASvG,EAAAA,EAAAA,IAAWiB,GAapB,KAXJnB,EAAAA,EAAAA,IAAM,QAASyG,EAAK,wBACpBgS,EAAAA,EAAAA,OACAlU,EAAAA,EAAAA,OAEI5B,EAAAA,EAAAA,IAAM,0DAEN8D,GAAMxG,EAAAA,EAAAA,IAAYwG,GACN,IAARA,IACA9B,EAAAA,EAAAA,IAAQ8B,GAEZA,GAAMxG,EAAAA,EAAAA,IAAYwG,GACJ,IAARA,IACFlC,EAAAA,EAAAA,OAAQ5B,EAAAA,EAAAA,IAAM,UAAUgC,EAAAA,EAAAA,IAAO8B,GAC/BA,GAAMxG,EAAAA,EAAAA,IAAYwG,IAY1BiS,EAAAA,EAAAA,KAEJ,C,6EC7Be,SAAShW,EAAOvB,GAE3B,IAAIqX,GAAStY,EAAAA,EAAAA,IAAWiB,GAEpBsF,GAAMxG,EAAAA,EAAAA,IAAYuY,GACtB,IAEI7T,EAAAA,EAAAA,IAAO8B,IACP9D,EAAAA,EAAAA,IAAM,OAEN8D,GAAMxG,EAAAA,EAAAA,IAAYwG,SACN,IAARA,IAEJlF,EAAAA,EAAAA,IAAWiX,KAAY7Y,EAAAA,KAAgB4B,EAAAA,EAAAA,IAAWJ,KAAUK,EAAAA,KAC5DgX,GAAS/W,EAAAA,EAAAA,IAAW+W,KAExB7T,EAAAA,EAAAA,IAAO6T,EACX,C,yDClBe,SAASlT,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAK+C,EAAAA,GAEjB,C,kCCRA,IAAIgU,EAA0B,CAAC,EAE/B,SACIC,GAAK7N,IACD4N,EAAK5N,CAAQ,EAEjB8N,MAAO,KACH,MAAMlI,EAAIgI,EAEV,OADAA,EAAK,CAAC,EACChI,CAAC,E,oHCLD,SAAShP,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKuC,EAAAA,IACb,MAAM2U,EAAatb,EAAKsb,KAClB/V,EAAa+V,EAAKxY,OACxB,GAAmB,IAAfyC,EACA,OAEJ,IAAID,GAAMT,EAAAA,EAAAA,IAAcT,IACxBU,EAAAA,EAAAA,IAAcQ,EAAMgW,EAAK,GAAIjX,GAC7B,IAAI,IAAImB,EAAI,EAAGA,EAAID,IAAcC,EAC7BF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAcQ,EAAMgW,EAAK9V,GAAInB,EAErC,C,0DCfe,SAAS9C,EAAOvB,GAE3B,MAAMub,GAAOxc,EAAAA,EAAAA,IAAWiB,IAExBnB,EAAAA,EAAAA,IAAM,WAAY0c,EAAM,OAAOzc,EAAAA,EAAAA,IAAYyc,GAAO,IACtD,C,0DCLe,SAASha,EAAOvB,IAC3BnB,EAAAA,EAAAA,IAAM,+BAA+BE,EAAAA,EAAAA,IAAWiB,GAAO,IAC3D,C,sFCCe,SAASmE,EAAQC,EAAcpE,EAAWqE,GAErD,IAAImX,EAAUxb,EAAKwb,aACH5X,IAAZ4X,IACAA,EAAU,CAACxb,EAAKoC,SAEpB,MAAMe,GAAU0B,EAAAA,EAAAA,IAAcT,IAE9BU,EAAAA,EAAAA,IAAa3B,EAASnD,EAAKmF,MAAOd,GAClC,IAAI2O,GAAQ5S,EAAAA,EAAAA,IAAW+C,GAEnBqN,EAAc,KAElB,MAAMiL,EAAazb,EAAKyb,YAAYzY,QACjBY,IAAf6X,IACAjL,EAAcnM,EAAQC,cAAcmX,IAEP,OAAhBjL,GAAwBA,IAAgBwC,GACrD9F,QAAQC,KAAK,qBAEG,OAAhBqD,IACAA,EAAcwC,EACVA,IAAUxU,EAAAA,KACVgS,EAAcnQ,EAAAA,MAItBiN,EAAAA,EAAAA,IAAclJ,EAAKoM,GAEnB,MAAMjL,EAAaiW,EAAQ1Y,OAE3B,IAAIwC,EAAMnC,EACV,IAAI,IAAIqC,EAAI,EAAGA,EAAID,IAAcC,EAC7BF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKkW,EAAQhW,GAAInB,GAC9BA,EAAQC,cAAckX,EAAQhW,GAAGxC,IAAMwN,EAI3C,IAAIvD,EAAOlF,EAAAA,GACX,GAAqB,UAAjB1D,EAAQ4I,KAAkB,CAC1BA,EAAOnF,EAAAA,GAEP5E,EAAAA,GAAOkB,GAAOC,EAAQsW,aAEtB,MAAMe,EAAWxY,EAAAA,IAAOpE,EAAAA,EAAAA,IAAYqE,IAC9BwY,EAAW,CAAE,CAAC9Y,EAAAA,IAAS2N,GAE7BhE,EAAAA,GAAMnI,EAAQsW,cAAgBe,GAAYC,EAC1CnP,EAAAA,GAAMnI,EAAQsW,aAAa,GAAGe,GAAYC,CAE9C,MAAaH,EAAQ,GAAGxY,MAAMqB,EAAQC,gBAClC2I,EAAOpF,EAAAA,KAEXlD,EAAAA,EAAAA,IAAQP,EAAK6I,EACjB,C,0DC1De,SAAS1L,EAAOvB,GAE3B,MAAMmD,GAAUpE,EAAAA,EAAAA,IAAWiB,GAE3B,OAAgB,IAAZmD,GACO3B,EAAAA,EAAAA,IAAM,iBAEV3C,EAAAA,EAAAA,IAAM,UAAWsE,EAAS,IACrC,C,0DCRe,SAAS5B,EAAOvB,GAE3B,MAAMmF,EAAQjC,EAAAA,GAAOlD,IAErBwB,EAAAA,EAAAA,IAAM2D,EAAM,SAEKvB,IAAbuB,EAAM,KACN3D,EAAAA,EAAAA,IAAM,KAAO2D,EAAM,GAC3B,C,sFCJA,SAASyW,EAAU5b,GAMf,IAJgB6b,EAAAA,EAAAA,IAAc,EAAG7b,EAAkB8b,EAAAA,KAEnDta,EAAAA,EAAAA,IAAO0B,EAAAA,GAAOlD,IAEW,KAArBjB,EAAAA,EAAAA,IAAWiB,GAAc,CAEzB,IAAI+b,GAAchd,EAAAA,EAAAA,IAAWiB,IACzBI,EAAAA,EAAAA,IAAW2b,KAAYvd,EAAAA,KACvBud,GAASzb,EAAAA,EAAAA,IAAWyb,KAExBva,EAAAA,EAAAA,IAAM,QACNgC,EAAAA,EAAAA,IAAOuY,EACX,EACgBF,EAAAA,EAAAA,IAAc,EAAG7b,EAAkBgc,EAAAA,KAEnDxa,EAAAA,EAAAA,IAAM,KACV,CAEA,SAASya,EAAajc,GAMlB,IAJgB6b,EAAAA,EAAAA,IAAc,EAAG7b,EAAkB8b,EAAAA,KAEnDta,EAAAA,EAAAA,IAAM,IAAI0B,EAAAA,GAAOlD,MAEQ,KAArBjB,EAAAA,EAAAA,IAAWiB,GAAc,CAEzB,IAAI+b,GAAchd,EAAAA,EAAAA,IAAWiB,IACzBI,EAAAA,EAAAA,IAAW2b,KAAYvd,EAAAA,KACvBud,GAASzb,EAAAA,EAAAA,IAAWyb,KAExBva,EAAAA,EAAAA,IAAM,QACNgC,EAAAA,EAAAA,IAAOuY,EACX,EACgBF,EAAAA,EAAAA,IAAc,EAAG7b,EAAkBgc,EAAAA,KAEnDxa,EAAAA,EAAAA,IAAM,KACV,CAEe,SAASD,EAAOvB,GAE3B,IAAIsF,GAAMvG,EAAAA,EAAAA,IAAWiB,GAErB,MAAOiN,EAAAA,EAAAA,IAAK3H,KAASqD,EAAAA,IACjBiT,EAAUtW,GACVA,GAAMxG,EAAAA,EAAAA,IAAYwG,GAGtB,IAAI4U,EAAiB,EACrB,IAAIjN,EAAAA,EAAAA,IAAK3H,KAASsD,EAAAA,GAAkB,CAChCsR,EAAQ5U,EACR,GACI2W,EAAa3W,GACbA,GAAMxG,EAAAA,EAAAA,IAAYwG,UACb2H,EAAAA,EAAAA,IAAK3H,KAASsD,EAAAA,GAC3B,CAYA,IAVIqE,EAAAA,EAAAA,IAAK3H,KAASuD,EAAAA,MAEEgT,EAAAA,EAAAA,IAAc,EAAGvW,EAAiBwW,EAAAA,KAClDta,EAAAA,EAAAA,IAAM,MAAM0B,EAAAA,GAAOlD,OACH6b,EAAAA,EAAAA,IAAc,EAAGvW,EAAiB0W,EAAAA,IAElD1W,GAAMxG,EAAAA,EAAAA,IAAYwG,IAIJ,KAAd2H,EAAAA,EAAAA,IAAK3H,IAAwB,IAAV4U,EAAc,CAIjC,KAFA1Y,EAAAA,EAAAA,IAAM,OAECyL,EAAAA,EAAAA,IAAKiN,KAAWtR,EAAAA,IAAiB,CAEpC,MAAM/G,EAAOqB,EAAAA,GAAOgX,IACpB1Y,EAAAA,EAAAA,IAAM,GAAGK,QAAWA,MAEpBqY,GAAQpb,EAAAA,EAAAA,IAAYob,EACxB,CAEA,MAAOjN,EAAAA,EAAAA,IAAK3H,KAASwD,EAAAA,IAEjB8S,EAAUtW,GACVA,GAAMxG,EAAAA,EAAAA,IAAYwG,GAGV,IAARA,KAEgBuW,EAAAA,EAAAA,IAAc,EAAGvW,EAAiBwW,EAAAA,KAClDta,EAAAA,EAAAA,IAAM,MAAM0B,EAAAA,GAAOoC,QAEHuW,EAAAA,EAAAA,IAAc,EAAGvW,EAAiB0W,EAAAA,MAGtDxa,EAAAA,EAAAA,IAAM,oBAEV,CACJ,C,mECpGe,SAAS2C,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKuD,EAAAA,IACb,MAAM5B,GAAQlB,EAAAA,EAAAA,IAAcT,IAE5BU,EAAAA,EAAAA,IAAaiB,EAAmB/F,EAAKmF,MAAOd,IAC5CS,EAAAA,EAAAA,KAAaE,EAAAA,EAAAA,IAAWe,GAAQ/F,EAAKmP,MAAO9K,EAChD,C,sICGA,MAAM/F,GAAQC,EAAAA,EAAAA,IAAiBkF,EAAAA,GAAc2C,EAAAA,GAAoB,QAAS,WAE1E1H,EAAAA,EAAAA,IAAWJ,EAAO,WAAY4d,EAAAA,IAAYlc,IAEtC,MAAMsD,GAAQxE,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAWiB,IAC/BuD,GAAanD,EAAAA,EAAAA,IAAWkD,GAG9B,GAAIC,IAAelD,EAAAA,GAEf,YADAmD,EAAAA,EAAAA,KAAOjD,EAAAA,EAAAA,IAAW+C,IAGtB,GAAIC,IAAeE,EAAAA,IAAgBF,IAAe/E,EAAAA,GAE9C,YADAgF,EAAAA,EAAAA,IAAOF,GAKX,GAAIC,IAAeG,EAAAA,GAAa,CAE5B,MAAMyY,EAAcjZ,EAAAA,GAAOI,GAE3B,IAAI2J,EAAAA,EAAAA,IAAK3J,KAAW0E,EAAAA,GAAc,CAC9B,GAAoB,QAAhBmU,GAAyC,aAAhBA,EAEzB,YADA3a,EAAAA,EAAAA,IAAM,4BAGV,GAAoB,SAAhB2a,GAAyC,cAAhBA,EAEzB,YADA3a,EAAAA,EAAAA,IAAM,2BAGd,CAOA,YADA3C,EAAAA,EAAAA,IAAM,cAAeyE,EAAO,IAEhC,CAEA,MAAMK,EAAQjC,EAAAA,GAAM6B,GACpB,QAA4BK,IAAVD,QAAyCC,IAAlBD,EAAME,QAC3C,MAAM,IAAIC,MAAM,GAAGH,GAAO1B,gCAG7B0B,EAAME,QAAiBjB,YAAa5C,EAAK,KAG9CtB,EAAAA,EAAAA,IAAWJ,EAAO,UAAWyF,EAAAA,IAAUnF,KACnCC,EAAAA,EAAAA,IAAM,mBAAmBC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAWH,IAAQ,IAAI,KAGhEF,EAAAA,EAAAA,IAAWJ,EAAO,UAAW4d,EAAAA,IAAYtd,KACrCC,EAAAA,EAAAA,IAAM,aAAaC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAWH,IAAQ,IAAI,KAG1DK,EAAAA,EAAAA,GAAYX,EAAO,CAACY,EAAAA,GAAYY,EAAAA,GAAYW,EAAAA,GAAYtB,EAAAA,GAAYC,EAAAA,IACxDsB,EAAAA,GAAgB,CAAEb,cAAec,EAAAA,MAE7C1B,EAAAA,EAAAA,GAAYX,EAAO,CAACsC,EAAAA,IAAcF,EAAAA,GAAgB,CAClCb,cAAec,EAAAA,GACfZ,OAAW,CAACnB,EAAMqB,EAAGmc,EAAKjc,KACftB,EAAAA,EAAAA,IAAM,uBAAwBoB,EAAG,KAAME,EAAG,QAIrElB,EAAAA,EAAAA,GAAYX,EAAO,CAACwC,EAAAA,IAAaJ,EAAAA,GAAgB,CACjCb,cAAec,EAAAA,GACfZ,OAAW,CAACnB,EAAMqB,EAAGmc,EAAKjc,MACtBtB,EAAAA,EAAAA,IAAM,kBAAmBoB,EAAG,KAAME,EAAG,IAAI,KAI7DY,EAAAA,EAAAA,GAAYzC,EAAO,CAAC0C,EAAAA,IAAekb,EAAAA,KAEnC9a,EAAAA,EAAAA,IAAY9C,EAAO+C,EAAAA,GAAeC,EAAAA,G,0DCClC,SAAS+a,EAAsBC,EAAmBvF,GAE9C7J,QAAQC,KAAK,YAAamP,GAE1B,MAAM9K,EAhDH,SAAqBA,EAAYuF,GAMpC,MAAMwF,EAAmB,WAFzB/K,EAAQA,EAAMgL,MAAM,OAED,GAEnB,OAlDJ,SAAsBhL,GACpB,OAAOA,EAAM9F,QAAQ+Q,GAAKA,EAAEC,SAAS,aACvC,CAgDWC,CAAanL,GAAOoL,KAAKxR,IAE9B,IAAK+H,EAAG0J,EAAOC,GAAQ1R,EAAEoR,MAAM,KAEH,MAAxBM,EAAKA,EAAKha,OAAO,KACnBga,EAAOA,EAAK3N,MAAM,GAAG,IAEvB,IAKI4N,EALA5C,GAAQ0C,EAAQ,EAChBzC,GAAQ0C,EAKZ,KAHE1C,EAGEmC,EAAO,CACT,IAAIS,EAAM7J,EAAE8J,QAAQ,IAAK,GACzBF,EAAW5J,EAAEhE,MAAM,EAAG6N,GACL,SAAbD,IACFA,EAAW,YAGb,MACM/c,GADM+W,EAAGP,UAAU,sBACqB3E,MA7C7C,OA8CG5E,EAAAA,EAAAA,IAAKjN,KAAUyG,EAAAA,KACjB2T,GAAOlX,EAAAA,GAAOlD,GAAM8C,OAExB,KAAO,CACL,IAAIka,EAAM7J,EAAE8J,QAAQ,KACpBF,EAAW5J,EAAEhE,MAAM,EAAG6N,GACL,cAAbD,IACFA,EAAW,WACf,CAEA,MAAO,CAACA,EAAU5C,EAAMC,EAAI,GAElC,CAMkB8C,CAAa,EAAanC,UAAUvJ,MAAOuF,IArDtD,SAAwBvF,EAAoBuF,GAC1CvF,EAAMoL,KAAKH,GATb,SAA2BU,EAAsBpG,GAEtD,OADYA,EAAGP,UAAU,sBACe3E,MAAOsL,EAAU,GAAIA,EAAU,GALhE,IAMT,CAMyBC,CAAkBX,EAAG1F,IAC9C,CAoDkBsG,CAAe7L,EAAOuF,GAKpC,IAAIuG,EACR,yCAHsB9L,EAAMoL,KAAK,CAACxR,EAAE5F,IAAM,6BAAgCgM,EAAMhM,GAAG,OAIrE+X,KAAK,4BAGfrQ,QAAQwJ,IAAI4G,EAChB,CAcA,SACIjB,wBACAmB,iBAdJ,SAA0BzC,EAAgB0C,GAExC,MAAMC,EAAQ3C,aAAqBnE,KAAKgE,YAC1BG,EAAUF,iBAEV,IAAIlE,IAAIgH,YAAY5C,GAIlC,OAFAsB,EAAsBqB,EAAOD,GAEtBC,CACT,E,kCChHA,MAAMpK,EAAU,CAEZ5E,KAAM,GAEN6F,UAAW,EAEXqJ,YAAmB,EACnBC,kBAAmB,EACnBnK,SAAmB,EAEnBF,IAAK,CACD1E,OAAQ,EACR0F,MAAQ,IAAIjO,MAAM,GAClBmI,KAAQ,IAEZ+E,KAAM,CACF3E,OAAQ,EACR0F,MAAQ,IAAIjO,MAAM,GAClBmI,KAAQ,GACRiF,IAAQ,OAMD,SAASmK,IAmBpB,OAjBAxK,EAAQ5E,KAAO,GACf4E,EAAQsK,YAAmB,EAC3BtK,EAAQuK,kBAAmB,EAC3BvK,EAAQI,SAAmB,EAE3BJ,EAAQiB,UAAY,EAEpBjB,EAAQE,IAAI1E,OAAS,EACrBwE,EAAQE,IAAIgB,MAAMuJ,KAAK,GACvBzK,EAAQE,IAAI9E,KAAO,GAEnB4E,EAAQG,KAAK3E,OAAS,EACtBwE,EAAQG,KAAKe,MAAMuJ,KAAK,GACxBzK,EAAQG,KAAK/E,KAAO,GAEpB4E,EAAQG,KAAKE,IAAM,KAEZL,CACX,C,mEChDe,SAASnP,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKgE,EAAAA,IACb,MAAMjF,GAAU0B,EAAAA,EAAAA,IAAcT,IAE9BU,EAAAA,EAAAA,IAAa3B,EAASnD,EAAKmF,MAAOd,EACtC,C,gDCPe,SAAS9C,EAAOvB,IAC3BwB,EAAAA,EAAAA,IAAM,wBACV,C,mECDA,MAAMwc,EAAa,CACf,IAAO,KACP,GAAO,MAGI,SAAS7Z,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKoD,EAAAA,IACb,MAAMjC,EAAavF,EAAK8M,OAAOhK,OAE/B,IAAIwC,GAAST,EAAAA,EAAAA,IAAcT,IAC3BU,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAK8M,OAAO,GAAIzI,IAClCiJ,EAAAA,EAAAA,IAAclJ,GAAKhE,EAAAA,EAAAA,IAAWkF,IAE9B,IAAI,IAAIE,EAAI,EAAGA,EAAID,IAAcC,EAC7BF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAK8M,OAAOtH,GAAInB,GAGtCnB,EAAAA,GAAOkB,GAAO4Z,EAAWhe,EAAKE,GAAGsE,YAAYC,MACjD,C,0DCrBe,SAASlD,EAAOvB,IAE3BwB,EAAAA,EAAAA,IAAM,WAEN,IAAI8D,GAAMvG,EAAAA,EAAAA,IAAWiB,GAIrB,KAHAwD,EAAAA,EAAAA,IAAO8B,GACPA,GAAMxG,EAAAA,EAAAA,IAAYwG,GAEJ,IAARA,IAEF9D,EAAAA,EAAAA,IAAM,OAAOgC,EAAAA,EAAAA,IAAO8B,GACpBA,GAAMxG,EAAAA,EAAAA,IAAYwG,IAGtB9D,EAAAA,EAAAA,IAAM,QAEN,MAAM2D,EAAQjC,EAAAA,GAAOlD,GAER,OAAVmF,GACC3D,EAAAA,EAAAA,IAAM,wBAENA,EAAAA,EAAAA,IAAM,qBAAqB2D,MACnC,C,0DCtBe,SAAS5D,EAAOvB,IAE3BwB,EAAAA,EAAAA,IAAM,KAEN,IAAI8D,GAAMvG,EAAAA,EAAAA,IAAWiB,GACrB,KAAc,IAARsF,IACFzG,EAAAA,EAAAA,IAAM,GAAIyG,EAAK,KAAMA,GAAMxG,EAAAA,EAAAA,IAAYwG,GAAM,MAC7CA,GAAMxG,EAAAA,EAAAA,IAAYwG,IAGtB9D,EAAAA,EAAAA,IAAM,IACV,C,4ECTe,SAAS2C,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAK+D,EAAAA,KACbmF,EAAAA,EAAAA,IAAclJ,EAAKV,EAAAA,IAEnB,MAAMoJ,EAAS9M,EAAK8M,OACdvH,EAAauH,EAAOhK,OAE1B,GAAmB,IAAfyC,EACA,OAEJ,IAAID,GAAST,EAAAA,EAAAA,IAAcT,IAC3BU,EAAAA,EAAAA,IAAaQ,EAAKwH,EAAO,GAAIzI,GAE7B,IAAI,IAAImB,EAAI,EAAGA,EAAID,IAAcC,EAC7BF,GAAMN,EAAAA,EAAAA,IAAWM,GACjB4H,QAAQC,KAAML,EAAOtH,GAAGhB,YAAYC,QACpCK,EAAAA,EAAAA,IAAaQ,EAAKwH,EAAOtH,GAAInB,EAErC,C,iICnBO,MAAM4K,EAAqB,IAAImE,EAAAA,GAAW,GAE1C,IAAIwB,EAIJ,SAASrT,EAAOoS,GA2BvB,IAAoB/B,EAHnB,OAGmBA,EAzBL+B,EAAI/B,SA2BfgD,EAAU,iBAAiBhD,MAC3BgD,GAAU,gCAGN3F,EAAOgP,EAAAA,IAAa,EACpBhP,EAAOiP,EAAAA,IAAYtJ,EAAO9R,OA9B9BU,EAAO,GAGPoR,GAAU,+BAiBNA,CACR,CAaO,SAASe,EAAY3S,GACxB,MAAM8L,EAAS,EAAG9L,EAElB,MAAO,CACHkX,MAAO,CACHC,KAAMgE,EAAAA,GAASrP,EAASuD,EAAAA,IACxB+H,IAAM+D,EAAAA,GAASrP,EAASwD,EAAAA,KAE5B7F,IAAO,CACH0N,KAAMgE,EAAAA,GAASrP,EAAS0D,EAAAA,IACxB4H,IAAM+D,EAAAA,GAASrP,EAAS2D,EAAAA,KAGpC,CAEO,SAASoJ,EAAc9Q,GAC1BoT,EAAAA,GAAQpT,EAAMkT,EAAAA,IAAahP,EAAOgP,EAAAA,IAClCE,EAAAA,GAAQpT,EAAMmT,EAAAA,IAAatJ,EAAQ9R,OAASmM,EAAOiP,EAAAA,GACvD,CAIA,IAAI9N,EAAS,OACTgO,GAAoB,EAGxB,MAAMC,EAAsB,CACxB,GACAjO,EACAA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,GAGL,SAAShN,IAEZwR,GAAU,OAGJ3F,EAAOgP,EAAAA,IACThP,EAAOiP,EAAAA,IAAYtJ,EAAO9R,OAE1B8R,GAAUyJ,EAASD,EAE3B,CACO,SAAS9G,MACV8G,CACN,CAEO,SAAS7G,MACV6G,CACN,CAGO,SAAS5c,EAAM8c,GAClB1J,GAAU0J,CACd,CACO,SAAS9a,EAAOxD,GACH6b,EAAc,EAAG7b,EAAkB8b,EAAAA,IACnDyC,EAAAA,IAAOtR,EAAAA,EAAAA,IAAKjN,IAAQA,GACJ6b,EAAc,EAAG7b,EAAkBgc,EAAAA,GACvD,CAOO,SAASnd,KAASuG,GAErBwP,GAAUxP,EAAK,GAEf,IAAI,IAAII,EAAI,EAAGA,EAAIJ,EAAKtC,OAAQ0C,GAAG,EAAG,CAElC,MAAMxF,EAAOoF,EAAKI,GAEFqW,EAAc,EAAG7b,EAAkB8b,EAAAA,IACnDyC,EAAAA,IAAOtR,EAAAA,EAAAA,IAAKjN,IAAQA,GACJ6b,EAAc,EAAG7b,EAAkBgc,EAAAA,IAEnDpH,GAAUxP,EAAKI,EAAE,EACrB,CACJ,C,uECtIO,MAAM7C,EAAc6b,OAAO,eACrB3b,EAAc2b,OAAO,UACrB5b,EAAc4b,OAAO,cACrBrc,EAAcqc,OAAO,WACrB7R,EAAc6R,OAAO,Y,mECHnB,SAASjd,EAAOvB,GAE3B,MAAMmF,EAAQjC,EAAAA,GAAOlD,IAErBwB,EAAAA,EAAAA,IAAM2D,IACF/E,EAAAA,EAAAA,IAAWJ,KAAUK,EAAAA,KACrBmB,EAAAA,EAAAA,IAAM,IACd,C,2GCRe,SAASD,EAAOvB,GAE3B,MAAMub,GAAOxc,EAAAA,EAAAA,IAAWiB,IAExBnB,EAAAA,EAAAA,IAAM,MAAO0c,EAAM,OAAOzc,EAAAA,EAAAA,IAAYyc,GAAO,IACjD,C,uICCe,SAASpX,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKkD,EAAAA,IACb,MAAMnE,GAAU0B,EAAAA,EAAAA,IAAcT,IAE9BU,EAAAA,EAAAA,IAAa3B,EAASnD,EAAKye,QAAUpa,GAErC,IAAInE,EAAKwe,aAAa1e,EAAKE,GAAGsE,YAAYC,OAE1C,QAAwBb,IAAP1D,EAEb,MADAgN,QAAQC,KAAK,KAAMnN,EAAKE,GAAGsE,YAAYC,OACjC,IAAIX,MAAM,mBAKpB,GAFAZ,EAAAA,GAAOkB,GAAOlE,EAEH,QAAPA,EAEA,YADAoN,EAAAA,EAAAA,IAAclJ,EAAK+B,EAAAA,IAIvB,IAAI8G,EAAO/G,EAAAA,GACP+M,EAASzG,EAAAA,IAAMpM,EAAAA,EAAAA,IAAW+C,IAAUjD,GAKxC,QAHe0D,IAAXqP,IACAhG,EAAOgG,EAAOtQ,EAAAA,OAEDsK,IAAS/G,EAAAA,GAEtB,MADAgH,QAAQC,KAAKX,EAAAA,IAAMpM,EAAAA,EAAAA,IAAW+C,IAAUlB,UAClC,IAAI6B,MAAM,GAAG5D,KAAMsM,EAAAA,IAAMpM,EAAAA,EAAAA,IAAW+C,IAAUlB,8BAGxDqL,EAAAA,EAAAA,IAAclJ,EAAK6I,EACvB,C,sCCCgBpL,EACAsI,EACApK,E,0DAjBhB,QArBsC,CAElC,CAAC,MAASsD,EAAAA,IACV,CAAC,MAASgD,EAAAA,IACV,CAAC,QAASA,EAAAA,IACV,CAAC,OAAS1E,EAAAA,IACVgd,EAAS,MAAOxd,EAAAA,IAChBwd,EAAS,MAAOxd,EAAAA,KA6BJU,EA5BL,QA6BKsI,EA7BIyU,EAAAA,GA8BJ7e,EA9BenB,KAEvB4C,EAAAA,EAAAA,IAAM,iBACN,IAAI8D,GAAMxG,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAWH,IACjC,KAAc,IAAR0G,IACF9B,EAAAA,EAAAA,IAAO8B,IACP9D,EAAAA,EAAAA,IAAM,MACN8D,GAAMxG,EAAAA,EAAAA,IAAYwG,IAEtB9D,EAAAA,EAAAA,IAAM,IAAI,EAuBP,CAACK,GAAMkB,EAAAA,EAAAA,IAAgBlB,EAAMsI,EAAapK,MAjBrD,SAAS4e,EAAS9c,EAAcsI,GAE5B,MAAM0U,EAAS,KAAKhd,MAQpB,MAAO,CAACA,GANGkB,EAAAA,EAAAA,IAAgBlB,EAAMsI,GAAcvL,IAC3C,MAAMqB,GAASnB,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAWH,IAEtC,OADe4N,EAAAA,IAAMpM,EAAAA,EAAAA,IAAWH,IAAK4e,GACvBnc,SAASE,EAAAA,IAAYhE,EAAK,IAIhD,C,gDCtCe,SAAS2C,EAAOvB,IAC3BwB,EAAAA,EAAAA,IAAM,OACV,C,6ECAe,SAAS2C,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKgF,EAAAA,IAEb,MAAMjG,GAAU0B,EAAAA,EAAAA,IAAcT,GAI9B,IAHAa,EAAAA,EAAAA,GAAK9B,EAASnD,EAAK+E,KAAMV,IACXa,EAAAA,EAAAA,IAAsB/B,EAASnD,EAAK+E,WAEhCnB,IAAd5D,EAAKiN,KAAqB,CAC1B,MAAM3H,GAAMN,EAAAA,EAAAA,IAAW7B,IACvB2B,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAKiN,KAAM5I,EACjC,CAEAnB,EAAAA,GAAOkB,GAAOpE,EAAK6B,IACvB,C,gDCjBe,MAAMid,UAAuBC,EAAAA,G,0DCC7B,SAASxd,EAAOvB,IAC3BnB,EAAAA,EAAAA,IAAM,UAAUE,EAAAA,EAAAA,IAAWiB,GAAO,IACtC,C,mECDe,SAASmE,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKsC,EAAAA,IACb,MAAM4U,EAAatb,EAAKsb,KAClB/V,EAAa+V,EAAKxY,OAExB,GAAmB,IAAfyC,EACA,OAEJ,IAAID,GAAMT,EAAAA,EAAAA,IAAcT,IACxBU,EAAAA,EAAAA,IAAcQ,EAAMgW,EAAK,GAAIjX,GAC7B,IAAI,IAAImB,EAAI,EAAGA,EAAID,IAAcC,EAC7BF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAcQ,EAAMgW,EAAK9V,GAAInB,EAGrC,C,0DCjBe,SAAS9C,EAAOvB,IAE3BsX,EAAAA,EAAAA,MAEA,MAAMvR,GAAWhH,EAAAA,EAAAA,IAAWiB,GAC5B,IAAIsF,EAAMS,EACV,KAAc,IAART,IACFlC,EAAAA,EAAAA,OAAQI,EAAAA,EAAAA,IAAO8B,GACfA,GAAMxG,EAAAA,EAAAA,IAAYwG,IAGtBiS,EAAAA,EAAAA,MAE0B,IAAVxR,GAAwB,IAAT/F,IAC3BoD,EAAAA,EAAAA,KACR,C,iBChBe,WAAS+P,GAAa,C,sGCK9B,SAASrO,EAAa9B,EAAagc,EAAmB3a,GAEzD,MAAMxC,EAAOmd,EAAaxa,YAAYC,MAEhCN,EAAU8a,EAAAA,EAASpd,GAEzB,QAA6B+B,IAAZO,EAIb,MAHA+I,QAAQC,KAAK,yBAA0BtL,GACvCqL,QAAQC,KAAK,MAAM6R,EAAaE,UAAUF,EAAaG,cACvDjS,QAAQwJ,IAAKsI,GACP,IAAIlb,MAAM,oBAAoBjC,QAAWmd,EAAaE,UAAUF,EAAaG,cAGvFhb,EAAQnB,EAAIgc,EAAc3a,GACVoJ,EAAYzK,EAAIgc,EAEpC,CAIO,SAASvR,EAAYzK,EAAagc,GAErC,MAAMlQ,EAAS,EAAG9L,EAClBoP,EAAAA,GAAStD,EAASuD,EAAAA,IAAkB2M,EAAaE,OACjD9M,EAAAA,GAAStD,EAASwD,EAAAA,IAAkB0M,EAAaG,WACjD/M,EAAAA,GAAStD,EAAS0D,EAAAA,IAAkBwM,EAAaI,WACjDhN,EAAAA,GAAStD,EAAS2D,EAAAA,IAAkBuM,EAAaK,cACrD,CAEO,SAASna,EAAsBlC,EAAagc,GAE/C,MAAMlQ,EAAS,EAAG9L,EAEZuJ,EAAMyS,EAAa,GACnBvS,EAAMuS,EAAaA,EAAalc,OAAO,GAE7CsP,EAAAA,GAAStD,EAASuD,EAAAA,IAAkB9F,EAAI2S,OACxC9M,EAAAA,GAAStD,EAASwD,EAAAA,IAAkB/F,EAAI4S,WACxC/M,EAAAA,GAAStD,EAAS0D,EAAAA,IAAkB/F,EAAI2S,WACxChN,EAAAA,GAAStD,EAAS2D,EAAAA,IAAkBhG,EAAI4S,cAC5C,CAGO,SAASC,EAAqBrN,EAAcsN,EAAkBC,GAEjE,MAAMC,EAAa,EAAGxN,EAChByN,EAAa,EAAGH,EAChBI,EAAa,EAAGH,EAAqB,EAE3CpN,EAAAA,GAASqN,EAAapN,EAAAA,IAAkBD,EAAAA,GAASsN,EAAazB,EAAAA,IAC9D7L,EAAAA,GAASqN,EAAanN,EAAAA,IAAkBF,EAAAA,GAASsN,EAAaxB,EAAAA,IAE9D9L,EAAAA,GAASqN,EAAajN,EAAAA,IAAkBJ,EAAAA,GAASuN,EAAa1B,EAAAA,IAC9D7L,EAAAA,GAASqN,EAAahN,EAAAA,IAAkBL,EAAAA,GAASuN,EAAazB,EAAAA,GAClE,C,gDC1De,SAAS3c,EAAOvB,IAC3BwB,EAAAA,EAAAA,IAAM,OACV,C,uGCCO,MAAMoe,EAAa5f,GAAkBA,EAE/BW,EAAoBJ,EACpBX,EAAoBU,EAE1B,SAASC,EAAWN,EAAYmC,EAASqB,EAAAA,IAE5C,IAAIrD,EAAAA,EAAAA,IAAWH,KAAOI,EAAAA,GAClB,OAAOJ,EAEX,IAAIgN,EAAAA,EAAAA,IAAKhN,KAAOgI,EAAAA,GAIZ,OAFI7F,IAAWqB,EAAAA,KACX6J,EAAAA,EAAAA,IAAcrN,EAAGzB,EAAAA,IACdyB,EAGX,MAAM4f,EAAU3c,EAAAA,GAAOjD,GAEjBkD,GAAUpE,EAAAA,EAAAA,IAAWkB,GAE3B,GAAgB,YAAZ4f,GAAqC,aAAZA,EAAyB,CAClD,MAAM9M,GAAQ3S,EAAAA,EAAAA,IAAW+C,GACnB6P,GAAQ5S,EAAAA,EAAAA,KAAYtB,EAAAA,EAAAA,IAAYqE,IACtC,KAAQ4P,IAAU1S,EAAAA,IAAc0S,IAAUvU,EAAAA,IAClCwU,IAAU3S,EAAAA,IAAc2S,IAAUxU,EAAAA,IAGtC,OADA8O,EAAAA,EAAAA,IAAcrN,EAAGmC,GACVnC,CAEf,CACA,GAAgB,YAAZ4f,IAAyBzf,EAAAA,EAAAA,IAAW+C,KAAa9C,EAAAA,GAEjD,OADAiN,EAAAA,EAAAA,IAAcrN,EAAGmC,GACVnC,EAGX,GAAImC,IAAWqB,EAAAA,GAEX,OAAOxD,EAEX,MAAM8K,GAAMmF,EAAAA,EAAAA,MAIZ,OAHAvL,EAAAA,EAAAA,IAAQoG,EAAKtB,EAAAA,KACb+F,EAAAA,EAAAA,IAAczE,EAAK9K,GAEZ8K,CACX,CAEO,SAASzK,EAAWL,GAEvB,IAAIG,EAAAA,EAAAA,IAAWH,KAAOI,EAAAA,GAClB,OAAOJ,EAEX,IAAIgN,EAAAA,EAAAA,IAAKhN,KAAOgI,EAAAA,GAEZ,OADAqF,EAAAA,EAAAA,IAAcrN,EAAGI,EAAAA,IACVJ,EAEX,GAAkB,YAAdiD,EAAAA,GAAOjD,KAAoBG,EAAAA,EAAAA,KAAWrB,EAAAA,EAAAA,IAAWkB,MAAQzB,EAAAA,GAEzD,OADA8O,EAAAA,EAAAA,IAAcrN,EAAGI,EAAAA,IACVJ,EAGX,MAAM8K,GAAMmF,EAAAA,EAAAA,MAIZ,OAHAvL,EAAAA,EAAAA,IAAQoG,EAAKvB,EAAAA,KACbgG,EAAAA,EAAAA,IAAczE,EAAK9K,GAEZ8K,CACX,C,mECpEe,SAAS5G,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAKgD,EAAAA,IACb,MAAMjE,GAAU0B,EAAAA,EAAAA,IAAcT,IAC9BU,EAAAA,EAAAA,IAAa3B,EAASnD,EAAK0F,KAAMrB,EACrC,C,+FCFAyb,OAAOC,QAAU,IAAI3a,KACpB8H,QAAQwJ,IAAItR,EAAK,EAMlB,MAAO4a,EAAcC,SAASC,cAAgB,mBACxCC,EAAeF,SAASC,cAAc,oBACtCE,EAAeH,SAASC,cAAgC,WAExDG,EAAgBJ,SAASC,cAAc,iBACvCI,EAAgBL,SAASC,cAAc,QACvCK,EAAgBN,SAASC,cAAc,OAEvCpJ,EAAa,IAAI1R,KACnB8H,QAAQwJ,IAAI,YAAatR,EAAK,EAG5BgK,EAAS,IAAIoR,gBAAiBC,SAASrR,QACvCsR,EAAYtR,EAAOuR,IAAI,QACvBC,EAAqC,SAAzBxR,EAAOuR,IAAI,SACvB5M,EAAqC,SAAzB3E,EAAOuR,IAAI,UAEvBE,EAAqE,CAAC,EACtEC,QAAqBC,IAErBC,EAAgB,CAAC,mBAAoB,WAUrCC,QAAsBC,KAAaF,GAoCzC,SAASG,EAAYC,GAEjB,MAAM9N,GAAUwK,EAAAA,EAAAA,KAgDhBqC,EAAYkB,YAAc,GACzBrB,EAAWqB,YAAc,GAE1Bd,EAAcc,YAAc,GAC5BhB,EAAcgB,YAAc,GAC5Bf,EAAce,YAAc,GAE5BlB,EAAYmB,UAAUC,OAAO,UAAW,SAnDxCjO,EAAQsK,YAAcwD,EAAS5E,MAAM,MAAM9Q,QAAON,GAAkB,KAAbA,EAAEoW,SAAe1e,OAExE,IAAI2e,EAAoB,KAExB,KACI7U,EAAAA,EAAAA,GAASwU,EAAU9N,EAASS,IAC5B8C,EAAAA,EAAAA,GAAQvD,EAASwD,EACrB,CAAE,MAAM2F,GACJgF,EAAQhF,CACZ,CAIc,OAAVgF,GACAtB,EAAYkB,aAAeI,EAAMC,QAAU,KAC3CvB,EAAYmB,UAAUK,IAAI,SAC1BzU,QAAQuU,MAAMA,IAEdtB,EAAYmB,UAAUK,IAAI,WAG7B3B,EAAWqB,cAAeO,EAAAA,EAAAA,GAAgBtO,EAAS,MAAQ,QAC5D6M,EAAYkB,cAAeO,EAAAA,EAAAA,GAAgBtO,EAAS,OAAQ,OAE5D,MAAMK,GAAM4B,EAAAA,EAAAA,KACZ,IACCsM,EAAUvO,EAAQG,KAAK/E,KAAMiF,EAC9B,CAAE,MAAM8I,GAAKvP,QAAQC,KAAKsP,EAAI,CAC9B,IACIqF,EAAcV,EAAUzN,EAC5B,CAAE,MAAM8I,GAAKvP,QAAQC,KAAKsP,EAAI,CAC9B,IACIsF,EAAWpO,EACf,CAAE,MAAM8I,GAAKvP,QAAQC,KAAKsP,EAAI,CAKlC,CAiBA,SAASuF,EAAWtT,EAAckF,EAAY3G,GA2B1C,OAzBY2G,EAAK8B,SAECkH,KAAM5c,IAEpB,MAAMma,EAAO8F,SAASgC,cAAc,OAE9B/C,EAASe,SAASgC,cAAc,QACtC/C,EAAOmC,YAAc,GAAIrhB,EAAK4V,OAAOsE,MAAMC,QAE3C+E,EAAOgD,MAAMC,YAAY,iBAAkB,OAC3CjD,EAAOgD,MAAMC,YAAY,cAAe,QAExChI,EAAKiI,OAAOlD,GAGZ,MAAMmD,EAAOC,EAAgBtiB,EAAM0O,EAAMzB,GAOzC,OANAoV,EAAKH,MAAMC,YAAY,UAAW,gBAClChI,EAAKiI,OAAOC,GAKLlI,CAAI,GAInB,CAEA,SAASmI,EAAgBtiB,EAAW0O,EAAczB,GAE9C,MAAMsV,EAAYtC,SAASgC,cAAc,QAEzCM,EAAUC,MAAQxiB,EAClBA,EAAKyiB,aAAe,GACpBziB,EAAKyiB,WAAWhR,KAAM8Q,GAEtB,IAAI7M,EAAW1V,EAAK0V,SAAShK,QAASzL,QAAuB2D,IAAZ3D,EAAEgN,KACtByV,MAAM,CAACziB,EAAME,IAElCF,EAAEgN,GAAMiN,MAAMC,OAASha,EAAE8M,GAAMiN,MAAMC,KAC9Bla,EAAEgN,GAAMiN,MAAME,IAAMja,EAAE8M,GAAMiN,MAAME,IAGtCna,EAAEgN,GAAMiN,MAAMC,KAAOha,EAAE8M,GAAMiN,MAAMC,OAG1CwI,EAAW,IAAIpc,MAAwB,EAAlBmP,EAAS5S,OAAa,GAC3C8f,EAAS5iB,EAAKiN,GAAMiN,MACpBpL,EAAS,EAEb,IAAI,IAAItJ,EAAI,EAAGA,EAAIkQ,EAAS5S,SAAU0C,EAAG,CACrC,MAAMqd,EAAQnN,EAASlQ,GAAGyH,QACZrJ,IAAVif,IAEqB,IAArBA,EAAM3I,MAAMC,MAIhBwI,EAAS7T,KAAYgU,EAAWpU,EAAMkU,EAAQC,EAAM3I,OACpDyI,EAAS7T,KAAYwT,EAAgB5M,EAASlQ,GAAIkJ,EAAMzB,GACxD2V,EAASlN,EAASlQ,GAAGyH,GAAMR,KALvBkW,EAAS7f,QAAU,EAM3B,CAKA,OAJA6f,EAAS7T,KAAYgU,EAAWpU,EAAMkU,EAAQ5iB,EAAKiN,GAAMR,KAEzD8V,EAAUH,UAAUO,GAEbJ,CACX,CAIA,SAASO,EAAWpU,EAAcqU,EAAyCtW,EAAgB,MAEvF,IAAIyN,EAAQ6I,EACD,OAARtW,KACGyN,QAAOzN,OAAOsW,GAGpB,IAAIC,EAAUC,EAASvU,EAAMwL,GACzBgJ,EAAUD,EAASvU,EAAOjC,GAE9B,OAAOiC,EAAKS,MAAO6T,EAASE,EAChC,CAEA,SAASD,EAASvU,GAAc,KAACyL,EAAI,IAAEC,IAEnC,GAAY,IAATD,EACC,OAAOC,EAEX,IAAI9U,EAAM,EACN6d,EAAW,EACf,KAAO7d,EAAMoJ,EAAK5L,QAAQ,CACtB,GAAkB,OAAd4L,EAAKpJ,OACH6d,EACEhJ,IAASgJ,GAAW,GAClB7d,EACF,KACJ,GAEFA,CACN,CAEA,OAAOA,EAAM8U,CACjB,CAGA,SAASgJ,EAAWpjB,GAChB,MAAMuiB,EAAYtC,SAASgC,cAAc,OAMzC,GALAM,EAAUC,MAAQxiB,EAClBA,EAAKyiB,aAAe,GACpBziB,EAAKyiB,WAAWhR,KAAM8Q,GAEtBA,EAAUlB,YAAcrhB,EAAKiN,KACX,MAAdjN,EAAKmF,MAAe,CACpB,IAAIke,EAAMrjB,EAAKmF,MAEXke,OADqBzf,IAArByf,EAAInhB,aACEmhB,EAAInhB,kBACY0B,IAAjByf,EAAIphB,SACHohB,EAAIphB,cACQ2B,IAAbyf,EAAIxhB,KACHwhB,EAAIxhB,KAEJyhB,KAAKC,UAAUF,GACzBd,EAAUlB,aAAe,IAAIgC,GACjC,CACyB,OAArBrjB,EAAKwQ,cAEL+R,EAAUlB,aAAe,KAAKrhB,EAAKwQ,gBAa1C,IAAI,MAAMgT,KAASxjB,EAAK0V,SAAU,CAC3B,MAAM+N,EAAaL,EAAWI,GAC9BC,EAAWvB,MAAMC,YAAY,cAAe,QAC5CI,EAAUH,OAAQqB,EACtB,CAEH,OAAOlB,CACR,CApPkB,OAAd7B,GACAgD,EAAWhD,EAAWE,GAE1BR,EAAauD,iBAAiB,SAC1B,KACI,MAAMjV,EAAO0R,EAAajb,MAC1Bye,aAAaC,QAAQ,gBAAiBnV,GACtCyS,EAAYzS,EAAK,IAGzB0R,EAAauD,iBAAiB,WAAYG,IAEtC,GAAe,QAAZA,EAAGpV,KAAgB,CACdoV,EAAGC,iBAEH,IAAIxX,EAAM6T,EAAa4D,eACnBvX,EAAM2T,EAAa6D,aAEvB,MAAMC,EAAM9D,EAAajb,MACnBgf,EAAWD,EAAI/U,MAAM,EAAK5C,GAC1B6X,EAAWF,EAAI/U,MAAM1C,EAAKyX,EAAIphB,QAEpCsd,EAAajb,MAAQgf,EAAU,OAASC,EAExC,MAAMpH,EAAMzQ,EAAI,EAChB6T,EAAaiE,kBAAkBrH,EAAKA,EACxC,KAGuB,KAA3B8C,OAAOW,SAASrR,QAA4C,iBAA3B0Q,OAAOW,SAASrR,SACjDgR,EAAajb,MAAQye,aAAaU,QAAQ,kBAAoB,GAC9DnD,EAAYf,EAAajb,QAwN7B,IAAIof,EAAqC,KAEzC,SAASC,EAAUpiB,GAEf,GAAImiB,IAAqBniB,EACrB,OACJ,GAAyB,OAArBmiB,EAA2B,CAE3B,IAAI,MAAME,KAAY,EAA0BhC,WAC5CgC,GAAUnD,UAAUC,OAAO,aAC/BgD,EAAmB,IACvB,CAEA,MAAM/B,EAAQ,EAAgBA,MAC9B,QAAc5e,IAAV4e,EAAJ,CAGA+B,EAAmB/B,EACnB,IAAI,MAAMiC,KAAYjC,EAAMC,WACxBgC,GAAUnD,UAAUK,IAAI,YAJlB,CAKd,CA+BA,SAASI,EAAUpO,GAEf,MAAM9B,EAAQ8B,EAAI+B,SAASkH,KAAM5c,IAE7B,MAAMma,EAAO8F,SAASgC,cAAc,OAE9B/C,EAASe,SAASgC,cAAc,QACtC/C,EAAOmC,YAAc,GAAGrhB,EAAK4V,OAAOsE,MAAMC,QAE1C+E,EAAOgD,MAAMC,YAAY,iBAAkB,OAC3CjD,EAAOgD,MAAMC,YAAY,cAAe,QAExChI,EAAKiI,OAAOlD,GAEZ,MAAMmD,EAAOe,EAAWpjB,GAKxB,OAJAqiB,EAAKH,MAAMC,YAAY,UAAW,gBAClChI,EAAKiI,OAAOC,GAGLlI,CAAI,IAGlBmG,EAAWoE,mBAAoB7S,EAEhC,CAEA,SAASiQ,EAAalM,EAAgBjC,GACrC0M,EAAcqE,mBAAoB1C,EAAWpM,EAAQjC,EAAK,UAC3D,CAEA,SAASkO,EAASjN,EAAgBjB,GACjC4M,EAAUmE,mBAAoB1C,EAAWpN,EAAQjB,EAAK,UACvD,CAIA,SAAS+P,EAAWhD,EAAmBE,GAEnC,MAAMtN,GAAUwK,EAAAA,EAAAA,KAEhB,IAAI6G,EAAkB,CAACjE,GACL,YAAdA,IACAiE,EAAQ3D,GAEZ,IAAIS,EAAoB,KACpBL,EAAW,GAEXpe,GAAM,EAEV2hB,EAAO,IAAI,IAAInf,EAAI,EAAGA,EAAImf,EAAM7hB,SAAU0C,EAAG,CAEzC,MAAMof,EAAW3D,EAAY0D,EAAMnf,IAC7Bqf,EAAWhE,EAAc8D,EAAMnf,IAErC,IAAI,IAAIsf,EAAI,EAAGA,EAAIF,EAAS9hB,SAAUgiB,EAAG,GAEnC9hB,EAEF,MAAM+hB,EAAQF,EAASC,GACvBxR,EAAQsK,aAAqBmH,EAAMC,MACnC1R,EAAQuK,mBAAqBkH,EAAME,SAEnC,MAAMvW,EAAOkW,EAASE,GAEtB,GAAa,KAATpW,EAGJ,GAAIkS,EAEAQ,GAAY,QAAQpe,SADE0L,EAAK8N,MAAM,MAAMI,KAAIH,GAAK,KAAKA,MAAKc,KAAK,MACjB,mBAAmBva,aAEjE,IACIoe,EAAW1S,GACX9B,EAAAA,EAAAA,GAASwU,EAAU9N,EAASS,IAC5B8C,EAAAA,EAAAA,GAAQvD,EAASwD,EACrB,CAAE,MAAM2F,GACJgF,EAAQhF,EACR,MAAMkI,CACV,CAER,CACJ,CAEA,GAAI/D,EACA,KACIhU,EAAAA,EAAAA,GAASwU,EAAU9N,EAASS,IAC5B8C,EAAAA,EAAAA,GAAQvD,EAASwD,EACrB,CAAE,MAAM2F,GACJgF,EAAQhF,CACZ,CAGJ,GAAIgF,IAAWb,EAAQ,CAEnB,MAAMjN,GAAM4B,EAAAA,EAAAA,KACZ,IACIsM,EAAUvO,EAAQG,KAAK/E,KAAMiF,EACjC,CAAE,MAAM8I,GAAKvP,QAAQC,KAAKsP,EAAI,CAC9B,IACIqF,EAAcV,EAAUzN,EAC5B,CAAE,MAAM8I,GAAKvP,QAAQC,KAAKsP,EAAI,CAC9B,IACIsF,EAAWpO,EACf,CAAE,MAAM8I,GAAKvP,QAAQC,KAAKsP,EAAI,CAClC,CAEA,GAAGgF,EAQC,OANArB,EAAajb,MAAQmO,EAAQ5E,KAE7ByR,EAAYmB,UAAUK,IAAI,SAC1BxB,EAAYkB,YAAcI,EAAMC,aAChCxU,QAAQC,KAAKsU,GAKjBrB,EAAajb,MAAQ,GAErBgb,EAAYmB,UAAUK,IAAI,WAEzB3B,EAAWqB,aAAcO,EAAAA,EAAAA,GAAgBtO,EAAS,MAAQ,QAC3D6M,EAAYkB,aAAcO,EAAAA,EAAAA,GAAgBtO,EAAS,OAAQ,MAE/D,CAGA4R,eAAenE,IACX,MAAMD,cAA4BqE,MAAM,6BAA6BC,OACrE,OAAO5iB,OAAOqJ,YAAaiV,EAAatE,MAAM,KAAKrN,MAAM,GAAGyN,KAAIH,IAE5D,IAAI4I,EAAQ5I,EAAED,MAAM,MAChB3a,EAAOwjB,EAAM,GAAGlW,MAAM,GAEtBmW,EAAUD,EAAMlW,MAAM,GAAGzD,QAAO+Q,GAAc,MAATA,EAAE,IAA2B,IAAbA,EAAE3Z,SAAc8Z,KAAK2I,IAC1E,MAAM9I,EAAI8I,EAAE/I,MAAM,KAClB,OAAiB,IAAbC,EAAE3Z,OACW,MAAT2Z,EAAE,GACKA,EAAE,GACN+I,SAAS/I,EAAE,IAEf,CAAC+I,SAAS/I,EAAE,IAAK+I,SAAS/I,EAAE,IAAI,IAG3C,MAAO,CAAC5a,EAAMyjB,EAAQ,IAE9B,CAEAJ,eAAehE,KAAauE,GAExB,MAAMd,EAAkC,CAAC,EAEzC,IAAI,IAAInf,EAAI,EAAGA,EAAIigB,EAAM3iB,SAAU0C,EAC/Bmf,EAAMc,EAAMjgB,UAAYkgB,EAAaD,EAAMjgB,IAE/C,OAAOmf,CACX,CAEAO,eAAeQ,EAAahF,EAAmB4E,EAAUxE,GAErD,MAAMpS,cAAoByW,MAAM,qBAAqBzE,SAAiB0E,OAEtEvE,EAAcH,GAAa,GAE3B,MAAMiF,EAAQjX,EAAK8N,MAAM,KAAKrN,MAAM,GAEpC,OAAOwW,EAAM/I,KAAK,CAACgJ,EAAE7a,KAEjB,IAAMsa,EAAQO,EAAEpJ,MAAM,MACtB,MAAM3a,EAAQwjB,EAAM,GAAG7D,OACvB6D,EAAM,GAAK,KAAO3E,EAAY,IAAM7e,EAAO,MAAQkJ,EAAI,GAAK,IAAM4a,EAAM7iB,OAAS,IAGjF,IAAI+iB,EAAOP,EAFM,GAAG5E,KAAa7e,UAGpB+B,IAATiiB,IACAA,EAAOP,EAAQ,GAAG5E,QAEtB2E,EAAQ3Z,EAAO2Z,EAAOQ,GAEtB,IAAIC,EAAe,EACnB,IAAI,IAAItgB,EAAI,EAAGA,EAAI6f,EAAMviB,SAAU0C,EACR,KAApB6f,EAAM7f,GAAGgc,UACNsE,EAEV,IAAIC,EAAWV,EAAMviB,OAAS,EAAIgjB,EAE9BE,EAAa,EACjB,IAAI,IAAIxgB,EAAI,EAAGA,EAAI6f,EAAMviB,SAAU0C,EAC/BwgB,KAAgC,MAAhBX,EAAM7f,GAAG,IAO7B,OALAqb,EAAcH,GAAWjP,KAAK,CAC1BwT,SAAUe,EACVhB,MAAUe,IAGXA,IAAaC,EACL,GAEJX,EAAM9H,KAAK,MAAQ,IAAI,GAEtC,CAEA,SAAS7R,EAAO2Z,EAAiBra,GAqB7B,OAnBAA,IAAS,GAEIqa,EAAMzI,KAAK,CAACxR,EAAGL,KACxBA,GAAY,OASLnH,IARQoH,EAAKib,MAAOC,GACb,MAANA,GAEAnb,IAAQmb,MAER3f,MAAM4f,QAAQD,IAAMA,EAAE,IAAMnb,GAAOmb,EAAE,IAAMnb,KAMxC,KAAKK,IACTA,IAIf,CA1OAkV,EAAWqD,iBAAiB,aAAaG,IACrCU,EAAUV,EAAG1hB,OAAM,IAEvBie,EAAcsD,iBAAiB,aAAaG,IACxCU,EAAUV,EAAG1hB,OAAM,IAEvBme,EAAUoD,iBAAiB,aAAaG,IACpCU,EAAUV,EAAG1hB,OAAM,I,iECpVvB,Q,OAAmB+J,GAEnBC,EAAQ,KACRA,EAAQ,MACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,MACRA,EAAQ,MACRA,EAAQ,MACRA,EAAQ,MAER,MAiBaC,EAjBuB,CACnC,OACA,WACA,iBACA,qBACA,MACA,QACA,QACA,OACA,MACA,OACA,YACA,cACA,cACA,YACA,a,mECvBc,SAASlI,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAK4C,EAAAA,IACb,MAAMzB,EAAavF,EAAKylB,MAAM3iB,OAE9B,IAAIwC,GAAST,EAAAA,EAAAA,IAAcT,IAC3BU,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAKylB,MAAM,GAAIphB,GAEjC,IAAI,IAAImB,EAAI,EAAGA,EAAID,IAAcC,EAC7BF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAKylB,MAAMjgB,GAAInB,GAGrCnB,EAAAA,GAAOkB,GAAOpE,EAAKomB,MACvB,C,kGCTe,SAASjiB,EAAQC,EAAcpE,EAAWqE,GAErD,IAAInE,EAAKwe,aAAa1e,EAAKE,GAAGsE,YAAYC,OAC1C,QAAwBb,IAAP1D,EAEb,MADAgN,QAAQC,KAAK,KAAMnN,EAAKE,GAAGsE,YAAYC,OACjC,IAAIX,MAAM,oBAGpBa,EAAAA,EAAAA,IAAQP,EAAKqD,EAAAA,IAEb,MAAO4e,GAAUxhB,EAAAA,EAAAA,IAAcT,GACzBkiB,GAAWthB,EAAAA,EAAAA,IAAWqhB,IAC5BvhB,EAAAA,EAAAA,IAAauhB,EAAUrmB,EAAKgS,KAAO3N,IACnCS,EAAAA,EAAAA,IAAawhB,EAAUtmB,EAAKiR,MAAO5M,GAEnC,MAAM0O,GAAQ3S,EAAAA,EAAAA,IAAWimB,GACnBrT,GAAQ5S,EAAAA,EAAAA,IAAWkmB,GAEzB,IAAIrZ,EAAO/G,EAAAA,GACP+M,EAASzG,EAAAA,GAAMuG,GAAO7S,GAM1B,QAJe0D,IAAXqP,IACAhG,EAAOgG,EAAOtQ,EAAAA,IAAaqQ,IAG3B/F,IAAS/G,EAAAA,GAA2B,CAOpC,GANAhG,EAASqmB,kBAAkBrmB,GAE3B+S,EAASzG,EAAAA,GAAMwG,GAAO9S,QACP0D,IAAXqP,IACAhG,EAASgG,EAAOtQ,EAAAA,IAAaoQ,IAEhB9F,IAAS/G,EAAAA,GACtB,MAAM,IAAIpC,MAAM,GAAG0I,EAAAA,GAAMwG,GAAOhR,WAAWC,YAAY/B,KAAMsM,EAAAA,GAAMuG,GAAO/Q,WAAWC,8BAIzFuN,EAAAA,EAAAA,IAAcpL,EAAKkiB,IACnB3W,EAAAA,EAAAA,IAAY0W,EAAS,IACrB1W,EAAAA,EAAAA,IAAW2W,EAAUD,EACzB,CAEAnjB,EAAAA,GAAOkB,GAAOlE,GAEdoN,EAAAA,EAAAA,IAAclJ,EAAK6I,EACvB,C,gDClDe,SAAS1L,EAAOvB,GAC3BwmB,iBAAiBxmB,EAAMkD,EAAAA,GAAOlD,GAClC,C,0DCHe,SAASuB,EAAOvB,GAE3B,OAAOnB,EAAAA,EAAAA,IAAM,gBAAgBE,EAAAA,EAAAA,IAAWiB,GAAO,IACnD,C,0DCHe,SAASuB,EAAOvB,IAC3BwB,EAAAA,EAAAA,IAAM0B,EAAAA,GAAOlD,GACjB,C,mECEe,SAASuB,EAAOvB,GAE3B,IAAIE,EAAKumB,gBAAgBvjB,EAAAA,GAAOlD,IAEhC,MAAMmD,GAAUpE,EAAAA,EAAAA,IAAWiB,GAE3B,IAAIiN,EAAO/G,EAAAA,GACP+M,EAASzG,EAAAA,IAAMpM,EAAAA,EAAAA,IAAW+C,IAAUjD,GAExC,MAAMwmB,GAAK5nB,EAAAA,EAAAA,IAAYqE,GAMvB,QAJeS,IAAXqP,IACAhG,EAAOgG,EAAOtQ,EAAAA,KAAavC,EAAAA,EAAAA,IAAWsmB,KAGzBzZ,IAAS/G,EAAAA,GACtB,MAAM,IAAIpC,MAAM,GAAG0I,EAAAA,IAAMpM,EAAAA,EAAAA,IAAW+C,IAAUlB,YAAY/B,KAAMsM,EAAAA,IAAMpM,EAAAA,EAAAA,IAAWsmB,IAAKzkB,6BAc1FgR,EAAOrQ,EAAAA,IAAY5C,EACvB,C,yDClCe,SAASmE,EAAQC,EAAcpE,EAAW2mB,IACrDhiB,EAAAA,EAAAA,IAAQP,EAAK0C,EAAAA,GACjB,C,kCCNA,SAAiB,C,sCCGjBvI,E,OAAAA,IAAiB0H,EAAAA,GAAuBC,EAAAA,GAA2B,qBAAsB,G,+CCD1E,MAAM6Y,UAAqB/Y,EAAAA,G,mECI3B,SAAS7B,EAAQC,EAAcpE,EAAWqE,GAErD,IAAInE,EAAKwe,aAAa1e,EAAKE,GAAGsE,YAAYC,OAC1C,QAAwBb,IAAP1D,EAEb,MADAgN,QAAQC,KAAK,KAAMnN,EAAKE,GAAGsE,YAAYC,OACjC,IAAIX,MAAM,mBAEpBZ,EAAAA,GAAOkB,GAAOlE,GAEdyE,EAAAA,EAAAA,IAAQP,EAAKwD,EAAAA,IACb,MAAMzE,GAAU0B,EAAAA,EAAAA,IAAcT,IAE9BU,EAAAA,EAAAA,IAAa3B,EAAqBnD,EAAKoC,OAAQiC,IAC/CS,EAAAA,EAAAA,KAAaE,EAAAA,EAAAA,IAAW7B,GAAUnD,EAAKmF,MAAQd,IAE/CiJ,EAAAA,EAAAA,IAAclJ,GAAKhE,EAAAA,EAAAA,IAAW+C,GAClC,C,kECjBe,SAASgB,EAAQC,EAAcpE,EAAW2mB,GAErD,MAAMxhB,EAAQnF,EAAKmF,MACbyhB,SAAezhB,EACrB,IAAI0hB,EAEJ,GAAa,WAAVD,EAAoB,CAEnB,GAAc,YAAVA,EAAsB,CAEtB,MAAM3Z,EAAO9H,EAAQkD,EAAAA,GAAeC,EAAAA,GAKpC,OAHA3D,EAAAA,EAAAA,IAAcP,EAAK6I,QACnBK,EAAAA,EAAAA,IAAclJ,EAAK+B,EAAAA,GAGvB,CAEA,GAAc,WAAVygB,EAOA,OALAjiB,EAAAA,EAAAA,IAAcP,EAAK4D,EAAAA,KACnBsF,EAAAA,EAAAA,IAAclJ,EAAKV,EAAAA,SAEnBR,EAAAA,GAAOkB,GAAO,IAAIe,KAK1B,KAAO,CAGH,GAFA0hB,EAAQ1hB,EAAMnD,UAAUE,aAEV,UAAV2kB,EAOA,OALAliB,EAAAA,EAAAA,IAAcP,EAAK8D,EAAAA,KACnBoF,EAAAA,EAAAA,IAAclJ,EAAKX,EAAAA,SAEnBP,EAAAA,GAAOkB,GAAOe,EAAMA,MAAM2hB,YAK9B,GAAc,aAAVD,EAKA,OAHAliB,EAAAA,EAAAA,IAAcP,EAAKmE,EAAAA,SACnB+E,EAAAA,EAAAA,IAAclJ,EAAKF,EAAAA,GAI3B,CAEA,GAA2B,QAAV2iB,GAA6B,WAAVD,EAChC,MAAM,IAAI9iB,MAAM,gBAAgB8iB,KAASC,MAE7CliB,EAAAA,EAAAA,IAAcP,EAAK6D,EAAAA,IAEL,QAAV4e,IACAvZ,EAAAA,EAAAA,IAAclJ,EAAK/D,EAAAA,IACnB6C,EAAAA,GAAOkB,GAAOe,EAAMA,MAAM2hB,cAE1BxZ,EAAAA,EAAAA,IAAclJ,EAAK5F,EAAAA,IACnB0E,EAAAA,GAAOkB,GAAOe,EAAM2hB,WAE5B,C,mEC/De,SAAS3iB,EAAQC,EAAcpE,EAAWqE,GAErD,IAAIiB,GAAMT,EAAAA,EAAAA,IAAcT,IAExBU,EAAAA,EAAAA,IAAaQ,EAAOtF,EAAK0F,KAAQrB,GACjCiB,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAK+E,KAAQV,IAC/BiJ,EAAAA,EAAAA,IAAclJ,GAAKhE,EAAAA,EAAAA,IAAWkF,IAC9BA,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAK4F,OAAQvB,IAE/BM,EAAAA,EAAAA,IAAQP,EAAMiF,EAAAA,GAClB,C,kECVA,MAAM/K,GAAQC,EAAAA,EAAAA,IAAiBoD,EAAAA,GAAaA,EAAAA,GAAa,OAAQ,KAEjEjD,EAAAA,EAAAA,IAAWJ,EAAO,YAAY,IAAMqD,EAAAA,KAAc/C,KAClCC,EAAAA,EAAAA,IAAM,KAAKC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAWH,IAAQ,gBAAgB,G,4ECF3D,SAASuF,EAAQC,EAAcpE,EAAWqE,GAErD,MAAM0iB,EAAO/mB,EAAKkK,IACZ8c,EAASD,EAAKjkB,OACdoH,EAAM,IAAI3D,MAAMygB,GACtB,IAAI,IAAIxhB,EAAI,EAAGA,EAAIwhB,IAAUxhB,EAAG,CAE5B,MAAMtF,EAAKwe,aAAaqI,EAAKvhB,GAAGhB,YAAYC,OAC5C,QAAwBb,IAAP1D,EACb,MAAM,IAAI4D,MAAM,GAAGijB,EAAKvhB,GAAGhB,YAAYC,0BAE3CyF,EAAI1E,GAAKtF,CACb,CAEAgD,EAAAA,GAAOkB,GAAO8F,GAEdvF,EAAAA,EAAAA,IAAQP,EAAKmD,EAAAA,KACb+F,EAAAA,EAAAA,IAAclJ,EAAK+B,EAAAA,IAEnB,IAAIb,GAAMT,EAAAA,EAAAA,IAAcT,IACxBU,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAKgS,KAAM3N,GAE7B,MAAMkB,EAAavF,EAAKinB,YAAYnkB,OACpC,IAAI,IAAI0C,EAAI,EAAIA,EAAID,IAAcC,EAC9BF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAKinB,YAAYzhB,GAAInB,EAE/C,C,mEC9Be,SAASF,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAK2C,EAAAA,IACb,MAAM5D,GAAU0B,EAAAA,EAAAA,IAAcT,IAC9BU,EAAAA,EAAAA,IAAa3B,EAASnD,EAAKknB,IAAK7iB,EAEpC,C,kCCVA,SACI8iB,UAAYC,IACR,GAAIA,GAAK,MAAQA,GAAK,KAAM,CAExB,IAAI9I,EAAM8I,EAAEC,gBACZ,MAAMC,EAAWhJ,EAAIxb,OAAO,EAG5B,MAFqB,MAAlBwb,EAAIgJ,IAAuC,MAAlBhJ,EAAIgJ,KAC5BhJ,EAAMA,EAAInP,MAAM,EAAEmY,EAAS,GAAK,IAAMhJ,EAAInP,MAAMmY,EAAS,IACtDhJ,CACX,CAEA,IAAIA,EAAM8I,EAAEN,WAGZ,OAFMxI,EAAI5B,SAAS,OACf4B,GAAO,MACJA,CAAG,E,gGCLlB,SAASiJ,EAAYnlB,EAA6B6P,GAC9C,IAAI,IAAIuV,KAAOvV,EACJuV,KAAOplB,IACVA,EAAOolB,GAAOvV,EAAIuV,GAC9B,CAEe,SAASrjB,EAAQC,EAAcpE,EAAWqE,GAErD,MAAMojB,EAAkBC,QAAQ,CAAC,GAE3BlS,EAASkS,QAAQ,CACnBzlB,SAAWjC,EAAK6B,KAChBG,UAAWN,EAAAA,GAAMC,EAAAA,IACjBe,SAAUilB,gBAAe,IAAMF,IAAkB7oB,KAE7CC,EAAAA,EAAAA,IAAM,QAAQE,EAAAA,EAAAA,IAAWH,GAAO,MAEhC4C,EAAAA,EAAAA,IAAM,IAAI,MAIZomB,EAAalmB,EAAAA,GAAM+lB,GACnBI,EAAanmB,EAAAA,GAAM8T,GAEzBqS,EAAU7lB,UAAY4lB,EAEtBvjB,EAAQC,cAActE,EAAK6B,MAAQ2T,EACnCnR,EAAUA,EAAQoW,mBAAmBjF,IAErC7Q,EAAAA,EAAAA,IAAQP,EAAMkF,EAAAA,IACd,MAAM/D,EAAavF,EAAK8nB,MAAMhlB,OAC9B,IAAIwC,GAAST,EAAAA,EAAAA,IAAcT,IAE3Ba,EAAAA,EAAAA,GAAKK,EAAKtF,EAAK+E,KAAMV,IACPa,EAAAA,EAAAA,IAAsBI,EAAKtF,EAAK+E,MAE9C,IAAI,IAAIS,EAAI,EAAGA,EAAID,IAAeC,EAAE,CAChCF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAK8nB,MAAMtiB,GAAInB,GACjC,MAAM0jB,GAAU3nB,EAAAA,EAAAA,IAAWkF,GAG3BiiB,EAAYK,EAAYlmB,EAAAA,GAAMqmB,IAC9BR,EAAYM,EAAYnmB,EAAAA,GAAMqmB,EAAQ,GAC1C,CAEA7kB,EAAAA,GAAOkB,GAAOpE,EAAK6B,IACvB,C,sFCjDe,SAASsC,EAAQC,EAAcpE,EAAWqE,GAGrD,IAAImM,EAActM,EAAAA,GAElB,QAAkBN,IAAf5D,EAAKmF,MAAqB,CACzB,MAAMhC,GAAU0B,EAAAA,EAAAA,IAAcT,IAC9BU,EAAAA,EAAAA,IAAa3B,EAASnD,EAAKmF,MAAOd,GAClCmM,GAAcpQ,EAAAA,EAAAA,IAAW+C,EAC7B,EAEAwB,EAAAA,EAAAA,IAAQP,EAAKyC,EAAAA,KACbyG,EAAAA,EAAAA,IAAclJ,EAAKoM,GAEnB,MAAMwX,EAAO,KAAO3jB,EAAQsW,cAA4BjY,cAC9BkB,IAAtBokB,EAAKrlB,EAAAA,MACLqlB,EAAKrlB,EAAAA,IAAe,IAAM6N,EAClC,C,4JCpBO,SAASoO,EAASqJ,GACrB,OAAO/jB,EAAAA,EACX,CAEO,SAAS5C,EAAc2mB,GAC1B,OAAI5nB,EAAAA,IAAc4nB,GAAKA,GAAKxkB,EAAAA,GACjB0C,EAAAA,GACJD,EAAAA,EACX,CAEO,SAASxF,EAAeunB,GAC3B,OAAI5nB,EAAAA,IAAc4nB,GAAKA,GAAKxkB,EAAAA,GACjBA,EAAAA,GACJyC,EAAAA,EACX,CAEO,SAASrF,EAAgBonB,GAC5B,OAAIA,IAAMzpB,EAAAA,GACCA,EAAAA,GACJ0H,EAAAA,EACX,CAQO,SAASxG,EAAWuoB,GACvB,OAAIA,IAAM5nB,EAAAA,IAAc4nB,IAAMzpB,EAAAA,GACnB6B,EAAAA,GACJ6F,EAAAA,EACX,CACO,SAASlC,EAAYikB,GACxB,OAAIA,IAAM5nB,EAAAA,GACCA,EAAAA,GACJ6F,EAAAA,EACX,CAEO,SAAS0R,EAAaqQ,GACzB,OAAIA,IAAMvkB,EAAAA,GACCyC,EAAAA,GACJD,EAAAA,EACX,CACO,SAAS2R,EAAYoQ,GACxB,OAAIA,IAAMvkB,EAAAA,GACCA,EAAAA,GACJwC,EAAAA,EACX,CACO,SAAS4R,EAAWmQ,GACvB,OAAIA,IAAM5nB,EAAAA,IAAc4nB,IAAMzpB,EAAAA,GACnBkF,EAAAA,GACJwC,EAAAA,EACX,CAEO,SAASgW,EAAU/I,GAAa,OAAO1P,EAAAA,EAAc,CACrD,SAAStC,EAAUgS,GAAa,OAAO9S,EAAAA,EAAc,CACrD,SAAS1B,EAAUwU,GAAa,OAAO3U,EAAAA,EAAc,CACrD,SAASuF,EAAUoP,GAAa,OAAOzP,EAAAA,EAAc,C,oHC1C5D,SAASkJ,EAASxI,EAAcpE,EAAWqE,GAEvC,MAAM2O,GAAU5S,EAAAA,EAAAA,IAAWgE,GACrBjB,GAAU0B,EAAAA,EAAAA,IAAcT,GAGxB8jB,EAAU1b,EAAAA,GAAMwG,GAChBpU,EAAUspB,EAAMxlB,SAChBslB,EAAUppB,EAAK+N,EAAAA,KAGrBtI,EAAUA,EAAQmW,iBAAiB,QAC3BG,aAAe3H,GAGvBmV,EAAAA,EAAAA,IAAahlB,EAASnD,EAAMkoB,EAAO7jB,GAQnC2jB,EAAKpb,cAAWhJ,EAEhBhF,EAAK+D,EAAAA,SAAeiB,EAEpB,MAAM6X,EAAazb,EAAKooB,SAASplB,GACjC,QAAmBY,IAAf6X,EAA2B,CAC3B,MAAM4M,EAAkBhkB,EAAQC,cAAcmX,GAE9C7c,EAAK+D,EAAAA,IAAe,IAAM0lB,CAC9B,CAGA,MAAMC,EAActoB,EAAK+E,KAAK/E,EAAK+E,KAAKjC,OAAO,GAAG0B,YAAYC,MAC9D,GAAkB,WAAd6jB,GAAwC,UAAdA,EAEV,CACZ,MAAMC,EAAY,CACd/jB,YAAa,CACTC,MAAO,UAEPya,OAAQlf,EAAKof,WACjBA,WAAYpf,EAAKof,WACbD,WAAYnf,EAAKqf,eACrBA,eAAgBrf,EAAKqf,gBAEzBrf,EAAK+E,KAAK0M,KAAM8W,EACpB,CAKJ,MAAMxjB,GAAOC,EAAAA,EAAAA,IAAW7B,IACxB8B,EAAAA,EAAAA,GAAKF,EAAM/E,EAAK+E,KAAMV,IACRa,EAAAA,EAAAA,IAAsBH,EAAM/E,EAAK+E,KACnD,CAEe,SAASZ,EAAQC,EAAcpE,EAAWqE,GAErD,MAAMwL,EAAsB,CACxB5N,SAAU,WACVS,SAAU,CACNT,SAAU,WACV,CAACU,EAAAA,IAAc,KACXiK,EAASxI,EAAKpE,EAAMqE,GACbwL,EAAUnN,SAASC,EAAAA,OAE9B,CAACC,EAAAA,IAAakN,EAAAA,EACd,CAACnD,EAAAA,IAAY,CAET6b,WAAiB,IAAIjiB,MAAMvG,EAAKoF,KAAKA,KAAKtC,OAAO9C,EAAKoF,KAAKqjB,YAAY3lB,QACvE4lB,SAAiB,CAAC,EAClBC,aAAkB,EAClBC,YAAkB,EAClBC,QAAiB,EACjBjc,cAKNmD,EAAUvD,EAAAA,GAAM1J,OACtB0J,EAAAA,GAAMuD,GAAWF,EAEjBxL,EAAQC,cAActE,EAAK6B,MAAQkO,EAEnC,IAAI9C,EAAOzE,EAAAA,GACX,GAAqB,UAAjBnE,EAAQ4I,KAAkB,CAC1BA,EAAOxE,EAAAA,GACP,MAAMnK,EAAQkO,EAAAA,GAAMnI,EAAQsW,cAC5BzX,EAAAA,GAAOkB,GAAO,CAACpE,EAAK6B,KAAMvD,EAAM2D,UAEhC,MAAM6mB,EAAc9oB,EAAK6B,KAEzB2K,EAAAA,GAAMnI,EAAQsW,cAAgBmO,GAAejZ,EAE7C,MAAMkZ,EAAMlZ,EAAUnN,SAASiK,EAAAA,IAAYC,SAC3CiD,EAAUnN,SAASiK,EAAAA,IAAYC,SAAW,IAAIxH,KAC1C2jB,KAAO3jB,GAGP4jB,EAAatmB,SAAW,IAAImN,EAAUnN,UACtCsmB,EAAatmB,SAASiK,EAAAA,IAAa,IAAIkD,EAAUnN,SAASiK,EAAAA,KAG1DO,QAAQC,KAAM6b,EAAatmB,SAASiK,EAAAA,IAAU,EAGlD,MAAMsc,EAAiBvB,QAAQ7X,GACzBmZ,EAAexc,EAAAA,GAAMyc,GAE3Bzc,EAAAA,GAAMnI,EAAQsW,aAAa,GAAGmO,GAAeE,CAEjD,MACI9lB,EAAAA,GAAOkB,GAAOpE,EAAK6B,MAGvB8C,EAAAA,EAAAA,IAAcP,EAAK6I,IACnBK,EAAAA,EAAAA,IAAclJ,EAAK2L,EACvB,C,6QC5IO,MAAMqD,EAAe8V,aAIfjL,EAAY,EACZC,EAAY,EACZpC,EAAY,EACZE,EAAY,EACZ3J,EAAgByJ,EAAWmC,EAC3B3L,EAAgBwJ,EAAWoC,EAC3B1L,EAAgBwJ,EAAWiC,EAC3BxL,EAAgBuJ,EAAWkC,EAE3B9L,EAAsB,IAAIgB,EAAW,MACrC+K,EAAsB,IAAI/K,EAAW,MAGrClQ,EAAS,IAAIqD,MAE1B,IAAI4iB,EAAmB,EAWhB,SAAStkB,EAAc7E,GAE1B,OAAO8R,EAAU,EAAmBsX,EAAeC,GAAuBF,GAC9E,CACO,SAASnkB,EAAWhF,GAEvB,OAAO8R,EAAU,EAAmBsX,EAAeE,GAAwBH,GAC/E,CAEO,SAASjZ,IACZ,OAAOiZ,GACX,CAEe,SAASpX,IACnB7O,EAAeJ,OAAS,EACzBqmB,EAAmB,EAEnBI,EAAOC,OAAQ,GAEfD,EAAOC,OAAQC,EACnB,CAEO,MAAMC,EAA6B,EAC7BC,EAA6B,EAC7BN,EAA6B,EAC7BC,EAA6B,EAC7BM,EAA6B,EAC7BR,EAA6B,EAEpCK,EA1DY,EA0DEL,EAzDI,KA2DlBG,EAAS,IAAIM,YAAYJ,EAAa,CAACK,cAAeL,IAE/C3X,EAAW,IAAIsB,EAAWmW,GAEhC,SAAStc,EAAKjN,GACjB,OAAO8R,EAAS,EAAkBsX,EAAeM,EACrD,CACO,SAAS5qB,EAAYkB,GACxB,OAAO8R,EAAS,EAAmBsX,EAAeE,EACtD,CACO,SAASvqB,EAAWgrB,GACvB,OAAOjY,EAAS,EAAqBsX,EAAeC,EACxD,CACO,SAASjpB,EAAWJ,GACvB,OAAO8R,EAAS,EAAmBsX,EAAeQ,EACtD,CACO,SAAS1e,EAAalL,GACzB,OAAO8R,EAAS,EAAmBsX,EAAeO,EACtD,CAEO,SAASna,EAAcua,EAAiB5kB,GAC3C,OAAO2M,EAAS,EAAqBsX,EAAeC,GAAuBlkB,CAC/E,CACO,SAASwK,EAAW3P,EAAegqB,GACtC,OAAOlY,EAAS,EAAmBsX,EAAeE,GAAwBU,CAC9E,CACO,SAASrlB,EAAQ3E,EAAemF,GACnC2M,EAAS,EAAmBsX,EAAeM,GAAmBvkB,CAClE,CACO,SAASmI,EAActN,EAAemF,GACzC2M,EAAS,EAAmBsX,EAAeQ,GAAuBzkB,CACtE,CACO,SAASgG,EAAgBnL,EAAemF,GAC3C2M,EAAS,EAAmBsX,EAAeO,GAA8BxkB,CAC7E,C,kCC7FA,MAAM8kB,EAAS,CACX,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBAGJ,SAASC,EAAQC,EAAcC,GAC3B,OAAOD,EAAKE,QAAQ,GAAGC,SAAS,GAAKF,CACzC,CAEA,SAASG,EAAMtqB,EAAWE,GAEtB,MAAMqqB,EAAIvqB,EAAEE,EAEZ,OAAU,IAANqqB,EACO,UAEPA,EAAI,EACG,IAAMA,EAAEH,QAAQ,GAAGC,SAAS,GAEhC,OAAS,IAAIrqB,EAAEE,EAAI,MAAMkqB,QAAQ,GAAGC,SAAS,GAAK,GAC7D,CAEO,SAAS1I,EAAgBtO,EAAkBrT,EAAiBE,GAE/D,MAAMoU,EAAYjB,EAAQiB,UACpBkW,EAAInX,EAAQrT,GACZyqB,EAAIpX,EAAQnT,GAElB,IAAIwqB,EAAS,GAOb,MAAMC,EAActX,EAAQsK,YAEtBiN,EAAcD,EADAtX,EAAQuK,kBAI5B8M,GAAU,oBAAoBE,KAAWD,OAAcC,EAAQD,EAAS,KAAKP,QAAQ,SACrFM,GAAU,oBAAoBpW,aAAqBjB,EAAQI,mBAC3DiX,GAAU,oBAAsBJ,EAAME,EAAE/b,KAAK5L,OAAQ4nB,EAAEhc,KAAK5L,QAAU,KACtE6nB,GAAU,KAEV,MAAMG,EAAQ,IAAUvW,EAAY,IAEpC,IAAI,IAAI/O,EAAI,EAAGA,EAAIykB,EAAOnnB,SAAU0C,EAEhCmlB,GAAUV,EAAOzkB,GACH0kB,EAAQO,EAAEjW,MAAMhP,GAAKslB,EAAO,KAC5B,KACAP,EAAME,EAAEjW,MAAMhP,GAAIklB,EAAElW,MAAMhP,IAC1B,KACA0kB,EAAQO,EAAEjW,MAAMhP,GAAI,MACpB,KAKlB,OAAOmlB,CACX,C,mECjEe,SAASxmB,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAK6E,EAAAA,IAEb,MAAM9F,GAAU0B,EAAAA,EAAAA,IAAcT,IAC9BU,EAAAA,EAAAA,IAAc3B,EAASnD,EAAKmF,MAAOd,IACnCiJ,EAAAA,EAAAA,IAAclJ,GAAKhE,EAAAA,EAAAA,IAAW+C,IAE9BD,EAAAA,GAAOkB,GAAOpE,EAAK+qB,GACvB,C,mECTe,SAAS5mB,EAAQC,EAAcpE,EAAWqE,IAErDM,EAAAA,EAAAA,IAAQP,EAAK4C,EAAAA,IACb,MAAMzB,EAAavF,EAAKylB,MAAM3iB,OAC9B,IAAIwC,GAAeT,EAAAA,EAAAA,IAAcT,IACjCU,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAKylB,MAAM,GAAIphB,GAEjC,IAAI,IAAImB,EAAI,EAAGA,EAAID,IAAcC,EAC7BF,GAAMN,EAAAA,EAAAA,IAAWM,IACjBR,EAAAA,EAAAA,IAAaQ,EAAKtF,EAAKylB,MAAMjgB,GAAInB,GAGrCnB,EAAAA,GAAOkB,GAAOpE,EAAKomB,MACvB,C,gGCVe,SAASjiB,IAGxB,CAIO,SAASgkB,EAAa/jB,EAAcpE,EAAW6P,EAAqBxL,GAEvE,MAAM2jB,EAAOnY,EAAUnN,SAASiK,EAAAA,IAG1Bqe,EAAQhrB,EAAKoF,KACb6lB,OAA8BrnB,IAAjBonB,EAAME,OACnBC,OAA8BvnB,IAAjBonB,EAAMI,MACnB1C,EAAaV,EAAKU,SAClBF,EAAaR,EAAKQ,WAElB6C,EAAaL,EAAMvC,YAAY3lB,OAClBkoB,EAAM5lB,KAAKtC,SACVmoB,EACDD,EAAMM,WAAWxoB,SAChBqoB,EAIpB,IAAI7lB,EACAS,GAHJpB,EAAAA,EAAAA,IAAQP,EAAKsE,EAAAA,IAIb,IAAI6iB,EAAYvrB,IACZurB,EAAWvmB,EAAAA,GACJe,GAAQlB,EAAAA,EAAAA,IAAcT,IAGjC,MAAMonB,EAAexrB,EAAKoF,KAAKqmB,SACzBC,EAAUV,EAAMvC,YAChBzL,EAAUgO,EAAM5lB,KAGtB,IAAIumB,EAAUH,EAAa1oB,OAAS4oB,EAAQ5oB,OAASka,EAAIla,OACzD,IAAI,IAAI0C,EAAI,EAAGA,EAAIkmB,EAAQ5oB,SAAU0C,EACjCF,EAAMimB,EAASjmB,GACfsmB,EAAYtmB,EAAKomB,EAAQlmB,GAAIgmB,EAAahmB,EAAImmB,GAAUhjB,EAAAA,GAAqBtE,GAC7EA,EAAQC,cAAconB,EAAQlmB,GAAGulB,MAAO3qB,EAAAA,EAAAA,IAAWkF,GAIvD,IAAIwJ,EAAS4c,EAAQ5oB,OACnB6oB,GAAWD,EAAQ5oB,OACrB,IAAI,IAAI0C,EAAI,EAAGA,EAAIwX,EAAIla,SAAU0C,EAC7BF,EAAMimB,EAASjmB,GACfsmB,EAAYtmB,EAAK0X,EAAIxX,GAAIgmB,EAAahmB,EAAImmB,GAAU/iB,EAAAA,GAAiBvE,GACrEmkB,EAAW1Z,KAAYkO,EAAIxX,GAAGulB,IAMlC,GAHA/C,EAAKY,WAAa9Z,EAGdmc,EACAjD,EAAKW,YAAckD,OAAOC,kBAE1BxmB,EAAMimB,EAASjmB,GACfsmB,EAAYtmB,EAAK0lB,EAAME,YAAQtnB,EAAWiF,EAAAA,GAAqBxE,KAC7DyK,MACC,CAEHkZ,EAAKW,YAAc7Z,EAEnB,MAAMid,EAAkBvhB,KAAKwhB,IAAIR,EAAa1oB,OAAQka,EAAIla,QACpDmpB,EAAaT,EAAa1oB,OAASka,EAAIla,QAAUuoB,IAAevc,GAElEid,EAAkB,GAAyB,IAApBA,GAAyBE,KAChDjE,EAAKW,aAAeoD,EAC5B,CAEA,IAAIG,EAAYlE,EAAKW,YACjBuD,IAAYL,OAAOC,oBACnBI,EAAUlE,EAAKY,YACnB,IAAI,IAAIpjB,EAAIkmB,EAAQ5oB,OAAQ0C,EAAI0mB,IAAW1mB,EACvCkjB,EAASF,EAAWhjB,IAAMA,EAE9B,MAAMiH,EAAMub,EAAKY,WAAasD,EAC9B,IAAI,IAAI1mB,EAAI,EAAGA,EAAIiH,IAAOjH,EACtBkjB,EAASF,EAAWhjB,KAAO,EAK/B,MAAM2mB,EAAcnB,EAAMM,WACpBc,EAAcpB,EAAMoB,YAE1BpE,EAAKa,OAASb,EAAKY,aAAesD,GAA6B,IAAlBC,EAAOrpB,OAEpD6oB,EAAUS,EAAYtpB,OAASqpB,EAAOrpB,OACtC,IAAI,IAAI0C,EAAI,EAAGA,EAAI2mB,EAAOrpB,SAAU0C,EAEhCF,EAAMimB,EAASjmB,GACfsmB,EAAYtmB,EAAK6mB,EAAO3mB,GAAI4mB,EAAY5mB,GAAIsD,EAAAA,GAAoBzE,GAChEqkB,EAASyD,EAAO3mB,GAAGulB,MAAQ,IACzBjc,EAuBF,GAnBAqc,IAEA7lB,EAAMimB,EAASjmB,GACfsmB,EAAYtmB,EAAK0lB,EAAMI,WAAOxnB,EAAWmF,EAAAA,GAAoB1E,GAC7D2jB,EAAKqE,OAASrB,EAAMI,MAAML,MACxBjc,GAWN5L,EAAAA,GAAOkB,GAAOyL,EAGS,IAAfwb,GAEA/L,EAAAA,EAAAA,IAAoBlb,EAAK2B,EAAOT,OAE7B,CAEH,MAAM8U,EAAMpa,EAAKmf,WAAa,EAAInf,EAAK6B,KAAKiB,OAAS,EAE/CwpB,EAAY,EAAGloB,EACrBgO,EAAAA,GAASka,EAAYja,EAAAA,IAAkBD,EAAAA,GAASka,EAAY9Z,EAAAA,IAAkBxS,EAAKkf,OACnF9M,EAAAA,GAASka,EAAYha,EAAAA,IAAkBF,EAAAA,GAASka,EAAY7Z,EAAAA,IAAkB2H,CAClF,CAER,CACO,SAASwR,EAAYxnB,EAAcpE,EAAW+b,EAAa9O,EAAiB5I,GAE/E,MAAMxC,EAAO7B,EAAK+qB,IAElB,IAAIva,EAActK,EAAAA,GAElB,MAAMuV,EAAazb,EAAKyb,YAAYzY,GAMpC,QALmBY,IAAf6X,IAEAjL,EADa9O,EAAAA,GAAM2C,EAAQC,cAAcmX,IACtB/Y,SAASC,EAAAA,YAGjBiB,IAAXmY,EAAuB,CAEvB,MAAM5Y,GAAU0B,EAAAA,EAAAA,IAAcT,IAC9BU,EAAAA,EAAAA,IAAa3B,EAAS4Y,EAAQ1X,GAE1BmM,IAAgBtK,EAAAA,KAChBsK,GAAcpQ,EAAAA,EAAAA,IAAW+C,GACtBqN,IAAgBhS,EAAAA,KACfgS,EAAcnQ,EAAAA,IAE1B,EAEAsE,EAAAA,EAAAA,IAAQP,EAAK6I,IACbK,EAAAA,EAAAA,IAAclJ,EAAKoM,GAEnBtN,EAAAA,GAAOkB,GAAOvC,EACdwC,EAAQC,cAAczC,GAAQ2O,GAEf/C,EAAAA,EAAAA,IAAYrJ,EAAKpE,EACpC,CAjKAmE,EAAQooB,aAAe,W,uFCGR,SAASpoB,EAAQC,EAAcpE,EAAWqE,GAErD,IAAImM,EAAuB,EACvBrL,EAAQnF,EAAKgD,GAEjB,GAAc,SAAVmC,EACAA,EAAQ,YACP,GAAGA,KAASoV,EAAAA,EAAW,CACxB/J,EAAc+J,EAAAA,EAASpV,GAEvB,MAAMqnB,EAAMhgB,EAAAA,EAAMgE,GAAarO,EAAAA,SACnByB,IAAR4oB,IACArnB,EAAQqnB,EAEhB,MAAWrnB,KAASd,EAAQC,gBACxBkM,EAAcnM,EAAQC,cAAca,KAaxCR,EAAAA,EAAAA,IAAQP,EAAKqC,EAAAA,KACb6G,EAAAA,EAAAA,IAAclJ,EAAKoM,GAEnBtN,EAAAA,GAAOkB,GAAOe,CAClB,C,yGCjCO,SAASlG,EAAYmD,EACA8H,EACAC,GACA,cACItK,EAAgB+f,EAAAA,GAAS,aACzBjgB,EAAgBigB,EAAAA,GAAS,OACzB7f,EAAgBS,GACE,CAAC,GAE/C,MAAMisB,EAAS9sB,IAAiBigB,EAAAA,IAAa7f,IAAWS,EAExD,IAAI,IAAIgF,EAAI,EAAGA,EAAI0E,EAAIpH,SAAU0C,EAAG,CAEhC,IAAItF,EAAKgK,EAAI1E,GAab,IAXA9G,EAAAA,EAAAA,IAAW0D,EAAQgI,EAAAA,GAAclK,GAAKiK,GAAcvL,IAChD,MAAMuU,GAAIpU,EAAAA,EAAAA,IAAWH,GACfqB,GAAInB,EAAAA,EAAAA,IAAYqU,GAAUhT,GAAIrB,EAAAA,EAAAA,IAAYmB,GAChD,OAAOF,EAAOnB,EAAMe,EAAaM,GAAIC,EAAIL,EAAcM,GAAAA,KAE3DzB,EAAAA,EAAAA,IAAW0D,EAAQgI,EAAAA,GAAclK,EAAGgT,EAAAA,IAAiB/I,GAAcvL,IAC/D,MAAMuU,GAAIpU,EAAAA,EAAAA,IAAWH,GACfqB,GAAInB,EAAAA,EAAAA,IAAYqU,GAAUhT,GAAIrB,EAAAA,EAAAA,IAAYmB,GAChD,OAAOF,EAAOnB,EAAMiB,EAAcM,GAAID,EAAIP,EAAaM,GAAAA,IAGvDwsB,EAAS,CAET,MAAMC,EAAWxsB,IAAOf,EAAAA,GAClBwtB,EAAWzsB,IAAOd,EAAAA,IAGxBV,EAAAA,EAAAA,IAAW0D,EAAQ,MAAMlC,MAAQiK,GAAcnK,IAE3C,MAAMmT,GAAIpU,EAAAA,EAAAA,IAAWiB,GACfC,GAAInB,EAAAA,EAAAA,IAAYqU,GAChBhT,GAAIrB,EAAAA,EAAAA,IAAYmB,GAEhBkc,EAAcjZ,EAAAA,GAAO/C,GAI3B,OAAIusB,GAA4B,MAAhBvQ,GAEZwQ,GAA4B,MAAhBxQ,GADLlb,EAAAA,EAAAA,GAAUjB,EAAM,EAAGC,GAKvBO,EAAUR,EAAMC,EAAGC,EAAI+a,EAAAA,GAAYpb,EAAcM,GAAAA,GAEhE,CACJ,CACJ,CAGO,SAASK,EAAUR,EAAeC,EAAYC,EAAWC,GAE5D,MAAQysB,EAAO1R,EAAAA,GAAgBhb,GACzB+K,GAASC,EAAAA,EAAAA,IAAalL,IAE5BmL,EAAAA,EAAAA,IAAgBlL,EAAG2sB,IACnBzhB,EAAAA,EAAAA,IAAgBhL,EAAGysB,GAEnB,IAAIxhB,EAAI,GAAQ7I,EAAI,GAEhB0I,EAAS2hB,IACTxhB,EAAI,IAAK7I,EAAI,MAGjB1D,EAAAA,EAAAA,IAAMuM,EAAGnL,EAAGoL,EAAAA,GAAUnL,GAAKC,EAAGoC,EAClC,C,gDCjFe,SAAShB,EAAO4R,IAC3B3R,EAAAA,EAAAA,IAAM,QACV,C,iGCyCA,SAASqrB,EAAQ7sB,EAAesF,EAAcH,EAAiB2nB,GAE3D,MAAM5sB,EAAQiF,EAAM2nB,GACd9a,EAAQ1M,EAER2L,EADN3L,GAAMxG,EAAAA,EAAAA,IAAYwG,GAGlB,GAAW,OAAPpF,GAAsB,WAAPA,EAAiB,CAChC,IAAI6sB,EAAM,MACC,WAAP7sB,IACA6sB,EAAM,OAEV,MAAMha,GAAQ3S,EAAAA,EAAAA,IAAW4R,GACnBgB,GAAQ5S,EAAAA,EAAAA,IAAW6Q,GAEzB,IAAI7F,EAAI4G,EACJzP,EAAI0O,EAEJ8B,IAAUvU,EAAAA,IAAgBwU,IAAU3S,EAAAA,GACpC+K,GAAI9K,EAAAA,EAAAA,IAAW8K,GACV4H,IAAUxU,EAAAA,IAAgBuU,IAAU1S,EAAAA,KACzCkC,GAAIjC,EAAAA,EAAAA,IAAWiC,KAGnB/B,EAAAA,EAAAA,GAAUR,EAAMoL,EAAG,EAAG7I,EAC1B,MA5DJ,SAA6BvC,EAAegS,EAAc9R,EAAY+Q,GAGlE,MAAM+B,GAAQ5S,EAAAA,EAAAA,IAAW6Q,GACnB8B,GAAQ3S,EAAAA,EAAAA,IAAW4R,GAEzB,IAAI/E,EAAO/G,EAAAA,GAEP+M,EAASzG,EAAAA,GAAMuG,GAAO7S,GAI1B,QAHe0D,IAAXqP,IACAhG,EAAOgG,EAAOtQ,EAAAA,IAAaqQ,IAE3B/F,IAAS/G,EAAAA,KAEThG,EAASqmB,kBAAkBrmB,GAC3B+S,EAASzG,EAAAA,GAAMwG,GAAO9S,QACP0D,IAAXqP,IACAhG,EAASgG,EAAOtQ,EAAAA,IAAaoQ,IAE7B9F,IAAS/G,EAAAA,IAajB+M,EAAOrQ,EAAAA,IAAa5C,OApBpB,CAQQ,GAAwB,WAAPE,GAA0B,WAAPA,EAChC,MAAM,IAAI4D,MAAM,GAAGiP,KAAS7S,KAAM8S,uBAKtCxS,EAAAA,EAAAA,GAAUR,EAAMgS,EAAM,EAAGf,EAIjC,CAGJ,CA4BQ+b,CAAoBhtB,EAAMgS,EAAM9R,EAAI+Q,GAExC,OAAOnS,EAAAA,EAAAA,IAAYwG,EACvB,CAEe,SAAS/D,EAAOvB,GAE3B,MAAMmF,EAAQjC,EAAAA,GAAOlD,GAErB,IAAIsF,GAASvG,EAAAA,EAAAA,IAAWiB,GAExBsF,EAAMunB,EAAQ7sB,EAAMsF,EAAKH,EAAO,GAEhC,IAAI2nB,EAAS,EACb,KAAe,IAARxnB,IACH9D,EAAAA,EAAAA,IAAM,QACN0L,QAAQC,KAAK2f,EAAM,EAAG3nB,GACtBG,EAAMunB,EAAQ7sB,EAAMsF,EAAKH,IAAS2nB,EAE1C,C,oECvFe,SAASvrB,EAAOvB,GAE3B,MAAM+K,EAAO7H,EAAAA,GAAOlD,GAEd+E,GAAahG,EAAAA,EAAAA,IAAWiB,GAE9B,IAAIsF,GAAMxG,EAAAA,EAAAA,IAAYiG,GAClB0H,GAAMnM,EAAAA,EAAAA,IAAWgF,IAErB9D,EAAAA,EAAAA,IAAM,WAAWuJ,QAEjBzF,GAAMxG,EAAAA,EAAAA,IAAYwG,GACN,IAARA,IAEA9B,EAAAA,EAAAA,IAAOiJ,GACPA,GAAMnM,EAAAA,EAAAA,IAAWgF,KAEjB9D,EAAAA,EAAAA,IAAM,OAGV3C,EAAAA,EAAAA,IAAM,KAAKkM,OAAU0B,EAAK,KAAK1B,SAE/BzF,GAAMxG,EAAAA,EAAAA,IAAYwG,GACN,IAARA,GACA9B,EAAAA,EAAAA,KAAQlD,EAAAA,EAAAA,IAAWgF,KAEnB9D,EAAAA,EAAAA,IAAM,OAGV3C,EAAAA,EAAAA,IAAM,KAAMkG,EAAM,IACtB,C,4EC7Be,SAASxD,EAAOvB,IAE3BwB,EAAAA,EAAAA,IAAM,KAEN,IAAI8D,GAASvG,EAAAA,EAAAA,IAAWiB,GACxB,KAAe,IAARsF,GAAW,CAEd,IAAIlF,EAAAA,EAAAA,IAAWkF,KAAS5B,EAAAA,IAGNmY,EAAAA,EAAAA,IAAsC,EAAvB,EAA2BC,EAAAA,KACxDtY,EAAAA,EAAAA,IAAON,EAAAA,GAAOoC,KACAuW,EAAAA,EAAAA,IAAsC,EAAvB,IAA6BG,EAAAA,QACvD,KAAI/O,EAAAA,EAAAA,IAAK3H,KAAS8C,EAAAA,GAGrB,MAAM,IAAItE,MAAM,gBAFhBN,EAAAA,EAAAA,IAAO8B,EAGX,CAEAA,GAAMxG,EAAAA,EAAAA,IAAYwG,EACtB,EAEA9D,EAAAA,EAAAA,IAAM,IACV,C,0DCzBe,SAASD,EAAOvB,GAE3B,MAAMmD,GAAUpE,EAAAA,EAAAA,IAAWiB,IAE3BnB,EAAAA,EAAAA,IAAM,GAAIsE,EAAS,KAAKrE,EAAAA,EAAAA,IAAYqE,GAAU,IAClD,C,mECJe,SAAS5B,EAAOvB,GAE3B,MAAMmD,GAAUpE,EAAAA,EAAAA,IAAWiB,GAEZwM,EAAAA,IAAMpM,EAAAA,EAAAA,IAAW+C,IAAWD,EAAAA,GAAOlD,IAC3C4C,EAAAA,IAAa5C,EACxB,C,0DCPe,SAASuB,EAAOvB,IAC3BwB,EAAAA,EAAAA,IAAM0B,EAAAA,GAAOlD,GACjB,C","sources":["webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/list.js","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/list.js","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/utils/generate/index.ts","webpack://sbrython/./src/utils/generate/AST.ts","webpack://sbrython/./src/utils/generate/SBrython.ts","webpack://sbrython/./src/utils/generate/Brython.ts","webpack://sbrython/./src/utils/print/astnode2tree.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/utils/execute/index.ts","webpack://sbrython/./src/utils/execute/SBrython.ts","webpack://sbrython/./src/utils/execute/Brython.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/pages/Editor/index.html","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/utils/results.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/pages/Editor/index.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/utils/reports/index.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts"],"sourcesContent":["import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__DEBUG__) set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(id, cur.body);\n    }\n}","export default class Py_object {\n\n}","export const TYPEID_None               = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_NotImplemented     = 2;\nexport const TYPEID_NotImplementedType = 3;\nexport const TYPEID_int                = 4;\nexport const TYPEID_jsint              = 5;\nexport const TYPEID_float              = 6;\nexport const TYPEID_bool               = 7;\nexport const TYPEID_str                = 8;\nexport const TYPEID_type               = 9;\nexport const TYPEID_type_int_          =10;\nexport const TYPEID_type_jsint_        =11;\nexport const TYPEID_type_float_        =12;\nexport const TYPEID_type_str_          =13;\nexport const TYPEID_type_bool_         =14;\n\nconst TYPES = new Array(15);\nfor(let i = 0; i < 15; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\n\nexport default [];","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/attr\").default;\nLIST[18 ] = require(\"./op/brackets\").default;\nLIST[19 ] = require(\"./op/assign_aug\").default;\nLIST[20 ] = require(\"./op/assign_init\").default;\nLIST[21 ] = require(\"./op/assign_attr\").default;\nLIST[22 ] = require(\"./op/assign\").default;\nLIST[23 ] = require(\"./lit/str\").default;\nLIST[24 ] = require(\"./lit/int\").default;\nLIST[25 ] = require(\"./lit/float\").default;\nLIST[26 ] = require(\"./lit/fstring\").default;\nLIST[27 ] = require(\"./lit/fstring_fval\").default;\nLIST[28 ] = require(\"./lit/true\").default;\nLIST[29 ] = require(\"./lit/false\").default;\nLIST[30 ] = require(\"./lit/none\").default;\nLIST[31 ] = require(\"./def/fct\").default;\nLIST[32 ] = require(\"./def/meth\").default;\nLIST[33 ] = require(\"./def/args\").default;\nLIST[34 ] = require(\"./def/arg_posonly\").default;\nLIST[35 ] = require(\"./def/arg_pos\").default;\nLIST[36 ] = require(\"./def/arg_varargs\").default;\nLIST[37 ] = require(\"./def/arg_kwonly\").default;\nLIST[38 ] = require(\"./def/arg_kwargs\").default;\nLIST[39 ] = require(\"./call/index\").default;\nLIST[40 ] = require(\"./call/arg_kw\").default;\nLIST[41 ] = require(\"./ctrl/while\").default;\nLIST[42 ] = require(\"./ctrl/tryblock\").default;\nLIST[43 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[44 ] = require(\"./ctrl/ternary\").default;\nLIST[45 ] = require(\"./ctrl/if\").default;\nLIST[46 ] = require(\"./ctrl/elif\").default;\nLIST[47 ] = require(\"./ctrl/else\").default;\nLIST[48 ] = require(\"./ctrl/for_range\").default;\nLIST[49 ] = require(\"./ctrl/for\").default;\nLIST[50 ] = require(\"./classdef\").default;\nLIST[51 ] = require(\"./body\").default;\nLIST[52 ] = require(\"./2bigint\").default;\nLIST[53 ] = require(\"./2number\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n];\nexport const id2name = _id2name;\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import Types, { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_CALL_ARG_KW, AST_DEF_ARG_POS, AST_OP_OP } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ID, OP_OFF_REVERSE, opid2opmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_COMMA = 44;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL)\n            return true;\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n\n    if(__DEBUG__ && code.charCodeAt(offset+end) === CHAR_NL) {\n        ++CURSOR[0];\n        CURSOR[1] = offset + end + 1;\n    }\n\n    return code.slice(offset, offset += end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => setType(id, AST_KEY_RETURN),\n    \"assert\": (id) => {\n        setType(id, AST_KEY_ASSERT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        setFirstChild(id, readExpr() );\n        ++offset; // this is a \\n\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __name__: \"function\",\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return SType_fct.__call__[RETURN_TYPE]();\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID; // 15 for now...\n        Types[STypeID] = SType_fct;\n\n        setResultType(id, STypeID);\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        setSibling(args, readBody() );\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    let curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    CURRENT_INDENTATION = 0;\n    if(__DEBUG__) CURSOR[1] = offset;\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readExpr() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readExpr() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken() {\n    //TODO: known symbol 2 versions...\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE ) { // consume str\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== CHAR_QUOTE);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n       \n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n\n        let astnode_type = AST_LIT_INT;\n        let result_type  = TYPEID_int;\n\n        if( curChar === CHAR_DOT ) {\n\n            astnode_type = AST_LIT_FLOAT;\n            result_type  = TYPEID_float;\n        \n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n        } else if( offset - beg <= 9 ) { // opti\n            result_type = TYPEID_jsint\n        }\n\n\n              setType(node, astnode_type);\n        setResultType(node, result_type);\n        \n        VALUES[node] = code.slice(beg, offset);\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n            //TODO: get type from context\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                //TODO: get left from context...\n                setResultType(cur, 15 as TYPE_ID); // h4ck\n                VALUES[cur] = \"foo\"; // h4ck\n\n                ++offset; // (\n                consumeSpaces();\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    let next;\n\n                    //TODO: requires op refactor...\n                    if( curChar > CHAR_DIGIT_9 ) { // we assume kw args\n\n                        // h4ck (requires context...)\n                        const name = nextSymbol();\n                        consumeSpaces();\n                        ++offset;\n                        consumeSpaces();\n\n                        next = createASTNode();\n                        setType(next, AST_CALL_ARG_KW);\n                        VALUES[next] = name;\n                        setFirstChild(next, readExpr());\n                    } else {\n                        next = readExpr();\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop      = [createASTNode(), value, op, 0] as OP_INFO;\n    let lop_prio = pyop_priorities[op];\n\n    value = right;\n\n    let rop: OP_INFO;\n    let rop_prio;\n\n    const stack: OP_INFO[] = [];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // priority\n        if( rop_prio > lop_prio ) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0];\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n            stack.length = 0;\n\n            rop   = [createASTNode(), lop[0], op, 0];\n            lop   = rop;\n        }\n\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    value = createCallOpNode(...lop)\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return value;\n}\n\nexport function py2ast(_code: string, filename: string): AST {\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    CURSOR[0] = 0;\n    CURSOR[1] = 0;\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readExpr() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readExpr() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        op  += OP_OFF_REVERSE;\n        pyop_name = opid2opmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined)\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType)\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import { Results } from \"../results\";\nimport buildAST from \"./AST\";\nimport generateBrython from \"./Brython\";\nimport generateSBrython from \"./SBrython\";\n\nexport default function generate(code: string, results: Results, use_parser: boolean) {\n\n    results.bry.offset  = 0;\n    results.sbry.offset = 0;\n\n    results.code = code;\n\n    const offset = results.bry.offset;\n    results.bry.offset += 2;\n    results.sbry.offset+= 2;\n\n    ++results.nb_files;\n\n    const ast = buildAST(code, results, use_parser);\n    generateSBrython(ast      , results.sbry);\n    generateBrython (ast, code, results.bry);\n\n    // PY2JS\n    results. bry.times[offset+1] = results. bry.times[offset+2] + results. bry.times[offset+3] + results. bry.times[offset+4];\n    results.sbry.times[offset+1] = results.sbry.times[offset+2] + results.sbry.times[offset+3] + results.sbry.times[offset+4];\n\n    // Total runtime.\n    results. bry.times[offset] = results. bry.times[offset+1];\n    results.sbry.times[offset] = results.sbry.times[offset+1];\n    // a little h4cky\n}","import { py2ast } from \"@SBrython/sbry/py2ast_fast\";\nimport { Results } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function buildAST(code: string, results: Results, use_parser: boolean) {\n\n    const _ast: {bry: any, sbry:any} = {\n         bry: null,\n        sbry: null\n    }\n\n    const beg = performance.now();\n\n    const parser = new $B.Parser(code, \"_\", 'file');\n    _ast.bry = $B._PyPegen.run_parser(parser);\n\n    const t0 = performance.now();\n\n    // tokens count\n    const tokens = $B.tokenizer(code, '_');\n    results.nb_tokens += tokens.length;\n\n    console.warn(tokens);\n\n    results.bry .times[results.bry .offset++] += t0 - beg;\n\n    if( ! use_parser ) {\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    } else {\n\n        const beg = performance.now();\n        _ast.sbry = py2ast(code, \"_\");\n        const t0 = performance.now();\n\n        results.sbry.times[results.sbry.offset++] += t0 - beg;\n    }\n\n\n    return _ast;\n}","import {py2ast, convert_ast} from \"@SBrython/sbry/py2ast\";\nimport {ast2js} from \"@SBrython/sbry/ast2js\";\nimport {SBrython, _sb_, _r_} from \"@SBrython/runtime\";\n\n// declare all builtin types...\n//import '@SBrython/sbry/structs/STypeBuiltin';\n\n// ^ TODO: move out...\n\nimport { SubResults } from \"../results\";\n\nexport default function generateSBrython(_ast: any, results: SubResults) {\n\n    if( _ast.sbry === null) {\n\n        const __ast = _ast.bry;\n        const beg = performance.now();\n\n        const filename = \"_\";\n\n        const ast = {\n            nodes: convert_ast(__ast),\n            filename\n        }\n\n        const t0 = performance.now();\n\n        const jscode = ast2js(ast);\n\n        const t1 = performance.now();\n\n        results.code  = jscode;\n        results.ast   = ast;\n\n        //results.times[results.offset++] += t1 - beg; // total\n        results.times[results.offset++] += t0 - beg;\n        results.times[results.offset++] += t1 - t0;\n\n        return jscode;\n    }\n\n    const ast = _ast.sbry;\n    const beg = performance.now();\n    const t0  = performance.now();\n\n    const jscode = ast2js(ast);\n\n    const t1 = performance.now();\n\n    results.code  = jscode;\n    results.ast   = ast;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;   \n\n    return jscode;\n}","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\n// jscode = $B.pythonToJS(code);\n\nexport default function generateBrython(_ast: any, src:string, results: SubResults) {\n\n    const ast = _ast.bry;\n\n    const beg = performance.now();\n\n    const filename = \"_\";\n    const future = $B.future_features(ast, filename)\n\n    //times[1] += performance.now();\n\n    var symtable = $B._PySymtable_Build(ast, filename, future)\n\n    const t0 = performance.now();\n\n    let imported:any;\n    const jscode  = $B.js_from_root({ast,\n                                  symtable,\n                                  filename,\n                                  src,\n                                  imported}).js\n\n    const t1 = performance.now();\n    \n    results.code = jscode;\n\n    //results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n\n    return jscode;\n}\n\n// try-catch to get errors...","import { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { buildJSCode } from \"@SBrython/sbry/ast2js/utils\";\nimport { buildPyCode } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"@SBrython/sbry/ast2js\";\nimport { id2name as id2typename } from \"@SBrython/sbry/types\";\n\ntype CodePos = {\n    line: number,\n    col : number\n}\n\ntype CodeRange = {\n    start: CodePos,\n    end  : CodePos\n}\n\nexport type NODE = {\n    type    : string,\n    result_type :string,\n    value       : any,\n    jscode  : CodeRange,\n    pycode  : CodeRange,\n    children: NODE[];\n}\n\nexport default function astnode2tree(id: NODE_ID = 0): NODE {\n\n    const typeID = resultType(id);\n    const result_type = id2typename[typeID];\n\n    const children = [];\n\n    let cur = firstChild(id);\n    while(cur !== 0) {\n        children.push( astnode2tree(cur) );\n        cur = nextSibling(cur);\n    }\n\n    return {\n        type       : id2name[type(id)], // TODO convert\n        result_type,\n        value      : VALUES[id],\n        jscode  : buildJSCode(id),\n        pycode  : buildPyCode(id),\n        children\n    };\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { Results } from \"../results\";\nimport executeBrython from \"./Brython\";\nimport executeSBrython from \"./SBrython\";\n\nexport default function execute(results: Results, sbry_print: (...args: any[]) => void) {\n\n    const offset = results.bry.offset;\n\n    executeSBrython(results.sbry, sbry_print);\n     executeBrython(results.bry );\n\n    // a little hackie\n    results. bry.times[0] += results. bry.times[offset];\n    results.sbry.times[0] += results.sbry.times[offset];\n}","import { SBrython } from \"@SBrython/runtime\";\nimport { SubResults } from \"../results\";\n\nexport default function executeSBrython(results: SubResults, print: (...args: any[]) => void) {\n\n    console.warn(results.code);\n\n    const beg = performance.now();\n\n    const sb = new SBrython();\n    sb.print = print;\n    const fct = sb.buildModule(results.code, {filename: \"_\"} as any);\n\n    const t0 = performance.now();\n\n    fct(sb);\n\n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}\n\n/*\n\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\n    console.warn(\"Assertion failed\");\n\n    const stack = new Error().stack;\n\n    const stackline = parse_stack(stack, sb)[0];\n    const node = stackline2astnode(stackline, sb);\n\n    output.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n\n*/","import { SubResults } from \"../results\";\n\ndeclare const $B: any;\n\nexport default function executeBrython(results: SubResults) {\n\n    const beg = performance.now();\n\n    const fct = new Function(results.code);\n\n    const t0 = performance.now();\n    \n    $B.imported[\"_\"] = {};\n    fct();\n    \n    const t1 = performance.now();\n\n    results.times[results.offset++] += t1 - beg; // total\n    results.times[results.offset++] += t0 - beg;\n    results.times[results.offset++] += t1 - t0;\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","export default __webpack_public_path__ + \"Editor/index.html\";","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    w_str(\"var \");\n\n    let rchild    = firstChild(node);\n\n    let cur = nextSibling(rchild);\n\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","// @ts-nocheck\n\nimport dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, TYPE_ID, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, TYPE_ID> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, TYPE_ID>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","export type OP_ID = number; // can't brand it as I will do operations on it...\n\n// have reverse\nexport const OP_BIT_OR     =  0 as const; // prio 5\nexport const OP_BIT_XOR    =  1 as const; // prio 6\nexport const OP_BIT_AND    =  2 as const; // prio 7\n\nexport const OP_BIT_LSHIFT =  3 as const; // prio 8\nexport const OP_BIT_RSHIFT =  4 as const; // prio 8\n\nexport const OP_BIN_ADD    =  5 as const; // prio 9\nexport const OP_BIN_SUB    =  6 as const; // prio 9\n\nexport const OP_BIN_MUL    =  7 as const; // prio 10\nexport const OP_BIN_DIV    =  8 as const; // prio 10\nexport const OP_BIN_FDIV   =  9 as const; // prio 10\nexport const OP_BIN_MOD    = 10 as const; // prio 10\n\nexport const OP_BIN_POW    = 11 as const; // prio 13\n\n// special reverse (~= self)\nexport const OP_CMP_EQ     = 12 as const; // prio 4 \nexport const OP_CMP_NEQ    = 13 as const; // prio 4 \nexport const OP_CMP_GT     = 14 as const; // prio 4 \nexport const OP_CMP_GE     = 15 as const; // prio 4 \nexport const OP_CMP_LT     = 16 as const; // prio 4 \nexport const OP_CMP_LE     = 17 as const; // prio 4 \n\n// can't be inverted\n\nexport const OP_UNR_PLUS   = 18 as const; // prio 11\nexport const OP_UNR_MINUS  = 19 as const; // prio 12\nexport const OP_BIT_NOT    = 20 as const; // prio 12\n\nexport const OP_CMP_IN     = 21 as const; // prio 4 // __contains__\nexport const OP_CMP_NOT_IN = 22 as const; // prio 4 // not(__contains__)\n\n// can't be override...\nexport const OP_CMP_IS     = 23 as const; // prio 4\nexport const OP_CMP_IS_NOT = 24 as const; // prio 4\n\nexport const OP_BOOL_OR    = 25 as const; // prio 1 \nexport const OP_BOOL_AND   = 26 as const; // prio 2\nexport const OP_BOOL_NOT   = 27 as const; // prio 3\n\nexport const OP_OFF_REVERSE = 28;\nexport const OP_OOF_IEQ     = 28+12;\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;\n\n// https://www.w3schools.com/python/python_operators.asp\n// the higher the more priority\nexport const pyop_priorities = [\n    5, // OP_BIT_OR\n    6, // OP_BIT_XOR\n    7, // OP_BIT_AND\n\n    8, // OP_BIT_LSHIFT\n    9, // OP_BIT_RSHIFT\n\n    9, // OP_BIN_ADD\n    9, // OP_BIN_SUB\n\n    10, // OP_BIN_MUL\n    10, // OP_BIN_DIV\n    10, // OP_BIN_FDIV\n    10, // OP_BIN_MOD\n\n    13, // OP_BIN_POW\n\n    4, // OP_CMP_EQ\n    4, // OP_CMP_NEQ\n    4, // OP_CMP_GT\n    4, // OP_CMP_GE\n    4, // OP_CMP_LT\n    4, // OP_CMP_LE\n\n    11, // OP_UNR_PLUS\n    12, // OP_UNR_MINUS\n    13, // OP_BIT_NOT\n\n    4, // OP_CMP_IN\n    4, // OP_CMP_NOT_IN\n\n    4, // OP_CMP_IS\n    4, // OP_CMP_IS_NOT\n\n    1, // OP_BOOL_OR\n    2, // OP_BOOL_AND\n    3, // OP_BOOL_NOT\n]\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n    5, // OP_BIT_OR\n    6, // OP_BIT_XOR\n    7, // OP_BIT_AND\n\n    10, // OP_BIT_LSHIFT\n    10, // OP_BIT_RSHIFT\n\n    11, // OP_BIN_ADD\n    11, // OP_BIN_SUB\n\n    12, // OP_BIN_MUL\n    12, // OP_BIN_DIV\n    12, // OP_BIN_FDIV\n    12, // OP_BIN_MOD\n\n    13, // OP_BIN_POW\n\n    8, // OP_CMP_EQ\n    8, // OP_CMP_NEQ\n    9, // OP_CMP_GT\n    9, // OP_CMP_GE\n    9, // OP_CMP_LT\n    9, // OP_CMP_LE\n\n    14, // OP_UNR_PLUS\n    14, // OP_UNR_MINUS\n    14, // OP_BIT_NOT\n\n    9, // OP_CMP_IN\n    9, // OP_CMP_NOT_IN\n\n    8, // OP_CMP_IS\n    8, // OP_CMP_IS_NOT\n\n    3, // OP_BOOL_OR\n    4, // OP_BOOL_AND\n    14,// OP_BOOL_NOT\n    //TODO: add more op ?\n]\n\nexport const opid2opmethod = [\n    \"__or__\",\n    \"__xor__\",\n    \"__and__\",\n    \"__lshift__\",\n    \"__rshift__\",\n    \"__add__\",\n    \"__sub__\",\n    \"__mul__\",\n    \"__truediv__\",\n    \"__floordiv__\",\n    \"__mod__\",\n    \"__pow__\",\n    \"__eq__\",\n    \"__neq__\",\n    \"__gt__\",\n    \"__ge__\",\n    \"__lt__\",\n    \"__le__\",\n    // can't be inverted\n    \"__pos__\", // unary +\n    \"__neg__\",\n    \"__not__\",\n    \"__contains__\",\n    \"\", // not contains (special)\n\n    // reversed\n    \"__ror__\",\n    \"__rxor__\",\n    \"__rand__\",\n    \"__rlshift__\",\n    \"__rrshift__\",\n    \"__radd__\",\n    \"__rsub__\",\n    \"__rmul__\",\n    \"__rtruediv__\",\n    \"__rfloordiv__\",\n    \"__rmod__\",\n    \"__rpow__\",\n    // ieq\n    \"__ior__\",\n    \"__ixor__\",\n    \"__iand__\",\n    \"__ilshift__\",\n    \"__irshift__\",\n    \"__iadd__\",\n    \"__isub__\",\n    \"__imul__\",\n    \"__itruediv__\",\n    \"__ifloordiv__\",\n    \"__imod__\",\n    \"__ipow__\",\n];\n\nexport const opid2jsop = [\n    \"|\",\n    \"^\",\n    \"&\",\n    \"<<\",\n    \">>\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\", // might need special fct\n    \"/\", // might need special fct\n    \"%\", // might need special fct\n    \"**\",\n    \"==\",\n    \"!=\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"+\",\n    \"-\",\n    \"~\",\n    \"in\",\n    //TODO: add more op ?\n];\n\n/*\n    export const OP_UNR_PLUS   = 18 as const; // prio 11\n    export const OP_UNR_MINUS  = 19 as const; // prio 12\n    export const OP_BIT_NOT    = 20 as const; // prio 12\n    export const OP_BOOL_NOT   = 27 as const; // prio 3\n*/\n\nexport const opsymbol2opid = {\n    \"|\"     : OP_BIT_OR,\n    \"^\"     : OP_BIT_XOR,\n    \"&\"     : OP_BIT_AND,\n    \"<<\"    : OP_BIT_LSHIFT,\n    \">>\"    : OP_BIT_RSHIFT,\n    \"+\"     : OP_BIN_ADD,\n    \"-\"     : OP_BIN_SUB,\n    \"*\"     : OP_BIN_MUL,\n    \"/\"     : OP_BIN_DIV,\n    \"//\"    : OP_BIN_FDIV,\n    \"%\"     : OP_BIN_MOD,\n    \"**\"    : OP_BIN_POW,\n    \"==\"    : OP_CMP_EQ,\n    \"!=\"    : OP_CMP_NEQ,\n    \">\"     : OP_CMP_GT,\n    \">=\"    : OP_CMP_GE,\n    \"<\"     : OP_CMP_LT,\n    \"<=\"    : OP_CMP_LE,\n    \"in\"    : OP_CMP_IN,\n    \"not in\": OP_CMP_NOT_IN,\n    \"is\"    : OP_CMP_IS,\n    \"is not\": OP_CMP_IS_NOT,\n    \"or\"    : OP_BOOL_OR,\n    \"and\"   : OP_BOOL_AND\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild = firstChild(node);\n    \n    let cur = nextSibling(rchild);\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        const other_value = VALUES[other];\n\n        if( type(other) === AST_LIT_STR ) {\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","export type SubResults = {\n    offset: number,\n    times : number[],\n    code  : string,\n    ast   : any\n};\n\nconst results = {\n\n    code: \"\",\n\n    nb_tokens: 0,\n\n    total_lines      : 0,\n    nb_excluded_lines: 0,\n    nb_files         : 0,\n\n    bry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n    } as SubResults,\n    sbry: {\n        offset: 0,\n        times : new Array(8),\n        code  : \"\",\n        ast   : null\n    } as SubResults,\n};\n\nexport type Results = typeof results;\n\nexport default function resetResults() {\n\n    results.code = \"\";\n    results.total_lines      = 0,\n    results.nb_excluded_lines= 0,\n    results.nb_files         = 0,\n\n    results.nb_tokens = 0;\n\n    results.bry.offset = 0;\n    results.bry.times.fill(0);\n    results.bry.code = \"\";\n\n    results.sbry.offset = 0;\n    results.sbry.times.fill(0);\n    results.sbry.code = \"\";\n\n    results.sbry.ast = null;\n\n    return results;\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Types, { TYPEID_type, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_str_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        const method = Types[resultType(a)]![opname] as Callable;\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import generate from \"@SBrython/utils/generate\";\n\nimport execute  from \"@SBrython/utils/execute\";\nimport resetResults from \"@SBrython/utils/results\";\nimport { generate_report } from \"@SBrython/utils/reports\";\nimport astnode2tree, { NODE } from \"@SBrython/utils/print/astnode2tree\";\n\nwindow.onerror = (...args) => {\n\tconsole.log(args);\n\t// msg\n\t// stack\n\t// \n}\n\nconst  bry_output  = document.querySelector ( '.brython_output')!;\nconst sbry_output  = document.querySelector('.sbrython_output')!;\nconst python_input = document.querySelector<HTMLInputElement>('#python')!;\n\nconst python_output = document.querySelector(\".python_ouput\")!;\nconst ast_output    = document.querySelector(\"#ast\")!;\nconst js_output     = document.querySelector(\"#js\")!;\n\nconst sbry_print = (...args: any[]) => {\n    console.log(\"[SBRY]\", ...args);\n}\n\nconst search = new URLSearchParams( location.search );\nconst test_name = search.get(\"test\");\nconst merge     = search.get(\"merge\")  === \"true\" ? true : false;\nconst parser    = search.get(\"parser\") === \"true\" ? true : false;\n\nconst subTestsStats: Record<string, {total: number, excluded: number}[]> = {};\nconst exclude_list = await loadExcludeList();\n\nconst brython_tests = ['basic test suite', 'numbers',\n//    \"classes\" // ~1174\n//    \"strings\",\n//    \"string methods\"\n];\n// strings ~600\n// list    ~496\n// dicts   ~288\n// sets    ~300\n// bytes   ~300\nconst test_suites   = await loadTests(...brython_tests); // cf end of file for available tests\n\nif( test_name !== null)\n    startTests(test_name, merge);\n\npython_input.addEventListener(\"input\",\n    () => {\n        const code = python_input.value;\n        localStorage.setItem('sbrython_code', code);\n        oneTimeExec(code);\n    });\n\npython_input.addEventListener('keydown', (ev) => {\n\n    if(ev.code === \"Tab\") {\n            ev.preventDefault();\n    \n            let beg = python_input.selectionStart!;\n            let end = python_input.selectionEnd!;\n    \n            const txt = python_input.value;\n            const preText  = txt.slice(0  , beg);\n            const postText = txt.slice(end, txt.length);\n    \n            python_input.value = preText + \"    \" + postText; // input tab key\n            \n            const pos = beg+4;\n            python_input.setSelectionRange(pos, pos);\n        }\n    });\n\nif( window.location.search === '' || window.location.search === '?parser=true') {\n    python_input.value = localStorage.getItem('sbrython_code') ?? \"\";\n    oneTimeExec(python_input.value)\n}\n\nfunction oneTimeExec(fullcode: string) {\n\n    const results = resetResults();\n\n    clearResults();\n\n    results.total_lines = fullcode.split('\\n').filter(l => l.trim() !== \"\").length;\n\n    let error: null|Error = null;\n\n    try {\n        generate(fullcode, results, parser);\n        execute(results, sbry_print);\n    } catch(e) {\n        error = e as Error;\n    }\n\n    //TODO: AST+code trees...\n\n    if( error !== null) {\n        sbry_output.textContent += error.message + \"\\n\";\n        sbry_output.classList.add('error');\n        console.error(error);\n    } else {\n        sbry_output.classList.add('success');\n    }\n\n     bry_output.textContent += generate_report(results, \"bry\" , \"sbry\");\n    sbry_output.textContent += generate_report(results, \"sbry\", \"bry\");\n \n    const ast = astnode2tree();\n    try {\n    \tprint_js( results.sbry.code, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_python( fullcode, ast );\n    } catch(e) { console.warn(e); }\n    try {\n        print_ast( ast );\n    } catch(e) { console.warn(e); }\n\n    /*try {\n        print_errors(results, brython_results, sbrython_results);\n    } catch(e) { console.warn(e); }*/\n}\n\nfunction clearResults() {\n\n    //python_input.value = \"\";\n\n    sbry_output.textContent = \"\";\n     bry_output.textContent = \"\";\n\n    js_output    .textContent = \"\";\n    python_output.textContent = \"\";\n    ast_output   .textContent = \"\";\n\n    sbry_output.classList.remove(\"success\", \"error\");\n}\n\n// pycode or jscode\nfunction print_code(code: string, _ast: NODE, type: \"pycode\"|\"jscode\") {\n\n    const ast = _ast.children;\n\n    const nodes = ast.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${ node.pycode.start.line }:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        //TODO: slice_code_here\n        const html = print_code_node(node, code, type);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n        //if(node.type !== \"functions.def\") //TODO...\n        //    line.append(\";\");\n\n        return line;\n    });\n\n    return nodes;\n}\n\nfunction print_code_node(node: any, code: string, type: \"pycode\"|\"jscode\") {\n    \n    const html_bloc = document.createElement(\"span\") as HTMLSpanElement & {\"$node\": any};\n\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    let children = node.children.filter( (a: any) => a[type] !== undefined )\n                                .sort( (a:any,b:any) => {\n        \n        if( a[type].start.line === b[type].start.line) {\n            return a[type].start.col - b[type].start.col;\n        }\n\n        return a[type].start.line - b[type].start.line;\n    });\n\n    let subparts = new Array(children.length * 2 + 1);\n    let cursor = node[type].start;\n    let offset = 0;\n\n    for(let i = 0; i < children.length; ++i) {\n        const ctype = children[i][type];\n        if( ctype === undefined )   // when does it occur ?\n            continue;\n        if( ctype.start.line === 0) {// unprinted node\n            subparts.length -= 2;\n            continue;\n        }\n        subparts[offset++] = slice_code(code, cursor, ctype.start);\n        subparts[offset++] = print_code_node(children[i], code, type);\n        cursor = children[i][type].end;\n    }\n    subparts[offset++] = slice_code(code, cursor, node[type].end);\n\n    html_bloc.append(...subparts);\n\n    return html_bloc;\n}\n\ntype pos = {line: number, col: number};\n\nfunction slice_code(code: string, start_or_pos: pos|{start: pos, end:pos}, end: pos|null = null) {\n\n    let start = start_or_pos;\n    if(end === null) {\n        ({start, end} = start_or_pos as {start: pos, end:pos});\n    }\n\n    let beg_idx = code_idx(code, start as pos);\n    let end_idx = code_idx(code,  end!);\n\n    return code.slice( beg_idx, end_idx );\n}\n\nfunction code_idx(code: string, {line, col}: pos) {\n\n    if(line === 1)\n        return col;\n\n    let cur = 0;\n    let cur_line = 1;\n    while( cur < code.length) {\n        if( code[cur] === '\\n' ) {\n            ++cur_line;\n            if( line === cur_line ) {\n                ++cur;\n                break;\n            }\n        }\n        ++cur;\n    }\n\n    return cur + col;\n}\n\n\nfunction print_node(node: any) {\n    const html_bloc = document.createElement(\"div\") as {\"$node\": any} & HTMLDivElement;\n    html_bloc.$node = node;\n    node.$gui_elems ??= [];\n    node.$gui_elems.push( html_bloc );\n\n    html_bloc.textContent = node.type;\n    if( node.value != null) {\n        let val = node.value;\n        if( val.__qualname__ !== undefined)\n            val = val.__qualname__;\n        else if( val.__name__ !== undefined)\n            val = val.__name__;\n        else if( val.name !== undefined)\n            val = val.name;\n        else\n            val = JSON.stringify(val);\n        html_bloc.textContent += `:${val}`;\n    }\n    if( node.result_type !== null) {\n\n        html_bloc.textContent += ` (${node.result_type})`;\n        /*\n        let name = node.result_type?.__name__;\n        if(name === \"function\") {\n            name += ` () -> ${node.result_type.__call__.return_type()?.__name__}`;\n        }\n\n        let as_type = \"\";\n        if( node.as !== undefined )\n            as_type = ` as ${node.as}`;\n        html_bloc.textContent += ` (${name}${as_type})`;*/\n    }\n\n\tfor(const child of node.children) {\n        const html_child = print_node(child);\n        html_child.style.setProperty(\"margin-left\", \"20px\");\n        html_bloc.append( html_child );\n    }\n\n\treturn html_bloc;\n}\n\n\nlet prev_highlighted: null|HTMLElement = null;\n\nfunction highlight(target: HTMLElement) {\n\n    if( prev_highlighted === target)\n        return;\n    if( prev_highlighted !== null) {\n\n        for(const gui_elem of (prev_highlighted as any).$gui_elems)\n            gui_elem?.classList.remove(\"highlight\");\n        prev_highlighted = null;\n    }\n\n    const $node = (target as any).$node;\n    if( $node === undefined)\n        return;\n\n    prev_highlighted = $node;\n    for(const gui_elem of $node.$gui_elems)\n        gui_elem?.classList.add(\"highlight\");\n}\n\n/*\n//TODO: print ?\nbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\nsbrython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target);\n})\n*/\n/*\nlet brython_result = output.map( e => {\n        const div = document.createElement('div')\n        div.textContent = `${e[0]}`;\n        div.raw = e[0];\n        div.stack = e[1]\n        return div;\n    });\n*/\n\nast_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\npython_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\njs_output.addEventListener(\"mouseover\", ev => {\n    highlight(ev.target as any);\n})\n\nfunction print_ast(ast: NODE) {\n\n    const nodes = ast.children.map( (node: any) => {\n\n        const line = document.createElement(\"div\");\n\n        const lineno = document.createElement('span');\n        lineno.textContent = `${node.pycode.start.line}:`;\n\n        lineno.style.setProperty(\"vertical-align\", \"top\");\n        lineno.style.setProperty(\"font-weight\", \"bold\");\n    \n        line.append(lineno);\n\n        const html = print_node(node);\n        html.style.setProperty(\"display\", \"inline-block\");\n        line.append(html);\n\n\n        return line;\n    });\n\n\tast_output.replaceChildren( ...nodes )\n\n}\n\nfunction print_python(pycode: string, ast: NODE) {\n\tpython_output.replaceChildren( ...print_code(pycode, ast, \"pycode\") )\n}\n\nfunction print_js(jscode: string, ast: NODE) {\n\tjs_output.replaceChildren( ...print_code(jscode, ast, \"jscode\") )\n}\n\n// ==================================================================\n\nfunction startTests(test_name: string, merge: boolean) {\n\n    const results = resetResults();\n\n    let tests: string[] = [test_name];\n    if( test_name === \"brython\" )\n        tests = brython_tests;\n\n    let error: null|Error = null;\n    let fullcode = \"\";\n\n    let id = -1;\n    // build merged code\n    tests: for(let i = 0; i < tests.length; ++i) {\n\n        const subtests = test_suites[tests[i]];\n        const substats = subTestsStats[tests[i]];\n\n        for(let j = 0; j < subtests.length; ++j) {\n\n            ++id;\n\n            const stats = substats[j];\n            results.total_lines       += stats.total;\n            results.nb_excluded_lines += stats.excluded;\n\n            const code = subtests[j];\n\n            if( code === \"\")\n                continue;\n       \n            if( merge ) {\n                const indented_code = code.split('\\n').map(e => `\\t${e}`).join('\\n');\n                fullcode += `def _${id}():\\n${indented_code + \"return None\"}\\n_${id}()\\n`;\n            } else {\n                try {\n                    fullcode = code;\n                    generate(fullcode, results, parser);\n                    execute(results, sbry_print);\n                } catch(e) {\n                    error = e as Error;\n                    break tests;\n                }\n            }\n        }\n    }\n\n    if( merge ) {\n        try {\n            generate(fullcode, results, parser);\n            execute(results, sbry_print);\n        } catch(e) {\n            error = e as Error;\n        }\n    }\n\n    if( error || ! merge ) {\n\n        const ast = astnode2tree();\n        try {\n            print_js( results.sbry.code, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_python( fullcode, ast );\n        } catch(e) { console.warn(e); }\n        try {\n            print_ast( ast );\n        } catch(e) { console.warn(e); }\n    }\n    \n    if(error) {\n\n        python_input.value = results.code;\n\n        sbry_output.classList.add('error');\n        sbry_output.textContent = error.message;\n        console.warn(error);\n\n        return;\n    }\n\n    python_input.value = \"\";\n    \n    sbry_output.classList.add('success');\n    \n     bry_output.textContent = generate_report(results, \"bry\" , \"sbry\" );\n    sbry_output.textContent = generate_report(results, \"sbry\", \"bry\");\n    \n}\n\n\nasync function loadExcludeList() {\n    const exclude_list = await (await fetch('/assets/exclude_list.txt')).text();\n    return Object.fromEntries( exclude_list.split('#').slice(0).map(e => {\n\n        let lines = e.split('\\n');\n        let name = lines[0].slice(1);\n\n        let exclude = lines.slice(1).filter(e => e[0] !== '/' && e.length !== 0).map( x => {\n            const e = x.split('-');\n            if( e.length === 1) {\n                if( e[0] === '*')\n                    return e[0];\n                return parseInt(e[0]);\n            }\n            return [parseInt(e[0]), parseInt(e[1])]\n        });\n\n        return [name, exclude];\n    }) );\n}\n\nasync function loadTests(...names: string[]) {\n\n    const tests: Record<string, string[]> = {};\n\n    for(let i = 0; i < names.length; ++i)\n        tests[names[i]] = await loadSubTests(names[i]);\n\n    return tests;\n}\n\nasync function loadSubTests(test_name: string, exclude = exclude_list) {\n\n    const code = await (await fetch(`/assets/unittests/${test_name}.py`)).text();\n\n    subTestsStats[test_name] = [];\n\n    const parts = code.split('#').slice(1);\n\n    return parts.map( (t,idx) => {\n\n        let   lines = t.split('\\n');\n        const name  = lines[0].trim();\n        lines[0] = \"# \" + test_name + \".\" + name + \" (\" + (idx+1) + \"/\" + parts.length + \")\";\n        const fullname = `${test_name}.${name}`;\n\n        let excl = exclude[fullname];\n        if( excl === undefined)\n            excl = exclude[`${test_name}.*`];\n\n        lines = filter(lines, excl);\n\n        let nbEmptyLines = 0;\n        for(let i = 1; i < lines.length; ++i)\n            if(lines[i].trim() === '')\n                ++nbEmptyLines;\n    \n        let code_len = lines.length - 1 - nbEmptyLines;\n    \n        let nbExcluded = 0;\n        for(let i = 1; i < lines.length; ++i)\n            nbExcluded += +(lines[i][0] === '#');\n\n        subTestsStats[test_name].push({\n            excluded: nbExcluded,\n            total   : code_len\n        });\n    \n        if(code_len === nbExcluded)\n            return \"\";\n\n        return lines.join('\\n') + '\\n';\n    });\n}\n\nfunction filter(lines: string[], list: (number|\"*\"|number[])[]) {\n\n    list ??= [];\n    \n    let result = lines.map( (l, idx) => {\n        idx = idx + 1;\n        let excluded = list.find( (v) => {\n            if( v === '*')\n                return true;\n            if( idx === v)\n                return true;\n            if( Array.isArray(v) && v[0] <= idx && v[1] >= idx)\n                return true;\n            return false;\n        }) !== undefined;\n        \n        if( excluded )\n            return `# ${l}`;\n        return l;\n    });\n\n    return result;\n}\n\n// 'classes' => after some basic types/operators...\n\n// lists\n// dicts\n// sets\n// exceptions\n// strings\n\n// string methods\n// f-string\n// generators\n// imports\n\n// print\n// iterators\n// files open_read\n// bytes\n// decorators\n// descriptors\n// exec_eval\n// pattern matching\n// string format\n\n// reflected_methods\n// special methods\n// memoryview\n// javascript objects\n\n\n/* \nfunction print_errors({success, sbrython, lines_equals}, brython_result, sbrython_result) {\n\n    const sb = sbrython.engine;\n\n    for(let i = 0; i < lines_equals.length; ++i) {\n\n        // stack trace.\n        if( i < sbrython_result.length ) {\n            const stackline = parse_stack(sbrython_result[i].stack, sb)[0];\n            const node = stackline2astnode(stackline, sb);\n            node.$gui_elems.push( sbrython_result[i], brython_result[i] );\n            sbrython_result[i].$node = node;\n\n            if( i < brython_result.length )\n                brython_result[i].$node = node;\n        }\n\n        const line_class = lines_equals[i] ? \"success\" : \"error\";\n\n        if( i < sbrython_result.length )\n            sbrython_result[i].classList.add(line_class);\n\n        if( i <  brython_result.length )\n             brython_result[i].classList.add(line_class);\n    }\n\n    sbrython_output.classList.add(success ? \"success\" : \"error\");\n}\n\n*/\n\n/*\nsb._sb_.assert = (cond) => { if( ! cond ) {\n\nconsole.warn(\"Assertion failed\");\n\nconst stack = new Error().stack;\n\nconst stackline = parse_stack(stack, sb)[0];\nconst node = stackline2astnode(stackline, sb);\n\noutput.push([`[Assertion failed as line ${node.pycode.start.line}]`, stack]);\n} };\n*/","import LIST from './list';\nexport default LIST;\n\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node);\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","export default {};","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_type } from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { Results, SubResults } from \"../results\";\n\nconst labels = [\n    \"Executed in    :\",\n    \"    PY2JS      :\",\n    \"        py2ast :\",\n    \"        astProc:\",\n    \"        ast2js :\",\n    \"    RUNTIME    :\",\n    \"        genFct :\",\n    \"        exeFct :\"\n];\n\nfunction tformat(time: number, unit: string) {\n    return time.toFixed(3).padStart(7) + unit;\n}\n\nfunction tdiff(a: number, b: number) {\n\n    const c = a/b;\n\n    if( c === 1)\n        return \"   =   \";\n\n    if( c > 1 )\n        return \"x\" + c.toFixed(2).padStart(6);\n\n    return \"-\" + (-(100*a/b - 100)).toFixed(2).padStart(5) + \"%\";\n}\n\nexport function generate_report(results: Results, a: \"bry\"|\"sbry\", b: \"bry\"|\"sbry\") {\n\n    const nb_tokens = results.nb_tokens;\n    const A = results[a];\n    const B = results[b];\n    \n    let report = \"\";\n\n    /*\n    `Status         : ${error ? 'FAILED' : 'SUCCESS'}\n    Tested         : ${total-excluded_count}/${total} (${excluded_count} excluded) [${nb_suites}]`\n    */\n\n    const nb_lines    = results.total_lines;\n    const nb_excluded = results.nb_excluded_lines;\n    const nb_done     = nb_lines - nb_excluded;\n\n//    report += \"Status         : SUCCESS\\n\";\n    report += `Tested         : ${nb_done}/${nb_lines} (${(nb_done/nb_lines*100).toFixed(2)}%)\\n`;\n    report += `Py code        : ${nb_tokens} tokens (${results.nb_files} file)\\n`;\n    report += \"JS code        : \" + tdiff(A.code.length, B.code.length) + \"\\n\";\n    report += \"\\n\"\n\n    const tcoef = 100_000 / nb_tokens / 1000;\n\n    for(let i = 0; i < labels.length; ++i) {\n\n        report += labels[i]\n                    + tformat(A.times[i] * tcoef, \"s\")\n                    + \" [\"\n                    + tdiff(A.times[i], B.times[i])\n                    + \"] \"\n                    + tformat(A.times[i], \"ms\")\n                    + \"\\n\";\n\n    }\n\n\n    return report;\n}","import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, OP_OFF_REVERSE, OP_OOF_IEQ, opid2jsop, opid2opmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        let op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2opmethod[op+OP_OFF_REVERSE], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, `__i${op}__`, return_type, (node: NODE_ID) => {\n\n                const _ = firstChild(node);\n                const a = nextSibling(_);\n                const b = nextSibling(a);\n\n                const other_value = VALUES[b];\n\n                //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --\n\n\n                return w_JSBinOp(node, a, op+ OP_OOF_IEQ, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}"],"names":["klass","initBuiltinClass","TYPEID_jsint","TYPEID_type_jsint_","add_method","RET_JSINT","call","w_sns","nextSibling","firstChild","w_subs","addJSBinOps","OP_BIN_POW","OP_BIN_ADD","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","convert_other","OP_BIN_MUL","w_call","node","a","op","b","resultType","TYPEID_int","Number2Int","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_INT","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","ast2js","w_str","TypeKlass","TYPES","TYPEID_type","instance","name","jsname","Klass","__class__","__name__","__qualname__","JS_NAME","target","RET_TYPE","write","r","Object","create","__call__","RETURN_TYPE","WRITE_CALL","TYPEID","length","create_function","id","kname","VALUES","coffset","w_NL","TYPEID_type_int_","other","other_type","w_node","TYPEID_float","TYPEID_str","otype","undefined","__int__","Error","RET_STR","RET_INT2INT","TYPEID_None","TYPEID_NoneType","convert","dst","context","local_symbols","iter","constructor","$name","func","setType","AST_CTRL_FOR","addFirstChild","convert_node","body","addSibling","Body","set_py_code_from_list","value","args","AST_CTRL_FOR_RANGE","cur","nbChildren","i","AST_CTRL_IF","test","ifblock_cur","orelse","AST_CTRL_ELSE","AST_CTRL_ELIF","first","Py_object","TYPEID_NotImplemented","TYPEID_NotImplementedType","TYPEID_bool","TYPEID_type_float_","TYPEID_type_str_","TYPEID_type_bool_","Array","last_id","AST_SYMBOL","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_STRUCT_DICT","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_RAISE","AST_KEY_IMPORT","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_OP_UNARY","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN_ATTR","AST_OP_ASSIGN","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING","AST_LIT_FSTRING_FVAL","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_DEF_FCT","AST_DEF_METH","AST_DEF_ARGS","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","AST_CALL","AST_CALL_ARG_KW","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TRYBLOCK_CATCH","AST_CTRL_TERNARY","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","abs","n","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_LT","OP_CMP_LE","OP_CMP_GT","OP_CMP_GE","ops","return_type","opid2opmethod","w_JSCmpOp","OP_EQ2IS","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","idx","list","p_prio","parentOPPrio","setParentOPPrio","l","opid2jsop","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","LIST","require","id2name","cn","beg","Types","end","obj","ARGS_INFO","generate","keys","values","fct","attr","type","console","warn","fct_type","ret_type","setResultType","keywords","keyword","set_py_code","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","code","curChar","CURRENT_PARAM_TYPE","POSONLY_END","offset","consumeEmptyLines","charCodeAt","CURSOR","nextSymbol","slice","search","nextArg","consumeSpaces","readArg","setFirstChild","readExpr","KNOWN_SYMBOLS","setSibling","readBody","SType_fct","default_call","STypeID","CURRENT_INDENTATION","consumeIndentedLines","createASTNode","set_py_code_beg","indent","set_py_code_end","readToken","astnode_type","result_type","token","symbol","next","isEndOfExpr","readOp","nextChar","op_str","opsymbol2opid","right","createCallOpNode","rop","rop_prio","lop","lop_prio","pyop_priorities","stack","push","py2ast","_code","filename","nodes","ASTNODES","dop_reset","left","src","src_off","dst_off","PY_CODE","CODE_BEG_LINE","CODE_BEG_COL","copy_py_code_beg","CODE_END_LINE","CODE_END_COL","copy_py_code_end","opnode","src_beg","src_end","pyop_name","ltype","rtype","method","OP_OFF_REVERSE","_","ARRAY_TYPE","off","results","use_parser","bry","sbry","nb_files","ast","_ast","performance","now","parser","$B","Parser","_PyPegen","run_parser","t0","tokens","tokenizer","nb_tokens","times","buildAST","__ast","convert_ast","jscode","t1","generateSBrython","future","future_features","symtable","_PySymtable_Build","js_from_root","imported","js","generateBrython","astnode2tree","typeID","id2typename","children","buildJSCode","pycode","buildPyCode","asname","SBrython","browser","globalThis","buildModule","this","Function","runJSCode","getModules","getModule","getASTFor","print","log","_r_","_sb_","execute","sbry_print","sb","executeSBrython","executeBrython","type_obj","handlers","ExceptHandler","rchild","BB","BE","to_write","cond","assert","__str__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","assign","ILIST","start","line","col","Context","symbols","builtins","createSubContext","createClassContext","ctx","parentTypeID","PythonError","python_exception","super","_raw_err_","OP_BOOL_NOT","OP_OOF_IEQ","jsop_priorities","KW","kw","getKW","elts","fist","targets","annotation","attrname","attrdef","write_arg","set_js_cursor","CODE_BEG","defval","CODE_END","write_posarg","RET_FLOAT","other_value","_op","debug_print_exception","err","isV8","split","e","includes","filter_stack","map","_line","_col","fct_name","pos","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","JSException","total_lines","nb_excluded_lines","resetResults","fill","bname2jsop","CODE_LINE","CODE_COL","JS_CODE","cur_indent_level","indents","str","AST2JS","Symbol","operand","bname2pyname","genOpFct","RET_None","opname","Py_JSException","Py_Exception","brython_node","BRY2SBRY","lineno","col_offset","end_lineno","end_col_offset","set_py_from_beg_end","dst_beg","dst_end","src_offset","beg_offset","end_offset","NOCONVERT","a_value","window","onerror","bry_output","document","querySelector","sbry_output","python_input","python_output","ast_output","js_output","URLSearchParams","location","test_name","get","merge","subTestsStats","exclude_list","loadExcludeList","brython_tests","test_suites","loadTests","oneTimeExec","fullcode","textContent","classList","remove","trim","error","message","add","generate_report","print_js","print_python","print_ast","print_code","createElement","style","setProperty","append","html","print_code_node","html_bloc","$node","$gui_elems","sort","subparts","cursor","ctype","slice_code","start_or_pos","beg_idx","code_idx","end_idx","cur_line","print_node","val","JSON","stringify","child","html_child","startTests","addEventListener","localStorage","setItem","ev","preventDefault","selectionStart","selectionEnd","txt","preText","postText","setSelectionRange","getItem","prev_highlighted","highlight","gui_elem","replaceChildren","tests","subtests","substats","j","stats","total","excluded","async","fetch","text","lines","exclude","x","parseInt","names","loadSubTests","parts","t","excl","nbEmptyLines","code_len","nbExcluded","find","v","isArray","module","left_id","right_id","reversed_operator","write_multi_jsop","AssignOperators","c2","_context","vtype","qname","toString","nops","nb_ops","comparators","exc","float2str","f","toExponential","sign_idx","weak_assign","key","instance_TypeID","addType","method_wrapper","klass_type","inst_type","bases","stypeID","meta","o","stype","convert_args","returns","fct_return_type","last_type","fake_node","args_names","posonlyargs","args_pos","idx_end_pos","idx_vararg","has_kw","method_name","gen","instanceType","instanceTypeID","Float64Array","NEXT_AST_NODE_ID","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","parent","sibling","labels","tformat","time","unit","toFixed","padStart","tdiff","c","A","B","report","nb_lines","nb_done","tcoef","arg","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","addSblng","pos_defaults","defaults","posonly","doffset","convert_arg","Number","POSITIVE_INFINITY","nb_pos_defaults","min","has_others","cut_off","kwonly","kw_defaults","kwargs","py_offset","brython_name","alt","ADD_EQ","ADD_INCR","ADD_DECR","prio","writeOp","count","jop","find_and_write_call"],"sourceRoot":""}