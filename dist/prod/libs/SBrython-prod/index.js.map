{"version":3,"file":"libs/SBrython-prod/index.js","mappings":"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AAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EAEZ,MC5DA,GACC,OAAUA,EAAAA,KAAAA,EACV,YAAeA,EAAAA,MAAAA,EACf,UAAaA,EAAAA,KAAAA,GCHd,MACIA,EAAAA,MAAAA,MACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,GCEG,MAAMkK,EAET,GAAuC,CAAC,EACxC,GAAiD,CAC7CC,QAASC,YAObC,WAAAA,CAAYtJ,EAAgBC,GACxB,GAAGA,EAAIC,YAAY9G,MAAK,EACpB,MAAM,IAAIjB,MAAM,OAAO8H,EAAIC,gCAM/B,OAHA9G,MAAK,EAAgB6G,EAAIC,UAAYD,EAG9B,IAAIsJ,SAAS,SAAU,GAAGvJ,0BACrC,CAEAwJ,SAAAA,CAAUxJ,EAAgBC,GACtB7G,MAAK,EAAU6G,EAAIC,UAAY9G,KAAKkQ,YAAYtJ,EAAQC,EAAzB7G,CAA8BA,KACjE,CAEAqQ,UAAAA,GACI,OAAOrQ,MAAK,CAChB,CACAsQ,SAAAA,CAAUvW,GACN,OAAOiG,MAAK,EAAUjG,EAC1B,CAEAqK,SAAAA,CAAU0C,GACN,OAAO9G,MAAK,EAAgB8G,EAChC,CAEAyJ,KAAAA,IAASvJ,GACL9F,QAAQ0D,OAAOoC,EACnB,CAEA,OAAI/B,GACA,OAAOA,CACX,CACA,QAAID,GACA,OAAOA,CACX,E","sources":["webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/list.js?6004","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/types/list.js?29f5","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/webpack/runtime/make namespace object","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts"],"sourcesContent":["import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","export default class Py_object {\n\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        let op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, `__i${op}__`, return_type, (node: NODE_ID) => {\n\n                const _ = firstChild(node);\n                const a = nextSibling(_);\n                const b = nextSibling(a);\n\n                const other_value = VALUES[b];\n\n                //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --\n\n                //TODO...\n\n                return w_JSBinOp(node, a, op, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__DEBUG__)\n        w_str(`/*${VALUES[node]} */`);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_type } from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","export const TYPEID_None               = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_NotImplemented     = 2;\nexport const TYPEID_NotImplementedType = 3;\nexport const TYPEID_int                = 4;\nexport const TYPEID_jsint              = 5;\nexport const TYPEID_float              = 6;\nexport const TYPEID_bool               = 7;\nexport const TYPEID_str                = 8;\nexport const TYPEID_type               = 9;\nexport const TYPEID_type_int_          =10;\nexport const TYPEID_type_jsint_        =11;\nexport const TYPEID_type_float_        =12;\nexport const TYPEID_type_str_          =13;\nexport const TYPEID_type_bool_         =14;\n\nconst TYPES = new Array(15);\nfor(let i = 0; i < 15; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild = firstChild(node);\n    \n    let cur = nextSibling(rchild);\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_EQ     = 12 as const;\nexport const OP_CMP_NEQ    = 13 as const;\nexport const OP_CMP_GT     = 14 as const;\nexport const OP_CMP_LT     = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_UNR_PLUS   = 18 as const;\nexport const OP_UNR_MINUS  = 19 as const;\nexport const OP_BIT_NOT    = 20 as const;\nexport const OP_CMP_IN     = 21 as const;\nexport const OP_CMP_IS     = 22 as const;\nexport const OP_CMP_IS_NOT = 23 as const;\nexport const OP_BOOL_OR    = 24 as const;\nexport const OP_BOOL_AND   = 25 as const;\nexport const OP_BOOL_NOT   = 26 as const;\nexport const OP_CMP_NOT_IN = 27 as const;\n\n// https://www.w3schools.com/python/python_operators.asp\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t8,\n\t8,\n\t9,\n\t9,\n\t9,\n\t9,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\"==\",\n\t\"!=\",\n\t\">\",\n\t\"<\",\n\t\">=\",\n\t\"<=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n]\n\nexport const opsymbol2opid = {\n\t\"|\": OP_BIT_OR,\n\t\"^\": OP_BIT_XOR,\n\t\"&\": OP_BIT_AND,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\">>\": OP_BIT_RSHIFT,\n\t\"+\": OP_BIN_ADD,\n\t\"-\": OP_BIN_SUB,\n\t\"*\": OP_BIN_MUL,\n\t\"/\": OP_BIN_DIV,\n\t\"//\": OP_BIN_FDIV,\n\t\"%\": OP_BIN_MOD,\n\t\"**\": OP_BIN_POW,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"\": OP_UNR_PLUS,\n\t\"\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not\": OP_BOOL_NOT,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node);\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    w_str(\"var \");\n\n    let rchild    = firstChild(node);\n\n    let cur = nextSibling(rchild);\n\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        const other_value = VALUES[other];\n\n        if( type(other) === AST_LIT_STR ) {\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Types, { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_CALL_ARG_KW, AST_DEF_ARG_POS, AST_OP_OP } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ID, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_COMMA = 44;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n\n    return code.slice(offset, offset += end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => setType(id, AST_KEY_RETURN),\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        setFirstChild(id, readExpr() );\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __name__: \"function\",\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return SType_fct.__call__[RETURN_TYPE]();\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID; // 15 for now...\n        Types[STypeID] = SType_fct;\n\n        setResultType(id, STypeID);\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        setSibling(args, readBody() );\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    let curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __DEBUG__ ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr();\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken() {\n    //TODO: known symbol 2 versions...\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE ) { // consume str\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== CHAR_QUOTE);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n       \n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n\n        let astnode_type = AST_LIT_INT;\n        let result_type  = TYPEID_int;\n\n        if( curChar === CHAR_DOT ) {\n\n            astnode_type = AST_LIT_FLOAT;\n            result_type  = TYPEID_float;\n        \n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n        } else if( offset - beg <= 9 ) { // opti\n            result_type = TYPEID_jsint\n        }\n\n\n              setType(node, astnode_type);\n        setResultType(node, result_type);\n        \n        VALUES[node] = code.slice(beg, offset);\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n            //TODO: get type from context\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                //TODO: get left from context...\n                setResultType(cur, 15 as TYPE_ID); // h4ck\n                VALUES[cur] = \"foo\"; // h4ck\n\n                ++offset; // (\n                consumeSpaces();\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    let next;\n\n                    //TODO: requires op refactor...\n                    if( curChar > CHAR_DIGIT_9 ) { // we assume kw args\n\n                        // h4ck (requires context...)\n                        const name = nextSymbol();\n                        consumeSpaces();\n                        ++offset;\n                        consumeSpaces();\n\n                        next = createASTNode();\n                        setType(next, AST_CALL_ARG_KW);\n                        VALUES[next] = name;\n                        setFirstChild(next, readExpr());\n                    } else {\n                        next = readExpr();\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop      = [createASTNode(), value, op, 0] as OP_INFO;\n    let lop_prio = pyop_priorities[op];\n\n    value = right;\n\n    let rop: OP_INFO;\n    let rop_prio;\n\n    const stack: OP_INFO[] = [];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // priority\n        if( rop_prio > lop_prio ) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0];\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n            stack.length = 0;\n\n            rop   = [createASTNode(), lop[0], op, 0];\n            lop   = rop;\n        }\n\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    value = createCallOpNode(...lop)\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return value;\n}\n\nexport function py2ast(_code: string, filename: string): AST {\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __DEBUG__ ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined)\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/attr\").default;\nLIST[18 ] = require(\"./op/brackets\").default;\nLIST[19 ] = require(\"./op/assign_aug\").default;\nLIST[20 ] = require(\"./op/assign_init\").default;\nLIST[21 ] = require(\"./op/assign_attr\").default;\nLIST[22 ] = require(\"./op/assign\").default;\nLIST[23 ] = require(\"./lit/str\").default;\nLIST[24 ] = require(\"./lit/int\").default;\nLIST[25 ] = require(\"./lit/float\").default;\nLIST[26 ] = require(\"./lit/fstring\").default;\nLIST[27 ] = require(\"./lit/fstring_fval\").default;\nLIST[28 ] = require(\"./lit/true\").default;\nLIST[29 ] = require(\"./lit/false\").default;\nLIST[30 ] = require(\"./lit/none\").default;\nLIST[31 ] = require(\"./def/fct\").default;\nLIST[32 ] = require(\"./def/meth\").default;\nLIST[33 ] = require(\"./def/args\").default;\nLIST[34 ] = require(\"./def/arg_posonly\").default;\nLIST[35 ] = require(\"./def/arg_pos\").default;\nLIST[36 ] = require(\"./def/arg_varargs\").default;\nLIST[37 ] = require(\"./def/arg_kwonly\").default;\nLIST[38 ] = require(\"./def/arg_kwargs\").default;\nLIST[39 ] = require(\"./call/index\").default;\nLIST[40 ] = require(\"./call/arg_kw\").default;\nLIST[41 ] = require(\"./ctrl/while\").default;\nLIST[42 ] = require(\"./ctrl/tryblock\").default;\nLIST[43 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[44 ] = require(\"./ctrl/ternary\").default;\nLIST[45 ] = require(\"./ctrl/if\").default;\nLIST[46 ] = require(\"./ctrl/elif\").default;\nLIST[47 ] = require(\"./ctrl/else\").default;\nLIST[48 ] = require(\"./ctrl/for_range\").default;\nLIST[49 ] = require(\"./ctrl/for\").default;\nLIST[50 ] = require(\"./classdef\").default;\nLIST[51 ] = require(\"./body\").default;\nLIST[52 ] = require(\"./2bigint\").default;\nLIST[53 ] = require(\"./2number\").default;\nLIST[54 ] = require(\"./comment\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n"],"names":["klass","initBuiltinClass","TYPEID_str","TYPEID_type_str_","add_method","RET_STR","node","other","nextSibling","firstChild","other_type","resultType","TYPES","__str__","WRITE_CALL","w_node","RET_INT","call","w_str","addJSCmpOps","JSCmpOps_LIST","RET_STR2BOOL","addJSBinOps","OP_BIN_ADD","RET_STR2STR","OP_BIN_MUL","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","w_call","a","op","b","_","w_sns","Py_object","TypeKlass","TYPEID_type","instance","name","jsname","Klass","__class__","__name__","__qualname__","JS_NAME","target","RET_TYPE","write","r","Object","create","__call__","RETURN_TYPE","TYPEID","length","ast2js","coffset","write_arg","VALUES","defval","TYPEID_jsint","Number2Int","write_posarg","cur","type","AST_DEF_ARG_POSONLY","start","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","Py_Exception","idx","list","TYPEID_type_jsint_","RET_JSINT","w_subs","OP_BIN_POW","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","TYPEID_int","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_IJBF2BOOL","to_write","setParentOPPrio","parentOPPrio","ops","return_type","NOCONVERT","ADD_EQ","i","opid2opmethod","opid2ropmethod","ADD_INCR","ADD_DECR","other_value","prio","jsop_priorities","p_prio","l","opid2jsop","AST_LIT_FSTRING_FVAL","Error","BB","w_NL","BE","float2str","f","str","toExponential","sign_idx","slice","toString","includes","PythonError","python_exception","constructor","super","_raw_err_","this","abs","n","Py_JSException","writeOp","value","count","left","right","jop","ltype","rtype","TYPEID_NotImplementedType","method","Types","undefined","reversed_operator","find_and_write_call","console","warn","kname","rchild","last_id","AST_SYMBOL","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_DEF_FCT","AST_DEF_ARGS","AST_DEF_ARG_KWARGS","AST_CALL","AST_CALL_ARG_KW","AST_CTRL_WHILE","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CTRL_FOR","AST_BODY","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","debug_print_exception","err","sb","stack","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","line","col","pos","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","TYPEID_None","TYPEID_NoneType","TYPEID_NotImplemented","TYPEID_float","TYPEID_bool","TYPEID_type_int_","TYPEID_type_float_","TYPEID_type_bool_","Array","LIST","require","body","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_GT","OP_CMP_LT","OP_CMP_GE","OP_CMP_LE","OP_BOOL_NOT","pyop_priorities","opsymbol2opid","OP_EQ2IS","o","RET_INT2INT","RET_FLOAT","jscode","ast","filename","AST2JS","args","AssignOperators","c2","fist","KW","kw","keywords","getKW","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","write_multi_jsop","end","Symbol","assert","cond","__int__","_op","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","w_JSCmpOp","default_call","ARRAY_TYPE","Float64Array","ArrayBuffer","maxByteLength","NEXT_AST_NODE_ID","addFirstChild","ASTNODES","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","addSibling","ASTNODE_NEXT_SIBLING","createASTNode","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","setFirstChild","setSibling","sibling","setType","setResultType","a_value","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","defineProperty","enumerable","get","obj","prop","hasOwnProperty","toStringTag","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","code","curChar","CURRENT_PARAM_TYPE","POSONLY_END","offset","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","id","readExpr","KNOWN_SYMBOLS","first","readBody","SType_fct","STypeID","CURRENT_INDENTATION","consumeIndentedLines","beg","readLine","readComment","indent","readToken","astnode_type","result_type","token","symbol","next","isEndOfExpr","readOp","nextChar","op_str","createCallOpNode","rop","rop_prio","lop","lop_prio","push","py2ast","_code","opnode","pyop_name","ret_type","SBrython","browser","globalThis","buildModule","Function","runJSCode","getModules","getModule","print"],"sourceRoot":""}