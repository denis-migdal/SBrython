{"version":3,"file":"libs/SBrython-prod/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/types/type[bool].ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/fct/def_meth.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n\trequire(\"./fct/def_meth\").default,\n\trequire(\"./op/assign_attr\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"FCT_DEF_METH\",\n\t\"OP_ASSIGN_ATTR\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren > 2 ) {\n        w_str(\"_sb_.mix(\");\n        for (let i = 1; i < nbChildren; ++i) {\n            w_node(body+i);\n            w_str(\", \");\n        }\n        w_str(\")\");\n    } else if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\" {\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let fct: Type;\n    let coffset: number;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        coffset = addChild(dst, 1 + node.args.length + node.keywords.length + 1);\n        convert_node(coffset, node.func.value, context );\n        const type = resultType(coffset);\n\n        ++coffset;\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n        coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __class__: TYPE_type_str_,\n        __len__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_node( firstChild(node) + 1 );\n                w_str(\".length\");\n            })\n        }\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"float\",\n        [JS_NAME]: \"Number\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"str\",\n        [JS_NAME]: \"String\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport const RETURN_TYPE = Symbol();\nexport const TYPEID      = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const JS_NAME     = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct<[number]>,\n    __int__  ?: Fct<[number]>,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF, AST_FCT_DEF_METH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_FCT_DEF;\n    if( context.type === \"class\") {\n        type = AST_FCT_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO].generate!;\n        SType_fct.__call__[ARGS_INFO].generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { TYPE_type, TYPE_type_bool_ } from \"./bases\";\nimport { JS_NAME } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_bool_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"bool\",\n        [JS_NAME]: \"Boolean\",\n    }\n);","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool, TYPE_type_bool_ } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __class__: TYPE_type_bool_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, firstChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport { printNode } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[coffset+1];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, number>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"int\",\n        [JS_NAME]: \"BigInt\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild } from \"../dop\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_FLOAT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node) + 1, \")\");\n            })\n        },\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\nimport { TYPEID_NoneType } from \"../types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN_ATTR = 44;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_METH = 43;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            write_id_jsop(node, self);\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_sns(\"_sb_.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type               = 7;\nexport const TYPEID_type_int_          = 8;\nexport const TYPEID_type_float_        = 9;\nexport const TYPEID_type_str_          =10;\nexport const TYPEID_type_bool_         =11;\n\nexport default [];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(typedesc: any) {\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[number]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parentTypeID!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default {};","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: number) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n\n    w_NL();\n    const name = VALUES[coffset+1];\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_type_bool_\t= Object.create(null);\nexport const TYPE_type\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 40 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \".\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { addType } from \"./utils/addType\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { Callable, Fct, WRITE_CALL } from \"./utils/types\";\n\n// builtin symbols.\nexport default {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    type : TYPEID_type,\n    len  : addType( genUnaryOpFct(\"len\", RET_INT)),\n    abs  : addType( genUnaryOpFct(\"abs\", RET_INT)), //TODO...\n    print: addType({\n        __name__: \"print\",\n        __call__: method_wrapper(RET_None, (call:number) => {\n            const coffset  = firstChild(call);\n            const nb_child = nbChild(call);\n\n            w_str(\"__SB__.print(\");\n            for(let i = 1; i < nb_child; ++i) {\n                w_node(coffset + i);\n                w_str(\", \");\n            }\n            w_str(\")\");\n        })\n    }),\n};\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname] as Callable;\n            return method.__call__[WRITE_CALL](call);\n        })\n    }\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { type Context, convert_node, swapASTNodes } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, firstChild, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\nimport { method_wrapper } from \"../types/utils/methods\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport { TYPE_type } from \"../types/bases\";\nimport Types from \"../types\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPE_type,\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = Types[instance_TypeID];\n    const inst_type  = Types[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i){\n        convert_node(i+coffset, node.bases[i-1], context);\n        const stypeID = resultType(i+coffset);\n\n        // could be optimized...\n        weak_assign(klass_type, Types[stypeID]);\n        weak_assign(inst_type , Types[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[number, number]>;\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' || op === \"is not\") {\n            let jop = '===';\n            if( op === \"is not\")\n                jop = '!==';\n\n            const ltype = resultType(left);\n            const rtype = resultType(right);\n\n            let l = left;\n            let r = right;\n\n            if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n                l = Number2Int(l);\n            else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n                r = Number2Int(r);\n\n\n            write_binary_jsop(node, l, jop, r);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, PY_CODE, VALUES } from \"../dop\";\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = Types[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n\trequire(\"./type[bool]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", coffset+1, \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { TYPEID_type } from \"./index\";\nimport { w_sns } from \"../ast2js/utils\";\nimport { firstChild } from \"../dop\";\nimport { TYPE_type } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\n\nexport default Object.assign(TYPE_type,\n    {\n        __class__: TYPE_type,\n        __name__ : \"type\",\n        __call__ : method_wrapper( () => TYPEID_type, (call: number) => {\n            const coffset = firstChild(call);\n            w_sns(\"(\", coffset+1, \").constructor\");\n        })\n    });","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_int } from \".\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { write_id_jsop } from \"../structs/operators/id\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __class__: TYPE_type_int_,\n        __abs__: {\n            __call__: method_wrapper(RET_JSINT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["LIST","require","ILIST","push","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","i","w_node","w_sns","convert","dst","context","fct","coffset","func","name","attr","addChild","args","length","keywords","convert_node","value","type","resultType","Types","id","fct_type","local_symbols","ret_type","__call__","RETURN_TYPE","setType","AST_FCT_CALL","setResultType","keyword","rchild","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Error","Function","runJSCode","getModules","getModule","getASTFor","print","console","log","_r_","_sb_","Object","assign","TYPE_str","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","TYPE_type","__name__","JS_NAME","RET_FLOAT","other","other_type","TYPEID_float","__int__","WRITE_CALL","other_value","AST_LIT_STR","Int2Number","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","undefined","kwargs","write_arg","isLast","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","Symbol","TYPEID","FAKE_RETURN_NODE","constructor","$name","generate","rtype","stype","call","createSubContext","parentTypeID","convert_args","annotation","returns","fct_return_type","last_type","Body","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_FCT_DEF_METH","klass","method_name","gen","instanceType","warn","instanceTypeID","addType","abs","n","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","TYPE_type_bool_","bname2pyname","AST_OP_ASSIGN_AUG","target","Py_object","TYPE_bool","RET_IJBF2BOOL","targets","result_type","AST_OP_ASSIGN","AST_OP_ASSIGN_ATTR","attrname","attrdef","AST_OP_ASSIGN_INIT","str","AST2JS","py2ast","code","parser","$B","Parser","nodes","convert_ast","_PyPegen","run_parser","dop_reset","createASTNode","Context","ASTNODES","symbols","builtins","createClassContext","ctx","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","alt","AST_SYMBOL","AST_OP_ATTR","type_obj","TYPE_float","arg","__abs__","RET_IJBF2FLOAT","_node","_op","genUnaryOps","AST_KEY_IMPORT","names","module","idx","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_None","TYPEID_NoneType","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","TYPE_int","__ceil__","CONVERT_2INT","write_unary_jsop","PythonError","python_exception","super","_raw_err_","TYPEID_type","TYPEID_type_int_","TYPEID_type_float_","TYPEID_type_str_","float2str","f","toExponential","sign_idx","slice","toString","includes","typedesc","obj","left","bname2jsop","kname","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","ARRAY_TYPE","Float64Array","NEXT_AST_NODE_ID","parent","offset","ASTNODE_SIZE","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","beg","cn","end","elts","int","float","len","genUnaryOpFct","nb_child","opname","test","asname","right","ltype","reversed_operator","swapASTNodes","weak_assign","src","instance_TypeID","typeID","klass_type","inst_type","bases","stypeID","_context","orelse","debug_print_exception","err","sb","stack","isV8","split","e","filter_stack","map","l","_line","_col","fct_name","line","col","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","jop","write_multi_jsop","ao","bo","brython_node","BRY2SBRY","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","cur","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","hasOwnProperty"],"sourceRoot":""}