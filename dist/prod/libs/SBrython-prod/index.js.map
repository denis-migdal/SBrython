{"version":3,"file":"libs/SBrython-prod/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js?a779","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ids.js?ca5b","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/fct/def_meth.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/types/type[bool].ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/types/index.js?56f3","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts"],"sourcesContent":["import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __class__: TYPE_type_str_,\n        __len__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_node( nextSibling(firstChild(node)) );\n                w_str(\".length\");\n            })\n        }\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = Types[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default class Py_object {\n\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[] = unknown[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_type_bool_\t= Object.create(null);\nexport const TYPE_type\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\n","export default {};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_node( firstChild(node) );\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_int } from \".\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { write_id_jsop } from \"../structs/operators/id\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __class__: TYPE_type_int_,\n        __abs__: {\n            __call__: method_wrapper(RET_JSINT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: NODE_ID, self: NODE_ID, op, other: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: NODE_ID, self: NODE_ID, op, other: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: NODE_ID, a: NODE_ID) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"float\",\n        [JS_NAME]: \"Number\",\n        __call__ : method_wrapper(RET_FLOAT, (node: NODE_ID) => {\n\n            const other = nextSibling(firstChild(node));\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: NODE_ID, self: NODE_ID, other: NODE_ID) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: NODE_ID, self: NODE_ID, other: NODE_ID) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: NODE_ID, self: NODE_ID, other: NODE_ID) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: NODE_ID, a: NODE_ID, op: string, b: NODE_ID) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: NODE_ID) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    //TODO: opti...\n    let nb_call_args = 0;\n    let cur = coffset;\n    while( (cur = nextSibling(cur)) !== 0) ++nb_call_args;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n\n    cur = coffset;\n    for(let i = 0; i < nb_call_args; ++i) {\n        cur = nextSibling(cur);\n\n        if( type(cur) === AST_FCT_CALL_KEYWORD ) {\n            nb_pos_call = i;\n            break;\n        }\n    }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    cur = coffset;\n    for(let i = 0; i < cutoff; ++i) {\n        cur = nextSibling(cur);\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, NODE_ID> = {};\n    const kwargs: Record<string, NODE_ID> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            cur = nextSibling(cur);\n            w_node(cur);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                cur = nextSibling(cur);\n                w_node(cur);\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i) {\n            cur = nextSibling(cur);\n            kw[ args_names[i-1] ] = cur;\n        }\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        cur = nextSibling(cur);\n        const name = VALUES[cur];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = cur;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = cur;\n        else {\n            kwargs[name] = cur;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF, AST_FCT_DEF_METH } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_FCT_DEF;\n    if( context.type === \"class\") {\n        type = AST_FCT_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO].generate!;\n        SType_fct.__call__[ARGS_INFO].generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","// needs to be JS compatible\n\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Functions\nexport const AST_FCT_DEF            = last_id++;\nexport const AST_FCT_DEF_METH       = last_id++;\nexport const AST_FCT_DEF_ARGS       = last_id++;\nexport const AST_FCT_CALL           = last_id++;\nexport const AST_FCT_CALL_KEYWORD   = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IFBLOCK       = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;","import { NODE_ID } from \"../dop\";\n\nexport * from './ids';\n\nexport default [] as ((node: NODE_ID) => void)[];","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import Types from \"../list\";\n\nexport function addType(typedesc: any) {\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    Types[id] = obj;\n\n    return id;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { printNode } from \"@SBrython/sbry/py2ast\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' ) {\n                printNode(left);\n                printNode(right);\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n            }\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n\n        write_binary_jsop(node, l, jop, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { TYPEID_type } from \"./index\";\nimport { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\nimport { TYPE_type } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\n\nexport default Object.assign(TYPE_type,\n    {\n        __class__: TYPE_type,\n        __name__ : \"type\",\n        __call__ : method_wrapper( () => TYPEID_type, (call: NODE_ID) => {\n            const coffset = nextSibling(firstChild(call));\n            w_sns(\"(\", coffset, \").constructor\");\n        })\n    });","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \".\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { addType } from \"./utils/addType\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\n// builtin symbols.\nexport default {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    type : TYPEID_type,\n    len  : addType( genUnaryOpFct(\"len\", RET_INT)),\n    abs  : addType( genUnaryOpFct(\"abs\", RET_INT)), //TODO...\n    print: addType({\n        __name__: \"print\",\n        __call__: method_wrapper(RET_None, (call:NODE_ID) => {\n            const coffset  = firstChild(call);\n\n            w_str(\"__SB__.print(\");\n            let cur = nextSibling(coffset);\n            while(cur !== 0) {\n                w_node(cur);\n                w_str(\", \");\n                cur = nextSibling(cur);\n            }\n            w_str(\")\");\n        })\n    }),\n};\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: NODE_ID) => {\n            const left   = nextSibling(firstChild(call));\n            const method = Types[resultType(left)]![opname] as Callable;\n            return method.__call__[WRITE_CALL](call);\n        })\n    }\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    // if\n    w_sns(\"if(\", cur, \"){\", cur = nextSibling(cur), \"}\");\n    cur = nextSibling(cur);\n\n    // else if\n    while(cur !== 0) {\n\n        let cond: NODE_ID = cur;\n        cur = nextSibling(cur);\n\n        if( cur !== 0)\n            w_sns(\"else if(\", cond, \"){\", cur, \"}\");\n        else\n            w_sns(\"else {\", cond, \"}\");\n\n        cur = nextSibling(cur);\n    }   \n}","const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign_attr\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/true\").default,\n\trequire(\"./lit/false\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/def_meth\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"FCT_DEF\",\n\t\"FCT_DEF_METH\",\n\t\"FCT_DEF_ARGS\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild = firstChild(node);\n    \n    let cur = nextSibling(rchild);\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: NODE_ID, op: string, a: NODE_ID) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: NODE_ID, self: NODE_ID) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: NODE_ID, op: string, a: NODE_ID) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"int\",\n        [JS_NAME]: \"BigInt\",\n        __call__: method_wrapper(RET_INT, (node: NODE_ID) => {\n\n            const other = nextSibling(firstChild(node));\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\nimport { TYPEID_NoneType } from \"../types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { TYPE_type, TYPE_type_bool_ } from \"./bases\";\nimport { JS_NAME } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_bool_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"bool\",\n        [JS_NAME]: \"Boolean\",\n    }\n);","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n\trequire(\"./type[bool]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, c2);\n}","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","import { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\nimport { method_wrapper } from \"../types/utils/methods\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport { TYPE_type } from \"../types/bases\";\nimport Types from \"../types\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPE_type,\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = Types[instance_TypeID];\n    const inst_type  = Types[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, Types[stypeID]);\n        weak_assign(inst_type , Types[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type               = 7;\nexport const TYPEID_type_int_          = 8;\nexport const TYPEID_type_float_        = 9;\nexport const TYPEID_type_str_          =10;\nexport const TYPEID_type_bool_         =11;\n\nexport default [];","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            coffset = addSibling(coffset);\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        coffset = addSibling(coffset);\n        convert_node(coffset, cur.test, context);\n        coffset = addSibling(coffset);\n        Body(coffset, cur.body, context);\n\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n    }\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[NODE_ID, NODE_ID]>;\n    method[WRITE_CALL]!(node, coffset, nextSibling(coffset) );\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol();\nexport const TYPEID      = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const JS_NAME     = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct<[NODE_ID]>,\n    __int__  ?: Fct<[NODE_ID]>,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: NODE_ID, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    w_str(\"var \");\n\n    let rchild    = firstChild(node);\n\n    let cur = nextSibling(rchild);\n\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: NODE_ID, op: string ) {\n\n    const first      = firstChild(node);\n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    setParentOPPrio(first, prio);\n\n    let cur = nextSibling(first);\n    while(cur !== 0) {\n\n        setParentOPPrio( cur, prio + 1 );\n\n        w_str(' && ');\n        w_node(cur);\n\n        cur = nextSibling(cur);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg: NODE_ID) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_FLOAT, (node) => {\n                w_sns(\"Math.abs(\", nextSibling(firstChild(node)), \")\");\n            })\n        },\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    //TODO...\n\n    let cur    = firstChild(node);\n    let nbChildren = 0;\n    while(cur !== 0) {\n        ++nbChildren;\n        cur = nextSibling(cur);\n    }\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n\n    cur    = firstChild(node);\n\n    let count = 0;\n    while(cur !== 0) {\n\n        //TODO...\n        if( kw_start === count)\n            w_str(\"{\");\n\n        ++count;\n\n        write_arg(cur);\n\n        w_str(\", \");\n        \n        cur = nextSibling(cur);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: NODE_ID) {\n    \n    const offset = 4*(node as number);\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( nextSibling(node) === 0 )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: NODE_ID, a: NODE_ID, op: string, b: NODE_ID, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: NODE_ID, self: NODE_ID, o: NODE_ID, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[NODE_ID]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\nconst s = Symbol();\nexport type NODE_ID = 0 | typeof s;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID) {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, nextSibling, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"str\",\n        [JS_NAME]: \"String\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = nextSibling(firstChild(node));\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg: NODE_ID) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self: NODE_ID) => {\n            write_id_jsop(node, self);\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_sns(\"_sb_.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: NODE_ID, self: NODE_ID, op: string, other: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool, TYPE_type_bool_ } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __class__: TYPE_type_bool_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, NODE_ID, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: NODE_ID) {\n\n    const offset = 4*(id as number);\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, number>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n"],"names":["Object","assign","TYPE_str","__class__","TYPE_type_str_","__len__","__call__","method_wrapper","RET_INT","node","w_node","nextSibling","firstChild","w_str","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","resultType","TYPEID_str","t","w_sns","convert","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWARG","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_POS","convert_args","dst","SType_fct","context","meta","ARGS_INFO","_args","args","has_vararg","undefined","vararg","has_kwarg","kwarg","args_pos","args_names","total_args","posonlyargs","length","kwonlyargs","cur","first","setType","AST_FCT_DEF_ARGS","addSblng","addSibling","addFirstChild","pos_defaults","defaults","posonly","pos","doffset","i","convert_arg","local_symbols","arg","offset","idx_vararg","idx_end_pos","Number","POSITIVE_INFINITY","nb_pos_defaults","Math","min","has_others","cut_off","end","kwonly","kw_defaults","has_kw","kwargs","VALUES","defval","type","name","result_type","TYPEID_NotImplementedType","annotation","id","Types","RETURN_TYPE","coffset","convert_node","TYPEID_jsint","TYPEID_int","setResultType","brython_name","Py_object","RET_TYPE","write","r","create","WRITE_CALL","TYPE_type_int_","TYPE_type_float_","TYPE_type_bool_","TYPE_type","TYPE_jsint","TYPE_int","TYPE_float","TYPE_bool","TYPE_NotImplementedType","TYPE_NoneType","nbChildren","handlers","AST_CTRL_TRYBLOCK","Body","body","ExceptHandler","ast2js","AST_KEY_IMPORT","names","module","Py_Exception","test","orelse","AST_CTRL_TERNARY","idx","list","__abs__","RET_JSINT","__ceil__","write_id_jsop","RET_IJ2INT","convert_self","CONVERT_2INT","Number2Int","Int2Number","write_binary_jsop","RET_IJBF2FLOAT","RET_JSINT2JSINT","self","other","genUnaryOps","write_unary_jsop","RET_IJBF2BOOL","target","iter","constructor","$name","func","AST_CTRL_FOR","value","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","values","console","warn","TYPEID_NoneType","AST_KEY_RETURN","parentTypeID","setParentOPPrio","parentOPPrio","__name__","JS_NAME","RET_FLOAT","other_type","TYPEID_float","__int__","other_value","AST_LIT_STR","ops","return_type","NOCONVERT","result","pyop","jsop2pyop","prio","JSOperatorsPrio","p_prio","l","default_call","nb_call_args","nb_pos_call","AST_FCT_CALL_KEYWORD","max_pos","vararg_array","cutoff","kw","call_has_kw","call_has_kwargs","Array","max","varg_nb","key","AST_LIT_FSTRING_FVAL","Error","FAKE_RETURN_NODE","generate","rtype","stype","call","createSubContext","returns","fct_return_type","last_type","push","STypeID","AST_FCT_DEF","AST_FCT_DEF_METH","klass","method_name","gen","instanceType","instanceTypeID","addType","BB","w_NL","BE","float2str","f","str","toExponential","sign_idx","slice","toString","includes","last_id","AST_SYMBOL","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_STRUCT_DICT","AST_KEY_PASS","AST_KEY_RAISE","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_UNARY","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN_ATTR","AST_OP_ASSIGN","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_FCT_CALL","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK_CATCH","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","asname","typedesc","obj","PythonError","python_exception","super","_raw_err_","this","cn","beg","abs","n","Py_JSException","fct","attr","fct_type","ret_type","keywords","keyword","writeOp","count","left","right","jop","ltype","reversed","method","reversed_operator","jsop","find_and_write_call","kname","rchild","TYPEID_type","int","TYPEID_type_int_","TYPEID_type_str_","float","TYPEID_type_float_","len","genUnaryOpFct","print","RET_None","opname","debug_print_exception","err","sb","stack","isV8","split","filter","e","filter_stack","map","_","_line","_col","fct_name","line","col","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","cond","LIST","require","ILIST","elts","_context","vtype","qname","TYPEID_bool","__qualname__","rop","exc","o","RET_INT2INT","RET_STR","jscode","ast","filename","AST2JS","AssignOperators","c2","bname2pyname","left_id","right_id","setFirstChild","setSibling","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","write_multi_jsop","weak_assign","src","instance_TypeID","typeID","klass_type","inst_type","createClassContext","bases","stypeID","brython_node","BRY2SBRY","Symbol","TYPEID","assert","BinaryOperators","JSOperators","JSOperatorsPriority","priority","parenthesis","__str__","_node","_op","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","kw_start","write_arg","type_id","reverse","write_compare_jsop","cop","targets","attrname","attrdef","keys","ARRAY_TYPE","Float64Array","NEXT_AST_NODE_ID","ASTNODES","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","createASTNode","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","parent","sibling","nops","nb_ops","comparators","operand","a_value","type_obj","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","py2ast","code","parser","$B","Parser","convert_ast","_PyPegen","run_parser","Context","symbols","builtins","ctx","alt","bname2jsop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","hasOwnProperty","SBrython","browser","globalThis","buildModule","Function","runJSCode","getModules","getModule"],"sourceRoot":""}