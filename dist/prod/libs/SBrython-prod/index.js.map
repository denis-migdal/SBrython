{"version":3,"file":"libs/SBrython-prod/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"float\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"str\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct<[number]>,\n    __int__  ?: Fct<[number]>,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, AST_FCT_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_OP_ASSIGN, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = AST_OP_ASSIGN;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = AST_OP_ASSIGN_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"./types/utils/types\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : id2name[type(id)],\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname] as Fct;\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; // is it used ?\n    type; //TODO: remove\n}\n\n// builtin symbols.\nconst builtins = {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT))\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"int\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type               = 7;\nexport const TYPEID_type_int_          = 8;\nexport const TYPEID_type_float_        = 9;\nexport const TYPEID_type_str_          =10;\n\nexport default [];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[number]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default {};","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_type\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { type Context, convert_node, swapASTNodes } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = context.createSubContext(\"class\");\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[number, number]>;\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, PY_CODE, VALUES } from \"../dop\";\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { TYPE_type } from \"./bases\";\n\nexport default Object.assign(TYPE_type,\n    {\n        __class__: TYPE_type,\n        __name__ : \"type\",\n        // TODO: __call__ ...\n    });","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["LIST","require","ILIST","push","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","w_node","w_sns","convert","dst","context","name","func","id","fct_type","local_symbols","fct","Types","ret_type","__call__","RETURN_TYPE","setType","AST_FCT_CALL","setResultType","coffset","addChild","args","length","keywords","convert_node","i","keyword","rchild","resultType","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Error","Function","runJSCode","getModules","getModule","getASTFor","_r_","_sb_","Object","assign","TYPE_str","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","TYPE_type","__name__","RET_FLOAT","other","other_type","TYPEID_float","__int__","WRITE_CALL","other_value","type","AST_LIT_STR","Int2Number","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","undefined","kwargs","write_arg","isLast","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","Symbol","FAKE_RETURN_NODE","constructor","$name","generate","rtype","stype","call","createSubContext","parent_node_context","convert_args","annotation","returns","fct_return_type","last_type","Body","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","bname2pyname","AST_OP_ASSIGN_AUG","target","value","Py_object","TYPE_bool","RET_IJBF2BOOL","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_INIT","result_type","str","AST2JS","py2ast","code","parser","$B","Parser","nodes","convert_ast","_PyPegen","run_parser","dop_reset","createASTNode","Context","ASTNODES","type_fct","symbols","builtins","int","TYPEID_type_int_","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","return_type","left","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","AST_SYMBOL","AST_OP_ATTR","attr","TYPE_float","arg","RET_IJBF2FLOAT","_node","_op","genUnaryOps","AST_KEY_IMPORT","names","module","idx","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","console","warn","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","TYPE_int","CONVERT_2INT","write_unary_jsop","PythonError","python_exception","super","_raw_err_","TYPEID_NoneType","float2str","f","toExponential","sign_idx","slice","toString","includes","typedesc","obj","bname2jsop","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","ARRAY_TYPE","Float64Array","NEXT_AST_NODE_ID","parent","offset","ASTNODE_SIZE","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","beg","cn","end","elts","test","asname","right","ltype","reversed_operator","swapASTNodes","bases","_context","orelse","debug_print_exception","err","sb","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","line","col","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","write_multi_jsop","ao","bo","brython_node","BRY2SBRY","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","cur","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"sourceRoot":""}