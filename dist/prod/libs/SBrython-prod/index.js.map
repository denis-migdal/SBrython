{"version":3,"file":"libs/SBrython-prod/index.js","mappings":"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AMhD,EAAAA,EAAAA,IAAYgD,GAClB,IACItC,EAAAA,EAAAA,IAAM,OACNH,EAAAA,EAAAA,IAAOyC,GACPA,GAAMhD,EAAAA,EAAAA,IAAYgD,SACN,IAARA,IAERtC,EAAAA,EAAAA,IAAM,IACV,EAGAgB,EAAAA,EAAAA,IAAM,KAAM+F,EAAM,IACtB,C,+RC3BO,MAAMsB,EAAgB,EAChBC,EAAgB,EAChBF,EAAgB,EAChBG,EAAgB,EAChBC,EAAgB,EAChBnI,EAAgB,EAChB8H,EAAgB,EAChB5H,EAAgB,EAChBuI,EAAgB,EAChBE,EAAgB,EAChBE,EAAgB,GAChBhB,EAAgB,GAChB8M,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAEhBlM,EAAgB,GAChBE,EAAgB,GAMhBiM,EAAgB,GAKhBC,EAAkB,CAC9B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,GAKYrK,EAAkB,CAC9B,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GAGYN,EAAiB,CAC7B,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,gBAGYC,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,UACA,SACA,SACA,SACA,UAkBYQ,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,MACA,MACA,KACA,KACA,IACA,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A,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAA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","sources":["webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js?a779","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/list.js?6004","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/types/list.js?29f5","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/webpack/runtime/make namespace object","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts"],"sourcesContent":["import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addFirstChild, addSibling, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setResultType, setType, type, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport TYPES, { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_DEF_ARG_KWARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARGS } from \"@SBrython/sbry/ast2js/list\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: NODE_ID, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO]!;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_DEF_ARGS);\n\n    let cur!: NODE_ID;\n    let first!: NODE_ID;\n    let addSblng = (node: NODE_ID) => {\n        addSblng = addSibling;\n        return first = addFirstChild(dst);\n    }\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, posonly[i], pos_defaults[i - doffset], AST_DEF_ARG_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(cur);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        cur = addSblng(cur);\n        convert_arg(cur, pos[i], pos_defaults[i - doffset], AST_DEF_ARG_POS, context);\n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.vararg, undefined, AST_DEF_ARG_VARARGS, context);\n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[args_names[i]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[args_names[i]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, kwonly[i], kw_defaults[i], AST_DEF_ARG_KWONLY, context);\n        args_pos[kwonly[i].arg] = -1;\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n\n        cur = addSblng(cur);\n        convert_arg(cur, _args.kwarg, undefined, AST_DEF_ARG_KWARGS, context);\n        meta.kwargs = _args.kwarg.arg;\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, first, cur);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*(dst as number);\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: NODE_ID, node: any, defval: any, type: NODE_TYPE, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = TYPES[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default class Py_object {\n\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","export default {};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    let cur = addFirstChild(dst)\n\n    // try body\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        ExceptHandler(cur, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(cur, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let cur = addFirstChild(dst);\n\n    convert_node(cur  , node.test  , context);\n    cur = addSibling(cur);\n    convert_node(cur, node.body  , context); // true\n    setResultType(dst, resultType(cur));\n    cur = addSibling(cur);\n    convert_node(cur, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addFirstChild(dst);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        const body = addSibling(coffset);\n        Body(body, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(body, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n\n    let cur    = addFirstChild(dst);\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    const nbChildren = args.length;\n    for(let i = 1; i < nbChildren ; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, args[i-1], context);\n    }\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const values = node.values;\n    const nbChildren = values.length;\n\n    if( nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        console.warn( values[i].constructor.$name); //TODO: not used yet.\n        convert_node(cur, values[i], context);\n    }\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport TYPES, { TYPEID_NoneType } from \"@SBrython/sbry/types/list\";\n\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addFirstChild(dst);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (TYPES[context.parentTypeID!] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        let op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, `__i${op}__`, return_type, (node: NODE_ID) => {\n\n                const _ = firstChild(node);\n                const a = nextSibling(_);\n                const b = nextSibling(a);\n\n                const other_value = VALUES[b];\n\n                //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --\n\n                //TODO...\n\n                return w_JSBinOp(node, a, op, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","// @ts-nocheck\n\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/call/\";\nimport { convert_args } from \"./Args\";\nimport { AST_DEF_FCT, AST_DEF_METH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: NODE_ID, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addFirstChild(dst);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO]!;\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = rtype; // TODO <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        const fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length as TYPE_ID;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_DEF_FCT;\n    if( context.type === \"class\") {\n        type = AST_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO]!.generate!;\n        SType_fct.__call__[ARGS_INFO]!.generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { AST_BODY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n\n    if(nbChildren === 0)\n        return;\n\n    let cur    = addFirstChild(dst);\n\n    let cn = node[0];\n    if(cn.constructor.$name === \"Expr\") // only found in body ?\n        cn = cn.value;\n\n    convert_node(cur, cn, context);\n\n\n    for(let i = 1; i < nbChildren; ++i) {\n\n        cur = addSibling(cur);\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(cur, cn, context);\n\n        while( nextSibling(cur) !== 0) // for if & try/catch...\n            cur = nextSibling(cur);\n    }\n\n    const beg = Types.length;\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO]!.generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_CALL_ARG_KW } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CALL_ARG_KW);\n\n    const coffset = addFirstChild(dst);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { AST_CALL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let fct: Type;\n    let cur = addFirstChild(dst);;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        convert_node(cur, node.func.value, context );\n        const type = resultType(cur);\n        cur = addSibling(cur);\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(cur, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.args[i], context );\n    }\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        cur = addSibling(cur);\n        keyword(cur, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(cur, node.keywords[i]);\n    }\n\n    VALUES[dst] = fct;\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__DEBUG__)\n        w_str(`/*${VALUES[node]} */`);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_type } from \"./list\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import Types, { TYPEID_type, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_str_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        const method = Types[resultType(a)]![opname] as Callable;\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset  , node.test, context);\n\n    const body = addSibling(coffset);\n    Body(body, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(body, node.body);\n\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_None               = 1;\nexport const TYPEID_NoneType           = 2;\nexport const TYPEID_NotImplemented     = 3;\nexport const TYPEID_NotImplementedType = 4;\nexport const TYPEID_int                = 5;\nexport const TYPEID_jsint              = 6;\nexport const TYPEID_float              = 7;\nexport const TYPEID_bool               = 8;\nexport const TYPEID_str                = 9;\nexport const TYPEID_type               =10;\nexport const TYPEID_type_int_          =11;\nexport const TYPEID_type_jsint_        =12;\nexport const TYPEID_type_float_        =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_type_bool_         =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"unknown\",\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { AST_LIT_FALSE, AST_LIT_TRUE, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            const type = value ? AST_LIT_TRUE : AST_LIT_FALSE;\n\n            setType      (dst, type);\n            setResultType(dst, TYPEID_bool);\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = `'${value}'`; // restaure quotes\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value.toString();\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value.toString();\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value.toString();\n    }\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    let cur          = addFirstChild(dst);\n    convert_node(cur, node.names[0], context);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.names[i], context); // not used yet ?\n    }\n\n    VALUES[dst] = node.module;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild = firstChild(node);\n    \n    let cur = nextSibling(rchild);\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_EQ     = 12 as const;\nexport const OP_CMP_NEQ    = 13 as const;\nexport const OP_CMP_GT     = 14 as const;\nexport const OP_CMP_LT     = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t8,\n\t8,\n\t9,\n\t9,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\"==\",\n\t\"!=\",\n\t\">\",\n\t\"<\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"^\": OP_BIT_XOR,\n\t\"&\": OP_BIT_AND,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\">>\": OP_BIT_RSHIFT,\n\t\"+\": OP_BIN_ADD,\n\t\"-\": OP_BIN_SUB,\n\t\"*\": OP_BIN_MUL,\n\t\"/\": OP_BIN_DIV,\n\t\"//\": OP_BIN_FDIV,\n\t\"%\": OP_BIN_MOD,\n\t\"**\": OP_BIN_POW,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.exc, context);\n\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node);\n}","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setFirstChild, setResultType, setSibling, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const  left_id = addFirstChild(dst);\n    const right_id = addSibling(left_id);\n    convert_node(left_id , node.left , context); // left\n    convert_node(right_id, node.right, context); // right\n\n    const ltype = resultType(left_id);\n    const rtype = resultType(right_id);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        // swap left&right order...\n        setFirstChild(dst, right_id);\n        setSibling( left_id, 0);\n        setSibling(right_id, left_id);\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","// @ts-nocheck\n\nimport { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset            , node.target, context);\n    convert_node(addSibling(coffset), node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const elts       = node.elts;\n    const nbChildren = elts.length;\n    \n    if( nbChildren === 0)\n        return;\n    \n    let cur = addFirstChild(dst);\n    convert_node( cur , elts[0], context);\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node( cur , elts[i], context);\n    }\n\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","// @ts-nocheck\n\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, firstChild, NODE_ID, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport TYPES, { TYPEID_type } from \"../types/list\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPES[TYPEID_type],\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = TYPES[instance_TypeID];\n    const inst_type  = TYPES[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = node.bases.length;\n    let cur    = addFirstChild(dst);\n\n    Body(cur, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(cur, node.body);\n\n    for(let i = 0; i < nbChildren ; ++i){\n        cur = addSibling(cur);\n        convert_node(cur, node.bases[i], context);\n        const stypeID = resultType(cur);\n\n        // could be optimized...\n        weak_assign(klass_type, TYPES[stypeID]);\n        weak_assign(inst_type , TYPES[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const first = addFirstChild(dst);\n\n    convert_node(first            , node.value, context),\n    convert_node(addSibling(first), node.slice, context)\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n\n    const coffset = addFirstChild(dst);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( node.type !== undefined ) {\n        const cur = addSibling(coffset);\n        convert_node(cur, node.type, context);\n    }\n    \n    VALUES[dst] = node.name;\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, NODE_ID, PY_CODE, VALUES } from \"../dop\";\n\nexport function convert_node(id: NODE_ID, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: NODE_ID, brython_node: any) {\n\n    const offset = 4*(id as number);\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: NODE_ID, dst_beg: NODE_ID, dst_end: NODE_ID ) {\n\n    const src_offset = 4*(src as number);\n    const beg_offset = 4*(dst_beg as number);\n    const end_offset = 4*(dst_end as number) + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_ELIF, AST_CTRL_ELSE, AST_CTRL_IF } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_IF);\n    let coffset = addFirstChild(dst);\n\n    // if\n    convert_node(coffset, node.test, context);\n\n    coffset = addSibling(coffset);\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    let ifblock_cur = dst;\n\n    // else if\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n\n            ifblock_cur = addSibling(ifblock_cur);\n            setType(ifblock_cur, AST_CTRL_ELSE);\n            \n            // body\n            const id = addFirstChild(ifblock_cur);\n            Body(id, cur.orelse, context );\n            if(__DEBUG__) set_py_code_from_list(ifblock_cur, cur.orelse);\n            \n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        ifblock_cur = addSibling(ifblock_cur);\n        setType(ifblock_cur, AST_CTRL_ELIF);\n        \n        // body\n        const first = addFirstChild(ifblock_cur);\n        convert_node(first, cur.test, context); // cond\n\n        const id = addSibling(first);\n        Body(id, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(id, cur.body);\n    }\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    w_str(\"var \");\n\n    let rchild    = firstChild(node);\n\n    let cur = nextSibling(rchild);\n\n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(cur);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        const other_value = VALUES[other];\n\n        if( type(other) === AST_LIT_STR ) {\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addFirstChild(dst);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, nextSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    const nbChildren = targets.length;\n\n    let cur = coffset;\n    for(let i = 0; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, targets[i], context );\n        context.local_symbols[targets[i].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[nextSibling(coffset)];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n\n    const keys   = node.keys;\n    const values = node.values;\n\n    const nbChildren = keys.length;\n    if( nbChildren === 0 )\n        return;\n\n    let cur = addFirstChild(dst);\n    convert_node(cur,   keys[0], context);\n    cur = addSibling(cur);\n    convert_node(cur, values[0], context);\n\n    for(let i = 1; i < node.keys.length; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur,   keys[i], context);\n        cur = addSibling(cur);\n        convert_node(cur, values[i], context);\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","// @ts-nocheck\n\nimport { AST_OP_CMP } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n\n    let cur = addFirstChild(dst);\n    convert_node(cur, node.left, context );\n\n    const nbChildren = node.comparators.length;\n    for(let i = 0 ; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.comparators[i], context);\n    }\n}\n","// @ts-nocheck\n\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS, OP_UNR_PLUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID) => {\n\n                            const a = nextSibling(firstChild(call)); const b = nextSibling(a);\n\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addFirstChild(dst);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","// @ts-nocheck\n\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport { NODE_ID, setResultType, setType, TYPE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    let result_type: TYPE_ID = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/list\";\nimport { addFirstChild, addSibling, NODE_ID, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: NODE_ID, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n\n    let cur    = addFirstChild(dst);\n    convert_node(cur, node.values[0], context )\n    setResultType(dst, resultType(cur) );\n\n    for(let i = 1; i < nbChildren; ++i) {\n        cur = addSibling(cur);\n        convert_node(cur, node.values[i], context )\n    }\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/attr\").default;\nLIST[18 ] = require(\"./op/brackets\").default;\nLIST[19 ] = require(\"./op/assign_aug\").default;\nLIST[20 ] = require(\"./op/assign_init\").default;\nLIST[21 ] = require(\"./op/assign_attr\").default;\nLIST[22 ] = require(\"./op/assign\").default;\nLIST[23 ] = require(\"./lit/str\").default;\nLIST[24 ] = require(\"./lit/int\").default;\nLIST[25 ] = require(\"./lit/float\").default;\nLIST[26 ] = require(\"./lit/fstring\").default;\nLIST[27 ] = require(\"./lit/fstring_fval\").default;\nLIST[28 ] = require(\"./lit/true\").default;\nLIST[29 ] = require(\"./lit/false\").default;\nLIST[30 ] = require(\"./lit/none\").default;\nLIST[31 ] = require(\"./def/fct\").default;\nLIST[32 ] = require(\"./def/meth\").default;\nLIST[33 ] = require(\"./def/args\").default;\nLIST[34 ] = require(\"./def/arg_posonly\").default;\nLIST[35 ] = require(\"./def/arg_pos\").default;\nLIST[36 ] = require(\"./def/arg_varargs\").default;\nLIST[37 ] = require(\"./def/arg_kwonly\").default;\nLIST[38 ] = require(\"./def/arg_kwargs\").default;\nLIST[39 ] = require(\"./call/index\").default;\nLIST[40 ] = require(\"./call/arg_kw\").default;\nLIST[41 ] = require(\"./ctrl/while\").default;\nLIST[42 ] = require(\"./ctrl/tryblock\").default;\nLIST[43 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[44 ] = require(\"./ctrl/ternary\").default;\nLIST[45 ] = require(\"./ctrl/if\").default;\nLIST[46 ] = require(\"./ctrl/elif\").default;\nLIST[47 ] = require(\"./ctrl/else\").default;\nLIST[48 ] = require(\"./ctrl/for_range\").default;\nLIST[49 ] = require(\"./ctrl/for\").default;\nLIST[50 ] = require(\"./classdef\").default;\nLIST[51 ] = require(\"./body\").default;\nLIST[52 ] = require(\"./2bigint\").default;\nLIST[53 ] = require(\"./2number\").default;\nLIST[54 ] = require(\"./comment\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","import Types, { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_CALL_ARG_KW, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST, printNode } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_ID, OP_UNR_MINUS, opid2opmethod, opid2ropmethod, opsymbol2opid, opsymbol2uopid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport { addSymbol, getSymbol } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n\n    return code.slice(offset, offset += end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => setType(id, AST_KEY_RETURN),\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        setFirstChild(id, readExpr() );\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return SType_fct.__call__[RETURN_TYPE]();\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        setSibling(args, readBody() );\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    let curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __DEBUG__ ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr();\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n        \"-\": OP_UNR_MINUS,\n        \"~\": OP_BIT_NOT,\n        \"not\": OP_BOOL_NOT,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE ) { // consume str\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== CHAR_QUOTE);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n       \n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n\n        let astnode_type = AST_LIT_INT;\n        let result_type  = TYPEID_int;\n\n        if( curChar === CHAR_DOT ) {\n\n            astnode_type = AST_LIT_FLOAT;\n            result_type  = TYPEID_float;\n        \n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n        } else if( offset - beg <= 9 ) { // opti\n            result_type = TYPEID_jsint\n        }\n\n\n              setType(node, astnode_type);\n        setResultType(node, result_type);\n        \n        VALUES[node] = code.slice(beg, offset);\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n            setResultType(node, getSymbol(token) );\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n                VALUES[node] = Types[resultType(cur)];\n                //TODO: return type...\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                ++offset; // (\n                consumeSpaces();\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    let next;\n\n                    //TODO: requires op refactor...\n                    if( curChar > CHAR_DIGIT_9 ) { // we assume kw args\n\n                        // h4ck (requires context...)\n                        const name = nextSymbol();\n                        consumeSpaces();\n                        ++offset;\n                        consumeSpaces();\n\n                        next = createASTNode();\n                        setType(next, AST_CALL_ARG_KW);\n                        VALUES[next] = name;\n                        setFirstChild(next, readExpr());\n                    } else {\n                        next = readExpr();\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // priority\n        if( rop_prio > lop_prio ) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\nexport function py2ast(_code: string, filename: string): AST {\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __DEBUG__ ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __DEBUG__ && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n"],"names":["klass","initBuiltinClass","TYPEID_str","TYPEID_type_str_","add_method","RET_STR","node","other","nextSibling","firstChild","other_type","resultType","TYPES","__str__","WRITE_CALL","w_node","RET_INT","call","w_str","addJSCmpOps","JSCmpOps_LIST","RET_STR2BOOL","addJSBinOps","OP_BIN_ADD","RET_STR2STR","OP_BIN_MUL","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","w_call","a","op","b","_","w_sns","convert","convert_args","dst","SType_fct","context","meta","__call__","ARGS_INFO","_args","args","has_vararg","undefined","vararg","has_kwarg","kwarg","args_pos","args_names","total_args","posonlyargs","length","kwonlyargs","cur","first","setType","AST_DEF_ARGS","addSblng","addSibling","addFirstChild","pos_defaults","defaults","posonly","pos","doffset","i","convert_arg","AST_DEF_ARG_POSONLY","local_symbols","arg","offset","AST_DEF_ARG_POS","idx_vararg","idx_end_pos","Number","POSITIVE_INFINITY","AST_DEF_ARG_VARARGS","nb_pos_defaults","Math","min","has_others","cut_off","end","kwonly","kw_defaults","has_kw","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","kwargs","VALUES","defval","type","name","result_type","TYPEID_NotImplementedType","annotation","id","RETURN_TYPE","coffset","convert_node","TYPEID_jsint","TYPEID_int","setResultType","brython_name","Py_object","TypeKlass","TYPEID_type","instance","jsname","Klass","__class__","__name__","__qualname__","JS_NAME","target","RET_TYPE","write","r","Object","create","TYPEID","create_function","nbChildren","handlers","AST_CTRL_TRYBLOCK","Body","body","ExceptHandler","ast2js","AST_KEY_IMPORT","names","module","write_arg","Number2Int","write_posarg","start","Py_Exception","test","orelse","AST_CTRL_TERNARY","idx","list","TYPEID_type_jsint_","RET_JSINT","w_subs","OP_BIN_POW","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_IJBF2BOOL","iter","constructor","$name","func","AST_CTRL_FOR","value","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","values","console","warn","TYPEID_NoneType","AST_KEY_RETURN","parentTypeID","to_write","setParentOPPrio","parentOPPrio","ops","return_type","NOCONVERT","ADD_EQ","opid2opmethod","opid2ropmethod","ADD_INCR","ADD_DECR","other_value","prio","jsop_priorities","p_prio","l","opid2jsop","AST_LIT_FSTRING_FVAL","Error","FAKE_RETURN_NODE","generate","rtype","stype","Types","createSubContext","returns","fct_return_type","last_type","push","default_call","Array","STypeID","AST_DEF_FCT","AST_DEF_METH","method_name","gen","instanceType","instanceTypeID","addType","BB","w_NL","BE","TYPEID_unknown","float2str","f","str","toExponential","sign_idx","slice","toString","includes","AST_KEY_IMPORT_ALIAS","asname","PythonError","python_exception","super","_raw_err_","this","AST_BODY","cn","beg","obj","abs","n","Py_JSException","AST_CALL_ARG_KW","fct","attr","fct_type","ret_type","AST_CALL","keywords","keyword","AST_KEY_CONTINUE","writeOp","count","left","right","jop","ltype","method","reversed_operator","find_and_write_call","kname","rchild","last_id","AST_SYMBOL","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_STRUCT_DICT","AST_KEY_PASS","AST_KEY_RAISE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_OP_UNARY","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_ATTR","AST_OP_BRACKETS","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN_ATTR","AST_OP_ASSIGN","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK_CATCH","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CLASSDEF","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","builtins","TYPEID_type_int_","genOpFct","RET_None","addSymbol","getSymbol","opname","debug_print_exception","err","sb","stack","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","line","col","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","TYPEID_None","TYPEID_NotImplemented","TYPEID_float","TYPEID_bool","TYPEID_type_float_","TYPEID_type_bool_","LIST","require","elts","_context","vtype","qname","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_GT","OP_CMP_LT","OP_CMP_GE","OP_CMP_LE","OP_ASSIGN","OP_BOOL_NOT","pyop_priorities","opsymbol2opid","OP_EQ2IS","exc","o","RET_INT2INT","RET_FLOAT","jscode","ast","filename","AST2JS","AssignOperators","c2","bname2pyname","left_id","right_id","setFirstChild","setSibling","fist","KW","kw","getKW","floordiv_float","floor","floordiv_int","result","mod_float","mod","mod_int","write_multi_jsop","weak_assign","src","key","instance_TypeID","typeID","method_wrapper","klass_type","inst_type","createClassContext","bases","stypeID","brython_node","BRY2SBRY","ifblock_cur","Symbol","assert","cond","__int__","_op","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","w_JSCmpOp","targets","attrname","attrdef","keys","ARRAY_TYPE","Float64Array","ArrayBuffer","maxByteLength","NEXT_AST_NODE_ID","ASTNODES","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","ASTNODE_NEXT_SIBLING","createASTNode","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","sibling","nops","nb_ops","comparators","operand","a_value","type_obj","alt","bname2jsop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","hasOwnProperty","toStringTag","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","assign","ILIST","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","code","curChar","CURRENT_PARAM_TYPE","POSONLY_END","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","readExpr","KNOWN_SYMBOLS","readBody","CURRENT_INDENTATION","consumeIndentedLines","readLine","readComment","indent","readToken","opnode","pyop_name","atype","createCallUopNode","astnode_type","token","symbol","next","isEndOfExpr","readOp","nextChar","op_str","createCallOpNode","rop","rop_prio","lop","lop_prio","py2ast","_code","node_type","SBrython","browser","globalThis","buildModule","Function","runJSCode","getModules","getModule","print"],"sourceRoot":""}