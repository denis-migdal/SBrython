{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"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CA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGY2D,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYC,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGY3C,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,MACA,MACA,KACA,KACA,IACA,GAEA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGY4C,EAAiB,CAC7B,IAAKrM,EACL,KAAMA,EAAU,GAChB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAKF,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAc,GACrB,KAAMC,EACN,MAAOA,EAAc,GACrB,IAAKN,EACL,KAAMA,EAAW,GACjB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAKU,EACL,KAAMA,EAAW,GACjB,IAAKW,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAY,GACnB,IAAKE,EACL,KAAMA,EAAW,GACjB,KAAM5B,EACN,MAAOA,EAAW,GAClB,IAAKwI,EACL,IAAKF,EACL,KAAMF,EACN,KAAMC,EACN,KAAMI,EACN,KAAMF,EACN,IAAK6D,EACL,GAtN4B,GAuN5B,GAtN4B,GAuN5B,SAtN4B,GAuN5B,GAtN4B,GAuN5B,IAtN4B,GAuN5B,SArN4B,IA+NhBtD,EApOgB,GAoOOV,C,0DC1PrB,SAAS/F,EAAOvB,GAE3B,IAAI6E,GAAS9F,EAAAA,EAAAA,IAAWiB,GAapB,KAXJnB,EAAAA,EAAAA,IAAM,QAASgG,EAAK,wBACpBuF,EAAAA,EAAAA,OACAhH,EAAAA,EAAAA,OAEI5B,EAAAA,EAAAA,IAAM,0DAENqD,GAAM/F,EAAAA,EAAAA,IAAY+F,GACN,IAARA,IACA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AAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EAEZ,MC7DA,IACC,OAAUA,EAAAA,KAAAA,EACV,YAAeA,EAAAA,MAAAA,EACf,UAAaA,EAAAA,MAAAA,GCHd,OACIA,EAAAA,MAAAA,MACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,KAAAA,GCEJ2J,WAAWC,IAAQC,OAEnBF,WAAWG,MAAQC,OAEnBJ,WAAWK,KAAQC,QAEnBN,WAAW3K,IAAQkL,OAEZ,MAAMC,GAET,GAAuC,CAAC,EACxC,GAAiD,CAC7CC,QAAST,YAObU,WAAAA,CAAY9L,EAAgBC,GACxB,GAAGA,EAAIC,YAAYhE,MAAK,EACpB,MAAM,IAAIpH,MAAM,OAAOmL,EAAIC,gCAM/B,OAHAhE,MAAK,EAAgB+D,EAAIC,UAAYD,EAG9B,IAAI8L,SAAS,SAAU,GAAG/L,0BACrC,CAEAgM,SAAAA,CAAUhM,EAAgBC,GACtB/D,MAAK,EAAU+D,EAAIC,UAAYhE,KAAK4P,YAAY9L,EAAQC,EAAzB/D,CAA8BA,KACjE,CAEA+P,UAAAA,GACI,OAAO/P,MAAK,CAChB,CACAgQ,SAAAA,CAAUrZ,GACN,OAAOqJ,MAAK,EAAUrJ,EAC1B,CAEAkM,SAAAA,CAAUmB,GACN,OAAOhE,MAAK,EAAgBgE,EAChC,CAEAiM,KAAAA,IAASxL,GACL5C,QAAQwB,OAAOoB,EACnB,CAEA,OAAIf,GACA,OAAOA,EACX,CACA,QAAID,GACA,OAAOA,EACX,E","sources":["webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/list.js","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/list.js","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/webpack/runtime/make namespace object","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/utils/print/printNode.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts"],"sourcesContent":["import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS, OP_UNR_PLUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","export default class Py_object {\n\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_None               = 1;\nexport const TYPEID_NoneType           = 2;\nexport const TYPEID_NotImplemented     = 3;\nexport const TYPEID_NotImplementedType = 4;\nexport const TYPEID_int                = 5;\nexport const TYPEID_jsint              = 6;\nexport const TYPEID_float              = 7;\nexport const TYPEID_bool               = 8;\nexport const TYPEID_str                = 9;\nexport const TYPEID_type               =10;\nexport const TYPEID_type_int_          =11;\nexport const TYPEID_type_jsint_        =12;\nexport const TYPEID_type_float_        =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_type_bool_         =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"unknown\",\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__DEBUG__)\n        w_str(`/*${VALUES[node]} */`);\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { id2name } from \"@SBrython/sbry/types\";\nimport TYPES from \"@SBrython/sbry/types/list\";\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : TYPES[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}","import Types, { TYPEID_None, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport builtins, { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\nimport { TYPEID_NoneType } from \"./types/list\";\nimport { printNode } from \"@SBrython/utils/print/printNode\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = code.slice(offset).search(END_OF_SYMBOL);\n\n    return code.slice(offset, offset += end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => {\n        setType(id, AST_KEY_RETURN);\n        consumeSpaces();\n        if( curChar !== CHAR_NL)\n            setFirstChild(id, readExpr() );\n    },\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return TYPEID_None; //TODO...\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        const cur_builtin_idx = builtins.length;\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        curChar = code.charCodeAt(offset);\n\n        setSibling(args, readBody() );\n\n        //TODO: set RETURN TYPE\n\n        builtins.length = cur_builtin_idx;\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __DEBUG__ ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr();\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== end);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n                //TODO: return type...\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\nlet nbTypes: number;\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    // h4ck\n    // @ts-ignore\n    if( nbTypes === undefined)\n        nbTypes = TYPES.length;\n\n    TYPES.length = nbTypes;\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __DEBUG__ ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __DEBUG__ && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n// @ts-ignore\nglobalThis.int   = BigInt;\n// @ts-ignore\nglobalThis.float = Number;\n// @ts-ignore\nglobalThis.bool  = Boolean;\n// @ts-ignore\nglobalThis.str   = String;\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n"],"names":["klass","initBuiltinClass","TYPEID_jsint","TYPEID_type_jsint_","add_method","RET_JSINT","call","w_sns","nextSibling","firstChild","w_subs","addJSBinOps","OP_BIN_POW","OP_BIN_ADD","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","convert_other","OP_BIN_MUL","w_call","node","a","op","b","resultType","TYPEID_int","Number2Int","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_INT","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","ast2js","w_str","TypeKlass","TYPES","TYPEID_type","instance","name","jsname","Klass","__class__","__name__","__qualname__","JS_NAME","target","RET_TYPE","write","r","Object","create","__call__","RETURN_TYPE","WRITE_CALL","TYPEID","length","create_function","id","kname","VALUES","coffset","w_NL","TYPEID_type_int_","other","other_type","w_node","TYPEID_float","TYPEID_str","otype","undefined","__int__","Error","RET_STR","RET_INT2INT","TYPEID_None","TYPEID_NoneType","Py_object","TYPEID_unknown","TYPEID_NotImplemented","TYPEID_NotImplementedType","TYPEID_bool","TYPEID_type_float_","TYPEID_type_str_","TYPEID_type_bool_","Array","i","cur","last_id","AST_SYMBOL","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_OP_NOT","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_DEF_FCT","AST_DEF_ARGS","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","AST_CALL","AST_CALL_ARG_KW","AST_CTRL_WHILE","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CTRL_FOR","AST_BODY","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","abs","n","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_LT","OP_CMP_LE","OP_CMP_GT","OP_CMP_GE","ops","return_type","opid2opmethod","w_JSCmpOp","OP_EQ2IS","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","idx","list","p_prio","parentOPPrio","setParentOPPrio","l","opid2jsop","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","body","_","default_call","type","rchild","lchild","Types","BB","BE","to_write","cond","assert","__str__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","PythonError","python_exception","constructor","super","_raw_err_","this","left","value","OP_BOOL_NOT","OP_ASSIGN","pyop_priorities","jsop_priorities","opid2ropmethod","opid2iopmethod","opsymbol2opid","KW","kw","keywords","getKW","fist","write_arg","set_js_cursor","CODE_BEG","defval","CODE_END","write_posarg","start","RET_FLOAT","other_value","slice","_op","debug_print_exception","err","sb","console","warn","stack","isV8","split","e","includes","filter_stack","map","_line","_col","fct_name","line","col","pos","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","CURSOR","ARRAY_TYPE","jscode","ast","filename","CODE_LINE","CODE_COL","JS_CODE","indent","cur_indent_level","indents","str","AST2JS","args","Symbol","Py_JSException","Py_Exception","first","NOCONVERT","setResultType","a_value","ltype","rtype","createASTNode","setType","setFirstChild","LIST","require","id2name","write_multi_jsop","float2str","f","toExponential","sign_idx","toString","RET_None","o","Float64Array","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","CODE_BUFFER_SIZE","PY_CODE_BUFFER","ArrayBuffer","maxByteLength","JS_CODE_BUFFER","PY_CODE","NEXT_AST_NODE_ID","addFirstChild","ASTNODES","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","addSibling","ASTNODE_NEXT_SIBLING","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","setSibling","sibling","ADD_EQ","iop","prio","writeOp","count","right","jop","method","reversed_operator","find_and_write_call","end","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","defineProperty","enumerable","get","obj","prop","hasOwnProperty","toStringTag","builtins","genOpFct","nbBuiltins","addSymbol","opname","printNode","typeID","ret_typeID","ret_type","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","code","curChar","CURRENT_PARAM_TYPE","POSONLY_END","offset","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","readExpr","KNOWN_SYMBOLS","readToken","readBody","SType_fct","STypeID","cur_builtin_idx","nbTypes","CURRENT_INDENTATION","consumeIndentedLines","beg","readLine","set_py_code_beg","set_py_code_end","readComment","createCallUopNode","nextChar","result_type","astnode_type","token","symbol","getSymbol","fctType","next","isEndOfExpr","readOp","op_str","createCallOpNode","rop","rop_prio","lop","lop_prio","push","py2ast","_code","copy_py_code_end","opnode","dst_off","src_beg","src_end","pyop_name","atype","src","dst","src_off","copy_py_code_beg","node_type","off","globalThis","int","BigInt","float","Number","bool","Boolean","String","SBrython","browser","buildModule","Function","runJSCode","getModules","getModule","print"],"sourceRoot":""}