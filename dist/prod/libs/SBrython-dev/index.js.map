{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"8DAGe,SAASA,EAAOC,GAE3B,MAAMC,GAAaC,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BK,EAAAA,EAAAA,IAAM,SAASC,EAAAA,GAAON,eAEH,IAAfG,GACAI,EAAAA,EAAAA,IAAON,EAAK,IAEZI,EAAAA,EAAAA,IAAM,eAEVG,EAAAA,EAAAA,IAAM,IAAKP,EAAM,IACrB,C,iGCTe,SAASQ,EAAQC,EAAaV,EAAWW,GAEpD,MAAMC,EAAOZ,EAAKa,KAAKC,GACjBC,EAAWJ,EAAQK,cAAcJ,GACvC,QAA8BK,IAAbF,EAGb,MAFAG,QAAQC,KAAKnB,GACbkB,QAAQC,KAAKR,EAAQK,eACf,IAAII,MAAM,YAAYR,iBAGhC,MAAMS,EAAMC,EAAAA,EAAMP,GACZQ,EAAW,EAAKC,SAAiBC,EAAAA,OAEvCC,EAAAA,EAAAA,IAAchB,EAAKiB,EAAAA,KACnBC,EAAAA,EAAAA,IAAclB,EAAKa,GACnB,IAAIM,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,EAAIV,EAAK+B,KAAKC,OAAShC,EAAKiC,SAASD,SAEjEE,EAAAA,EAAAA,IAAaL,IAAW7B,EAAKa,KAAMF,GAEnC,IAAI,IAAIwB,EAAI,EAAGA,EAAInC,EAAK+B,KAAKC,SAAUG,GACnCD,EAAAA,EAAAA,IAAaL,IAAW7B,EAAK+B,KAAKI,GAAIxB,GAE1C,IAAI,IAAIwB,EAAI,EAAGA,EAAInC,EAAKiC,SAASD,SAAUG,GACvCC,EAAAA,EAAAA,GAAQP,EAAS7B,EAAKiC,SAASE,GAAIxB,IACrB0B,EAAAA,EAAAA,IAAYR,EAAS7B,EAAKiC,SAASE,MAC/CN,EAGNvB,EAAAA,GAAOI,GAAOW,CAClB,C,6EC/Be,SAAStB,EAAOC,GAE3B,MAAMG,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAEN,IACTxB,EAAAA,EAAAA,IAAM,OAGV,IAAIiC,EAAiBT,GACjBU,EAAAA,EAAAA,IAAWV,KAAaW,EAAAA,KAAgBD,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,KAC7DH,GAASI,EAAAA,EAAAA,IAAWb,KAExBtB,EAAAA,EAAAA,IAAO+B,EACX,C,yDCjBe,SAASvC,EAAOC,IAC3BO,EAAAA,EAAAA,KAAOL,EAAAA,EAAAA,IAAWF,KAAQK,EAAAA,EAAAA,IAAM,IAAIC,EAAAA,GAAON,KAC/C,C,yICMA,QAAe2C,OAAOC,OAAOC,EAAAA,GACzB,CACIC,SAAW,MACXC,UAAWC,EAAAA,GACXC,SAASC,EAAAA,EAAAA,GAAeC,EAAAA,IAAUnD,KAC9BO,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWF,GAAQ,IAC3BK,EAAAA,EAAAA,IAAM,UAAU,MAGxB+C,EAAAA,EAAAA,GAAaC,EAAAA,GAAaC,EAAAA,KAC1BC,EAAAA,EAAAA,GAAa,CAAC,KAAYC,EAAAA,KAC1BD,EAAAA,EAAAA,GAAa,CAAC,KAAYE,EAAAA,GACtB,CACIC,cAAiBC,EAAAA,GACjBC,WAAY,CAAC5D,EAAc6D,EAAWC,EAAIC,KAEtC,IAAIxB,EAAAA,EAAAA,IAAWsB,KAAOG,EAAAA,GAAY,CAC9B,MAAMC,EAAIJ,EACVA,EAAIE,EAAGA,EAAIE,CACf,EAEAzD,EAAAA,EAAAA,IAAM,GAAIqD,EAAG,WAAYE,EAAG,IAAI,I,+CC9BjC,SAAShE,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,wBACV,C,+HCOA,QAAesC,OAAOC,OAAOsB,EAAAA,GACzB,CACIpB,SAAW,OACXtB,UAAW0B,EAAAA,EAAAA,GAAeiB,EAAAA,IAAYnE,IAElC,MAAMoE,GAAQlE,EAAAA,EAAAA,IAAWF,GAAM,EACzBqE,GAAa9B,EAAAA,EAAAA,IAAW6B,GAG9B,GAAIC,IAAe5B,EAAAA,GAEf,YADAlC,EAAAA,EAAAA,KAAO+D,EAAAA,EAAAA,IAAWF,IAGtB,GAAIC,IAAeE,EAAAA,IAAgBF,IAAe7B,EAAAA,GAE9C,YADAjC,EAAAA,EAAAA,IAAO8D,GAKX,GAAIA,IAAeL,EAAAA,GAAa,CAE5B,MAAMQ,EAAclE,EAAAA,GAAO8D,GAE3B,IAAIK,EAAAA,EAAAA,IAAKL,KAAWM,EAAAA,GAAc,CAC9B,GAAoB,QAAhBF,GAAyC,aAAhBA,EAEzB,YADAnE,EAAAA,EAAAA,IAAM,4BAGV,GAAoB,SAAhBmE,GAAyC,cAAhBA,EAEzB,YADAnE,EAAAA,EAAAA,IAAM,2BAGd,CAOA,YADAG,EAAAA,EAAAA,IAAM,cAAe4D,EAAO,IAEhC,CAEA,MAAMO,EAAQrD,EAAAA,GAAM+C,GACpB,QAA4BpD,IAAV0D,QAAyC1D,IAAlB0D,EAAMC,QAC3C,MAAM,IAAIxD,MAAM,GAAGuD,GAAO7B,gCAE9B6B,EAAMC,QAASC,EAAAA,IAAa7E,EAAMoE,EAAM,K,yDCrDrC,SAAS3D,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKoE,EAAAA,GAEjB,C,yDCLe,SAAS/E,EAAOC,IAE3B+E,EAAAA,EAAAA,MAEA,MAAMlD,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAImC,EAAIN,EAASM,EAAIhC,EAAW0B,IAAWM,GAC3C6C,EAAAA,EAAAA,OAAQzE,EAAAA,EAAAA,IAAO4B,IAGnB8C,EAAAA,EAAAA,MAE+B,IAAf9E,GAA6B,IAATH,IAChCgF,EAAAA,EAAAA,KACR,C,kCCTA,SACIE,OAVJ,SAAgBC,GAEZ,IAAIA,EAGJ,MAAM,IAAI/D,MAAM,mBACpB,E,gDCJe,SAASrB,EAAOqF,IAC3B/E,EAAAA,EAAAA,IAAM,QACV,C,4GCKA,QAAesC,OAAOC,OAAOI,EAAAA,GACzB,CACIF,SAAW,OACXtB,UAAU0B,EAAAA,EAAAA,GAAemC,EAAAA,IAAUrF,IAE/B,MAAMoE,GAAQlE,EAAAA,EAAAA,IAAWF,GAAM,EACzBqE,GAAa9B,EAAAA,EAAAA,IAAW6B,GAG9B,GAAIC,IAAeL,EAAAA,GAEf,YADAzD,EAAAA,EAAAA,IAAO6D,GAIX,MAAMO,EAAQrD,EAAAA,GAAM+C,GACpB,QAA4BpD,IAAV0D,QAAyC1D,IAAlB0D,EAAMW,QAC3C,MAAM,IAAIlE,MAAM,GAAGuD,GAAO7B,gCAE9B6B,EAAMW,QAAST,EAAAA,IAAY7E,EAAMoE,EAAM,K,kGCpBpC,SAASrE,EAAOC,GAE3B,MAAM6B,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAIrBuF,EAFYjF,EAAAA,GAAON,GAEFwB,SAASgE,EAAAA,IAEhC,IAAIC,EAAWF,EAAKG,YAChBD,IAAaE,OAAOC,oBACpBH,EAAWF,EAAKM,WAAa,QAEb5E,IAAhBsE,EAAKO,QAAwBL,IAAatF,EAAa,KACrDsF,EAEN,IAAI,IAAItD,EAAI,EAAIA,EAAIhC,IAAegC,EACrB,IAANA,IACA9B,EAAAA,EAAAA,IAAM,MAENoF,IAAatD,IACb9B,EAAAA,EAAAA,IAAM,KAGV0F,EAAU5D,EAAIN,EADCM,IAAMoD,EAAKM,YAAc1D,IAAMhC,EAAW,GAIzDsF,EAAWtF,IACXE,EAAAA,EAAAA,IAAM,SACd,CAEA,SAAS0F,EAAU/F,EAAcgG,GAE7B,MAAMC,EAAS,EAAEjG,GACDkG,EAAAA,EAAAA,IAAcD,EAASE,EAAAA,IAEvC,MAAMvF,EAAON,EAAAA,GAAON,GACdoG,GAAU3B,EAAAA,EAAAA,IAAKzE,GAErB,GAAIoG,IAAYC,EAAAA,GACRL,GACA3F,EAAAA,EAAAA,IAAM,MAAMO,MAEZP,EAAAA,EAAAA,IAAM,GAAGO,eACV,GAAIwF,IAAYE,EAAAA,IACnBjG,EAAAA,EAAAA,IAAM,GAAGO,eACN,GAAsB,KAAlBR,EAAAA,EAAAA,IAAQJ,GAAc,CAE7B,IAAIuG,GAAcrG,EAAAA,EAAAA,IAAWF,IACzBuC,EAAAA,EAAAA,IAAWgE,KAAY/D,EAAAA,KACvB+D,GAAS7D,EAAAA,EAAAA,IAAW6D,KAExBlG,EAAAA,EAAAA,IAAM,GAAGO,SACTL,EAAAA,EAAAA,IAAOgG,EACX,MACIlG,EAAAA,EAAAA,IAAMO,IAGMsF,EAAAA,EAAAA,IAAcD,EAASO,EAAAA,GAC3C,C,0DC/De,SAASzG,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,GAE3B,OAAgB,IAAZ6B,GACOxB,EAAAA,EAAAA,IAAM,iBAEVG,EAAAA,EAAAA,IAAM,UAAWqB,EAAS,IACrC,C,0DCRe,SAAS9B,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,IAAIC,EAAAA,GAAON,MACrB,C,0DCFe,SAASD,EAAOC,GAE3B,OAAOQ,EAAAA,EAAAA,IAAM,gBAAgBN,EAAAA,EAAAA,IAAWF,GAAO,IACnD,C,qDCJO,MAAMyB,EAAcgF,SACd5B,EAAc4B,SACdjB,EAAciB,Q,0DCDZ,SAAS1G,EAAOC,GAE3B,MAAM6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAIZ,KAHCI,EAAAA,EAAAA,IAAQJ,IAQ3BQ,EAAAA,EAAAA,IAAM,MAAOqB,EAAQ,EAAG,KAAMA,EAAS,MAJnCrB,EAAAA,EAAAA,IAAM,IAAKqB,EAAS,IAK5B,C,sHCGA,SAAS6E,EAAShG,EAAaV,EAAWW,GAEtC,MAAMgG,GAAUpE,EAAAA,EAAAA,IAAW7B,GACrBmB,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,GAGxBkG,EAAUtF,EAAAA,EAAMqF,GAChBE,EAAUD,EAAMpF,SAChB+D,EAAUsB,EAAKrB,EAAAA,KAGrB7E,EAAUA,EAAQmG,iBAAiB,QAC3BC,oBAAsBrG,GAG9BsG,EAAAA,EAAAA,IAAanF,EAAS7B,EAAM4G,EAAOjG,GAQnC4E,EAAKmB,cAAWzF,EAEhB4F,EAAKpF,EAAAA,SAAeR,EAEpB,MAAMgG,EAAajH,EAAKkH,SAASpG,GACjC,QAAmBG,IAAfgG,EAA2B,CAC3B,IAAIE,EAAkBxG,EAAQK,cAAciG,GAE5CJ,EAAKpF,EAAAA,IAAe,IAAM0F,CAC9B,CAGA,MAAMC,EAAcpH,EAAKC,KAAKD,EAAKC,KAAK+B,OAAO,GAAGqF,YAAYC,MAC9D,GAAkB,WAAdF,GAAwC,UAAdA,EAEV,CACZ,MAAMG,EAAY,CACdF,YAAa,CACTC,MAAO,UAEPE,OAAQxH,EAAKyH,WACjBA,WAAYzH,EAAKyH,WACbC,WAAY1H,EAAK2H,eACrBA,eAAgB3H,EAAK2H,gBAEzB3H,EAAKC,KAAK2H,KAAML,EACpB,EAKJM,EAAAA,EAAAA,GAAKhG,EAAQ,EAAG7B,EAAKC,KAAMU,IACbmH,EAAAA,EAAAA,IAAsBjG,EAAQ,EAAG7B,EAAKC,KACxD,CAEe,SAASQ,EAAQC,EAAaV,EAAWW,GAIpD,MAAMoH,EAAsB,CACxBjF,SAAU,WACVtB,SAAU,CACNsB,SAAU,WACV,CAACrB,EAAAA,IAAc,KACXiF,EAAShG,EAAKV,EAAMW,GACboH,EAAUvG,SAASC,EAAAA,OAE9B,CAACoD,EAAAA,IAAamD,EAAAA,EACd,CAACxC,EAAAA,IAAY,CAETyC,WAAiB,IAAIC,MAAMlI,EAAK+B,KAAKA,KAAKC,OAAOhC,EAAK+B,KAAKoG,YAAYnG,QACvEoG,SAAiB,CAAC,EAClB1C,aAAkB,EAClBG,YAAkB,EAClBwC,QAAiB,EACjB3B,cAKN4B,EAAUhH,EAAAA,EAAMU,OACtBV,EAAAA,EAAMgH,GAAWP,EAIjBpH,EAAQK,cAAchB,EAAKY,MAAQ0H,GAEnC5G,EAAAA,EAAAA,IAAchB,EAAK6H,EAAAA,KACnB3G,EAAAA,EAAAA,IAAclB,EAAK4H,GAEnBhI,EAAAA,GAAOI,GAAOV,EAAKY,IACvB,C,oEC5Ge,SAASH,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK8H,EAAAA,IACb,MAAM3G,GAAUC,EAAAA,EAAAA,IAASpB,EAAwB,EAAnBV,EAAKyI,KAAKzG,QAExC,IAAI,IAAIG,EAAI,EAAGA,EAAInC,EAAKyI,KAAKzG,SAAUG,GACnCD,EAAAA,EAAAA,IAAa,EAAEC,EAAEN,EAAS7B,EAAOyI,KAAKtG,GAAIxB,IAC1CuB,EAAAA,EAAAA,IAAa,EAAEC,EAAE,EAAEN,EAAS7B,EAAK0I,OAAOvG,GAAIxB,EAEpD,C,0DCVe,SAASZ,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,EAAYgC,GAAG,GAC9B3B,EAAAA,EAAAA,IAAM,GAAI2B,EAAEN,EAAS,KAAMM,EAAE,EAAEN,EAAS,OAE5CxB,EAAAA,EAAAA,IAAM,IACV,C,8ECTe,SAASI,EAAQC,EAAaV,EAAWW,GAEpD,IAAImD,EAAK6E,EAAAA,GAAa3I,EAAK8D,GAAGuD,YAAYC,OAC1C,QAAwBrG,IAAP6C,EAEb,MADA5C,QAAQC,KAAK,KAAMnB,EAAK8D,GAAGuD,YAAYC,OACjC,IAAIlG,MAAM,mBAEpBd,EAAAA,GAAOI,GAAOoD,GAEdpC,EAAAA,EAAAA,IAAQhB,EAAKkI,EAAAA,IACb,MAAM/G,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAK6I,OAAQlI,IACrCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAK8I,MAAQnI,IAErCiB,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,GAClC,C,kCCrBe,MAAMkH,G,8ECKrB,QAAepG,OAAOC,OAAOoG,EAAAA,GACzB,CACIlG,SAAW,SAGfM,EAAAA,EAAAA,GAAUC,EAAAA,GAAa4F,EAAAA,I,8ECLZ,SAASxI,EAAQC,EAAaV,EAAWW,GAEpD,IAAIuI,EAAUlJ,EAAKkJ,aACHjI,IAAZiI,IACAA,EAAU,CAAClJ,EAAK6I,SAEpB,IAAIpE,EAAO0E,EAAAA,GAEa,UAAjBxI,EAAQ8D,MACyB,SAAjCyE,EAAQ,GAAG7B,YAAYC,OACpB4B,EAAQ,GAAGpI,MAAMH,EAAQK,gBAE/ByD,EAAO2E,EAAAA,KAGX1H,EAAAA,EAAAA,IAAQhB,EAAK+D,GAEb,MAAMtE,EAAa+I,EAAQlH,OAAS,EAC9BH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAE9B+B,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK8I,MAAOnI,GAClC,IAAIgG,GAAQpE,EAAAA,EAAAA,IAAWV,GAEnBwH,EAAc,KAElB,MAAMpC,EAAajH,EAAKiH,YAAYnG,QACjBG,IAAfgG,IACAoC,EAAc1I,EAAQK,cAAciG,IAEP,OAAhBoC,GAAwBA,IAAgB1C,GACrDzF,QAAQC,KAAK,qBAEG,OAAhBkI,IACAA,EAAc1C,EACVA,IAAUnE,EAAAA,KACV6G,EAAc5G,EAAAA,MAItBb,EAAAA,EAAAA,IAAclB,EAAK2I,GAEnB,IAAI,IAAIlH,EAAI,EAAGA,EAAIhC,IAAcgC,GAE7BD,EAAAA,EAAAA,IAAaL,EAAQM,EAAG+G,EAAQ/G,EAAE,GAAIxB,GACtCA,EAAQK,cAAckI,EAAQ/G,EAAE,GAAGrB,IAAMuI,CAEjD,C,0HC9CO,MAAMC,EAAqB,IAAIC,EAAAA,GAAW,GAE1C,IAAIC,EAIJ,SAASzJ,EAAO0J,GA2BvB,IAAoBC,EAHnB,OAGmBA,EAzBLD,EAAIC,SA2BfF,EAAU,iBAAiBE,MAC3BF,GAAU,gCAGNF,EAAOK,EAAAA,IAAa,EACpBL,EAAOM,EAAAA,IAAYJ,EAAOxH,OA9B9BzB,EAAO,GAGPiJ,GAAU,+BAiBNA,CACR,CA4BO,SAAStD,EAAc2D,GAC1BC,EAAAA,GAAQD,EAAMF,EAAAA,IAAaL,EAAOK,EAAAA,IAClCG,EAAAA,GAAQD,EAAMD,EAAAA,IAAaJ,EAAQxH,OAASsH,EAAOM,EAAAA,GACvD,CAIA,IAAIG,EAAS,OACTC,GAAoB,EAGxB,MAAMC,EAAsB,CACxB,GACAF,EACAA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,GAGL,SAAS/E,IAEZwE,GAAU,OAGJF,EAAOK,EAAAA,IACTL,EAAOM,EAAAA,IAAYJ,EAAOxH,OAE1BwH,GAAUS,EAASD,EAE3B,CACO,SAASjF,MACViF,CACN,CAEO,SAAS/E,MACV+E,CACN,CAGO,SAAS3J,EAAM6J,GAClBV,GAAUU,CACd,CACO,SAAS3J,EAAOP,GACHkG,EAAc,EAAElG,EAAOmG,EAAAA,IACvCgE,EAAAA,IAAO1F,EAAAA,EAAAA,IAAKzE,IAAQA,GACJkG,EAAc,EAAElG,EAAOwG,EAAAA,GAC3C,CAOO,SAAShG,KAASuB,GAErByH,GAAUzH,EAAK,GAEf,IAAI,IAAII,EAAI,EAAGA,EAAIJ,EAAKC,OAAQG,GAAG,EAAG,CAElC,MAAMnC,EAAO+B,EAAKI,GAEF+D,EAAc,EAAElG,EAAOmG,EAAAA,IACvCgE,EAAAA,IAAO1F,EAAAA,EAAAA,IAAKzE,IAAQA,GACJkG,EAAc,EAAElG,EAAOwG,EAAAA,IAEvCgD,GAAUzH,EAAKI,EAAE,EACrB,CACJ,C,0DCtIe,SAASpC,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAE3BQ,EAAAA,EAAAA,IAAM,SAAUqB,EAAS,KAAMA,EAAQ,EAAG,IAC9C,C,0DCLe,SAAS9B,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,WAEN,MAAMwB,GAAU3B,EAAAA,EAAAA,IAAWF,GACrBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAIN,IAAUxB,EAAAA,EAAAA,IAAM,OAG/BA,EAAAA,EAAAA,IAAM,QAEN,MAAMyI,EAAQxI,EAAAA,GAAON,GAER,OAAV8I,GACCzI,EAAAA,EAAAA,IAAM,wBAENA,EAAAA,EAAAA,IAAM,qBAAqByI,MACnC,C,0DCnBe,SAAS/I,EAAOC,GAE3B,IAOImC,EAPAN,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAOzB,KAJAQ,EAAAA,EAAAA,IAAM,MAAOqB,IAAW,IAAKA,IAAW,KAIpCM,EAAI,EAAGA,EAAIhC,EAAa,EAAGgC,GAAK,GAChC3B,EAAAA,EAAAA,IAAM,WAAYqB,IAAW,KAAMA,IAAW,KAI9CM,IAAMhC,EAAa,IACnBK,EAAAA,EAAAA,IAAM,SAAUqB,EAAS,IACjC,C,0DCjBe,SAAS9B,EAAOC,IAG3BK,EAAAA,EAAAA,IAAM,GAAGC,EAAAA,GAAON,KACpB,C,0DCJe,SAASD,EAAOC,IAE3BQ,EAAAA,EAAAA,IAAM,MAAMN,EAAAA,EAAAA,IAAWF,GAAO,IAClC,C,gDCJe,MAAMoK,UAAqBrB,EAAAA,G,4GCM3B,SAAStI,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK2J,EAAAA,IACb,MAAMxI,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAKsK,QAAU3J,GAErC,IAAImD,EAAK6E,EAAAA,GAAa3I,EAAK8D,GAAGuD,YAAYC,OAE1C,QAAwBrG,IAAP6C,EAEb,MADA5C,QAAQC,KAAK,KAAMnB,EAAK8D,GAAGuD,YAAYC,OACjC,IAAIlG,MAAM,mBAKpB,GAFAd,EAAAA,GAAOI,GAAOoD,EAEH,QAAPA,EAEA,YADAlC,EAAAA,EAAAA,IAAclB,EAAK6J,EAAAA,IAIvB,IAAI9F,EAAO+F,EAAAA,GACPC,EAASnJ,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUiC,GAKxC,QAHe7C,IAAXwJ,IACAhG,EAAOgG,EAAOhJ,EAAAA,OAEDgD,IAAS+F,EAAAA,GAEtB,MADAtJ,QAAQC,KAAKG,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUiB,UAClC,IAAI1B,MAAM,GAAG0C,KAAMxC,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUiB,8BAGxDlB,EAAAA,EAAAA,IAAclB,EAAK+D,EACvB,C,gDCvCe,MAAMiG,UAAuBN,EAAAA,G,oECE7B,SAAS3J,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKiK,EAAAA,IACb,MAAM9I,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK4K,IAAKjK,EAEpC,C,sHCAA,QAAegC,OAAOC,OAAOiI,EAAAA,GACzB,CACI/H,SAAW,OACXtB,UAAU0B,EAAAA,EAAAA,GAAeC,EAAAA,IAAUnD,IAE/B,MAAMoE,GAAQlE,EAAAA,EAAAA,IAAWF,GAAQ,EAC3BqE,GAAY9B,EAAAA,EAAAA,IAAW6B,GAG7B,GAAIC,IAAe5B,EAAAA,GAEf,YADAlC,EAAAA,EAAAA,IAAO6D,GAGX,GAAIC,IAAe7B,EAAAA,GAEf,YADAjC,EAAAA,EAAAA,KAAQmC,EAAAA,EAAAA,IAAW0B,IAGvB,GAAIC,IAAeE,EAAAA,GAEf,YADA/D,EAAAA,EAAAA,IAAM,qBAAsB4D,EAAO,MAKvC,GAAIC,IAAeL,EAAAA,GAQf,YAFAxD,EAAAA,EAAAA,IAAM,UAAW4D,EAAO,KAK5B,MAAMO,EAAQrD,EAAAA,GAAM+C,GACpB,QAA4BpD,IAAV0D,QAAyC1D,IAAlB0D,EAAMC,QAC3C,MAAM,IAAIxD,MAAM,GAAGuD,GAAO7B,gCAE9B6B,EAAMC,QAASC,EAAAA,IAAY7E,EAAMoE,EAAM,K,0DCvCpC,SAAS3D,EAAQC,EAAaV,EAAWW,GAEpD,IAAI0I,EAAc,EACdP,EAAQ9I,EAAKc,GAEH,SAAVgI,EACAA,EAAQ,OACHA,KAASnI,EAAQK,gBACtBqI,EAAc1I,EAAQK,cAAc8H,KAYxCpH,EAAAA,EAAAA,IAAQhB,EAAKoK,EAAAA,KACblJ,EAAAA,EAAAA,IAAclB,EAAK2I,GAEnB/I,EAAAA,GAAOI,GAAOoI,CAClB,C,0DC9Be,SAAS/I,EAAOC,IAC3BQ,EAAAA,EAAAA,IAAM,+BAA+BN,EAAAA,EAAAA,IAAWF,GAAO,IAC3D,C,oECDe,SAASS,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKqK,EAAAA,IACb,MAAMlJ,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK8I,MAAOnI,GAElCL,EAAAA,GAAOI,GAAOV,EAAKgL,IACvB,C,gICFA,QAAerI,OAAOC,OAAOqI,EAAAA,GACzB,CACInI,SAAW,QACXC,UAAWmB,EAAAA,GAEXoB,SAASpC,EAAAA,EAAAA,GAAemC,EAAAA,IAAS,CAACrF,EAAMkL,MACpC1K,EAAAA,EAAAA,IAAM,kBAAmB0K,EAAK,IAAI,MAG1C3H,EAAAA,EAAAA,GAAa,CAAC,KAAM,IAAK,IAAK,IAAK,KAAM4H,EAAAA,GACzB,CACIzH,cAAeC,EAAAA,MAGnCJ,EAAAA,EAAAA,GAAa,CAAC,MAAO4H,EAAAA,GACjB,CACIzH,cAAeC,EAAAA,GACfC,WAAe,CAACwH,EAAOvH,EAAGwH,EAAKtH,KACpBvD,EAAAA,EAAAA,IAAM,uBAAwBqD,EAAG,KAAME,EAAG,QAI7DR,EAAAA,EAAAA,GAAa,CAAC,KAAM4H,EAAAA,GAChB,CACIzH,cAAeC,EAAAA,GACfC,WAAe,CAACwH,EAAOvH,EAAGwH,EAAKtH,MAC3BvD,EAAAA,EAAAA,IAAM,kBAAmBqD,EAAG,KAAME,EAAG,IAAI,KAIrDuH,EAAAA,EAAAA,GAAY,CAAC,OAAYnH,EAAAA,KACzBf,EAAAA,EAAAA,GAAYC,EAAAA,GAAa4F,EAAAA,I,0DCtCd,SAASlJ,EAAOC,GAE3B,MAAMY,EAAON,EAAAA,GAAON,GACd6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAE3BQ,EAAAA,EAAAA,IAAM,YAAYI,KAASiB,EAAS,KAAMA,EAAQ,EAAG,IACzD,C,oECLe,SAASpB,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK6K,EAAAA,IACb,MAAMpL,EAAaH,EAAKwL,MAAMxJ,OACxBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKwL,MAAMrJ,GAAIxB,GAE7CL,EAAAA,GAAOI,GAAOV,EAAKyL,MACvB,C,0DCXe,SAAS1L,EAAOC,GAE3B,MAAM6J,EAAOvJ,EAAAA,GAAON,GAEd0L,GAAOxL,EAAAA,EAAAA,IAAWF,GAClBC,EAAOyL,EAAK,GAElBlL,EAAAA,EAAAA,IAAM,WAAWqJ,QAAW6B,EAAM,KAAMzL,EAAM,IAClD,C,8ECNe,SAASQ,EAAQC,EAAaV,EAAWW,GAEpD,IAAIR,EAAa,OACCc,IAAdjB,EAAKyE,OACLtE,EAAa,IAEjBuB,EAAAA,EAAAA,IAAQhB,EAAKiL,EAAAA,IACb,MAAM9J,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAE9B0H,EAAAA,EAAAA,GAAKhG,EAAS7B,EAAKC,KAAMU,IACXmH,EAAAA,EAAAA,IAAsBjG,EAAS7B,EAAKC,MAE/B,IAAfE,IACA+B,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAKyE,KAAM9D,GAEvCL,EAAAA,GAAOI,GAAOV,EAAKY,IACvB,C,gDCnBO,SAASsC,EACgB0I,EACAC,GAC5B,MAAMC,EAAInJ,OAAOoJ,OAAO,MAKxB,OAHAD,EAAErK,EAAAA,IAAemK,EACjBE,EAAEjH,EAAAA,IAAegH,EAEVC,CACX,C,wFCLe,SAASrL,EAAQC,EAAaV,EAAWW,GAEpD,MAAMkI,EAAS7I,EAAK6I,OAAO/H,GAI3B,GAHAH,EAAQK,cAAc6H,GAAU,EAGI,SAAhC7I,EAAKgM,KAAK3E,YAAYC,OAA0C,UAAtBtH,EAAKgM,KAAKnL,KAAKC,GAAiB,EAE1EY,EAAAA,EAAAA,IAAQhB,EAAKuL,EAAAA,IACb,MAAMpK,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,GAS9B,OAPAwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKgM,KAAMrL,IAEnCkH,EAAAA,EAAAA,GAAKhG,EAAQ,EAAG7B,EAAKC,KAAMU,IACbmH,EAAAA,EAAAA,IAAsBjG,EAAQ,EAAG7B,EAAKC,WAEpDK,EAAAA,GAAOI,GAAOmI,EAGlB,CAEAlI,EAAQK,cAAchB,EAAK8I,OAASrG,EAAAA,GAGpC,MAAMV,EAAO/B,EAAKgM,KAAKjK,MAEvBL,EAAAA,EAAAA,IAAQhB,EAAKwL,EAAAA,IACb,MAAM/L,EAAa4B,EAAKC,OAAS,EAC3BH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,IAEjC0H,EAAAA,EAAAA,GAAKhG,EAAS7B,EAAKC,KAAMU,IACXmH,EAAAA,EAAAA,IAAsBjG,EAAS7B,EAAKC,MAElD,IAAI,IAAIkC,EAAI,EAAGA,EAAIhC,IAAegC,GAC9BD,EAAAA,EAAAA,IAAaC,EAAEN,EAASE,EAAKI,EAAE,GAAIxB,GAEvCL,EAAAA,GAAOI,GAAOmI,CAClB,C,8ECtCe,SAASpI,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKyL,EAAAA,KACbvK,EAAAA,EAAAA,IAAclB,EAAKsD,EAAAA,IAEnB,MAAM7D,EAAaH,EAAK0I,OAAO1G,OACzBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,EAC7BjB,QAAQC,KAAMnB,EAAK0I,OAAOvG,GAAGkF,YAAYC,QACzCpF,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAK0I,OAAOvG,GAAIxB,EAElD,C,0DCde,SAASZ,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAIN,IACXxB,EAAAA,EAAAA,IAAM,OAGVA,EAAAA,EAAAA,IAAM,IACV,C,wFCRA,MAAM+L,EAAU,CACZ,KAAM,KACN,KAAM,KACN,IAAK,IACL,IAAK,IACL,KAAM,KACN,KAAM,MAKH,SAASC,EAAmBrM,EAAc6D,EAAWC,EAAYC,EAAWuI,GAE/E,IAAIC,EAAMzI,EAENwI,KACCzI,EAAEE,GAAK,CAACA,EAAEF,GACX0I,EAAMH,EAAQG,IAGC,MAAXA,EAAI,IAAyB,MAAXA,EAAI,KACvBhK,EAAAA,EAAAA,IAAWsB,MAAOtB,EAAAA,EAAAA,IAAWwB,KAC5BwI,GAAO,MAEfC,EAAAA,EAAAA,GAAkBxM,EAAM6D,EAAG0I,EAAKxI,EACpC,CAQO,SAASX,EAAYqJ,EACAC,GACA,cACIhJ,EAAkBiJ,EAAAA,GAAS,aAC3BC,EAAkBD,EAAAA,GAAS,WAC3B/I,EAAkByI,GACD,CAAC,GAE9C,IAAIQ,EAA4D,CAAC,EAEjE,IAAI,MAAM/I,KAAM2I,EAIZI,EAAO,KAFMC,EAAAA,GAAUhJ,SAECZ,EAAAA,EAAAA,GAAewJ,GAAa,CAAC1M,EAAc+M,EAAcC,EAAWV,KACxF1I,EAAW5D,EAAM4M,EAAaG,GAAOjJ,EAAIJ,EAAcsJ,GAAIV,EAAAA,IAInE,OAAOO,CACX,C,oJCzDO,SAAS5D,EAAc+D,GAC1B,OAAIvK,EAAAA,IAAcuK,GAAKA,GAAKzI,EAAAA,GACjBgG,EAAAA,GACJC,EAAAA,EACX,CAEO,SAASW,EAAe6B,GAC3B,OAAIvK,EAAAA,IAAcuK,GAAKA,GAAKzI,EAAAA,GACjBA,EAAAA,GACJiG,EAAAA,EACX,CAEO,SAASyC,EAAgBD,GAC5B,OAAIA,IAAMxK,EAAAA,GACCA,EAAAA,GACJgI,EAAAA,EACX,CAQO,SAAS0C,EAAWF,GACvB,OAAIA,IAAMvK,EAAAA,IAAcuK,IAAMxK,EAAAA,GACnBC,EAAAA,GACJ+H,EAAAA,EACX,CACO,SAAS2C,EAAYH,GACxB,OAAIA,IAAMvK,EAAAA,GACCA,EAAAA,GACJ+H,EAAAA,EACX,CAEO,SAASlH,EAAa0J,GACzB,OAAIA,IAAMhJ,EAAAA,GACCuG,EAAAA,GACJC,EAAAA,EACX,CACO,SAAShH,EAAYwJ,GACxB,OAAIA,IAAMhJ,EAAAA,GACCA,EAAAA,GACJwG,EAAAA,EACX,CACO,SAAS/G,EAAWuJ,GACvB,OAAIA,IAAMvK,EAAAA,IAAcuK,IAAMxK,EAAAA,GACnBwB,EAAAA,GACJwG,EAAAA,EACX,CAEO,SAASrG,EAAUiB,GAAa,OAAOb,EAAAA,EAAc,CACrD,SAASpB,EAAUiC,GAAa,OAAO3C,EAAAA,EAAc,CACrD,SAAS2K,EAAUhI,GAAa,OAAO5C,EAAAA,EAAc,CACrD,SAAS6C,EAAUD,GAAa,OAAOpB,EAAAA,EAAc,C,8ECrD7C,SAASjE,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,QAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAEN,IACTxB,EAAAA,EAAAA,IAAM,OAGV,IAAIiC,EAAiBT,GACjBU,EAAAA,EAAAA,IAAWV,KAAaW,EAAAA,KAAgBD,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,KAC7DH,GAASI,EAAAA,EAAAA,IAAWb,KAExBtB,EAAAA,EAAAA,IAAO+B,EACX,C,wFChBe,SAASvC,EAAOC,GAE3B,IAAI8D,EAAKuJ,EAAAA,GAAgB/M,EAAAA,GAAON,IAEhC,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,GAE3B,IAAIyE,EAAO+F,EAAAA,GACPC,EAASnJ,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUiC,GAMxC,QAJe7C,IAAXwJ,IACAhG,EAAOgG,EAAOhJ,EAAAA,KAAac,EAAAA,EAAAA,IAAWV,EAAQ,KAGjC4C,IAAS+F,EAAAA,GACtB,MAAM,IAAIpJ,MAAM,GAAGE,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAUiB,YAAYgB,KAAMxC,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,EAAQ,IAAIiB,6BAcjG2H,EAAO5F,EAAAA,IAAY7E,EAAM6B,EAASA,EAAQ,EAC9C,C,saCnCO,MAAMiJ,EAAa,EAEbwC,EAAmB,EACnBC,EAAkB,EAClB/E,EAAkB,EAElBgF,EAAiB,EACjBC,EAAe,EACf9C,EAAgB,GAChBY,EAAiB,GACjBmC,EAAuB,GACvBC,EAAmB,GACnB7I,EAAgB,GAChB8I,EAAiB,GAEjBvD,EAAe,EACfwD,EAAa,EACbC,EAAc,EACdC,EAAa,EACbhD,EAAc,GACdiD,EAAkB,GAClBpF,EAAoB,GACpBQ,EAAqB,GACrBD,EAAgB,GAEhBzE,EAAc,GACduJ,EAAc,GACdC,EAAgB,GAChB/B,EAAkB,GAClBgC,EAAuB,GACvBC,EAAe,GACfC,EAAe,GAEf9F,EAAc,GACd+F,EAAmB,GACnB3M,EAAe,GACf4M,EAAuB,GAEvBC,EAAiB,GACjBC,EAAoB,GACpB9C,EAA0B,GAC1B+C,EAAmB,GACnBC,EAAmB,GACnBzC,EAAqB,GACrBD,EAAe,GAEf2C,EAAe,GACfC,EAAW,GACXC,EAAc,GACdC,EAAc,GAE3B,I,0DChDe,SAAShP,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAC3BQ,EAAAA,EAAAA,IAAM,IAAKqB,EAAS,IAAKA,EAAQ,EAAG,MAAOA,EAAQ,EAAG,IAC1D,C,0DCJe,SAAS9B,EAAOC,IAE3BO,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWF,GACvB,C,kCCNO,MAAMgP,UAAoB5N,MAEpB6N,iBAET5H,WAAAA,CAAY4H,GACRC,QACAD,EAAiBE,UAAYC,KAC7BA,KAAKH,iBAAmBA,CAC5B,EAIJ,SACID,c,0DCVW,SAASjP,EAAOC,IAC3BK,EAAAA,EAAAA,IAAOC,EAAAA,GAAON,GAClB,C,6HCHO,MAAMwK,EAA4B,EAC5B6E,EAA4B,EAC5B5M,EAA4B,EAC5BD,EAA4B,EAC5B+B,EAA4B,EAC5BgG,EAA4B,EAC5BvG,EAA4B,EAC5BsL,EAA4B,EAC5BC,EAA4B,EAC5BC,EAA4B,EAEzC,I,kCCbA,SACIC,UAAYC,IACR,GAAIA,GAAK,MAAQA,GAAK,KAAM,CAExB,IAAIxF,EAAMwF,EAAEC,gBACZ,MAAMC,EAAW1F,EAAIlI,OAAO,EAG5B,MAFqB,MAAlBkI,EAAI0F,IAAuC,MAAlB1F,EAAI0F,KAC5B1F,EAAMA,EAAI2F,MAAM,EAAED,EAAS,GAAK,IAAM1F,EAAI2F,MAAMD,EAAS,IACtD1F,CACX,CAEA,IAAIA,EAAMwF,EAAEI,WAGZ,OAFM5F,EAAI6F,SAAS,OACf7F,GAAO,MACJA,CAAG,E,0DCXH,SAASnK,EAAOC,GAE3B,MAAM6B,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BQ,EAAAA,EAAAA,IAAM,QAASqB,EAAS,wBACxBkD,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAEI3E,EAAAA,EAAAA,IAAM,0DAEFF,EAAa,IACbI,EAAAA,EAAAA,IAAQ,EAAEsB,GAEd,IAAI,IAAIM,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B6C,EAAAA,EAAAA,OAAQ3E,EAAAA,EAAAA,IAAM,UAAUE,EAAAA,EAAAA,IAAO4B,EAAIN,GAIC,KAApCzB,EAAAA,EAAAA,IAAQyB,EAAU1B,EAAW,MAC7B6E,EAAAA,EAAAA,OACA3E,EAAAA,EAAAA,IAAM,8BAGd4E,EAAAA,EAAAA,KAEJ,C,gDC3BO,SAAS+K,EAAQpP,EAAcqP,GAElC,MAAMnP,EAAKQ,EAAAA,EAAMU,OAEXkO,EAAMvN,OAAOC,OAAOD,OAAOoJ,OAAO,MAAOkE,GAK/C,OAJAC,EAAIpN,SAAWlC,EAEfU,EAAAA,EAAMR,GAAMoP,EAELpP,CACX,C,kGCJe,SAASf,EAAOC,GAE3B,MAAMmQ,GAAQjQ,EAAAA,EAAAA,IAAWF,GACnB8I,EAAQxI,EAAAA,GAAON,GAEP,QAAV8I,EAKWxH,EAAAA,GAAMiB,EAAAA,EAAAA,IAAW4N,IAAQrH,GAEjCjE,EAAAA,IAAa7E,EAAMmQ,IANtBC,EAAAA,EAAAA,GAAiBpQ,EAAM,KAAKsE,EAAAA,EAAAA,IAAW6L,EAAM3N,EAAAA,IAOrD,C,kGCbe,SAAS/B,EAAQC,EAAYV,EAAWW,GAGnD,IAAI0I,EAAcgG,EAAAA,GAElB,QAAkBpO,IAAfjB,EAAK8I,MAAqB,CACzB,MAAMjH,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK8I,MAAOnI,GAClC0I,GAAc9G,EAAAA,EAAAA,IAAWV,EAC7B,EAEAH,EAAAA,EAAAA,IAAQhB,EAAK8M,EAAAA,KACb5L,EAAAA,EAAAA,IAAclB,EAAK2I,GAEnB,MAAM9D,EAAO,KAAOhD,EAAAA,EAAAA,IAAW5B,EAAQoG,sBAAoCvF,cACjDP,IAAtBsE,EAAK9D,EAAAA,MACL8D,EAAK9D,EAAAA,IAAe,IAAM4H,EAClC,C,kCCzBA,SAAiB,C,oECIjB,MAAMgH,EAAa,CACf,IAAO,KACP,GAAO,MAGI,SAAS5P,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKoN,EAAAA,IACb,MAAM3N,EAAaH,EAAK0I,OAAO1G,OACzBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAK0I,OAAOvG,GAAIxB,IAE9CiB,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,IAE9BvB,EAAAA,GAAOI,GAAO2P,EAAWrQ,EAAK8D,GAAGuD,YAAYC,MACjD,C,0DClBe,WAAStH,IACpBQ,EAAAA,EAAAA,IAAM,WAAWN,EAAAA,EAAAA,IAAWF,GAAO,IACvC,C,sFCAO,SAASgI,EAAahI,GAEzB,MAAMuF,EAAO,KAAQvF,GAAmBwB,SAASgE,EAAAA,IAE3C3D,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BO,EAAAA,EAAAA,IAAOsB,IACPxB,EAAAA,EAAAA,IAAM,KAEN,MAAMiQ,EAAenQ,EAAa,EAC5BoQ,EAAoB1O,EAAU,EAGpC,IAAI2O,EAAcF,EAClB,IAAI,IAAInO,EAAI,EAAGA,EAAImO,IAAgBnO,EAC/B,IAAIsC,EAAAA,EAAAA,IAAMtC,EAAIoO,KAAsBhC,EAAAA,GAAsB,CACtDiC,EAAcrO,EACd,KACJ,CAGJ,IAAIsO,EAAUlL,EAAKG,YACnB,MAAMgL,EAAeD,IAAY9K,OAAOC,mBAAqBL,EAAK8C,OAC9DqI,IACAD,EAAUlL,EAAKM,YAEnB,MAAM8K,EAASC,KAAKC,IAAIL,EAAaC,GACrC,IAAI,IAAItO,EAAI,EAAGA,EAAIwO,IAAUxO,GACzB5B,EAAAA,EAAAA,IAAO4B,EAAIN,EAAU,IACrBxB,EAAAA,EAAAA,IAAM,MAGV,MAAMyQ,EAAiC,CAAC,EAClChL,EAAiC,CAAC,EAExC,IAAIiL,GAAkB,EAClBC,GAAkB,EAEtB,MAAMC,EAAa,IAAI/I,MAAM0I,KAAKM,IAAI3L,EAAKM,WAAa8K,EAAO,IAG/D,GAAGD,EAAc,CACb,MAAMS,EAAa5L,EAAKM,WAClBuL,EAAaZ,EAAcW,EAEjC,GAAIC,EAAU,EAAI,EAEd/Q,EAAAA,EAAAA,IAAM,MAENE,EAAAA,EAAAA,IAAO4Q,EAAaZ,GAEpB,IAAI,IAAIpO,EAAI,EAAGA,EAAIiP,IAAWjP,GAC1B9B,EAAAA,EAAAA,IAAM,OACNE,EAAAA,EAAAA,IAAO4B,EAAIgP,EAAaZ,IAG5BlQ,EAAAA,EAAAA,IAAM,IACV,CACJ,KAAO,CAEH,MAAM4H,EAAa1C,EAAK0C,WACxB,IAAI,IAAI9F,EAAIwO,EAAQxO,EAAIqO,IAAerO,EACnC2O,EAAI7I,EAAW9F,EAAE,IAAOA,EAAIN,EAEhCkP,EAAcJ,IAAWH,CAC7B,CAEA,MAAMpI,EAAW7C,EAAK6C,SAEtB,IAAI,IAAIjG,EAAIqO,EAAarO,EAAImO,IAAgBnO,EAAG,CAE5C,MAAM+I,EAAO/I,EAAIN,EACXjB,EAAON,EAAAA,GAAO4K,GACdrB,EAAOzB,EAAUxH,GAEnBiJ,GAAO,EACPoH,EAAIpH,EAAM8G,GAAUzF,GAIxB6F,GAAc,GAED,IAATlH,EACAiH,EAAGlQ,GAAQsK,GAEXpF,EAAOlF,GAAQsK,EACf8F,GAAkB,GAE1B,CAGA,IAAKD,IAAiBC,EAAkB,CACpC,IAAI7O,EACJ,IAAIA,EAAI8O,EAAIjP,OAAS,EAAGG,GAAK,QACVlB,IAAXgQ,EAAI9O,KADsBA,GAIlC8O,EAAIjP,OAASG,EAAE,CACnB,CAGA,IAAI,IAAIA,EAAI,EAAGA,EAAI8O,EAAIjP,SAAUG,EAAG,CAChC,MAAM+I,EAAM+F,EAAI9O,QACJlB,IAARiK,GACA7K,EAAAA,EAAAA,IAAM,iBAENE,EAAAA,EAAAA,IAAO2K,IACP7K,EAAAA,EAAAA,IAAM,MAEd,CAEA,GAAI0Q,EAAc,EACd1Q,EAAAA,EAAAA,IAAM,KACN,IAAI,IAAIgR,KAAOP,GACXtQ,EAAAA,EAAAA,IAAM,GAAG6Q,MAASP,EAAGO,GAAM,MAE/B,GAAIL,EAAkB,EAClB3Q,EAAAA,EAAAA,IAAM,GAAGkF,EAAKO,aACd,IAAI,IAAIuL,KAAOvL,GACXtF,EAAAA,EAAAA,IAAM,GAAG6Q,MAASvL,EAAOuL,GAAM,OACnChR,EAAAA,EAAAA,IAAM,IACV,EAEAA,EAAAA,EAAAA,IAAM,KACV,CAEA,IAAMkF,EAAK8C,QAAU2I,EAAkB,EACnC3Q,EAAAA,EAAAA,IAAM,KACN,IAAI,IAAIgR,KAAOvL,GACXtF,EAAAA,EAAAA,IAAM,GAAG6Q,MAASvL,EAAOuL,GAAM,OACnChR,EAAAA,EAAAA,IAAM,IACV,EAEAA,EAAAA,EAAAA,IAAM,IACV,CAEe,SAASN,EAAOC,GAC1BM,EAAAA,GAAON,GAAmBwB,SAASqD,EAAAA,IAAa7E,EACrD,C,0DC5Ie,SAASS,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKiN,EAAAA,GAEjB,C,oHCRO,MAAM3K,EAAiBL,OAAOoJ,OAAO,MAC/BlB,EAAiBlI,OAAOoJ,OAAO,MAC/B7H,EAAmBvB,OAAOoJ,OAAO,MACjClJ,EAAWF,OAAOoJ,OAAO,MACzBuF,EAAa3O,OAAOoJ,OAAO,MAC3BwF,EAAW5O,OAAOoJ,OAAO,MAEzBd,GADatI,OAAOoJ,OAAO,MACdpJ,OAAOoJ,OAAO,OAC3B/C,EAAYrG,OAAOoJ,OAAO,MAC1ByF,EAA0B7O,OAAOoJ,OAAO,MACxC0F,EAAgB9O,OAAOoJ,OAAO,MACjBpJ,OAAOoJ,OAAO,MACZpJ,OAAOoJ,OAAO,MACjBpJ,OAAOoJ,OAAO,MACXpJ,OAAOoJ,OAAO,K,gDCZ3B,SAAShM,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,WACV,C,oQCJO,MAAMkJ,EAAemI,aAIf/H,EAAY,EACZC,EAAY,EACZzD,EAAY,EACZK,EAAY,EACZmL,EAAgBxL,EAAWwD,EAC3BiI,EAAgBzL,EAAWyD,EAC3BiI,EAAgBrL,EAAWmD,EAC3BmI,EAAgBtL,EAAWoD,EAE3BmI,EAAsB,IAAIxI,EAAW,MACrCO,EAAsB,IAAIP,EAAW,MAGrCjJ,EAAS,IAAI4H,MAE1B,IAAI8J,EAAmB,EAEhB,SAASlQ,EAASmQ,EAAgB7R,GAErC,MAAM6F,EAASgM,EAASC,EAExBC,EAASlM,EAASmM,GAAuBhS,EACzC,MAAMU,EAAKqR,EAASlM,EAASoM,GAA0BL,EAGvD,OAFAA,GAAoB5R,EAEbU,CACX,CAEO,SAASwR,IACZ,OAAON,GACX,CAMe,SAASO,IACpBjS,EAAO0B,OAAS,EAChBgQ,EAAmB,EAEnBQ,EAAOC,OAAQ,GAEfD,EAAOC,OAAQC,EACnB,CAEO,MAAMC,EAA6B,EAC7BC,EAA6B,EAC7BP,EAA6B,EAC7BD,EAA6B,EAC7BS,EAA6B,EAC7BX,EAA6B,EAEpCQ,EAvDY,EAuDER,EAtDI,KAwDlBM,EAAS,IAAIM,YAAYJ,EAAa,CAACK,cAAeL,IAE/CP,EAAW,IAAI5I,EAAWiJ,GAEhC,SAAS/N,EAAKzE,GACjB,OAAOmS,EAASnS,EAAOkS,EAAeS,EAC1C,CACO,SAASvS,EAAQ6R,GACpB,OAAOE,EAASF,EAASC,EAAeE,EAC5C,CACO,SAASlS,EAAW+R,GACvB,OAAOE,EAASF,EAASC,EAAeG,EAC5C,CACO,SAAS9P,EAAWvC,GACvB,OAAOmS,EAASnS,EAAOkS,EAAeW,EAC1C,CACO,SAASG,EAAahT,GACzB,OAAOmS,EAASnS,EAAOkS,EAAeU,EAC1C,CAEO,SAASK,EAAchB,EAAgBnJ,GAC1C,OAAOqJ,EAASF,EAASC,EAAeG,GAA0BvJ,CACtE,CACO,SAASpH,EAAQ1B,EAAc8I,GAClC,OAAOqJ,EAASnS,EAAOkS,EAAeS,GAAmB7J,CAC7D,CACO,SAASlH,EAAc5B,EAAc8I,GACxCqJ,EAASnS,EAAOkS,EAAeW,GAAuB/J,CAC1D,CACO,SAASoK,EAAgBlT,EAAc8I,GAC1CqJ,EAASnS,EAAOkS,EAAeU,GAA8B9J,CACjE,C,kCCvFA,Q,QAA4B2I,E,wFCKb,SAAShR,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKmO,EAAAA,IAEb,MAAM1O,EAAaH,EAAKgC,OAClBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAE3BgT,EAAM7R,EAAAA,EAAMU,OAElB,IAAI,IAAIG,EAAI,EAAGA,EAAIhC,IAAcgC,EAAG,CAEhC,IAAIiR,EAAKpT,EAAKmC,GACc,SAAzBiR,EAAG/L,YAAYC,QACd8L,EAAKA,EAAGtK,QAEZ5G,EAAAA,EAAAA,IAAaC,EAAIN,EAASuR,EAAIzS,EAClC,CAGA,MAAM0S,EAAM/R,EAAAA,EAAMU,OAClB,IAAI,IAAIG,EAAIgR,EAAKhR,EAAIkR,IAAOlR,EAAG,CAC3B,MAAM+N,EAAM5O,EAAAA,EAAMa,GACG,aAAjB+N,EAAIpN,gBAGS7B,IADAiP,EAAI1O,SAASgE,EAAAA,IAAWkB,UAErCwJ,EAAI1O,SAASC,EAAAA,MACrB,CACJ,C,oEC/Be,SAAShB,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK6M,EAAAA,IACb,MAAMpN,EAAaH,EAAKsT,KAAKtR,OACvBH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,GAE9B,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKsT,KAAKnR,GAAIxB,EAChD,C,kCCVA,Q,QAAsC6Q,E,gDCAvB,SAASzR,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,OACV,C,8ECCe,SAASN,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMwB,GAAa3B,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAImC,EAAIN,EAASM,EAAIhC,EAAa0B,IAAWM,EAE7C,IAAII,EAAAA,EAAAA,IAAWJ,KAAO6B,EAAAA,GAAtB,CAaA,IAAIS,EAAAA,EAAAA,IAAKtC,KAAOgM,EAAAA,GAKhB,MAAM,IAAI/M,MAAM,gBAJZb,EAAAA,EAAAA,IAAO4B,EAHX,KAXA,CAEI,MAAM8D,EAAS,EAAE9D,GAGH+D,EAAAA,EAAAA,IAAcD,EAASE,EAAAA,KACrC5F,EAAAA,EAAAA,IAAOD,EAAAA,GAAO6B,KACA+D,EAAAA,EAAAA,IAAcD,EAASO,EAAAA,GAIzC,EAUJnG,EAAAA,EAAAA,IAAM,IACV,C,oEChCe,SAASI,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKkN,EAAAA,IACb,MAAM/L,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAKuT,KAAM5S,EACrC,C,0DCLe,SAASF,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKgN,EAAAA,IAEbpN,EAAAA,GAAOI,GAAO,CAACV,EAAKY,KAAMZ,EAAKwT,OAEnC,C,4GCFe,SAAS/S,EAAQC,EAAaV,EAAWW,GAEpD,IAAImD,EAAK6E,EAAAA,GAAa3I,EAAK8D,GAAGuD,YAAYC,OAC1C,QAAwBrG,IAAP6C,EAEb,MADA5C,QAAQC,KAAK,KAAMnB,EAAK8D,GAAGuD,YAAYC,OACjC,IAAIlG,MAAM,oBAGpBM,EAAAA,EAAAA,IAAQhB,EAAKqN,EAAAA,IAEb,MAAMlM,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKmQ,KAAOxP,IACpCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAKyT,MAAO9S,GAEpC,MAAM+S,GAAQnR,EAAAA,EAAAA,IAAWV,GACnB8E,GAAQpE,EAAAA,EAAAA,IAAWV,EAAQ,GAEjC,IAAI4C,EAAO+F,EAAAA,GACPC,EAASnJ,EAAAA,EAAMoS,GAAO5P,GAM1B,QAJe7C,IAAXwJ,IACAhG,EAAOgG,EAAOhJ,EAAAA,IAAakF,IAG3BlC,IAAS+F,EAAAA,GAA2B,CAOpC,GANA1G,GAAS6P,EAAAA,EAAAA,IAAkB7P,GAE3B2G,EAASnJ,EAAAA,EAAMqF,GAAO7C,QACP7C,IAAXwJ,IACAhG,EAASgG,EAAOhJ,EAAAA,IAAaiS,IAEhBjP,IAAS+F,EAAAA,GACtB,MAAM,IAAIpJ,MAAM,GAAGE,EAAAA,EAAMqF,GAAO7D,YAAYgB,KAAMxC,EAAAA,EAAMoS,GAAO5Q,8BAGnE8Q,EAAAA,EAAAA,IAAa/R,EAASA,EAAQ,EAClC,CAEAvB,EAAAA,GAAOI,GAAOoD,GAEdlC,EAAAA,EAAAA,IAAclB,EAAK+D,EACvB,C,wFC3Ce,SAAShE,EAAQC,EAAaV,EAAWW,GAKpD,GAHAA,EAAQK,cAAchB,EAAKY,OAAQoP,EAAAA,EAAAA,GAAQhQ,EAAKY,KAAM,CAAC,GACvDD,EAAUA,EAAQmG,iBAAiB,SAElB9G,EAAK6T,MAAM7R,OAAS,EACjC,MAAM,IAAIZ,MAAM,oBAEpBM,EAAAA,EAAAA,IAAQhB,EAAMkO,EAAAA,IACd,MAAMzO,EAAa,EAAIH,EAAK6T,MAAM7R,OAC5BH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,IAEjC0H,EAAAA,EAAAA,GAAKhG,EAAS7B,EAAKC,KAAMU,IACXmH,EAAAA,EAAAA,IAAsBjG,EAAS7B,EAAKC,MAElD,IAAI,IAAIkC,EAAI,EAAGA,EAAIhC,IAAegC,GAC9BD,EAAAA,EAAAA,IAAaC,EAAEN,EAAS7B,EAAK6T,MAAM1R,EAAE,GAAIxB,GAE7CL,EAAAA,GAAOI,GAAOV,EAAKY,IACvB,C,oECrBe,SAASH,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK4M,EAAAA,IACb,MAAMnN,EAAaH,EAAKsT,KAAKtR,OACvBH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,GAE9B,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKsT,KAAKnR,GAAIxB,EAEhD,C,0DCTe,SAASF,EAAQC,EAAaV,EAAW8T,IACpDpS,EAAAA,EAAAA,IAAQhB,EAAK+M,EAAAA,GACjB,C,oECFe,SAAShN,EAAQC,EAAaV,EAAWW,GAEpD,MAAMkB,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKuT,KAAQ5S,IACrCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAKC,KAAQU,IACrCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAK+T,OAAQpT,IAErCe,EAAAA,EAAAA,IAAQhB,EAAMgO,EAAAA,KACd9M,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,EAAQ,GAC1C,C,oECVe,SAASpB,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK6K,EAAAA,IACb,MAAMpL,EAAaH,EAAKwL,MAAMxJ,OACxBH,GAAaC,EAAAA,EAAAA,IAASpB,EAAKP,GAEjC,IAAI,IAAIgC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKwL,MAAMrJ,GAAIxB,GAE7CL,EAAAA,GAAOI,GAAOV,EAAKyL,MACvB,C,0DCXe,SAAS1L,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,IAE3BQ,EAAAA,EAAAA,IAAM,GAAIqB,EAAS,IAAKA,EAAQ,EAAG,IACvC,C,oECJe,SAAS9B,EAAOC,GAE3B,MAAM6B,GAAU3B,EAAAA,EAAAA,IAAWF,GAEZsB,EAAAA,GAAMiB,EAAAA,EAAAA,IAAWV,IAAWvB,EAAAA,GAAON,IAC3C6E,EAAAA,IAAa7E,EAAM6B,EAASA,EAAQ,EAC/C,C,2DCiFA,SAASmS,EAAsBC,EAAmBC,GAE9ChT,QAAQC,KAAK,YAAa8S,GAE1B,MAAME,EAhDH,SAAqBA,EAAYD,GAMpC,MAAME,EAAmB,WAFzBD,EAAQA,EAAME,MAAM,OAED,GAEnB,OAlDJ,SAAsBF,GACpB,OAAOA,EAAMG,QAAQC,GAAKA,EAAExE,SAAS,aACvC,CAgDWyE,CAAaL,GAAOM,KAAKC,IAE9B,IAAKtP,EAAGuP,EAAOC,GAAQF,EAAEL,MAAM,KAEH,MAAxBO,EAAKA,EAAK5S,OAAO,KACnB4S,EAAOA,EAAK/E,MAAM,GAAG,IAEvB,IAKIgF,EALAC,GAAQH,EAAQ,EAChBI,GAAQH,EAKZ,KAHEG,EAGEX,EAAO,CACT,IAAInD,EAAM7L,EAAE4P,QAAQ,IAAK,GACzBH,EAAWzP,EAAEyK,MAAM,EAAGoB,GACL,SAAb4D,IACFA,EAAW,YAGb,MACM7U,GADMkU,EAAGe,UAAU,sBACqBC,MA7C7C,OA8CGzQ,EAAAA,EAAAA,IAAKzE,KAAU8K,EAAAA,KACjBiK,GAAOzU,EAAAA,GAAON,GAAMgC,OAExB,KAAO,CACL,IAAIiP,EAAM7L,EAAE4P,QAAQ,KACpBH,EAAWzP,EAAEyK,MAAM,EAAGoB,GACL,cAAb4D,IACFA,EAAW,WACf,CAEA,MAAO,CAACA,EAAUC,EAAMC,EAAI,GAElC,CAMkBI,CAAa,EAAahG,UAAUgF,MAAOD,IArDtD,SAAwBC,EAAoBD,GAC1CC,EAAMM,KAAKF,GATb,SAA2Ba,EAAsBlB,GAEtD,OADYA,EAAGe,UAAU,sBACeC,MAAOE,EAAU,GAAIA,EAAU,GALhE,IAMT,CAMyBC,CAAkBd,EAAGL,IAC9C,CAoDkBoB,CAAenB,EAAOD,GAKpC,IAAIqB,EACR,yCAHsBpB,EAAMM,KAAK,CAACC,EAAEvS,IAAM,6BAAgCgS,EAAMhS,GAAG,OAIrEqT,KAAK,4BAGftU,QAAQuU,IAAIF,EAChB,CAcA,SACIvB,wBACA0B,iBAdJ,SAA0BvG,EAAgBwG,GAExC,MAAMC,EAAQzG,aAAqB0G,KAAK7G,YAC1BG,EAAUF,iBAEV,IAAI6G,IAAIC,YAAY5G,GAIlC,OAFA6E,EAAsB4B,EAAOD,GAEtBC,CACT,E,oECnHe,SAAS7V,EAAOC,GAE3B,IAAI8I,EAAQxI,EAAAA,GAAON,IAEfuC,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,IAKJ,iBAAVqG,IACPA,EAAQnD,OAAOmD,KAGnBzI,EAAAA,EAAAA,IAAM,GAAGyI,OAPLzI,EAAAA,EAAAA,IAAM,GAAGyI,KAQjB,C,oECde,SAAS/I,EAAOC,GAE3B,MAAM6J,EAAOvJ,EAAAA,GAAON,GAEdC,GAAaC,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAIqT,GAAM3Q,EAAAA,EAAAA,IAAWzC,EAAK,IAE1BI,EAAAA,EAAAA,IAAM,WAAWwJ,QAEb1J,EAAa,IAEbI,EAAAA,EAAAA,IAAO8S,GACPA,GAAM3Q,EAAAA,EAAAA,IAAWzC,EAAK,KAGtBI,EAAAA,EAAAA,IAAM,OAGVG,EAAAA,EAAAA,IAAM,KAAKqJ,OAAUwJ,EAAK,KAAKxJ,SAEZ,IAAf1J,GACAI,EAAAA,EAAAA,KAAQmC,EAAAA,EAAAA,IAAWzC,EAAK,KAExBI,EAAAA,EAAAA,IAAM,OAGVG,EAAAA,EAAAA,IAAM,KAAMP,EAAM,IACtB,C,4GCxBA,SAAS+V,EAAoBhW,EAAcmQ,EAAarM,EAAY2P,GAEhE,IAAInH,GAAW,EACf,MAAM3F,GAAQpE,EAAAA,EAAAA,IAAWkR,GACnBC,GAAQnR,EAAAA,EAAAA,IAAW4N,GAEzB,IAAI1L,EAAO+F,EAAAA,GAEPC,EAASnJ,EAAAA,EAAMoS,GAAO5P,GAI1B,QAHe7C,IAAXwJ,IACAhG,EAAOgG,EAAOhJ,EAAAA,IAAakF,IAE3BlC,IAAS+F,EAAAA,GAA2B,CAOpC,GALA1G,GAAS6P,EAAAA,EAAAA,IAAkB7P,GAC3B2G,EAASnJ,EAAAA,EAAMqF,GAAO7C,QACP7C,IAAXwJ,IACAhG,EAASgG,EAAOhJ,EAAAA,IAAaiS,IAE7BjP,IAAS+F,EAAAA,GAA2B,CACpC,GAAwB,WAAP1G,GAA0B,WAAPA,EAChC,MAAM,IAAI1C,MAAM,GAAGsS,KAAS5P,KAAM6C,sBAEtC,MAAMsP,EAAc,WAAPnS,EAAkB,MAAQ,MAIvC,YAFA0I,EAAAA,EAAAA,GAAkBxM,EAAMmQ,EAAM8F,EAAMxC,EAGxC,CAEAnH,GAAW,GACV6D,EAAMsD,GAAS,CAACA,EAAOtD,EAC5B,CAEA1F,EAAO5F,EAAAA,IAAa7E,EAAMmQ,EAAMsD,EAAOnH,EAC3C,CAEe,SAASvM,EAAOC,GAE3B,MAAM8I,EAAQxI,EAAAA,GAAON,GAEf6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAI2G,EAAM9G,SAAUG,EAAG,CACxB,IAANA,IACA9B,EAAAA,EAAAA,IAAM,QAEV,MAAMyD,EAAQgF,EAAM3G,GACdgO,EAAQhO,EAAEN,EACV4R,EAAQtR,EAAE,EAAEN,EAEP,OAAPiC,EAIO,WAAPA,EAKJkS,EAAoBhW,EAAMmQ,EAAMrM,EAAI2P,IAJhCjH,EAAAA,EAAAA,GAAkBxM,EAAMmQ,EAAM,MAAOsD,IAJrCjH,EAAAA,EAAAA,GAAkBxM,EAAMmQ,EAAM,MAAOsD,EAS7C,CACJ,C,8EClEe,SAAShT,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK8N,EAAAA,IACb,MAAM3M,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAKuT,KAAM5S,IAEnCkH,EAAAA,EAAAA,GAAKhG,EAAQ,EAAG7B,EAAKC,KAAMU,IACbmH,EAAAA,EAAAA,IAAsBjG,EAAQ,EAAG7B,EAAKC,KAExD,C,0DCZe,SAASF,EAAOC,GAE3B,MAAM8I,EAAQxI,EAAAA,GAAON,IAErBK,EAAAA,EAAAA,IAAMyI,EAAM,SAEK7H,IAAb6H,EAAM,KACNzI,EAAAA,EAAAA,IAAM,KAAOyI,EAAM,GAC3B,C,0DCRe,SAAS/I,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,mBAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrB6B,GAAa3B,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAImC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B5B,EAAAA,EAAAA,IAAO4B,EAAIN,IACXxB,EAAAA,EAAAA,IAAM,OAGVA,EAAAA,EAAAA,IAAM,KACV,C,0DCbe,SAASN,EAAOC,IAC3BkW,EAAAA,EAAAA,IAAiBlW,EAAMM,EAAAA,GAAON,GAClC,C,oECDe,SAASS,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAK6N,EAAAA,IAEb,MAAM1M,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAcL,EAAS7B,EAAK8I,MAAOnI,IACnCiB,EAAAA,EAAAA,IAAclB,GAAK6B,EAAAA,EAAAA,IAAWV,IAE9BvB,EAAAA,GAAOI,GAAOV,EAAKkL,GACvB,C,+FCLO,SAAS0I,EAAa/P,EAAWE,GAEpC,MAAMoS,EAAKjE,EAAAA,GAAerO,EACpBuS,EAAKlE,EAAAA,GAAenO,EAE1B,IAAIE,EACJ,IAAI,IAAI9B,EAAI,EAAGA,EAAI+P,EAAAA,KAAgB/P,EAC/B8B,EAAIkO,EAAAA,GAASgE,EAAGhU,GAChBgQ,EAAAA,GAASgE,EAAGhU,GAAKgQ,EAAAA,GAASiE,EAAGjU,GAC7BgQ,EAAAA,GAASiE,EAAGjU,GAAK8B,EAGL,CACZ,MAAMoS,EAAK,EAAExS,EACPyS,EAAK,EAAEvS,EACb,IAAI,IAAI5B,EAAI,EAAGA,EAAI,IAAKA,EACpB8B,EAAI8N,EAAAA,GAAQsE,EAAGlU,GACf4P,EAAAA,GAAQsE,EAAGlU,GAAK4P,EAAAA,GAAQuE,EAAGnU,GAC3B4P,EAAAA,GAAQuE,EAAGnU,GAAK8B,CAExB,CAEAA,EAAI3D,EAAAA,GAAOuD,GACXvD,EAAAA,GAAOuD,GAAKvD,EAAAA,GAAOyD,GACnBzD,EAAAA,GAAOyD,GAAKE,CAChB,CAEO,SAAS/B,EAAapB,EAAYyV,EAAmB5V,GAExD,MAAMC,EAAO2V,EAAalP,YAAYC,MAEhC7G,EAAU+V,EAAAA,EAAS5V,GAEzB,QAA6BK,IAAZR,EAIb,MAHAS,QAAQC,KAAK,yBAA0BP,GACvCM,QAAQC,KAAK,MAAMoV,EAAa/O,UAAU+O,EAAa7O,cACvDxG,QAAQuU,IAAKc,GACP,IAAInV,MAAM,oBAAoBR,QAAW2V,EAAa/O,UAAU+O,EAAa7O,cAGvFjH,EAAQK,EAAIyV,EAAc5V,GACV0B,EAAYvB,EAAIyV,EAEpC,CAIO,SAASlU,EAAYvB,EAAYyV,GAEpC,MAAMtQ,EAAS,EAAEnF,EACjBiR,EAAAA,GAAS9L,EAAS0L,EAAAA,IAAkB4E,EAAa/O,OACjDuK,EAAAA,GAAS9L,EAAS2L,EAAAA,IAAkB2E,EAAa7O,WACjDqK,EAAAA,GAAS9L,EAAS4L,EAAAA,IAAkB0E,EAAa9O,WACjDsK,EAAAA,GAAS9L,EAAS6L,EAAAA,IAAkByE,EAAa5O,cACrD,CAEO,SAASG,EAAsBhH,EAAYyV,GAE9C,MAAMtQ,EAAS,EAAEnF,EAEXqS,EAAMoD,EAAa,GACnBlD,EAAMkD,EAAaA,EAAavU,OAAO,GAE7C+P,EAAAA,GAAS9L,EAAS0L,EAAAA,IAAkBwB,EAAI3L,OACxCuK,EAAAA,GAAS9L,EAAS2L,EAAAA,IAAkBuB,EAAIzL,WACxCqK,EAAAA,GAAS9L,EAAS4L,EAAAA,IAAkBwB,EAAI5L,WACxCsK,EAAAA,GAAS9L,EAAS6L,EAAAA,IAAkBuB,EAAI1L,cAC5C,CAGO,SAAS8O,EAAqBC,EAAaC,EAAiBC,GAE/D,MAAMC,EAAa,EAAEH,EACfI,EAAa,EAAEH,EACfI,EAAa,EAAEH,EAAU,EAE/B7E,EAAAA,GAAS8E,EAAalF,EAAAA,IAAkBI,EAAAA,GAAS+E,EAAanN,EAAAA,IAC9DoI,EAAAA,GAAS8E,EAAajF,EAAAA,IAAkBG,EAAAA,GAAS+E,EAAalN,EAAAA,IAE9DmI,EAAAA,GAAS8E,EAAahF,EAAAA,IAAkBE,EAAAA,GAASgF,EAAapN,EAAAA,IAC9DoI,EAAAA,GAAS8E,EAAa/E,EAAAA,IAAkBC,EAAAA,GAASgF,EAAanN,EAAAA,GAClE,C,iHCvEO,MAAMjB,EAAe,CACxB,KAAQ,UACR,IAAQ,MAER,IAAQ,UAER,KAAY,UACZ,IAAY,cACZ,SAAY,eACZ,IAAY,UAEZ,IAAY,UACZ,IAAY,UAEZ,GAAY,KACZ,MAAY,SACZ,GAAY,SACZ,MAAY,SAEZ,GAAY,SACZ,IAAY,SACZ,GAAY,SACZ,IAAY,SAEZ,OAAY,UAEZ,MAAY,SACZ,OAAY,UACZ,OAAY,UACZ,OAAY,aACZ,OAAY,cAGHqO,EAAkB,CAC3B,QAAgB,WAChB,QAAgB,WAChB,YAAgB,eAChB,aAAgB,gBAChB,QAAgB,WAEhB,QAAe,WACf,QAAe,WAEf,OAAe,SACf,OAAe,SAEf,OAAe,SACf,OAAe,SACf,OAAe,SACf,OAAe,SAEf,QAAe,WACf,OAAe,UACf,QAAe,WACf,QAAe,WACf,WAAe,cACf,WAAe,eAIN3J,EAAkB,CAC3B,QAAgB,WAChB,QAAgB,WAChB,YAAgB,eAChB,aAAgB,gBAChB,QAAgB,WAEhB,QAAe,WACf,QAAe,WAEf,OAAe,UACf,QAAe,WACf,QAAe,WACf,WAAe,cACf,WAAe,eAINP,EAAY,CACrB,KAAM,MACN,IAAM,MACN,IAAM,UACN,KAAM,WACN,IAAM,MAEN,IAAO,MACP,IAAO,MACP,MAAO,MAEP,KAAO,KACP,KAAO,KACP,IAAO,KACP,KAAO,KACP,KAAO,KACP,IAAO,KAEP,IAAM,MACN,IAAM,KACN,IAAM,MACN,IAAM,MACN,KAAM,SACN,KAAM,UAOGmK,EAAc,CACvB,GACA,CAAC,KACD,CAAC,KAAM,MACP,CAAC,MACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KAAM,KAAM,MAAO,OACpB,CAAC,IAAK,KAAM,KAAM,KAClB,CAAC,KAAM,KAAM,OACb,CAAC,IAAK,KACN,CAAC,IAAK,IAAK,KACX,CAAC,MACD,CAAC,IAAK,KAAM,KAAM,IAAK,QA4J3B,IAAIC,EAA8C,CAAC,EACnD,IAAI,IAAI/U,EAAI,EAAGA,EAAI8U,EAAYjV,SAAUG,EAAG,CAExC,MAAMgV,EAAWhV,EACjB,IAAI,MAAM2B,KAAMmT,EAAY9U,GACxB+U,EAAoBpT,GAAMqT,CAElC,CAEO,MAAMC,EAAkBF,EAExB,SAASvD,EAA0D7P,GACtE,OAAOkT,EAAgBlT,EAC3B,CAKO,SAASoS,EAAiBlW,EAAc8D,GAE3C,MAAMuT,GAAanX,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAErBsX,EAASJ,EAAoBpT,GAC7ByT,EAASL,EAAoBpT,IAEnCoP,EAAAA,EAAAA,IAAgBmE,EAAOC,GAEvB,IAAI,IAAInV,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B+Q,EAAAA,EAAAA,IAAiBmE,EAAQlV,EAAGmV,EAAO,GAEvC,MAAME,EAAcD,EAASD,EACzBE,IACAnX,EAAAA,EAAAA,IAAM,MAEVE,EAAAA,EAAAA,IAAO8W,GAEP,IAAI,IAAIlV,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B9B,EAAAA,EAAAA,IAAM,SACNE,EAAAA,EAAAA,IAAO8W,EAAM,GAGbG,IACAnX,EAAAA,EAAAA,IAAM,IACd,CAEO,MAAMgD,EAAc,CAAC,KAAM,KAAM,IAAK,IAAK,KAAM,K,mICzUzCV,OAAOC,OAAO2O,EAAAA,GACzB,CACIzO,SAAW,MACXC,UAAW8H,EAAAA,GACXvF,SAAWpC,EAAAA,EAAAA,GAAemC,EAAAA,IAAS,CAACD,EAAG8F,MACnC3K,EAAAA,EAAAA,IAAO2K,IAAM7K,EAAAA,EAAAA,IAAM,cAAc,IAErCuE,SAAS1B,EAAAA,EAAAA,GAAeC,EAAAA,IAAS,CAACnD,EAAM+M,ICjBzC,SAAuB/M,EAAc6D,IAExCqP,EAAAA,EAAAA,IAAiBrP,GAAGmP,EAAAA,EAAAA,IAAahT,KAEjCO,EAAAA,EAAAA,IAAOsD,EACX,CDamB4T,CAAczX,EAAM+M,OAGnCxJ,EAAAA,EAAAA,GAAa,CAEL,KAAM,IAAK,IACX,IAAK,IAAK,IAAK,KAAM,MAEzB2J,EAAAA,GACA,CACIxJ,cAAegU,EAAAA,MAGvBnU,EAAAA,EAAAA,GAAa,CAAC,KAAM4J,EAAAA,GAChB,CACIvJ,WAAY,CAAC5D,EAAM6D,EAAGuB,EAAGrB,MAEjBxB,EAAAA,EAAAA,IAAWvC,KAAUuE,EAAAA,KACrBV,GAAIS,EAAAA,EAAAA,IAAWT,GACfE,GAAIO,EAAAA,EAAAA,IAAWP,KAGnByI,EAAAA,EAAAA,GAAkBxM,EAAM6D,EAAG,IAAKE,EAAE,KAI9CR,EAAAA,EAAAA,GAAa,CAAC,KAAM4H,EAAAA,GAChB,CACIyB,aAAejJ,EAAAA,GACfD,cAAeC,EAAAA,MAGvBJ,EAAAA,EAAAA,GAAa,CAAC,MAAO2J,EAAAA,GACjB,CACIxJ,cAAiBgU,EAAAA,GACjB9T,WAAY,CAAC5D,EAAc+M,EAAcjJ,EAAYM,MACjD5D,EAAAA,EAAAA,IAAM,qBAAsBuM,EAAM,KAAM3I,EAAO,IAAI,KAI/Db,EAAAA,EAAAA,GAAa,CAAC,KAAM2J,EAAAA,GAChB,CACIxJ,cAAegU,EAAAA,GACf9T,WAAY,CAAC5D,EAAc+M,EAAcjJ,EAAYM,MAEjD5D,EAAAA,EAAAA,IAAM,gBAAiBuM,EAAM,KAAM3I,EAAO,IAAI,KAI1DkH,EAAAA,EAAAA,GAAY,CAAC,OAAQnI,EAAAA,GACjB,CACIS,WAAY,CAAC5D,EAAM8D,EAAID,MAEftB,EAAAA,EAAAA,IAAWvC,KAAUuE,EAAAA,KACrBV,GAAIS,EAAAA,EAAAA,IAAWT,KAEnBuM,EAAAA,EAAAA,GAAiBpQ,EAAM,IAAK6D,EAAE,KAI1CyH,EAAAA,EAAAA,GAAa,CAAC,KAAMnI,EAAAA,KACpBC,EAAAA,EAAAA,GAAYC,EAAAA,GAAa4F,EAAAA,I,oHE3Ed,SAASxI,IAGxB,CAEO,MAAMkX,EAA2B,EAC3BrR,EAA2B,EAC3BsR,EAA2B,EAC3BvR,EAA2B,EAC3BwR,EAA2B,EAKjC,SAAS7Q,EAAatG,EAAaV,EAAW+H,EAAqBpH,GAEtE,MAAM4E,EAAOwC,EAAUvG,SAASgE,EAAAA,IAG1BsS,EAAQ9X,EAAK+B,KACbgW,OAA8B9W,IAAjB6W,EAAME,OACnBC,OAA8BhX,IAAjB6W,EAAMI,MACnB9P,EAAa7C,EAAK6C,SAClBH,EAAa1C,EAAK0C,WAElBkQ,EAAaL,EAAM3P,YAAYnG,OAClB8V,EAAM/V,KAAKC,SACV+V,EACDD,EAAMM,WAAWpW,SAChBiW,GAEpBvW,EAAAA,EAAAA,IAAQhB,EAAK4N,EAAAA,IAEb,MAAMzM,GAAUC,EAAAA,EAAAA,IAASpB,EAAKyX,GAExBE,EAAerY,EAAK+B,KAAKuW,SACzBC,EAAUT,EAAM3P,YAChB8I,EAAU6G,EAAM/V,KAGtB,IAAIyW,EAAUH,EAAarW,OAASuW,EAAQvW,OAASiP,EAAIjP,OACzD,IAAI,IAAIG,EAAI,EAAGA,EAAIoW,EAAQvW,SAAUG,EACjCsW,EAAYtW,EAAIN,EAAS0W,EAAQpW,GAAIkW,EAAalW,EAAIqW,GAAUb,EAA0BhX,GAC1FA,EAAQK,cAAcuX,EAAQpW,GAAG+I,MAAO3I,EAAAA,EAAAA,IAAWJ,EAAEN,GAIzD,IAAIoE,EAASsS,EAAQvW,OACnBwW,GAAWD,EAAQvW,OACrB,IAAI,IAAIG,EAAI,EAAGA,EAAI8O,EAAIjP,SAAUG,EAE7BsW,EAAYxS,EAASpE,EAASoP,EAAI9O,GAAIkW,EAAalW,EAAIqW,GAAUX,EAAsBlX,GAEvFsH,EAAWhC,KAAYgL,EAAI9O,GAAG+I,IAMlC,GAHA3F,EAAKM,WAAaI,EAGd8R,EACAxS,EAAKG,YAAcC,OAAOC,kBAE1B6S,EAAYxS,EAASpE,EAASiW,EAAME,YAAQ/W,EAAWoF,EAAuB1F,KAE5EsF,MACC,CAEHV,EAAKG,YAAcO,EAEnB,MAAMyS,EAAkB9H,KAAKC,IAAIwH,EAAarW,OAAQiP,EAAIjP,QACpD2W,EAAaN,EAAarW,OAASiP,EAAIjP,QAAUmW,IAAelS,GAElEyS,EAAkB,GAAyB,IAApBA,GAAyBC,KAChDpT,EAAKG,aAAegT,EAC5B,CAEA,IAAIE,EAAYrT,EAAKG,YACjBkT,IAAYjT,OAAOC,oBACnBgT,EAAUrT,EAAKM,YACnB,IAAI,IAAI1D,EAAIoW,EAAQvW,OAAQG,EAAIyW,IAAWzW,EACvCiG,EAAS9H,EAAAA,GAAO6B,EAAIN,IAAYM,EAEpC,MAAMkR,EAAM9N,EAAKM,WAAa+S,EAC9B,IAAI,IAAIzW,EAAI,EAAGA,EAAIkR,IAAOlR,EACtBiG,EAAS9H,EAAAA,GAAO6B,EAAIN,KAAa,EAKrC,MAAMgX,EAAcf,EAAMM,WACpBU,EAAchB,EAAMgB,YAE1BvT,EAAK8C,OAAS9C,EAAKM,aAAe+S,GAA6B,IAAlBC,EAAO7W,OAEpDwW,EAAUM,EAAY9W,OAAS6W,EAAO7W,OACtC,IAAI,IAAIG,EAAI,EAAGA,EAAI0W,EAAO7W,SAAUG,EAEhCsW,EAAYxS,EAASpE,EAASgX,EAAO1W,GAAI2W,EAAY3W,GAAIyV,EAAyBjX,GAElFyH,EAASyQ,EAAO1W,GAAG+I,MAAQ,IAEzBjF,EAwBF,GApBAgS,IAEAQ,EAAYxS,EAASpE,EAASiW,EAAMI,WAAOjX,EAAWqF,EAAwB3F,GAE9E4E,EAAKO,OAASgS,EAAMI,MAAMhN,MAExBjF,GAWN3F,EAAAA,GAAOI,GAAOqH,EAGS,IAAfoQ,GAEA1B,EAAAA,EAAAA,IAAoB/V,EAAKmB,EAASA,EAAUsW,EAAa,OAEtD,CAEH,MAAMpD,EAAM/U,EAAK0H,WAAa,EAAI1H,EAAKY,KAAKoB,OAAS,EAE/C+W,EAAY,EAAErY,EACpBqR,EAAAA,GAASgH,EAAYpH,EAAAA,IAAkBI,EAAAA,GAASgH,EAAYlH,EAAAA,IAAkB7R,EAAKwH,OACnFuK,EAAAA,GAASgH,EAAYnH,EAAAA,IAAkBG,EAAAA,GAASgH,EAAYjH,EAAAA,IAAkBiD,CAClF,CAER,CACO,SAAS0D,EAAY/X,EAAaV,EAAWuG,EAAa9B,EAAa9D,GAE1E,MAAMC,EAAOZ,EAAKkL,IAElB,IAAI7B,EAAcmB,EAAAA,GAElB,MAAMvD,EAAajH,EAAKiH,YAAYnG,GAIpC,QAHmBG,IAAfgG,IACAoC,EAAc1I,EAAQK,cAAciG,SAEzBhG,IAAXsF,EAAuB,CAEvB,MAAM1E,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAC9BwB,EAAAA,EAAAA,IAAaL,EAAS0E,EAAQ5F,GAE1B0I,IAAgBmB,EAAAA,KAChBnB,GAAc9G,EAAAA,EAAAA,IAAWV,GACtBwH,IAAgB7G,EAAAA,KACf6G,EAAc5G,EAAAA,IAE1B,EAEAf,EAAAA,EAAAA,IAAQhB,EAAK+D,IACb7C,EAAAA,EAAAA,IAAclB,EAAK2I,GAEnB/I,EAAAA,GAAOI,GAAOE,EACdD,EAAQK,cAAcJ,GAAQyI,GAEfhH,EAAAA,EAAAA,IAAY3B,EAAKV,EACpC,CA5JAS,EAAQuY,aAAe,W,kCCnBvB,SACIC,eAAgB,CAACpV,EAAWE,IACjB6M,KAAKsI,MAAOrV,EAAEE,GAEzBoV,aAAc,CAACtV,EAAWE,KAEtB,IAAI8I,EAAShJ,EAAEE,EACf,OAAI8I,EAAS,GAAKhJ,EAAEE,IAAM,GACf8I,IAEFA,CAAM,EAEnBuM,UAAW,CAAIvV,EAAWE,KAEtB,MAAMsV,GAAOxV,EAAIE,EAAIA,GAAKA,EAC1B,OAAY,IAARsV,GAAatV,EAAI,GACT,EACLsV,CAAG,EAEdC,QAAS,CAAIzV,EAAWE,KAEZF,EAAIE,EAAIA,GAAKA,E,gDCrB7B,MAAMwV,EAAO,CACZC,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,GAIDC,EAAAA,GAAM7R,QAAQ2R,GACd,QAAeE,EAAKA,E,8ECVL,SAAShZ,EAAQC,EAAaV,EAAWW,GAEpD,IAAI+Y,EAAa,EAEbC,EAAM3Z,EACV,KAAO,WAAY2Z,GAA6B,IAAtBA,EAAI5F,OAAO/R,QAAe,CAEhD,KAAO,SAAU2X,EAAI5F,OAAO,IAAM,GAC5B2F,EACF,KACJ,CACAC,EAAMA,EAAI5F,OAAO,GACjB2F,GAAc,CAClB,EAEAhY,EAAAA,EAAAA,IAAQhB,EAAKiO,EAAAA,IACb,IAAI9M,GAAUC,EAAAA,EAAAA,IAASpB,EAAKgZ,GAW5B,KARAxX,EAAAA,EAAAA,IAAaL,IAAW7B,EAAKuT,KAAM5S,IAEnCkH,EAAAA,EAAAA,GAAKhG,EAAS7B,EAAKC,KAAMU,IACXmH,EAAAA,EAAAA,IAAsBjG,EAAS7B,EAAKC,QAChD4B,EAGF8X,EAAM3Z,EACC,WAAY2Z,GAA6B,IAAtBA,EAAI5F,OAAO/R,QAAe,CAGhD,KAAO,SAAU2X,EAAI5F,OAAO,IAAM,EAC9B7R,EAAAA,EAAAA,IAAaL,EAAS8X,EAAI5F,OAAQpT,GAClC,KACJ,CAEAgZ,EAAMA,EAAI5F,OAAO,IAEjB7R,EAAAA,EAAAA,IAAaL,IAAW8X,EAAIpG,KAAM5S,IAElCkH,EAAAA,EAAAA,GAAKhG,EAAS8X,EAAI1Z,KAAMU,IACVmH,EAAAA,EAAAA,IAAsBjG,EAAS8X,EAAI1Z,QAC/C4B,EAEF6X,GAAc,CAClB,CACJ,C,wFC5Ce,SAASjZ,EAAQC,EAAaV,EAAWW,GAEpD,MAAMR,EAAaH,EAAK4Z,SAAS5X,OAAO,GAExCN,EAAAA,EAAAA,IAAQhB,EAAK+N,EAAAA,IACb,MAAM5M,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAG9B0H,EAAAA,EAAAA,GAAKhG,EAAS7B,EAAKC,KAAMU,IACXmH,EAAAA,EAAAA,IAAsBjG,EAAS7B,EAAKC,MAElD,IAAI,IAAIkC,EAAI,EAAGA,EAAIhC,IAAcgC,GAC7B0X,EAAAA,EAAAA,GAAc1X,EAAEN,EAAS7B,EAAK4Z,SAASzX,EAAE,GAAIxB,IAC/BmH,EAAAA,EAAAA,IAAsB3F,EAAEN,EAAS7B,EAAK4Z,SAASzX,EAAE,GAGvE,C,0DCnBe,WAASnC,IACpBQ,EAAAA,EAAAA,IAAM,WAAWN,EAAAA,EAAAA,IAAWF,GAAO,IACvC,C,oECAe,SAASS,EAAQC,EAAaV,EAAW8T,GAEpD,MAAMhL,EAAQ9I,EAAK8I,MACbgR,SAAehR,EACrB,IAAIiR,EAEJ,GAAa,WAAVD,EAAoB,CAEnB,GAAc,YAAVA,EAOA,OALApY,EAAAA,EAAAA,IAAchB,EAAK0N,EAAAA,KACnBxM,EAAAA,EAAAA,IAAclB,EAAK6J,EAAAA,SAEnBjK,EAAAA,GAAOI,GAAOoI,GAKlB,GAAc,WAAVgR,EAOA,OALApY,EAAAA,EAAAA,IAAchB,EAAKgE,EAAAA,KACnB9C,EAAAA,EAAAA,IAAclB,EAAKsD,EAAAA,SAEnB1D,EAAAA,GAAOI,GAAOoI,EAKtB,KAAO,CAGH,GAFAiR,EAAQjR,EAAM/F,UAAUiX,aAEV,UAAVD,EAOA,OALArY,EAAAA,EAAAA,IAAchB,EAAKwN,EAAAA,KACnBtM,EAAAA,EAAAA,IAAclB,EAAK6D,EAAAA,SAEnBjE,EAAAA,GAAOI,GAAOoI,EAAMA,OAKxB,GAAc,aAAViR,EAKA,OAHArY,EAAAA,EAAAA,IAAchB,EAAK2N,EAAAA,SACnBzM,EAAAA,EAAAA,IAAclB,EAAK2O,EAAAA,GAI3B,CAEA,GAA2B,QAAV0K,GAA6B,WAAVD,EAChC,MAAM,IAAI1Y,MAAM,gBAAgB0Y,KAASC,MAE7CrY,EAAAA,EAAAA,IAAchB,EAAKuN,EAAAA,IAEL,QAAV8L,IACAnY,EAAAA,EAAAA,IAAclB,EAAK+B,EAAAA,IACnBnC,EAAAA,GAAOI,GAAOoI,EAAMA,SAEpBlH,EAAAA,EAAAA,IAAclB,EAAK8B,EAAAA,IACnBlC,EAAAA,GAAOI,GAAOoI,EAEtB,C,sFCvDO,SAASwC,EAAYmB,EACAC,GACA,WAEI9I,EAAewM,GACG,CAAC,GAG/C,IAAIvD,EAA4D,CAAC,EAEjE,IAAI,IAAI/I,KAAM2I,EAAK,CAEf,MAAMwN,EAAOnN,EAAAA,GAAUhJ,GACZ,QAAPA,IACAA,EAAK,KAET+I,EAAO,KAAKoN,QAAY/W,EAAAA,EAAAA,GAAewJ,GACnC,CAAC1M,EAAc+M,IACJnJ,EAAW5D,EAAM8D,EAAIiJ,IAGxC,CAEA,OAAOF,CACX,CAEO,SAASuD,EAAiBpQ,EAAc8D,EAAYD,GAEvD,IAAIqW,EAAMpW,EACE,MAARoW,IACAA,EAAM,OAGV,MAAM5C,EAASF,EAAAA,GAAgB8C,GACzB3C,GAASvE,EAAAA,EAAAA,IAAahT,IAE5BkT,EAAAA,EAAAA,IAAgBrP,EAAGyT,GAEnB,IAAI5C,EAAI5Q,EAAQgI,EAAI,GAEhByL,EAASD,IACT5C,EAAI,IAAI5Q,IAAMgI,EAAI,MAGtBtL,EAAAA,EAAAA,IAAMkU,EAAG7Q,EAAGiI,EAChB,C,oECrDe,SAASrL,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKyN,EAAAA,IACb,MAAMtM,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAS7B,EAAK8I,MAAOnI,EACtC,C,yGCJO,MAAMgM,EAAa3M,GAAiBA,EAE9B2D,EAAoBW,EACpBoT,EAAoBhV,EAE1B,SAAS4B,EAAWT,EAAWgF,EAAStE,EAAAA,IAE3C,IAAIhC,EAAAA,EAAAA,IAAWsB,KAAOpB,EAAAA,GAClB,OAAOoB,EAEX,IAAIY,EAAAA,EAAAA,IAAKZ,KAAOoK,EAAAA,GAIZ,OAFIpF,IAAWtE,EAAAA,KACX3C,EAAAA,EAAAA,IAAciC,EAAGrB,EAAAA,IACdqB,EAGX,MAAMsW,EAAU7Z,EAAAA,GAAOuD,GAEjBhC,GAAU3B,EAAAA,EAAAA,IAAW2D,GAE3B,GAAgB,YAAZsW,GAAqC,aAAZA,EAAyB,CAClD,MAAMzG,GAAQnR,EAAAA,EAAAA,IAAWV,GACnB8E,GAAQpE,EAAAA,EAAAA,IAAWV,EAAQ,GACjC,KAAQ6R,IAAUjR,EAAAA,IAAciR,IAAUlR,EAAAA,IAClCmE,IAAUlE,EAAAA,IAAckE,IAAUnE,EAAAA,IAGtC,OADAZ,EAAAA,EAAAA,IAAciC,EAAGgF,GACVhF,CAEf,CACA,GAAgB,YAAZsW,IAAyB5X,EAAAA,EAAAA,IAAWV,KAAaY,EAAAA,GAEjD,OADAb,EAAAA,EAAAA,IAAciC,EAAGgF,GACVhF,EAGX,GAAIgF,IAAWtE,EAAAA,GAEX,OAAOV,EAEX,MAAMgG,GAAMyI,EAAAA,EAAAA,MAIZ,OAHA5Q,EAAAA,EAAAA,IAAQmI,EAAKkF,EAAAA,KACbkE,EAAAA,EAAAA,IAAcpJ,EAAKhG,GAEZgG,CACX,CAEO,SAASnH,EAAWmB,GAEvB,IAAItB,EAAAA,EAAAA,IAAWsB,KAAOpB,EAAAA,GAClB,OAAOoB,EAEX,IAAIY,EAAAA,EAAAA,IAAKZ,KAAOoK,EAAAA,GAEZ,OADArM,EAAAA,EAAAA,IAAciC,EAAGpB,EAAAA,IACVoB,EAEX,GAAkB,YAAdvD,EAAAA,GAAOuD,KAAoBtB,EAAAA,EAAAA,KAAWrC,EAAAA,EAAAA,IAAW2D,MAAQrB,EAAAA,GAEzD,OADAZ,EAAAA,EAAAA,IAAciC,EAAGpB,EAAAA,IACVoB,EAGX,MAAMgG,GAAMyI,EAAAA,EAAAA,MAIZ,OAHA5Q,EAAAA,EAAAA,IAAQmI,EAAKiF,EAAAA,KACbmE,EAAAA,EAAAA,IAAcpJ,EAAKhG,GAEZgG,CACX,C,wFClEe,SAASpJ,EAAQC,EAAaV,EAAWW,GAEpD,MAAMyZ,EAAOpa,EAAKyM,IACZ4N,EAASD,EAAKpY,OACdyK,EAAM,IAAIvE,MAAMmS,GACtB,IAAI,IAAIlY,EAAI,EAAGA,EAAIkY,IAAUlY,EAAG,CAE5B,MAAM2B,EAAK6E,EAAAA,GAAayR,EAAKjY,GAAGkF,YAAYC,OAC5C,QAAwBrG,IAAP6C,EACb,MAAM,IAAI1C,MAAM,GAAGgZ,EAAKjY,GAAGkF,YAAYC,0BAE3CmF,EAAItK,GAAK2B,CACb,CAEAxD,EAAAA,GAAOI,GAAO+L,GAEd/K,EAAAA,EAAAA,IAAQhB,EAAKmN,EAAAA,KACbjM,EAAAA,EAAAA,IAAclB,EAAK6J,EAAAA,IACnB,MAAMpK,EAAaH,EAAKsa,YAAYtY,OAAS,EACvCH,GAAUC,EAAAA,EAAAA,IAASpB,EAAKP,IAE9B+B,EAAAA,EAAAA,IAAaL,EAAS7B,EAAKmQ,KAAMxP,GACjC,IAAI,IAAIwB,EAAI,EAAIA,EAAIhC,IAAcgC,GAC9BD,EAAAA,EAAAA,IAAaC,EAAIN,EAAS7B,EAAKsa,YAAYnY,EAAE,GAAIxB,EACzD,C,0GChBO,SAAS4C,EAAakJ,EACDC,GACH,cACGhJ,EAAkBiJ,EAAAA,GAAS,aAC3BC,EAAkBD,EAAAA,GAAS,WAC3B/I,EAAkB4I,GACE,CAAC,GAE7C,IAAIK,EAA4D,CAAC,EAEjE,IAAI,IAAI/I,KAAM2I,EAAK,CAEf,MAAMwN,EAAOnN,EAAAA,GAAUhJ,GACZ,OAAPA,IACAA,EAAK,KAET+I,EAAO,KAAKoN,QAAa/W,EAAAA,EAAAA,GAAewJ,GACpC,CAAC1M,EAAc+M,EAAc3I,IACtBR,EAAW5D,EAAM4M,EAAaG,GAAOjJ,EAAIJ,EAAcU,MAGlEyI,EAAO,MAAMoN,QAAY/W,EAAAA,EAAAA,GAAewJ,GACpC,CAAC1M,EAAc+M,EAAc3I,IACtBR,EAAW5D,EAAM0D,EAAcU,GAAQN,EAAI8I,EAAaG,MAG/DH,IAAiBD,EAAAA,IAAa/I,IAAe4I,IAE7CK,EAAO,MAAMoN,QAAY/W,EAAAA,EAAAA,GAAewJ,GAEpC,CAAC1M,EAAc+M,EAAc3I,KAEzB,MAAMI,EAAclE,EAAAA,GAAO8D,GAE3B,MAAW,MAAPN,GAA8B,IAAhBU,GACP4L,EAAAA,EAAAA,GAAiBpQ,EAAM,KAAM+M,GAC7B,MAAPjJ,GAA8B,IAAhBU,GACP4L,EAAAA,EAAAA,GAAiBpQ,EAAM,KAAM+M,GAEjCP,EAAkBxM,EAAM+M,EAAMjJ,EAAG,IAAKJ,EAAcU,GAAAA,IAI3E,CAEA,OAAOyI,CACX,CAEO,SAASL,EAAkBxM,EAAc6D,EAAWC,EAAYC,GAEnE,MAAQuT,EAAOF,EAAAA,GAAgBtT,GACzByT,GAASvE,EAAAA,EAAAA,IAAahT,IAE5BkT,EAAAA,EAAAA,IAAgBrP,EAAGyT,IACnBpE,EAAAA,EAAAA,IAAgBnP,EAAGuT,GAEnB,IAAI5C,EAAI,GAAQ5I,EAAI,GAEhByL,EAASD,IACT5C,EAAI,IAAK5I,EAAI,MAGjBtL,EAAAA,EAAAA,IAAMkU,EAAG7Q,EAAGC,EAAIC,EAAG+H,EACvB,C,oECzEe,SAASrL,EAAQC,EAAaV,EAAWW,IAEpDe,EAAAA,EAAAA,IAAQhB,EAAKsN,EAAAA,IACb,MAAMnM,GAAUC,EAAAA,EAAAA,IAASpB,EAAK,IAE9BwB,EAAAA,EAAAA,IAAaL,EAAW7B,EAAK8I,MAAOnI,IACpCuB,EAAAA,EAAAA,IAAaL,EAAQ,EAAG7B,EAAK6P,MAAOlP,EACxC,C,0ICAA,QAAegC,OAAOC,OAAO0O,EAAAA,GACzB,CACIxO,SAAW,QACXC,UAAW8H,EAAAA,KAEftH,EAAAA,EAAAA,GAEI,CACI,KAAM,IAAK,IACX,IAAK,IAAK,IAAK,KAAM,MAEzB2J,EAAAA,GACA,CACIN,aAAe8K,EAAAA,GACfhU,cAAegU,EAAAA,MAGvBnU,EAAAA,EAAAA,GAAa,CAAC,KAAM2J,EAAAA,GAChB,CACItJ,WAAY,CAAC5D,EAAM6D,EAAGC,EAAIC,MAClBxB,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,IACrBoB,GAAInB,EAAAA,EAAAA,IAAWmB,GACfE,GAAIrB,EAAAA,EAAAA,IAAWqB,KAEfF,GAAIS,EAAAA,EAAAA,IAAWT,GACfE,GAAIO,EAAAA,EAAAA,IAAWP,KAGnByI,EAAAA,EAAAA,GAAkBxM,EAAM6D,EAAG,IAAKE,EAAE,KAI9CR,EAAAA,EAAAA,GAAa,CAAC,KAAM4H,EAAAA,GAChB,CACIzH,cAAeC,EAAAA,MAGvBJ,EAAAA,EAAAA,GAAa,CAAC,MAAO0J,EAAAA,GACjB,CACIrJ,WAAY,CAAC5D,EAAc+M,EAAcjJ,EAAIM,MACzC5D,EAAAA,EAAAA,IAAM,uBAAwBuM,EAAM,KAAM3I,EAAO,IAAI,KAIjEb,EAAAA,EAAAA,GAAa,CAAC,KAAM0J,EAAAA,GAChB,CACIrJ,WAAY,CAAC5D,EAAc+M,EAAcjJ,EAAIM,MAEzC5D,EAAAA,EAAAA,IAAM,gBAAiBuM,EAAM,KAAM3I,EAAO,IAAI,KAI1DkH,EAAAA,EAAAA,GAAY,CAAC,OAAQ8B,EAAAA,GACjB,CACIxJ,WAAY,CAAC5D,EAAM8D,EAAID,MAEftB,EAAAA,EAAAA,IAAWvC,KAAUyC,EAAAA,KACrBoB,GAAInB,EAAAA,EAAAA,IAAWmB,KAEZuM,EAAAA,EAAAA,GAAiBpQ,EAAM,IAAK6D,OAI/CyH,EAAAA,EAAAA,GAAY,CAAC,KAAMnI,EAAAA,GACf,CACIS,WAAY,CAAC5D,EAAM8D,EAAID,MACnBuM,EAAAA,EAAAA,GAAiBpQ,EAAM,KAAK0C,EAAAA,EAAAA,IAAWmB,GAAAA,KAInDT,EAAAA,EAAAA,GAAYC,EAAAA,GAAa4F,EAAAA,I,0DC9Ed,SAASlJ,EAAOC,IAC3BK,EAAAA,EAAAA,IAAOC,EAAAA,GAAON,GAClB,C,GCJIua,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBxZ,IAAjByZ,EACH,OAAOA,EAAaC,QAGrB,IAAIlP,EAAS8O,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAC,EAAoBH,GAAUhP,EAAQA,EAAOkP,QAASH,GAG/C/O,EAAOkP,OACf,CCrBAH,EAAoBK,EAAI,CAACF,EAASG,KACjC,IAAI,IAAIzJ,KAAOyJ,EACXN,EAAoBxN,EAAE8N,EAAYzJ,KAASmJ,EAAoBxN,EAAE2N,EAAStJ,IAC5E1O,OAAOoY,eAAeJ,EAAStJ,EAAK,CAAE2J,YAAY,EAAMC,IAAKH,EAAWzJ,IAE1E,ECNDmJ,EAAoBxN,EAAI,CAACkD,EAAKgL,IAAUvY,OAAOwY,UAAUC,eAAevU,KAAKqJ,EAAKgL,G,mGCAlF,MAAM3B,EAAO,CACZC,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,GAIDC,EAAAA,GAAM7R,QAAQ2R,GAGd,IAAI8B,EAAqB,KACTA,EAAW,CAC1B,SACA,eACA,cACA,cACA,aACA,WACA,WACA,SACA,UACA,SACA,UACA,cACA,gBACA,iBACA,YACA,UACA,UACA,YACA,cACA,mBACA,WACA,WACA,YACA,aACA,mBACA,eACA,YACA,aACA,UACA,WACA,mBACA,eACA,aACA,gBACA,sBACA,eACA,eACA,iBACA,WACA,WACA,OACA,UACA,W,sBC9FD,MAAM9B,EAAO,CACZ+B,KAAM9B,EAAAA,MAAAA,EACN+B,SAAU/B,EAAAA,MAAAA,EACVgC,SAAUhC,EAAAA,MAAAA,EACV3R,KAAM2R,EAAAA,MAAAA,EACNiC,MAAOjC,EAAAA,MAAAA,EACPkC,KAAMlC,EAAAA,MAAAA,EACNmC,KAAMnC,EAAAA,MAAAA,EACNoC,QAASpC,EAAAA,MAAAA,EACTqC,UAAWrC,EAAAA,MAAAA,EACXsC,QAAStC,EAAAA,MAAAA,EACTuC,OAAQvC,EAAAA,MAAAA,EACRwC,MAAOxC,EAAAA,MAAAA,EACPyC,UAAWzC,EAAAA,MAAAA,EACX0C,UAAW1C,EAAAA,MAAAA,EACX2C,OAAQ3C,EAAAA,MAAAA,EACR4C,OAAQ5C,EAAAA,MAAAA,EACR6C,MAAO7C,EAAAA,MAAAA,EACP8C,KAAM9C,EAAAA,MAAAA,EACN+C,SAAU/C,EAAAA,MAAAA,EACVgD,MAAOhD,EAAAA,KAAAA,EACPiD,OAAQjD,EAAAA,MAAAA,EACRkD,MAAOlD,EAAAA,MAAAA,EACPmD,WAAYnD,EAAAA,MAAAA,EACZoD,OAAQpD,EAAAA,MAAAA,EACRpX,QAASoX,EAAAA,MAAAA,EACTqD,YAAarD,EAAAA,MAAAA,EACbsD,KAAMtD,EAAAA,KAAAA,EACNuD,KAAMvD,EAAAA,MAAAA,GACNwD,UAAWxD,EAAAA,MAAAA,EACXyD,eAAgBzD,EAAAA,MAAAA,EAChB0D,MAAO1D,EAAAA,MAAAA,EACP2D,IAAK3D,EAAAA,MAAAA,EACL4D,MAAO5D,EAAAA,MAAAA,EACP6D,GAAI7D,EAAAA,MAAAA,EACJ8D,IAAK9D,EAAAA,MAAAA,EACLK,cAAeL,EAAAA,MAAAA,GAIhB7W,OAAOC,OAAO6W,EAAAA,EAAOF,GCsCrB,MAAMgE,EAAW,CAAC,EAKlB,IAAqC7Q,EA+B1B4C,EAAAA,GACAE,EAAAA,GACAD,EAAAA,IACAS,EAAAA,EAAAA,GAAQ,OAlCkBtD,EAkCUvJ,EAAAA,GAhCpC,CACHJ,UAAWwa,EACXza,SA8BgC,MA7BhCtB,UAAW0B,EAAAA,EAAAA,GAAewJ,GAAc7F,IACpC,MAAMsJ,GAASjQ,EAAAA,EAAAA,IAAW2G,GAAM,EAEhC,OADevF,EAAAA,GAAMiB,EAAAA,EAAAA,IAAW4N,IAAc,QAChCtL,EAAAA,IAAYgC,EAAK,O,QC1FhC2S,EAAAA,MAAAA,EACKA,EAAAA,MAAAA,EACFA,EAAAA,MAAAA,ECFVA,EAAAA,MAAAA,GACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,E","sources":["webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts"],"sourcesContent":["import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __name__: string,\n    __str__?: Fct<[number]>,\n    __int__?: Fct<[number]>,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, AST_FCT_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_OP_ASSIGN, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = AST_OP_ASSIGN;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = AST_OP_ASSIGN_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;\n\nexport default [];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[number]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default {};","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_list\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { type Context, convert_node, swapASTNodes } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = context.createSubContext(\"class\");\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[number, number]>;\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, PY_CODE, VALUES } from \"../dop\";\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"./types/utils/types\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : id2name[type(id)],\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname] as Fct;\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; // is it used ?\n    type; //TODO: remove\n}\n\n// builtin symbols.\nconst builtins = {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT))\n};","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n}\n"],"names":["ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","w_node","w_sns","convert","dst","context","name","func","id","fct_type","local_symbols","undefined","console","warn","Error","fct","Types","ret_type","__call__","RETURN_TYPE","setType","AST_FCT_CALL","setResultType","coffset","addChild","args","length","keywords","convert_node","i","keyword","set_py_code","rchild","resultType","TYPEID_jsint","TYPEID_int","Number2Int","Object","assign","TYPE_str","__name__","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","RET_FLOAT","other","other_type","Int2Number","TYPEID_float","other_value","type","AST_LIT_STR","otype","__int__","WRITE_CALL","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","offset","set_js_cursor","CODE_BEG","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","CODE_END","Symbol","generate","rtype","stype","call","createSubContext","parent_node_context","convert_args","annotation","returns","fct_return_type","last_type","constructor","$name","fake_node","lineno","end_lineno","col_offset","end_col_offset","push","Body","set_py_code_from_list","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_STRUCT_DICT","keys","values","bname2pyname","AST_OP_ASSIGN_AUG","target","value","Py_object","TYPE_bool","RET_IJBF2BOOL","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_INIT","result_type","CURSOR","ARRAY_TYPE","jscode","ast","filename","CODE_LINE","CODE_COL","idx","JS_CODE","indent","cur_indent_level","indents","str","AST2JS","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","AST_SYMBOL","AST_OP_ATTR","attr","TYPE_float","arg","RET_IJBF2FLOAT","_node","_op","genUnaryOps","AST_KEY_IMPORT","names","module","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","PythonError","python_exception","super","_raw_err_","this","TYPEID_NoneType","TYPEID_type_int_","TYPEID_type_float_","TYPEID_type_str_","float2str","f","toExponential","sign_idx","slice","toString","includes","addType","typedesc","obj","left","write_unary_jsop","bname2jsop","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","TYPE_jsint","TYPE_int","TYPE_NotImplementedType","TYPE_NoneType","Float64Array","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","PY_CODE","NEXT_AST_NODE_ID","parent","ASTNODE_SIZE","ASTNODES","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","createASTNode","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","parentOPPrio","setFirstChild","setParentOPPrio","beg","cn","end","elts","test","asname","right","ltype","reversed_operator","swapASTNodes","bases","_context","orelse","debug_print_exception","err","sb","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","line","col","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","find_and_write_call","jsop","write_multi_jsop","ao","bo","ap","bp","brython_node","BRY2SBRY","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","write_id_jsop","CONVERT_2INT","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","LIST","require","ILIST","childCount","cur","handlers","ExceptHandler","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","_id2name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","type_fct"],"sourceRoot":""}