{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"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","sources":["webpack://sbrython/./src/types/type[int].ts","webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/types/str.ts","webpack://sbrython/./src/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/structs/operators/compare.ts","webpack://sbrython/./src/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/structs/operators/binary.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/types/utils/addType.ts","webpack://sbrython/./src/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/bry2sbry/ClassDef.ts","webpack://sbrython/./src/types/jsint.ts","webpack://sbrython/./src/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/bry2sbry/Body.ts","webpack://sbrython/./src/types/type[str].ts","webpack://sbrython/./src/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/types/utils/types.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/List.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/types/bool.ts","webpack://sbrython/./src/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/core_modules/to_number/ast2js.ts","webpack://sbrython/./src/types/bases.ts","webpack://sbrython/./src/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/types/NoneType.ts","webpack://sbrython/./src/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/bry2sbry/Constant.ts","webpack://sbrython/./src/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/types/type[float].ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/core_modules/to_bigint/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/bry2sbry/list.ts","webpack://sbrython/./src/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/structs/operators/id.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/types/list.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/bry2sbry/functions/Args.ts","webpack://sbrython/./src/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/bry2sbry/Name.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/bry2sbry/import/alias.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/structs/operators/unary.ts","webpack://sbrython/./src/types/index.js","webpack://sbrython/./src/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/types/utils/methods.ts","webpack://sbrython/./src/types/int.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/bry2sbry/functions/Call.ts","webpack://sbrython/./src/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/bry2sbry/import/Import.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/types/NotImplementedType.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/types/float.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["import { RET_INT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns } from \"@SBrython/ast2js\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL](node, other);\n        })\n    }\n);","import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_NoneType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _b_.PythonError(\", firstChild(node), \")\");\n}","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import dop_reset, {ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"./types/utils/types\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n\n    console.warn({\n        type     : type(id),\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname];\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : TYPEID_type_int_,\n        str  : TYPEID_type_str_,\n        float: TYPEID_type_float_,\n        len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)) //TODO...\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { w_node } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","import { w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { parentOPPrio, setParentOPPrio, type, VALUES } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { write_unary_jsop } from \"./unary\";\nimport { AST2JS } from \"@SBrython/core_modules/lists\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"@SBrython/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { addType } from \"@SBrython/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_b_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nimport Types from \"@SBrython/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value];\n\n    method[WRITE_CALL]!(node, left);\n}","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n}","import { RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport Types from \"./list\";\nimport { w_node } from \"@SBrython/ast2js\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__[WRITE_CALL](node, other);\n        })\n    }\n);","import { OPERATORS__EQ, OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = OPERATORS__EQ;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = OPERATORS__EQ_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { Context } from \"@SBrython/py2ast\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Fct<T extends any[] = unknown[]> = {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = {\n    __name__?: string,\n    __call__: Fct<T> & {\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { VALUES } from \"@SBrython/dop\";\nimport { write_multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_b_.assert(\", firstChild(node), \")\");\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}","import { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === FUNCTIONS_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","import { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// =======================================================================\n\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}\n\n// =======================================================================\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { LITERALS_BOOL, LITERALS_FLOAT, LITERALS_INT, LITERALS_NONE, LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, LITERALS_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, LITERALS_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, LITERALS_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, LITERALS_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, LITERALS_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { Context, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { default_call } from \"@SBrython/core_modules/functions/call/ast2js\";\nimport { convert_args } from \"./Args\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport Body from \"@SBrython/bry2sbry/Body\";\n\nimport Types from \"@SBrython/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { LITERALS_INT, TO_BIGINT, TO_NUMBER } from \"@SBrython/core_modules/lists\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, TO_NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, TO_BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { RET_FLOAT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","export default class Py_object {\n\n}","import { w_node } from \"@SBrython/ast2js\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { w_str } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","export default [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_FOR, CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, CONTROLFLOWS_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n\n    if( Number.isNaN( Number(value) ) ) {\n        console.warn(value);\n        throw new Error(\"??\");\n    }\n\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { w_str } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { write_id_jsop } from \"@SBrython/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_b_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { BB, BE, w_NL, w_node } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport Types from \"@SBrython/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import      AST2JS_0 from \"./symbol/ast2js\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\nimport      AST2JS_41 from \"./to_bigint/ast2js\";\nimport      AST2JS_42 from \"./to_number/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nexport const TO_BIGINT = 41;\nexport const TO_NUMBER = 42;\n\nimport type {T_AST2JS} from './'\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n\tAST2JS_41,\n\tAST2JS_42,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_b_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_b_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_b_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]];\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}","import { w_node, w_str } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SBRYTHON__.getModules()\");\n    else\n        w_str(`__SBRYTHON__.getModule(\"${value}\")`);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["Object","assign","TYPE_type_int_","__name__","__call__","method_wrapper","RET_INT","node","other","firstChild","other_type","resultType","TYPEID_int","w_node","TYPEID_jsint","Number2Int","TYPEID_float","w_sns","TYPEID_str","otype","Types","undefined","__int__","Error","WRITE_CALL","Py_Exception","Py_object","TYPE_str","__class__","TYPE_type_str_","__len__","w_str","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","t","convert","dst","context","setType","KEYWORDS_ASSERT","coffset","addChild","convert_node","test","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","result_type","TYPEID_NoneType","value","RETURN","setResultType","meta","parent_node_context","RETURN_TYPE","ast2js","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","name","getASTFor","_r_","_b_","nops","nb_ops","length","Array","i","bname2pyname","constructor","$name","VALUES","OPERATORS_COMPARE","TYPEID_bool","nbChildren","comparators","left","set_py_code","id","brython_node","offset","PY_CODE","CODE_BEG_LINE","lineno","CODE_BEG_COL","col_offset","CODE_END_LINE","end_lineno","CODE_END_COL","end_col_offset","set_py_code_from_list","beg","end","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","CODE_LINE","CODE_COL","py2ast","code","parser","$B","Parser","nodes","convert_ast","_PyPegen","run_parser","dop_reset","createASTNode","Body","body","Context","ASTNODES","swapASTNodes","ao","ASTNODE_SIZE","bo","ap","bp","BRY2SBRY","console","warn","log","type","parent_context","RootContext","local_symbols","type_fct","int","TYPEID_type_int_","str","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","call","OPERATORS_UNARY","operand","TYPEID_NotImplementedType","method","Py_JSException","pyop","other_value","write_unary_jsop","prio","JSOperatorsPrio","p_prio","parentOPPrio","setParentOPPrio","l","r","floordiv_float","Math","floor","floordiv_int","mod_float","mod","mod_int","nbChild","OPERATORS_ATTR","attr","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","set_js_cursor","CODE_BEG","type_id","FUNCTIONS_ARGS_VARG","FUNCTIONS_ARGS_KWARG","defval","CODE_END","BinaryOperators","AssignOperators","JSOperators","JSOperatorsPriority","priority","reversed_operator","write_multi_jsop","first","parenthesis","idx","list","typedesc","obj","create","STRUCTS_TUPLE","elts","bases","CLASS_CLASSDEF","TYPE_jsint","RET_IJ2INT","CONVERT_2INT","Int2Number","RET_IJBF2FLOAT","RET_JSINT2JSINT","genUnaryOps","RET_JSINT","RET_IJBF2BOOL","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","BODY","cn","RET_STR","__str__","targets","target","OPERATORS__EQ","OPERATORS__EQ_INIT","rtype","annotation","Symbol","rchild","STRUCTS_LIST","CONTROLFLOWS_WHILE","KEYWORDS_CONTINUE","default_call","nb_call_args","call_args_offset","nb_pos_call","FUNCTIONS_CALL_KEYWORD","max_pos","vararg_array","has_kw","cutoff","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","args_names","args_pos","arg","key","float2str","f","toExponential","sign_idx","slice","toString","includes","_","stackline2astnode","stackline","sb","parse_stack","stack","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","line","col","indexOf","SYMBOL","debug_print_exception","err","_raw_err_","stack2astnodes","exception_str","join","get_py_exception","__SBRYTHON__","_err_","PythonError","python_exception","JSException","TYPE_bool","CONTROLFLOWS_TRYBLOCK_CATCH","KEYWORDS_BREAK","OPERATORS__BRACKETS","TYPE_type_float_","TYPE_int","TYPE_float","TYPE_NotImplementedType","TYPE_NoneType","LITERALS_F_STRING","values","OPERATORS_BINARY","right","ltype","CURSOR","ARRAY_TYPE","JS_CODE","indent","cur_indent_level","indents","w_NL","BB","BE","AST2JS","args","_context","vtype","qname","LITERALS_BOOL","LITERALS_STR","__qualname__","LITERALS_FLOAT","LITERALS_NONE","LITERALS_INT","generate","stype","convert_args","returns","fct_return_type","last_type","fake_node","push","SType_fct","posonlyargs","STypeID","FUNCTIONS_DEF","find_and_write_call","jsop","a_value","TO_NUMBER","setFirstChild","TO_BIGINT","RET_FLOAT","LITERALS_F_STRING_FORMATTEDVALUE","STRUCTS_DICT","keys","RET_INT2INT","super","bname2jsop","OPERATORS_BOOLEAN","RUNTIME_0","RUNTIME_1","RUNTIME_2","handlers","CONTROLFLOWS_TRYBLOCK","ExceptHandler","Name","require","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","KEYWORDS_RAISE","exc","write_id_jsop","assert","cond","iter","func","CONTROLFLOWS_FOR","CONTROLFLOWS_FOR_RANGE","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","CONTROLFLOWS_TERNARY","Float64Array","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","isNaN","KEYWORDS_IMPORT_ALIAS","asname","OPERATORS_ASSIGNOP","rop","RET_TYPE","write","fct_type","fct","ret_type","FUNCTIONS_CALL","keywords","KEYWORDS_IMPORT","names","module","PASS","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","AST2JS_41","AST2JS_42","RUNTIME","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","_node","_op","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"sourceRoot":""}