{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"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","sources":["webpack://sbrython/./src/types/type[int].ts","webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/types/str.ts","webpack://sbrython/./src/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/structs/operators/compare.ts","webpack://sbrython/./src/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/structs/operators/binary.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/types/utils/addType.ts","webpack://sbrython/./src/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/bry2sbry/ClassDef.ts","webpack://sbrython/./src/types/jsint.ts","webpack://sbrython/./src/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/bry2sbry/Body.ts","webpack://sbrython/./src/types/type[str].ts","webpack://sbrython/./src/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/types/utils/types.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/List.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/types/bool.ts","webpack://sbrython/./src/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/core_modules/to_number/ast2js.ts","webpack://sbrython/./src/types/bases.ts","webpack://sbrython/./src/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/types/NoneType.ts","webpack://sbrython/./src/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/bry2sbry/Constant.ts","webpack://sbrython/./src/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/types/type[float].ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/core_modules/to_bigint/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/bry2sbry/list.ts","webpack://sbrython/./src/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/structs/operators/id.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/types/list.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/bry2sbry/functions/Args.ts","webpack://sbrython/./src/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/bry2sbry/Name.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/bry2sbry/import/alias.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/structs/operators/unary.ts","webpack://sbrython/./src/types/index.js","webpack://sbrython/./src/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/types/utils/methods.ts","webpack://sbrython/./src/types/int.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/bry2sbry/functions/Call.ts","webpack://sbrython/./src/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/bry2sbry/import/Import.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/types/NotImplementedType.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/types/float.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["import { RET_INT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns } from \"@SBrython/ast2js\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL](node, other);\n        })\n    }\n);","import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_NoneType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`throw new _b_.PythonError(${firstChild(node)})`;\n}","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import dop_reset, {ASTNODE_RESULT_TYPE, ASTNODE_SIZE, ASTNODE_TYPE_ID, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"./types/utils/types\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n\n    console.warn({\n        type     : type(id),\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname];\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : TYPEID_type_int_,\n        str  : TYPEID_type_str_,\n        float: TYPEID_type_float_,\n        len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)) //TODO...\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w( firstChild(node) );\n}","import { w_sns, w_str } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"${\", firstChild(node), \"}\")\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"continue\");\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${VALUES[node]}`);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { parentOPPrio, setParentOPPrio, type, VALUES } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { write_unary_jsop } from \"./unary\";\nimport { AST2JS } from \"@SBrython/core_modules/lists\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"@SBrython/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    let result = r`${first}`;\n    for(let i = 1; i < nbChildren; ++i)\n        result = r`${result} && ${first + i}`; //TODO: better...\n\n    if( p_prio < prio )\n        result = r`(${result})`;\n\n    return result;\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    wt`for(var ${idx} of ${list}){${body}${NL}}`;\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { addType } from \"@SBrython/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_b_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/types\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nimport Types from \"@SBrython/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value];\n\n    method[WRITE_CALL]!(node, left);\n}","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n}","import { RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport Types from \"./list\";\nimport { w_node } from \"@SBrython/ast2js\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__[WRITE_CALL](node, other);\n        })\n    }\n);","import { OPERATORS__EQ, OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = OPERATORS__EQ;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = OPERATORS__EQ_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { Context } from \"@SBrython/py2ast\";\n\nexport const RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Fct<T extends any[] = unknown[]> = {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = {\n    __name__?: string,\n    __call__: Fct<T> & {\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\nimport { multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    wr( multi_jsop(node, VALUES[node]) );\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return wt`_b_.assert(${firstChild(node)})`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, type, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    wt`function ${name}(${coffset}){${coffset+1}${NL}}`;\n}","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}","import { r, w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === FUNCTIONS_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    wt`${coffset}[${coffset+1}]`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w(\"break\");\n}","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"/* not implemented */\");\n}","import { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\ntype Printable = {toString(): string};\n\nlet indent = \"    \";\nlet cur_indent_level = 0;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport const NL = {\n    toString: function() {\n\n        if( __DEBUG__ ) {\n            ++CURSOR[CODE_LINE];\n            CURSOR[CODE_COL] = jscode.length + 1;\n\n            return \"\\n\" + indents![cur_indent_level];\n        } else {\n            return \"\\n\";\n        }\n    }\n}\nexport const BB = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents![++cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\nexport const BE = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents![--cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\n\n// =======================================================================\n\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}\n\n// =======================================================================\n\n// transforms into a template string\nexport function r(...args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    return args;\n}\n\n// write a template string\nexport function wr(args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    if( typeof args === \"string\")\n        return w(args);\n    return wt(...args);\n}\n\n\n// write with template string wt``\nexport function wt(str: TemplateStringsArray, ...args: (Printable|number)[]) {\n    \n    for(let i = 0; i < args.length; ++i) {\n        jscode += str[i];\n        w(args[i]);\n    }\n\n    jscode += str[args.length];\n}\n\n// generic write ?\nexport function w(...args: (Printable|number)[]) {\n\n    for(let i = 0; i < args.length; ++i) {\n\n        let arg = args[i];\n\n        if( Array.isArray(arg) ) { // likely a r``\n            wr(arg as Parameters<typeof wr>[0]);\n            continue;\n        }\n\n        if( typeof arg !== \"number\" ) {\n\n            if( arg === undefined )\n                arg = \"undefined\";\n            if( arg === null )\n                arg = \"null\";\n\n            jscode += arg.toString();\n            continue;\n        }\n\n        const offset = 4*arg;\n        if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n        AST2JS[type(arg)!](arg);\n        if( __DEBUG__ ) set_js_cursor(offset + CODE_END)\n    }\n}\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { LITERALS_BOOL, LITERALS_FLOAT, LITERALS_INT, LITERALS_NONE, LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, LITERALS_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, LITERALS_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, LITERALS_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, LITERALS_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, LITERALS_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { Context, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { default_call } from \"@SBrython/core_modules/functions/call/ast2js\";\nimport { convert_args } from \"./Args\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport Body from \"@SBrython/bry2sbry/Body\";\n\nimport Types from \"@SBrython/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\n\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { LITERALS_INT, TO_BIGINT, TO_NUMBER } from \"@SBrython/core_modules/lists\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, TO_NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, TO_BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { RET_FLOAT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { Int2Number } from \"@SBrython/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { set_js_cursor, w } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_str } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    w(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w(\"`\");\n}","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_sns } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`while(${coffset}){${coffset+1}${NL}}}`;\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { wt } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`'${VALUES[node]}'`;\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        wt`${coffset}: ${coffset+1}`;\n\n    for(let i = 2; i < nbChildren; i+=2)\n        wt`, ${i+coffset}: ${i+1+coffset}`;\n\n    w('}');\n}","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport Types from \"@SBrython/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","export default class Py_object {\n\n}","import { w_node } from \"@SBrython/ast2js\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1)\n        return wt`{${coffset}${NL}}`;\n\n    wt`if(${coffset+1}){${coffset}${NL}}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w(value[0])\n\n    if( value[1] !== undefined)\n        w(\": \", value[1]);\n}","export default [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`${firstChild(node)}.${VALUES[node]}`;\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n    \n    w(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_FOR, CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, CONTROLFLOWS_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    wt`if(${coffset++}){${coffset++}${NL}}`;\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        wt`else if(${coffset++}){${coffset++}${NL}}`;\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        wt`else {${coffset}${NL}}`;\n}","import { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n\n    if( Number.isNaN( Number(value) ) ) {\n        console.warn(value);\n        throw new Error(\"??\");\n    }\n\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"null\");\n}","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let beg : string|number|any  = \"0n\";\n    let incr: string|number|any  = \"1n\";\n\n    let end = Number2Int(body+1);\n\n    if( nbChildren > 2) {\n        beg = end;\n        end = Number2Int(body+1);\n    }\n\n    if( nbChildren === 4)\n        incr = Number2Int(body+2);\n\n    //TODO...\n    return wt`for(var ${idx} = ${beg}; ${idx} < ${end}; ${idx} += ${incr}){${body}${NL}}`;\n}","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { BB, BE, NL, w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    wt`try {${coffset}${NL}}`;\n    wt`catch(_raw_err_){${BB}${NL}`;\n\n        w(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i)\n            w(NL, \"else \", i + coffset );\n\n        // not a catch all...\n        if( nbChild(coffset + nbChildren-1) !== 1)\n            w(NL, \"else { throw _raw_err_ }\");\n\n    w(BE, NL);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`(${coffset} ? ${coffset+1} : ${coffset+2})`;\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/ast2js\";\nimport { write_id_jsop } from \"@SBrython/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/structs/Converters\";\nimport { resultType } from \"@SBrython/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_b_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_b_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { BB, BE, NL, w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(BB);\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i)\n        w(NL, i);\n\n    w(BE);\n}","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport Types from \"@SBrython/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import      AST2JS_0 from \"./symbol/ast2js\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\nimport      AST2JS_41 from \"./to_bigint/ast2js\";\nimport      AST2JS_42 from \"./to_number/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nexport const TO_BIGINT = 41;\nexport const TO_NUMBER = 42;\n\nimport type {T_AST2JS} from './'\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n\tAST2JS_41,\n\tAST2JS_42,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let base: string|number = \"_r_.object\";\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    if( nbChildren === 2)\n        base = body+1;\n\n    wt`class ${VALUES[node]} extends ${base} {${body}${NL}}`;\n}","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { TYPEID_int } from \"@SBrython/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${value}`);\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/ast2js\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_b_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_b_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_b_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport Types from \"@SBrython/types/list\";\nimport { WRITE_CALL } from \"@SBrython/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]];\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        if( i !== 0)\n            w(\", \");\n        w(i + coffset);\n    }\n\n    w('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w(\"__SBRYTHON__.getModules()\");\n    else\n        wt`__SBRYTHON__.getModule(\"${value}\")`;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["Object","assign","TYPE_type_int_","__name__","__call__","method_wrapper","RET_INT","node","other","firstChild","other_type","resultType","TYPEID_int","w_node","TYPEID_jsint","Number2Int","TYPEID_float","w_sns","TYPEID_str","otype","Types","undefined","__int__","Error","WRITE_CALL","Py_Exception","Py_object","TYPE_str","__class__","TYPE_type_str_","__len__","w_str","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","t","convert","dst","context","setType","KEYWORDS_ASSERT","coffset","addChild","convert_node","test","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","result_type","TYPEID_NoneType","value","RETURN","setResultType","meta","parent_node_context","RETURN_TYPE","ast2js","wt","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","name","getASTFor","_r_","_b_","nops","nb_ops","length","Array","i","bname2pyname","constructor","$name","VALUES","OPERATORS_COMPARE","TYPEID_bool","nbChildren","comparators","left","set_py_code","id","brython_node","offset","PY_CODE","CODE_BEG_LINE","lineno","CODE_BEG_COL","col_offset","CODE_END_LINE","end_lineno","CODE_END_COL","end_col_offset","set_py_code_from_list","beg","end","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","CODE_LINE","CODE_COL","py2ast","code","parser","$B","Parser","nodes","convert_ast","_PyPegen","run_parser","dop_reset","createASTNode","Body","body","Context","ASTNODES","swapASTNodes","ao","ASTNODE_SIZE","bo","ap","bp","BRY2SBRY","console","warn","log","type","parent_context","RootContext","local_symbols","type_fct","int","TYPEID_type_int_","str","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","call","w","OPERATORS_UNARY","operand","TYPEID_NotImplementedType","method","Py_JSException","pyop","other_value","write_unary_jsop","prio","JSOperatorsPrio","p_prio","parentOPPrio","setParentOPPrio","l","r","floordiv_float","Math","floor","floordiv_int","mod_float","mod","mod_int","nbChild","OPERATORS_ATTR","attr","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","set_js_cursor","CODE_BEG","type_id","FUNCTIONS_ARGS_VARG","FUNCTIONS_ARGS_KWARG","defval","CODE_END","BinaryOperators","AssignOperators","JSOperators","JSOperatorsPriority","priority","reversed_operator","multi_jsop","first","idx","list","NL","typedesc","obj","create","STRUCTS_TUPLE","elts","bases","CLASS_CLASSDEF","TYPE_jsint","RET_IJ2INT","CONVERT_2INT","Int2Number","RET_IJBF2FLOAT","RET_JSINT2JSINT","genUnaryOps","RET_JSINT","RET_IJBF2BOOL","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","BODY","cn","RET_STR","__str__","targets","target","OPERATORS__EQ","OPERATORS__EQ_INIT","rtype","annotation","Symbol","rchild","STRUCTS_LIST","wr","CONTROLFLOWS_WHILE","KEYWORDS_CONTINUE","default_call","nb_call_args","call_args_offset","nb_pos_call","FUNCTIONS_CALL_KEYWORD","max_pos","vararg_array","has_kw","cutoff","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","args_names","args_pos","arg","key","float2str","f","toExponential","sign_idx","slice","toString","includes","_","stackline2astnode","stackline","sb","parse_stack","stack","isV8","split","filter","e","filter_stack","map","_line","_col","fct_name","line","col","indexOf","SYMBOL","debug_print_exception","err","_raw_err_","stack2astnodes","exception_str","join","get_py_exception","__SBRYTHON__","_err_","PythonError","python_exception","JSException","TYPE_bool","CONTROLFLOWS_TRYBLOCK_CATCH","KEYWORDS_BREAK","OPERATORS__BRACKETS","TYPE_type_float_","TYPE_int","TYPE_float","TYPE_NotImplementedType","TYPE_NoneType","LITERALS_F_STRING","values","OPERATORS_BINARY","right","ltype","CURSOR","ARRAY_TYPE","JS_CODE","indent","cur_indent_level","indents","BB","BE","AST2JS","args","isArray","_context","vtype","qname","LITERALS_BOOL","LITERALS_STR","__qualname__","LITERALS_FLOAT","LITERALS_NONE","LITERALS_INT","generate","stype","convert_args","returns","fct_return_type","last_type","fake_node","push","SType_fct","posonlyargs","STypeID","FUNCTIONS_DEF","find_and_write_call","jsop","a_value","TO_NUMBER","setFirstChild","TO_BIGINT","RET_FLOAT","LITERALS_F_STRING_FORMATTEDVALUE","STRUCTS_DICT","keys","RET_INT2INT","super","bname2jsop","OPERATORS_BOOLEAN","RUNTIME_0","RUNTIME_1","RUNTIME_2","handlers","CONTROLFLOWS_TRYBLOCK","ExceptHandler","Name","require","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","KEYWORDS_RAISE","exc","write_id_jsop","assert","cond","iter","func","CONTROLFLOWS_FOR","CONTROLFLOWS_FOR_RANGE","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","CONTROLFLOWS_TERNARY","Float64Array","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","isNaN","KEYWORDS_IMPORT_ALIAS","asname","incr","OPERATORS_ASSIGNOP","rop","RET_TYPE","write","fct_type","fct","ret_type","FUNCTIONS_CALL","keywords","KEYWORDS_IMPORT","names","module","PASS","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","AST2JS_41","AST2JS_42","RUNTIME","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","base","_node","_op","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"sourceRoot":""}