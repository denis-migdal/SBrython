{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"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","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/ast2js/ast2js.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["export default [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n]\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\"{\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = Types[fct_type];\n    const ret_type = (fct.__call__ as Fct)[AST_KEY_RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __name__ : \"str\",\n        __class__: TYPE_type_str_,\n        __len__: method_wrapper(RET_INT, (node) => {\n            w_node( firstChild(node) + 1 );\n            w_str(\".length\");\n        })\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __name__ : \"type\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./list\";\nimport { w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__[WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { Context } from \"@SBrython/sbry/py2ast\";\n\nexport const AST_KEY_RETURN_TYPE = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Fct<T extends any[] = unknown[]> = {\n    [AST_KEY_RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = {\n    __name__?: string,\n    __call__: Fct<T> & {\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nconst FAKE_AST_KEY_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[AST_KEY_RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[AST_KEY_RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_AST_KEY_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            [AST_KEY_RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[AST_KEY_RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, AST_FCT_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __name__ : \"bool\",\n        //__class__: TYPE_type_float_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_OP_ASSIGN, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = AST_OP_ASSIGN;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = AST_OP_ASSIGN_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport { RET_INT, AST_KEY_RETURN_TYPE_FCT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\nimport { method_wrapper } from \"./types/utils/methods\";\nimport { addType } from \"./types/utils/addType\";\nimport { TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { WRITE_CALL } from \"./types/utils/types\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n\n    console.warn({\n        type     : type(id),\n        ret_type : Types[resultType(id)].__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: AST_KEY_RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname];\n            return method[WRITE_CALL](call);\n        })\n    }\n}\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : TYPEID_type_int_,\n        str  : TYPEID_type_str_,\n        float: TYPEID_type_float_,\n        len  : addType(\"len\", genUnaryOpFct(\"len\", RET_INT)) //TODO...\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __name__ : \"type\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__[WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/py2ast\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[AST_KEY_RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport type AST_KEY_RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __name__ : \"int\",\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            return write_id_jsop(node, self);\n        })\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type_int_          = 7;\nexport const TYPEID_type_float_        = 8;\nexport const TYPEID_type_str_          = 9;","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(name: string, typedesc: any) { //TODO...\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    obj.__name__ = name;\n\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value];\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parent_node_context!)] as Callable).__call__;\n    if( meta[AST_KEY_RETURN_TYPE] === undefined )\n        meta[AST_KEY_RETURN_TYPE] = () => result_type;\n}","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __name__ : \"float\",\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\nexport const TYPE_types\t= Object.create(null);\nexport const TYPE_methods\t= Object.create(null);\nexport const TYPE_addType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i];\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[AST_KEY_RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import AST2JS, { id2name } from \"@SBrython/sbry/ast2js/list\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/sbry/dop\";\nimport { AST } from \"@SBrython/sbry/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// =======================================================================\n\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}\n\n// =======================================================================\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { Context, convert_node, swapASTNodes } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[AST_KEY_RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__name__} ${op} ${Types[ltype].__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = addType(node.name, {});\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]];\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, AST_KEY_RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[AST_KEY_RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[AST_KEY_RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            write_binary_jsop(node, left, '===', right);\n            continue;\n        }\n        if( op === 'is not' ) {\n            write_binary_jsop(node, left, '!==', right);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/py2ast\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","export default [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n]","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { AST_KEY_RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: AST_KEY_RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJB2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float, TYPEID_int } from \".\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __name__ : \"jsint\",\n        __class__: TYPE_type_int_,\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/ast2js\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["require","_id2name","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","w_node","w_sns","convert","dst","context","name","func","id","fct_type","local_symbols","undefined","console","warn","Error","fct","Types","ret_type","__call__","AST_KEY_RETURN_TYPE","setType","AST_FCT_CALL","setResultType","coffset","addChild","args","length","keywords","convert_node","i","keyword","set_py_code","rchild","resultType","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","getASTFor","_r_","_sb_","Object","assign","TYPE_str","__name__","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","RET_FLOAT","other","other_type","Int2Number","TYPEID_float","other_value","type","AST_LIT_STR","otype","__int__","WRITE_CALL","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","offset","set_js_cursor","CODE_BEG","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","CODE_END","Symbol","generate","rtype","stype","call","Context","parent_node_context","convert_args","annotation","returns","fct_return_type","last_type","constructor","$name","fake_node","lineno","end_lineno","col_offset","end_col_offset","push","Body","set_py_code_from_list","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","bname2pyname","AST_OP_ASSIGN_AUG","target","value","Py_object","TYPE_bool","RET_IJBF2BOOL","targets","AST_OP_ASSIGN","AST_OP_ASSIGN_INIT","result_type","brython_node","PY_CODE","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","beg","end","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","CODE_LINE","CODE_COL","py2ast","code","parser","$B","Parser","nodes","convert_ast","_PyPegen","run_parser","dop_reset","createASTNode","ASTNODES","swapASTNodes","ao","ASTNODE_SIZE","bo","ap","bp","BRY2SBRY","log","parent_context","RootContext","type_fct","int","TYPEID_type_int_","str","TYPEID_type_str_","float","TYPEID_type_float_","len","addType","return_type","left","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","AST_SYMBOL","AST_OP_ATTR","attr","nb_call_args","call_args_offset","nb_pos_call","AST_FCT_CALL_KEYWORD","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","arg","idx","key","AST_KEY_IMPORT","names","module","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_IJBF2FLOAT","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","TYPE_int","CONVERT_2INT","genUnaryOps","write_unary_jsop","PythonError","python_exception","super","_raw_err_","TYPEID_NoneType","float2str","f","toExponential","sign_idx","slice","toString","includes","typedesc","obj","bname2jsop","TYPE_float","_node","_op","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","ARRAY_TYPE","Float64Array","JS_CODE","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","cn","elts","test","CURSOR","indent","cur_indent_level","indents","AST2JS","asname","right","ltype","reversed_operator","bases","_context","orelse","debug_print_exception","err","sb","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","line","col","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","write_multi_jsop","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","cur","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"sourceRoot":""}