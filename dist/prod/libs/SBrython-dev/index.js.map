{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"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B,GAChBC,EAAgB,GAChB2B,EAAgB,GAChBF,EAAgB,GAChBQ,EAAgB,GAEhBxM,EAAgB,GAChBE,EAAgB,GAMhBmK,EAAgB,GAKhBoC,EAAkB,CAC9B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,GAKY1Q,EAAkB,CAC9B,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GAGYX,EAAiB,CAC7B,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGYK,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYI,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGYM,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,MACA,MACA,KACA,KACA,IACA,GAEA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGYuQ,EAAiB,CAC7B,IAAKzN,EACL,KAAMA,EAAU,GAChB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAKF,EACL,KAAMA,EAAW,GACjB,KAAMG,EACN,MAAOA,EAAc,GACrB,KAAMC,EACN,MAAOA,EAAc,GACrB,IAAKzD,EACL,KAAMA,EAAW,GACjB,IAAKC,EACL,KAAMA,EAAW,GACjB,IAAK2D,EACL,KAAMA,EAAW,GACjB,IAAKG,EACL,KAAMA,EAA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D,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,GAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EAEZ,MC7DA,IACC,OAAUA,EAAAA,MAAAA,EACV,YAAeA,EAAAA,MAAAA,EACf,UAAaA,EAAAA,MAAAA,GCHd,OACIA,EAAAA,MAAAA,MACAA,EAAAA,KAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,KAAAA,KACAA,EAAAA,MAAAA,GCEJ8V,WAAWC,IAAQC,OAEnBF,WAAWG,MAAQC,OAEnBJ,WAAWK,KAAQC,QAEnBN,WAAWhQ,IAAQuQ,OAEZ,MAAMC,GAET,GAAuC,CAAC,EACxC,GAAiD,CAC7CC,QAAST,YAObU,WAAAA,CAAYpR,EAAgBC,GACxB,GAAGA,EAAIC,YAAY1F,MAAK,EACpB,MAAM,IAAI1D,MAAM,OAAOmJ,EAAIC,gCAM/B,OAHA1F,MAAK,EAAgByF,EAAIC,UAAYD,EAG9B,IAAIoR,SAAS,SAAU,GAAGrR,0BACrC,CAEAsR,SAAAA,CAAUtR,EAAgBC,GACtBzF,MAAK,EAAUyF,EAAIC,UAAY1F,KAAK4W,YAAYpR,EAAQC,EAAzBzF,CAA8BA,KACjE,CAEA+W,UAAAA,GACI,OAAO/W,MAAK,CAChB,CACAgX,SAAAA,CAAUzc,GACN,OAAOyF,MAAK,EAAUzF,EAC1B,CAEA0O,SAAAA,CAAUvD,GACN,OAAO1F,MAAK,EAAgB0F,EAChC,CAEAuR,KAAAA,IAAS7Q,GACL5J,QAAQiN,OAAOrD,EACnB,CAEA,OAAI0D,GACA,OAAOA,EACX,CACA,QAAID,GACA,OAAOA,EACX,E","sources":["webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/types/list.js","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/list.js","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/webpack/runtime/make namespace object","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/utils/print/printNode.ts","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts"],"sourcesContent":["import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);\n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_None               = 1;\nexport const TYPEID_NoneType           = 2;\nexport const TYPEID_NotImplemented     = 3;\nexport const TYPEID_NotImplementedType = 4;\nexport const TYPEID_int                = 5;\nexport const TYPEID_jsint              = 6;\nexport const TYPEID_float              = 7;\nexport const TYPEID_bool               = 8;\nexport const TYPEID_str                = 9;\nexport const TYPEID_type               =10;\nexport const TYPEID_type_int_          =11;\nexport const TYPEID_type_jsint_        =12;\nexport const TYPEID_type_float_        =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_type_bool_         =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\nrequire(\"./type\");\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"unknown\",\n\t\"None\",\n\t\"NoneType\",\n\t\"NotImplemented\",\n\t\"NotImplementedType\",\n\t\"int\",\n\t\"jsint\",\n\t\"float\",\n\t\"bool\",\n\t\"str\",\n\t\"type\",\n\t\"type_int_\",\n\t\"type_jsint_\",\n\t\"type_float_\",\n\t\"type_str_\",\n\t\"type_bool_\",\n];\nexport const id2name = _id2name;\n","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__DEBUG__) set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS, OP_UNR_PLUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","// must NOT depends on list.\nimport AST2JS from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, NODE_ID, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n        jscode += args[i+1] as string;\n    }\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","export default class Py_object {\n\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"/* not implemented */\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( cur === 0) {\n        w_str(\"_r_.object\");\n    } else if( nextSibling(cur) === 0) {\n        w_node(cur);\n    } else {\n        w_str(\"_sb_.mix(\");\n        w_node(cur);\n        cur = nextSibling(cur);\n        do {\n            w_str(\", \");\n            w_node(cur);\n            cur = nextSibling(cur);\n        } while(cur !== 0);\n        \n        w_str(\")\");\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __DEBUG__ ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __DEBUG__ ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__DEBUG__)\n        w_str(`/*${VALUES[node]} */`);\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        w_NL(); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__DEBUG__ && first !== 0 && node !== 0)\n        w_NL();\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ return this.constructor.${name}(this, ...args) }`);\n}","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n        }\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\")\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"__SB__.print(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { id2name } from \"@SBrython/sbry/types\";\nimport TYPES from \"@SBrython/sbry/types/list\";\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : TYPES[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}","import Types, { TYPEID_None, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG, AST_CLASSDEF, AST_DEF_METH, AST_OP_ATTR } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport builtins, { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\nimport { printNode } from \"@SBrython/utils/print/printNode\";\nimport { w_sns, w_str } from \"./ast2js/utils\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__DEBUG__) ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = offset + code.slice(offset).search(END_OF_SYMBOL);\n\n    curChar = code.charCodeAt(end);\n\n    return code.slice(offset, offset = end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n    \n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => {\n        setType(id, AST_KEY_RETURN);\n        consumeSpaces();\n        if( curChar !== CHAR_NL)\n            setFirstChild(id, readExpr() );\n    },\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        let ret_type = TYPEID_None;\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return ret_type; //TODO...\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        const cur_builtin_idx = builtins.length;\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        offset += 2; // ):\n\n        curChar = code.charCodeAt(offset);\n\n        const body = readBody();\n        setSibling(args, body);\n\n        cur = firstChild(body);\n        while( nextSibling(cur) !== 0) {\n            cur = nextSibling(cur);\n        }\n\n        if( type(cur) === AST_KEY_RETURN && (cur = firstChild(cur)) !== 0)\n            ret_type = resultType(cur);\n\n        builtins.length = cur_builtin_idx;\n    },\n    \"class\": (id) => {\n\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const inherit: NODE_ID[] = []; //TODO...\n\n        if( curChar === CHAR_PARENTHESIS_LEFT) {\n            //TODO read args like call (?)\n            ++offset; // consume (\n            consumeSpaces();\n\n            // @ts-ignore\n            while( curChar !== CHAR_PARENTHESIS_RIGHT ) {\n\n                inherit.push( readToken() );\n\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset; // consume ,\n                    consumeSpaces();\n                }\n            }\n            ++offset; // consume )\n        }\n\n        ++offset; // \":\"\n        \n        const body = readBody();\n\n        let cur = body;\n        for(let i = 0; i < inherit.length; ++i) {\n            setSibling(cur, inherit[i]);\n            cur = inherit[i];\n        }\n\n        setType(id, AST_CLASSDEF);\n        setFirstChild(id, body); // too lazy to duplicate...\n\n        const STypeID = Types.length as TYPE_ID;\n        const SInstID = Types.length+1 as TYPE_ID;\n\n        const SType_klass: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => SInstID,\n                [WRITE_CALL]: (id: NODE_ID) => {\n                    w_str(\"new \");\n                    default_call(id);\n                },\n            }\n        }\n\n        const SType_instance = {};\n        for(let i = 0; i < inherit.length; ++i)\n            Object.assign(SType_instance, TYPES[resultType(inherit[i]) + 1]);\n\n        // @ts-ignore\n        SType_instance.__class__ = SType_klass;\n    \n        Types[STypeID] = SType_klass;\n        Types[SInstID] = SType_instance;\n\n\n        //TODO: refactor/fix...\n\n        cur = firstChild(body);\n        let node_type: NODE_TYPE;\n        do {\n\n            node_type = type(cur);\n\n            // not ideal : needs it BEFORE...\n            if( node_type === AST_DEF_FCT) {\n\n                // @ts-ignore\n                SType_instance[VALUES[cur]] = resultType(cur);\n\n                setType(cur, AST_DEF_METH);\n            }\n\n            //TODO: fix...\n            if( node_type === AST_OP_ASSIGN_INIT || node_type === AST_OP_ASSIGN) {\n\n                // @ts-ignore\n                SType_instance[VALUES[nextSibling(firstChild(cur))]] = resultType(cur);\n\n                setType(cur, AST_OP_ASSIGN);\n            }\n\n            cur = nextSibling(cur);\n\n        } while( cur !== 0);\n\n        addSymbol(name, STypeID);\n\n        //TODO: inherit...\n\n        //TODO: SType...\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__DEBUG__) CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__DEBUG__) ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__DEBUG__) CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __DEBUG__ ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr();\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __DEBUG__ ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __DEBUG__ )\n            set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __DEBUG__ ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar !== end);\n\n        ++offset;\n\n        VALUES[node] = code.slice(beg, offset);\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __DEBUG__ ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar === CHAR_DOT) { // get attr...\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_OP_ATTR);\n                setFirstChild(node, cur);\n\n                ++offset;\n\n                const name = VALUES[node] = nextSymbol(); //TODO: continue...\n\n                // @ts-ignore\n                setResultType(node, TYPES[resultType(cur)][name]);\n            }\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n\n                if( __DEBUG__ && fctType === undefined) {\n                    console.warn( VALUES[node], resultType(cur), Types[resultType(cur)]);\n                    throw \"nok\";\n                }\n\n                //TODO: return type...\n\n                if( __DEBUG__ ) set_py_code_beg(node);\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __DEBUG__ ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr() {\n\n    let value = readToken();\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\nlet nbTypes: number;\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    // h4ck\n    // @ts-ignore\n    if( nbTypes === undefined)\n        nbTypes = TYPES.length;\n\n    TYPES.length = nbTypes;\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __DEBUG__ ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __DEBUG__ ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __DEBUG__ && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __DEBUG__ ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __DEBUG__ ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __DEBUG__ && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __DEBUG__ && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = ! __DEBUG__ ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n// @ts-ignore\nglobalThis.int   = BigInt;\n// @ts-ignore\nglobalThis.float = Number;\n// @ts-ignore\nglobalThis.bool  = Boolean;\n// @ts-ignore\nglobalThis.str   = String;\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n"],"names":["ast2js","node","kname","Types","VALUES","__name__","w_str","rchild","firstChild","cur","nextSibling","name","w_node","resultType","TYPEID_jsint","TYPEID_int","Number2Int","w_NL","BB","BE","lchild","type","AST_OP_ASSIGN_INIT","w_sns","writeOp","value","count","op","left","right","jop","ltype","rtype","l","r","w_JSBinOp","TYPEID_NotImplementedType","method","undefined","RETURN_TYPE","reversed_operator","WRITE_CALL","Error","find_and_write_call","console","warn","assert","cond","__call__","addJSBinOps","target","ops","return_type","convert_other","NOCONVERT","convert_self","w_call","ADD_EQ","i","length","add_method","opid2opmethod","call","_","a","b","opid2ropmethod","iop","OP_BIN_ADD","OP_BIN_SUB","opid2iopmethod","prio","jsop_priorities","p_prio","parentOPPrio","setParentOPPrio","opid2jsop","coffset","TYPEID_unknown","TYPEID_None","TYPEID_NoneType","TYPEID_NotImplemented","TYPEID_float","TYPEID_bool","TYPEID_str","TYPEID_type","TYPEID_type_int_","TYPEID_type_jsint_","TYPEID_type_float_","TYPEID_type_str_","TYPEID_type_bool_","TYPES","Array","Object","create","PythonError","python_exception","constructor","super","_raw_err_","this","abs","n","LIST","require","id2name","fist","set_js_cursor","CODE_BEG","CODE_END","AST_LIT_FSTRING_FVAL","klass","initBuiltinClass","RET_INT","other","other_type","otype","__int__","RET_STR","w_subs","OP_BIN_POW","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","CONVERT_2INT","OP_BIN_MUL","RET_INT2INT","Int2Number","OP_BIN_DIV","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","OP_BIN_FDIV","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","KW","kw","keywords","getKW","last_id","AST_SYMBOL","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_OP_NOT","AST_OP_ATTR","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_DEF_FCT","AST_DEF_METH","AST_DEF_ARGS","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","AST_CALL","AST_CALL_ARG_KW","AST_CTRL_WHILE","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CTRL_FOR","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","CURSOR","ARRAY_TYPE","jscode","ast","filename","CODE_LINE","CODE_COL","idx","JS_CODE","indent","cur_indent_level","indents","str","AST2JS","args","float2str","f","toExponential","sign_idx","slice","toString","includes","Py_object","Py_JSException","Py_Exception","__class__","__str__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","debug_print_exception","err","sb","stack","isV8","split","e","filter_stack","map","_line","_col","fct_name","line","col","pos","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","Symbol","TYPEID","JS_NAME","body","list","Float64Array","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","CODE_BUFFER_SIZE","PY_CODE_BUFFER","ArrayBuffer","maxByteLength","JS_CODE_BUFFER","PY_CODE","NEXT_AST_NODE_ID","addFirstChild","ASTNODES","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","addSibling","ASTNODE_NEXT_SIBLING","createASTNode","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","setFirstChild","setSibling","sibling","setType","setResultType","write_arg","defval","write_posarg","start","write_multi_jsop","OP_BOOL_NOT","OP_CMP_EQ","OP_CMP_NEQ","to_write","first","a_value","RET_FLOAT","other_value","_op","TypeKlass","instance","jsname","Klass","__qualname__","RET_TYPE","write","create_function","id","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","OP_CMP_LT","OP_CMP_LE","OP_CMP_GT","OP_CMP_GE","w_JSCmpOp","OP_EQ2IS","end","RET_JSINT","RET_JSINT2JSINT","OP_ASSIGN","pyop_priorities","opsymbol2opid","default_call","RET_None","o","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","defineProperty","enumerable","get","obj","prop","hasOwnProperty","toStringTag","builtins","genOpFct","nbBuiltins","addSymbol","opname","printNode","typeID","ret_typeID","ret_type","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","code","curChar","CURRENT_PARAM_TYPE","POSONLY_END","offset","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","readExpr","KNOWN_SYMBOLS","readToken","readBody","SType_fct","STypeID","cur_builtin_idx","inherit","push","SInstID","SType_klass","SType_instance","assign","node_type","nbTypes","CURRENT_INDENTATION","consumeIndentedLines","beg","readLine","set_py_code_beg","set_py_code_end","readComment","createCallUopNode","nextChar","result_type","astnode_type","token","symbol","getSymbol","fctType","next","isEndOfExpr","readOp","op_str","createCallOpNode","rop","rop_prio","lop","lop_prio","py2ast","_code","copy_py_code_end","opnode","dst_off","src_beg","src_end","pyop_name","atype","src","dst","src_off","copy_py_code_beg","off","globalThis","int","BigInt","float","Number","bool","Boolean","String","SBrython","browser","buildModule","Function","runJSCode","getModules","getModule","print"],"sourceRoot":""}