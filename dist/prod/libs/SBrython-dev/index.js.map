{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"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","sources":["webpack://sbrython/./src/core_runtime/Exceptions/Exception.ts","webpack://sbrython/./src/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/core_modules/keywords/raise/ast2js.ts","webpack://sbrython/./src/runtime.ts","webpack://sbrython/./src/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/structs/STypes.ts","webpack://sbrython/./src/py2ast.ts","webpack://sbrython/./src/core_modules/literals/bool/ast2js.ts","webpack://sbrython/./src/core_modules/functions/call/keyword/ast2js.ts","webpack://sbrython/./src/core_modules/return/ast2js.ts","webpack://sbrython/./src/core_modules/literals/f-string/FormattedValue/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/core_modules/keywords/continue/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/ast2js.ts","webpack://sbrython/./src/core_runtime/Exceptions/JSException.ts","webpack://sbrython/./src/core_modules/operators/binary/runtime.ts","webpack://sbrython/./src/core_modules/structs/list/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/core_modules/functions/args/ast2js.ts","webpack://sbrython/./src/structs/BinaryOperators.ts","webpack://sbrython/./src/core_modules/controlflows/for/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/bry2sbry/ClassDef.ts","webpack://sbrython/./src/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/core_modules/operators/unary/ast2js.ts","webpack://sbrython/./src/bry2sbry/Body.ts","webpack://sbrython/./src/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/core_modules/operators/=/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/List.ts","webpack://sbrython/./src/core_modules/operators/boolean/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/core_modules/keywords/assert/ast2js.ts","webpack://sbrython/./src/core_modules/literals/bool/stype.ts","webpack://sbrython/./src/core_modules/symbol/ast2js.ts","webpack://sbrython/./src/core_modules/functions/def/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/core_modules/functions/call/ast2js.ts","webpack://sbrython/./src/core_modules/literals/float/runtime.ts","webpack://sbrython/./src/core_modules/operators/[]/ast2js.ts","webpack://sbrython/./src/core_modules/structs/tuple/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/break/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/runtime.ts","webpack://sbrython/./src/core_modules/pass/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/ast2js.ts","webpack://sbrython/./src/core_modules/literals/int/stype_jsint.ts","webpack://sbrython/./src/bry2sbry/Constant.ts","webpack://sbrython/./src/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/core_modules/literals/int/stype.ts","webpack://sbrython/./src/core_modules/operators/compare/ast2js.ts","webpack://sbrython/./src/structs/Converters.ts","webpack://sbrython/./src/core_modules/literals/float/stype.ts","webpack://sbrython/./src/core_modules/literals/f-string/ast2js.ts","webpack://sbrython/./src/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/core_modules/controlflows/while/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/raise/runtime.ts","webpack://sbrython/./src/core_modules/literals/str/ast2js.ts","webpack://sbrython/./src/core_modules/structs/dict/ast2js.ts","webpack://sbrython/./src/core_modules/operators/AssignOp/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/core_runtime/lists.ts","webpack://sbrython/./src/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/core_modules/literals/str/stype.ts","webpack://sbrython/./src/bry2sbry/list.ts","webpack://sbrython/./src/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/core_runtime/object.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/catch/ast2js.ts","webpack://sbrython/./src/core_modules/literals/None/stype.ts","webpack://sbrython/./src/core_modules/keywords/import/alias/ast2js.ts","webpack://sbrython/./src/core_modules/operators/attr/ast2js.ts","webpack://sbrython/./src/core_modules/keywords/assert/runtime.ts","webpack://sbrython/./src/core_modules/operators/=_init/ast2js.ts","webpack://sbrython/./src/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/bry2sbry/functions/Args.ts","webpack://sbrython/./src/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/core_modules/controlflows/ifblock/ast2js.ts","webpack://sbrython/./src/bry2sbry/Name.ts","webpack://sbrython/./src/dop.ts","webpack://sbrython/./src/core_modules/literals/None/ast2js.ts","webpack://sbrython/./src/bry2sbry/import/alias.ts","webpack://sbrython/./src/core_modules/controlflows/for_range/ast2js.ts","webpack://sbrython/./src/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/core_modules/controlflows/tryblock/ast2js.ts","webpack://sbrython/./src/core_modules/controlflows/ternary/ast2js.ts","webpack://sbrython/./src/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/core_modules/body/ast2js.ts","webpack://sbrython/./src/bry2sbry/functions/Call.ts","webpack://sbrython/./src/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/core_modules/lists.ts","webpack://sbrython/./src/bry2sbry/import/Import.ts","webpack://sbrython/./src/core_modules/class/classdef/ast2js.ts","webpack://sbrython/./src/core_modules/literals/int/ast2js.ts","webpack://sbrython/./src/core_modules/operators/binary/ast2js.ts","webpack://sbrython/./src/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/core_modules/keywords/import/ast2js.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["import Py_object from \"@SBrython/core_runtime/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { KEYWORDS_ASSERT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { RETURN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_NONETYPE, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = STYPE_NONETYPE;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (STypes[resultType(context.parent_node_context!)] as STypeFct).__call__;\n    if( meta.return_type === undefined )\n        meta.return_type = () => result_type;\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`throw new _b_.PythonError(${firstChild(node)})`;\n}","import { AST } from \"@SBrython/py2ast\";\n\nimport {default as _r_} from \"./core_runtime/lists\";\nimport {_b_} from \"./core_modules/lists\";\n\nexport {_b_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRYTHON__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _b_() {\n        return _b_;\n    }\n}\n\n","import { OPERATORS_COMPARE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, OPERATORS_COMPARE);\n    setResultType(dst, STYPE_BOOL);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { STypeObj } from \"./SType\";\n\nexport const STypes  = new Array<STypeObj>();\nconst STypename2id: Record<string, number> = {};\n\nexport function getSTypeFromName<T extends STypeObj>(name: string): T {\n    return STypes[getSTypeID(name)] as T;\n}\n\nexport function getSTypeID(name: string): number {\n\n    let id = STypename2id[name];\n    if( id === undefined ) {\n        id = STypename2id[name] = STypes.length;\n        STypes[id] = {__name__: name};\n    }\n\n    return id;\n}\n\nexport function addSType(name: string, type: Omit<STypeObj, '__name__'>) {\n\n    const id = getSTypeID(name);\n    Object.assign( STypes[id], type );\n    return id;\n}\n\nexport const STYPE_NONETYPE           = getSTypeID(\"NoneType\"); // 0...\nexport const STYPE_INT                = getSTypeID(\"int\");\nexport const STYPE_JSINT              = getSTypeID(\"jsint\");\nexport const STYPE_BOOL               = getSTypeID(\"bool\");\nexport const STYPE_FLOAT              = getSTypeID(\"float\");\nexport const STYPE_STR                = getSTypeID(\"str\");\nexport const STYPE_NOT_IMPLEMENTED    = getSTypeID(\"NotImplementedType\");","import { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport dop_reset, {ASTNODE_RESULT_TYPE, ASTNODE_SIZE, ASTNODE_TYPE_ID, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, firstChild, PY_CODE, resultType, VALUES} from \"@SBrython/dop\";\nimport { RET_INT, RETURN_TYPE_FCT } from \"@SBrython/structs/ReturnTypeFcts\";\n\nimport BRY2SBRY from \"./bry2sbry/list\";\nimport Body from \"./bry2sbry/Body\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        type     : ASTNODES[ASTNODE_SIZE*id+ASTNODE_TYPE_ID],\n        ret_type : STypes[ASTNODES[ASTNODE_SIZE*id+ASTNODE_RESULT_TYPE]],\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", parent_context: Context = RootContext) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...parent_context.local_symbols};\n    }\n\n    local_symbols: Record<string, number>;\n    parent_node_context?: number; \n\n    type; //TODO: remove\n}\n\nconst type_fct = {} /* fct class => type class */\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __class__: type_fct,\n        __name__ : name,\n        __call__ : {\n            //TODO: I need a self...\n            return_type    : return_type,\n            // not really :?\n            substitute_call: (call: number) => {\n                const left   = firstChild(call)+1;\n                const method = STypes[resultType(left)]![opname] as STypeFctSubs;\n                return method.substitute_call!(call);\n            }\n        }\n    }\n}\n\n//TODO: not a type !!!\nconst len = addSType(\"len\", genUnaryOpFct(\"len\", RET_INT));\n\n// builtin symbols.\n// @ts-ignore\nconst RootContext: Context = {\n    type: \"?\" as const,\n    local_symbols: {\n        int  : getSTypeID('type[int]'),\n        str  : getSTypeID('type[str]'),\n        float: getSTypeID('type[float]'),\n        len,\n\n        // add functions like len() / pow() / divmod()\n    }\n} satisfies Context;","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w( firstChild(node) );\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w(\"return null\");\n\n    return wt`return ${coffset}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"${\", firstChild(node), \"}\")\n}","import { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_BOOL, STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_UNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') {\n\n        setResultType(dst, STYPE_BOOL);\n        return;\n    }\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type();\n\n    if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED)\n        throw new Error(`${op} ${resultType(coffset)} NOT IMPLEMENTED!`);\n\n    setResultType(dst, type);\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"continue\");\n}","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${VALUES[node]}`);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { OPERATORS_ATTR } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, OPERATORS_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    VALUES[dst] = node.attr;\n}","import { set_js_cursor, w, wr, wt } from \"@SBrython/ast2js\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT } from \"@SBrython/structs/STypes\";\nimport { FUNCTIONS_ARGS_KWARG, FUNCTIONS_ARGS_VARG } from \"@SBrython/bry2sbry/functions/Args\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as STypeFct;\n\n    const meta = SType_fct.__call__;\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w(\", \");\n\n        if( kw_start === i)\n            w(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === FUNCTIONS_ARGS_VARG ) {\n        if( isLast )\n            wt`...${name}`;\n        else\n            wr( binary_jsop(node, name, '=', \"[]\") );\n    } else if( type_id === FUNCTIONS_ARGS_KWARG ) {\n        wr( binary_jsop(node, name, '=', \"{}\") );\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === STYPE_JSINT )\n            defval = Number2Int(defval);\n\n        wr( binary_jsop(node, name, '=', defval) );\n    }else {\n        w(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { r } from \"@SBrython/ast2js\";\nimport { STypeFctSubs } from \"./SType\";\nimport { STYPE_FLOAT, STYPE_INT, STYPE_JSINT} from \"./STypes\";\nimport { LITERALS_INT } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, parentOPPrio, resultType, setParentOPPrio, setResultType, type, VALUES } from \"@SBrython/dop\";\nimport { Converter, NOCONVERT } from \"./Converters\";\nimport { RETURN_TYPE_FCT } from \"./ReturnTypeFcts\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\nexport function Int2Number(a: number, target = STYPE_FLOAT) {\n\n    if( resultType(a) !== STYPE_INT) // already a number\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === STYPE_FLOAT )\n            setResultType(a, STYPE_JSINT);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === STYPE_INT || ltype === STYPE_JSINT)\n            && (rtype === STYPE_INT || rtype === STYPE_JSINT)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === STYPE_INT) {\n        setResultType(a, target);\n        return a;\n    }\n    if( target === STYPE_FLOAT )\n        return r`Number(${a})`;\n\n    // int -> jsint cast is facultative...\n    return a;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === STYPE_INT)\n        return a;\n\n    if( type(a) === LITERALS_INT) {\n        setResultType(a, STYPE_INT); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === STYPE_JSINT) {\n        setResultType(a, STYPE_INT);\n        return a;\n    }\n\n    return r`BigInt(${a})`;\n}\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    let result = r`${first}`;\n    for(let i = 1; i < nbChildren; ++i)\n        result = r`${result} && ${first + i}`; //TODO: better...\n\n    if( p_prio < prio )\n        result = r`(${result})`;\n\n    return result;\n}\n\n// null operation, the node has the same priority as his father.\n// 2*int(1+1) => 2*(1+1)\nexport function id_jsop(node: number, a: number) { // TODO remove arg ?\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    return r`${a}`;\n}\n\nexport function binary_jsop(node: number, a: number|any, op: string, b: number|any) {\n\n    const   prio = JSOperatorsPriority[op];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    if(typeof b === \"number\")\n        setParentOPPrio(b, prio);\n\n    let cmp = r`${a}${op}${b}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\nexport function unary_jsop(node: number, op: string, a: number|any) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPriority[rop];\n    const p_prio = parentOPPrio(node);\n\n    if(typeof a === \"number\")\n        setParentOPPrio(a, prio);\n\n    let cmp = r`${op}${a}`;\n    // if father has more prio, add parenthesis.\n    if( p_prio > prio )\n        cmp = r`(${cmp})`;\n\n    return cmp;\n}\n\n\n\ntype GenUnaryOps_Opts = {\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, a: number) => any\n};\n\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_self = NOCONVERT,\n                                substitute_call\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        substitute_call ??= (node: number, self: number) => {\n            return unary_jsop(node, op, convert_self(self) );\n        };\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call\n        };\n    }\n    \n    return result;\n}\n\ntype GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    substitute_call ?: (node: number, self: number|any, other: number|any) => any\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            substitute_call,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === '//')\n            op = '/';\n\n        let cs  = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_self(self), op, convert_other(other) );\n        }\n\n        let rcs = (node: number, self: number, other: number) => {\n            return binary_jsop(node, convert_other(other), op, convert_self(self) );\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_self(self), convert_other(o) );\n            };\n        \n            // same_order ? fct : \n            rcs = (node: number, self: number, o: number) => {\n                return substitute_call(node, convert_other(o), convert_self(self) );\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n        result[`__r${pyop}__`] = {\n            return_type,\n            substitute_call: rcs,\n        };\n        if( convert_self === NOCONVERT && substitute_call === undefined)\n            result[`__i${pyop}__`] = {\n                return_type,\n                substitute_call: (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return unary_jsop(node, '--', self);\n                    \n                    return binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            };\n    }\n    \n    return result;\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                substitute_call,\n                             }: GenBinaryOps_Opts = {} ) {\n\n    let result: Record<string, STypeFctSubs> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        let cs  = (node: number, self: number, other: number, reversed: boolean) => {\n\n            let cop = op;\n\n            let a = convert_self(self);\n            let b = convert_other(other);\n            if( reversed ) {\n                [a,b] = [b,a];\n                cop = reverse[cop];\n            }\n\n            if( cop[0] === '=' || cop[0] === '!' ) {\n                if( resultType(self) === resultType(other) )\n                    cop = cop + '=';\n            }\n\n            return binary_jsop(node, a, cop, b);\n        }\n\n        if( substitute_call !== undefined ) {\n\n            cs  = (node: number, self: number, o: number, _: boolean) => {\n                return substitute_call(node, convert_self(self), convert_other(o) ); //TODO...\n            };\n        }\n\n        result[`__${pyop}__`] = {\n            return_type,\n            substitute_call: cs,\n        };\n    }\n    \n    return result;\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    wt`for(var ${idx} of ${list}){${body}${NL}}`;\n}","import { STRUCTS_TUPLE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CLASS_CLASSDEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { getSTypeID } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    context.local_symbols[node.name] = getSTypeID(node.name);\n    context = new Context(\"class\", context);\n\n    if( __DEBUG__ && node.bases.length > 1)\n        throw new Error('Not implemented');\n\n    setType(dst , CLASS_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, node.bases[i-1], context);\n\n    VALUES[dst] = node.name;\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_IFBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, CONTROLFLOWS_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { Int2Number, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_JSINT, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not')\n        return wr( unary_jsop(node, '!', Int2Number(left, STYPE_JSINT) ) );\n\n    const method = STypes[resultType(left)!][value] as STypeFctSubs;\n\n    wr( method.substitute_call!(node, left) );\n}","import { BODY } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n}","import { OPERATORS__EQ, OPERATORS__EQ_INIT } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, type } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { getSTypeID, STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    let type = OPERATORS__EQ;\n\n    if(    context.type !== \"class\"\n        && targets[0].constructor.$name === \"Name\"\n        && ! (targets[0].id in context.local_symbols)\n    ) {\n        type = OPERATORS__EQ_INIT;\n    }\n    \n    setType(dst, type);\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = getSTypeID(annotation);\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === STYPE_JSINT)\n            result_type = STYPE_INT; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n\n}\n\n// [\"Assign\", \"AnnAssign\"];","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import { STRUCTS_LIST } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, STRUCTS_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\nimport { multi_jsop } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    wr( multi_jsop(node, VALUES[node]) );\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_WHILE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, CONTROLFLOWS_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    return wt`_b_.assert(${firstChild(node)})`;\n}","import { CMPOPS_LIST, genCmpOps } from \"@SBrython/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType  } from \"@SBrython/structs/STypes\";\n\naddSType('bool', {\n    ...genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    w( VALUES[node] );\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, type, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    wt`function ${name}(${coffset}){${coffset+1}${NL}}`;\n}","import { KEYWORDS_CONTINUE } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_CONTINUE);\n\n}","import { r, wr } from \"@SBrython/ast2js\";\nimport { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/dop\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\n\nfunction print_obj(obj: Record<string, any>) {\n\n    const keys = Object.keys(obj);\n    if(keys.length === 0)\n        return [[]];\n\n    const str = new Array(keys.length+1);\n    str[0] = `{${keys[0]}: `;\n    let i;\n    for(i = 1; i < keys.length; ++i)\n        str[i]  = `, ${keys[i]}: `;\n\n    str[i] = \"}\";\n\n    return [str, ...Object.values(obj)];\n}\n\nfunction join(data: any[], sep=\", \") {\n\n    if(data.length === 0)\n        return [[\"\"]];\n\n    const str = new Array(data.length+1);\n    str[0] = \"\";\n    let i;\n    for(i = 1; i < data.length; ++i)\n        str[i] = sep;\n    str[i] = \"\";\n\n    return [str, ...data];\n}\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as STypeFct).__call__;\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let kw_pos = nbChildren;\n    for(let i = 1; i < nbChildren; ++i)\n        if( type( i + coffset) === FUNCTIONS_CALL_KEYWORD) {\n            kw_pos = i;\n            break;\n        }\n\n    let nb_pos = meta.idx_end_pos;\n    if( nb_pos === Number.POSITIVE_INFINITY)\n        nb_pos = Math.max(meta.idx_vararg, kw_pos-1);\n\n    let pos_size = nb_pos+1;\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY )\n        pos_size = meta.idx_vararg+2;\n    let pos = new Array(pos_size);\n    \n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let has_kw = false;\n\n    if( meta.has_kw && meta.idx_end_pos === Number.POSITIVE_INFINITY ) {\n\n        const cutoff = Math.min(kw_pos, meta.idx_vararg);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const varg_start = meta.idx_vararg+1;\n        const varg_nb = kw_pos - varg_start;\n        if( varg_nb !== 0 ) {\n\n            // template string... [ [..str], ...idx ]\n            // => [ (a), (b), (c), (d) ] ...\n            let str = new Array(varg_nb + 1);\n            let idx = new Array(varg_nb + 1);\n\n            str[0]       = \"[\";\n\n            idx[0]       = str;\n            idx[1]       = coffset + varg_start;\n            for(let i = 1; i < varg_nb; ++i) {\n                str[i]  = \", \";\n                idx[i+1]= coffset + varg_start + i;\n            }\n\n            str[varg_nb] = \"]\"; // prevents sparse array ?\n        }\n    } else {\n\n        const cutoff = Math.min(kw_pos, nb_pos+1);\n\n        for(let i = 1; i < cutoff; ++i)\n            pos[i-1] = i + coffset;\n\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < kw_pos; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        has_kw = cutoff !== kw_pos;\n    }\n\n    let has_kwargs = false;\n\n    const args_pos = meta.args_pos;\n    \n\n    for(let i = kw_pos; i < nbChildren; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) {\n            pos[idx] = arg;\n            continue;\n        }\n\n        has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            has_kwargs = true;\n        }\n    }\n\n    let obj: Record<string, any> = kw;\n    //TODO: only the ones at -1...\n    if( has_kwargs && ! meta.has_kw ){\n        obj = kwargs;\n    } else if( has_kwargs ) {\n        obj[meta.kwargs!] = print_obj(kwargs);\n    }\n\n    if( has_kw )\n        pos[pos.length-1] = print_obj(obj);\n    else {\n        while(pos.length > 0 && pos[pos.length-1] === undefined)\n            --pos.length;\n    }\n\n    return r`${coffset}(${join(pos)})`; // args ?\n}\n\nexport default function ast2js(node: number) {\n    wr( (VALUES[node] as STypeFct).__call__.substitute_call!(node) );\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    wt`${coffset}[${coffset+1}]`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        w(coffset);\n\n    for(let i = 1; i < nbChildren; ++i)\n        w(\", \", i + coffset);\n\n    w(\"])\");\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(_: number) {\n    w(\"break\");\n}","import { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport Py_Exception from \"@SBrython/core_runtime/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SBRYTHON__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _b_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SBRYTHON__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"/* not implemented */\");\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK_CATCH } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { KEYWORDS_BREAK } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, KEYWORDS_BREAK);\n\n}","import { OPERATORS__BRACKETS } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS__BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { LITERALS_F_STRING } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING);\n    setResultType(dst, STYPE_STR);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { Context, convert_node, swapASTNodes } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\nimport { OPERATORS_BINARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, OPERATORS_BINARY);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(rtype);\n\n    // try reversed operator\n    if( type === STYPE_NOT_IMPLEMENTED) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined)\n            type   = method.return_type(ltype!);\n\n        if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED)\n            throw new Error(`${rtype} ${op} ${ltype} NOT IMPLEMENTED!`);\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import { AST2JS } from \"@SBrython/core_modules/lists\";\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"@SBrython/dop\";\nimport { AST } from \"@SBrython/py2ast\";\n\n//TODO...\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _b_} = __SBRYTHON__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\ntype Printable = {toString(): string};\n\nlet indent = \"    \";\nlet cur_indent_level = 0;\n//let cur_indent = \"\";\n\nconst indents = [\n    \"\",\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n]\n\nexport const NL = {\n    toString: function() {\n\n        if( __DEBUG__ ) {\n            ++CURSOR[CODE_LINE];\n            CURSOR[CODE_COL] = jscode.length + 1;\n\n            return \"\\n\" + indents[cur_indent_level];\n        } else {\n            return \"\\n\";\n        }\n    }\n}\nexport const BB = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents[++cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\nexport const BE = {\n    toString: function() {\n        if(__DEBUG__) {\n            return indents[--cur_indent_level];\n        } else {\n            return \"\";\n        }\n    }\n}\n\n// transforms into a template string\nexport function r(...args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    return args;\n}\n\n// write a template string\nexport function wr(args: [TemplateStringsArray, ...(Printable|number)[]]) {\n    if( typeof args === \"string\")\n        return w(args);\n    return wt(...args);\n}\n\n\n// write with template string wt``\nexport function wt(str: TemplateStringsArray, ...args: (Printable|number)[]) {\n    \n    for(let i = 0; i < args.length; ++i) {\n        jscode += str[i];\n        w(args[i]);\n    }\n\n    jscode += str[args.length];\n}\n\n// generic write ?\nexport function w(...args: (Printable|number)[]) {\n\n    for(let i = 0; i < args.length; ++i) {\n\n        let arg = args[i];\n\n        if( Array.isArray(arg) ) { // likely a r``\n            wr(arg as Parameters<typeof wr>[0]);\n            continue;\n        }\n\n        if( typeof arg !== \"number\" ) {\n\n            if( arg === undefined )\n                arg = \"undefined\";\n            if( arg === null )\n                arg = \"null\";\n\n            jscode += arg.toString();\n            continue;\n        }\n\n        const offset = 4*arg;\n        \n        if( __DEBUG__ )\n            set_js_cursor(offset + CODE_BEG);\n        AST2JS[type(arg)!](arg);\n        if( __DEBUG__ )\n            set_js_cursor(offset + CODE_END)\n    }\n}\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}","import { r } from \"@SBrython/ast2js\";\nimport { resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { addSType, STYPE_FLOAT, STYPE_INT } from \"@SBrython/structs/STypes\";\n\naddSType('jsint', {\n\n    ...genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_IJ2INT,\n        {\n            substitute_call: (node, a, b) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, Number2Int(a), '*', Number2Int(b) );\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_INT )\n                    return unary_jsop(node, '-', Number2Int(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps(['~'], // min_safe_integer == max_safe_integer.\n        RET_INT,\n        {\n            convert_self : CONVERT_2INT\n        }\n    ),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /*\n    __int__: {\n        return_type: () => 'int',\n        call_substitute(node, self) {\n            return id_jsop(node, self);\n        }\n    },*/\n});","import { LITERALS_BOOL, LITERALS_FLOAT, LITERALS_INT, LITERALS_NONE, LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\nimport { STYPE_BOOL, STYPE_FLOAT, STYPE_INT, STYPE_JSINT, STYPE_NONETYPE, STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, LITERALS_BOOL);\n            setResultType(dst, STYPE_BOOL);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, LITERALS_STR);\n            setResultType(dst, STYPE_STR);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, LITERALS_FLOAT);\n            setResultType(dst, STYPE_FLOAT);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, LITERALS_NONE);\n            setResultType(dst, STYPE_NONETYPE);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, LITERALS_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, STYPE_INT);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, STYPE_JSINT);\n        VALUES[dst] = value;\n    }\n}","import { Context, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { getSTypeID, STypes } from \"@SBrython/structs/STypes\";\nimport { default_call } from \"@SBrython/core_modules/functions/call/ast2js\";\nimport { convert_args } from \"./Args\";\nimport { FUNCTIONS_DEF } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport Body from \"@SBrython/bry2sbry/Body\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = STypes[rtype] as STypeFct;\n    const meta    = stype.__call__;\n\n    // new context for the function local variables\n    context = new Context(\"fct\", context);\n    context.parent_node_context = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    meta.return_type = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = getSTypeID(annotation);\n        // force the type.\n        meta.return_type = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    //const isMethod = context.type === \"class\";\n\n    const SType_fct: STypeFct = {\n        __name__: \"function\",\n        __call__: {\n            args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n            args_pos       : {},\n            idx_end_pos    : -1,\n            idx_vararg     : -1,\n            has_kw         : false,\n            generate,\n            return_type    : () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__.return_type();\n            },\n            substitute_call: default_call\n        }\n    }\n\n    const STypeID = STypes.length;\n    STypes[STypeID] = SType_fct;\n\n    //if( ! isMethod ) {\n    // if method add to self_context.symbols ?\n    context.local_symbols[node.name] = STypeID;\n\n    setType      (dst, FUNCTIONS_DEF);\n    setResultType(dst, STypeID);\n\n    VALUES[dst] = node.name;\n}","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { binary_jsop, CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, id_jsop, Int2Number, Number2Int, unary_jsop } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_IJ2INT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_JSINT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_int = addSType('type[int]', {\n    __call__: {\n        //TODO...\n        return_type: RET_INT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return other;\n            if( other_type === STYPE_JSINT)\n                return Number2Int(other);\n            if( other_type === STYPE_FLOAT )\n                return r`BigInt(Math.trunc(${other}))`;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`BigInt(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('int', {\n\n    //TODO: fix type...\n    // @ts-ignore\n    __class__: SType_type_int,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`${node}.toString()`;\n        }\n    },\n\n    __int__: {\n        return_type: RET_INT,\n        substitute_call(node, self) {\n            return id_jsop(node, self);\n        }\n    },\n    /* */\n    ...genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    ...genBinaryOps(['*'], RET_INT2INT,\n        {\n            substitute_call(node, a, b) {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    // TODO: check if really interesting...\n                    return binary_jsop(node, Int2Number(a), '*', Int2Number(b) );\n                \n                return binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    ...genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    ...genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                return r`_b_.floordiv_int(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            substitute_call: (node: number, self: number, other: number) => {\n                // do not handle -0\n                return r`_b_.mod_int(${self}, ${other})`;\n            },\n        }\n    ),\n\n    ...genUnaryOps(['u.-'], RET_INT,\n        {\n            substitute_call: (node, a) => {\n\n                if( resultType(node) === STYPE_FLOAT )\n                    return unary_jsop(node, '-', Int2Number(a) );\n                \n                return unary_jsop(node, '-', a );\n            },\n        }\n    ),\n    ...genUnaryOps( ['~'], RET_INT),\n    ...genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n\n});","import { w, wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { binary_jsop, reversed_operator } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\n\nfunction find_and_call_substitute(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[ltype]?.[op] as STypeFctSubs;\n    if( method !== undefined )\n        type = method.return_type(rtype!);\n\n    if( type === STYPE_NOT_IMPLEMENTED) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = STypes[rtype]?.[op] as STypeFctSubs;\n        if( method !== undefined )\n            type   = method.return_type(ltype!);\n        \n        if( type === STYPE_NOT_IMPLEMENTED) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            return binary_jsop(node, left, jsop, right);\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    return method.substitute_call!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' ) {\n            wr( binary_jsop(node, left, '===', right) );\n            continue;\n        }\n        if( op === 'is not' ) {\n            wr( binary_jsop(node, left, '!==', right) );\n            continue;\n        }\n        \n        wr( find_and_call_substitute(node, left, op, right) );\n    }\n}","import { resultType } from \"@SBrython/dop\";\nimport { Int2Number, Number2Int } from \"./BinaryOperators\";\nimport { STYPE_INT } from \"./STypes\";\n\ntype Printable = { toString(): string };\n\nexport type Converter = (node: number) => number | [TemplateStringsArray, ...(number | Printable)[]];\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function generateConvert(convert: number[]) {\n\n    const table = new Array<number>();\n    for(let i = 0; i < convert.length; i+=2)\n        table[convert[i]] = convert[i+1];\n\n    return (node: number) => {\n        const src    = resultType(node);\n        const target = table[src];\n        if( target === undefined )\n            return node;\n\n        //TODO: improve:\n        if( src === STYPE_INT)\n            return Int2Number(node, target);\n        if( target === STYPE_INT )\n            return Number2Int(node);\n\n        throw new Error(\"Unfound conversion\");\n    };\n}","import { r } from \"@SBrython/ast2js\";\nimport { LITERALS_STR } from \"@SBrython/core_modules/lists\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps, genUnaryOps, Int2Number } from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_FLOAT, RET_STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_FLOAT, STYPE_INT, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\n\nexport const SType_type_float = addSType('type[float]', {\n    __call__: {\n        //TODO...\n        return_type: RET_FLOAT,\n        substitute_call: (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_INT )\n                return Int2Number(other);\n            if( other_type === STYPE_FLOAT || other_type === STYPE_INT)\n                return other_type;\n\n            //TODO: power...\n            if( other_type === STYPE_STR ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === LITERALS_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" )\n                        return \"Number.POSITIVE_INFINITY\";\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\")\n                        return \"Number.NEGATIVE_INFINITY\";\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                return r`parseFloat(${other})`; //, ${node.children[2]}))`; \n            }\n\n            const otype = STypes[other_type];\n            const method = otype?.__int__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${otype.__name__}.__int__ not defined`);\n            return method.substitute_call!(node, other);\n        }\n    }\n});\n\naddSType('float', {\n\n    // @ts-ignore\n    __class__: SType_type_float,\n\n    __str__: {\n        return_type: RET_STR,\n        substitute_call(node) {\n            return r`_b_.float2str(${node})`;\n        }\n    },\n    \n    ...genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    ...genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.floordiv_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            substitute_call(node, self, other) {\n                return r`_b_.mod_float(${self}, ${other})`;\n            },\n        }\n    ),\n    ...genUnaryOps(['u.-']    , RET_FLOAT),\n    ...genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n});","import { set_js_cursor, w } from \"@SBrython/ast2js\";\nimport { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_STR } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    w(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === STYPE_STR) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === LITERALS_F_STRING_FORMATTEDVALUE) {\n            w(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w(\"`\");\n}","import { STRUCTS_DICT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, STRUCTS_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { STYPE_NOT_IMPLEMENTED, STYPE_BOOL, STYPE_FLOAT, STYPE_INT, STYPE_STR, STYPE_JSINT } from \"./STypes\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( STYPE_INT <= o && o <= STYPE_FLOAT)\n        return STYPE_FLOAT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === STYPE_JSINT)\n        return STYPE_JSINT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === STYPE_INT)\n        return STYPE_INT;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_BOOL;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === STYPE_STR )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === STYPE_INT || o === STYPE_JSINT )\n        return STYPE_STR;\n    return STYPE_NOT_IMPLEMENTED;\n}\n\nexport function RET_FLOAT(_: number) { return STYPE_FLOAT; }\nexport function RET_INT  (_: number) { return STYPE_INT;   }\nexport function RET_JSINT(_: number) { return STYPE_JSINT; }\nexport function RET_STR  (_: number) { return STYPE_STR;   }\n\n//TODO...\nexport function generate_return_type() {\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`while(${coffset}){${coffset+1}${NL}}}`;\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { wt } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`'${VALUES[node]}'`;\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    if( nbChildren > 0 )\n        wt`${coffset}: ${coffset+1}`;\n\n    for(let i = 2; i < nbChildren; i+=2)\n        wt`, ${i+coffset}: ${i+1+coffset}`;\n\n    w('}');\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { AssignOperators } from \"@SBrython/structs/BinaryOperators\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STYPE_NOT_IMPLEMENTED, STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = STYPE_NOT_IMPLEMENTED;\n    let method = STypes[resultType(coffset)]?.[op] as STypeFctSubs;\n\n    if( method !== undefined )\n        type = method.return_type(resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === STYPE_NOT_IMPLEMENTED) {\n        throw new Error(`${resultType(coffset+1)} ${op}= ${resultType(coffset)} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import { OPERATORS_BOOLEAN } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, OPERATORS_BOOLEAN);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import RUNTIME_0 from \"./object\";\nimport RUNTIME_1 from \"./Exceptions/JSException\";\nimport RUNTIME_2 from \"./Exceptions/Exception\";\n\n\nconst RUNTIME = {\n\t\"object\": RUNTIME_0,\n\t\"JSException\": RUNTIME_1,\n\t\"Exception\": RUNTIME_2,\n}\n\nexport default RUNTIME;\n","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_TRYBLOCK } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, CONTROLFLOWS_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { r } from \"@SBrython/ast2js\";\nimport { firstChild, resultType } from \"@SBrython/dop\";\nimport { CMPOPS_LIST, genBinaryOps, genCmpOps} from \"@SBrython/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/structs/Converters\";\nimport { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/structs/ReturnTypeFcts\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { addSType, STYPE_STR, STypes } from \"@SBrython/structs/STypes\";\n\nexport const SType_type_str = addSType('type[str]', {\n    __call__: {\n        //TODO...\n        return_type: RET_STR,\n        substitute_call: (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === STYPE_STR )\n                return other;\n\n            const method = STypes[other_type]?.__str__ as STypeFctSubs;\n            if( __DEBUG__ && method === undefined )\n                throw new Error(`${STypes[other_type].__name__}.__str__ not defined`);\n            return method.substitute_call!(other);\n        }\n    }\n});\n\naddSType('str', {\n\n    // @ts-ignore\n    __class__: SType_type_str,\n\n    __len__: {\n        return_type: RET_INT,\n        substitute_call: (_) => {\n            return r`${firstChild(_) + 1}.length`;\n        }\n    },\n\n    ...genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    ...genBinaryOps([\"+\"]      , RET_STR2STR),\n    ...genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            substitute_call: (node: number, a: number, b: number) => {\n                \n                if( resultType(a) !== STYPE_STR )\n                    [a,b] = [b,a];\n\n                return r`${a}.repeat(${b})`;\n            }\n        }),\n});","export default {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}","import { KEYWORDS_RAISE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","export default class Py_object {\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1)\n        return wt`{${coffset}${NL}}`;\n\n    wt`if(${coffset+1}){${coffset}${NL}}`;\n}","import { addSType } from \"@SBrython/structs/STypes\";\n\naddSType('NoneType', {});","import { w } from \"@SBrython/ast2js\";\nimport { VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w(value[0])\n\n    if( value[1] !== undefined)\n        w(\": \", value[1]);\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n    wt`${firstChild(node)}.${VALUES[node]}`;\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n    \n    w(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i)\n        wt`${i+coffset} = `;\n\n    let rchild: any = coffset;\n    if( resultType(coffset) === STYPE_JSINT && resultType(node) === STYPE_INT )\n        rchild = Number2Int(coffset);\n\n    w(rchild);\n}","import Body from \"@SBrython/bry2sbry/Body\";\nimport { CONTROLFLOWS_FOR, CONTROLFLOWS_FOR_RANGE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, CONTROLFLOWS_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = STYPE_INT;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, CONTROLFLOWS_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/py2ast\";\nimport { STypeFct } from \"@SBrython/structs/SType\";\nimport { FUNCTIONS_ARGS } from \"@SBrython/core_modules/lists\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT, STYPE_JSINT } from \"@SBrython/structs/STypes\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const FUNCTIONS_ARGS_POSONLY = 0;\nexport const FUNCTIONS_ARGS_KWARG   = 1;\nexport const FUNCTIONS_ARGS_KWONLY  = 2;\nexport const FUNCTIONS_ARGS_VARG    = 3;\nexport const FUNCTIONS_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: STypeFct, context: Context) {\n\n    const meta = SType_fct.__call__;\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, FUNCTIONS_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], FUNCTIONS_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, FUNCTIONS_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], FUNCTIONS_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, FUNCTIONS_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    //TODO: convert annotation type...\n    let result_type = node.annotation?.id; \n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === undefined ) {\n            result_type = resultType(coffset);\n            if(result_type === STYPE_JSINT)\n                result_type = STYPE_INT;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","import { CONTROLFLOWS_TERNARY } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , CONTROLFLOWS_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    wt`if(${coffset++}){${coffset++}${NL}}`;\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        wt`else if(${coffset++}){${coffset++}${NL}}`;\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        wt`else {${coffset}${NL}}`;\n}","import { Context } from \"@SBrython/py2ast\";\nimport { SYMBOL } from \"@SBrython/core_modules/lists\";\nimport { setResultType, setType, VALUES } from \"@SBrython/dop\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if( value in context.local_symbols)\n        result_type = context.local_symbols[value];\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { w } from \"@SBrython/ast2js\";\n\nexport default function ast2js(node: number) {\n    w(\"null\");\n}","import { KEYWORDS_IMPORT_ALIAS } from \"@SBrython/core_modules/lists\";\nimport { setType, VALUES } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\nimport { Number2Int } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let beg : string|number|any  = \"0n\";\n    let incr: string|number|any  = \"1n\";\n\n    let end = Number2Int(body+1);\n\n    if( nbChildren > 2) {\n        beg = end;\n        end = Number2Int(body+1);\n    }\n\n    if( nbChildren === 4)\n        incr = Number2Int(body+2);\n\n    return wt`for(var ${idx} = ${beg}; ${idx} < ${end}; ${idx} += ${incr}){${body}${NL}}`;\n}","import { OPERATORS_ASSIGNOP } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\nimport { bname2pyname } from \"@SBrython/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, OPERATORS_ASSIGNOP);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","import { BB, BE, NL, w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    wt`try {${coffset}${NL}}`;\n    wt`catch(_raw_err_){${BB}${NL}`;\n\n        w(\"const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)\");\n\n        if( nbChildren > 1)\n            w( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i)\n            w(NL, \"else \", i + coffset );\n\n        // not a catch all...\n        if( nbChild(coffset + nbChildren-1) !== 1)\n            w(NL, \"else { throw _raw_err_ }\");\n\n    w(BE, NL);\n\n}","import { wt } from \"@SBrython/ast2js\";\nimport { firstChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    wt`(${coffset} ? ${coffset+1} : ${coffset+2})`;\n}","import { LITERALS_F_STRING_FORMATTEDVALUE } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, LITERALS_F_STRING_FORMATTEDVALUE);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { FUNCTIONS_CALL_KEYWORD } from \"@SBrython/core_modules/lists\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, FUNCTIONS_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","import { BB, BE, NL, w } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(BB);\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i)\n        w(NL, i);\n\n    w(BE);\n}","import { FUNCTIONS_CALL } from \"@SBrython/core_modules/lists\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/py2ast\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\nimport keyword from \"./keyword\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const name = node.func.id;\n    const fct_type = context.local_symbols[name]!;\n    if( __DEBUG__ && fct_type === undefined ) {\n        console.warn(node);\n        console.warn(context.local_symbols);\n        throw new Error(`Function ${name} not defined`);\n    }\n\n    const fct = STypes[fct_type];\n    const ret_type = (fct.__call__ as STypeFctSubs).return_type();\n\n    setType      (dst, FUNCTIONS_CALL);\n    setResultType(dst, ret_type);\n    let coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code_from_list(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import      AST2JS_0 from \"./symbol/ast2js\";\nimport      AST2JS_1 from \"./structs/tuple/ast2js\";\nimport      AST2JS_2 from \"./structs/list/ast2js\";\nimport      AST2JS_3 from \"./structs/dict/ast2js\";\nimport      AST2JS_4 from \"./return/ast2js\";\nimport      AST2JS_5 from \"./pass/ast2js\";\nimport      AST2JS_6 from \"./operators/unary/ast2js\";\nimport      AST2JS_7 from \"./operators/compare/ast2js\";\nimport      AST2JS_8 from \"./operators/boolean/ast2js\";\nimport      AST2JS_9 from \"./operators/binary/ast2js\";\nimport     RUNTIME_9 from \"./operators/binary/runtime\";\nimport      AST2JS_10 from \"./operators/attr/ast2js\";\nimport      AST2JS_11 from \"./operators/[]/ast2js\";\nimport      AST2JS_12 from \"./operators/AssignOp/ast2js\";\nimport      AST2JS_13 from \"./operators/=_init/ast2js\";\nimport      AST2JS_14 from \"./operators/=/ast2js\";\nimport      AST2JS_15 from \"./literals/str/ast2js\";\nimport      AST2JS_16 from \"./literals/int/ast2js\";\nimport      AST2JS_17 from \"./literals/float/ast2js\";\nimport     RUNTIME_17 from \"./literals/float/runtime\";\nimport      AST2JS_18 from \"./literals/f-string/ast2js\";\nimport      AST2JS_19 from \"./literals/f-string/FormattedValue/ast2js\";\nimport      AST2JS_20 from \"./literals/bool/ast2js\";\nimport      AST2JS_21 from \"./literals/None/ast2js\";\nimport      AST2JS_22 from \"./keywords/raise/ast2js\";\nimport     RUNTIME_22 from \"./keywords/raise/runtime\";\nimport      AST2JS_23 from \"./keywords/import/ast2js\";\nimport      AST2JS_24 from \"./keywords/import/alias/ast2js\";\nimport      AST2JS_25 from \"./keywords/continue/ast2js\";\nimport      AST2JS_26 from \"./keywords/break/ast2js\";\nimport      AST2JS_27 from \"./keywords/assert/ast2js\";\nimport     RUNTIME_27 from \"./keywords/assert/runtime\";\nimport      AST2JS_28 from \"./functions/def/ast2js\";\nimport      AST2JS_29 from \"./functions/call/ast2js\";\nimport      AST2JS_30 from \"./functions/call/keyword/ast2js\";\nimport      AST2JS_31 from \"./functions/args/ast2js\";\nimport      AST2JS_32 from \"./controlflows/while/ast2js\";\nimport      AST2JS_33 from \"./controlflows/tryblock/ast2js\";\nimport     RUNTIME_33 from \"./controlflows/tryblock/runtime\";\nimport      AST2JS_34 from \"./controlflows/tryblock/catch/ast2js\";\nimport      AST2JS_35 from \"./controlflows/ternary/ast2js\";\nimport      AST2JS_36 from \"./controlflows/ifblock/ast2js\";\nimport      AST2JS_37 from \"./controlflows/for_range/ast2js\";\nimport      AST2JS_38 from \"./controlflows/for/ast2js\";\nimport      AST2JS_39 from \"./class/classdef/ast2js\";\nimport      AST2JS_40 from \"./body/ast2js\";\n\n\nexport const SYMBOL = 0;\nexport const STRUCTS_TUPLE = 1;\nexport const STRUCTS_LIST = 2;\nexport const STRUCTS_DICT = 3;\nexport const RETURN = 4;\nexport const PASS = 5;\nexport const OPERATORS_UNARY = 6;\nexport const OPERATORS_COMPARE = 7;\nexport const OPERATORS_BOOLEAN = 8;\nexport const OPERATORS_BINARY = 9;\nexport const OPERATORS_ATTR = 10;\nexport const OPERATORS__BRACKETS = 11;\nexport const OPERATORS_ASSIGNOP = 12;\nexport const OPERATORS__EQ_INIT = 13;\nexport const OPERATORS__EQ = 14;\nexport const LITERALS_STR = 15;\nexport const LITERALS_INT = 16;\nexport const LITERALS_FLOAT = 17;\nexport const LITERALS_F_STRING = 18;\nexport const LITERALS_F_STRING_FORMATTEDVALUE = 19;\nexport const LITERALS_BOOL = 20;\nexport const LITERALS_NONE = 21;\nexport const KEYWORDS_RAISE = 22;\nexport const KEYWORDS_IMPORT = 23;\nexport const KEYWORDS_IMPORT_ALIAS = 24;\nexport const KEYWORDS_CONTINUE = 25;\nexport const KEYWORDS_BREAK = 26;\nexport const KEYWORDS_ASSERT = 27;\nexport const FUNCTIONS_DEF = 28;\nexport const FUNCTIONS_CALL = 29;\nexport const FUNCTIONS_CALL_KEYWORD = 30;\nexport const FUNCTIONS_ARGS = 31;\nexport const CONTROLFLOWS_WHILE = 32;\nexport const CONTROLFLOWS_TRYBLOCK = 33;\nexport const CONTROLFLOWS_TRYBLOCK_CATCH = 34;\nexport const CONTROLFLOWS_TERNARY = 35;\nexport const CONTROLFLOWS_IFBLOCK = 36;\nexport const CONTROLFLOWS_FOR_RANGE = 37;\nexport const CONTROLFLOWS_FOR = 38;\nexport const CLASS_CLASSDEF = 39;\nexport const BODY = 40;\n\nimport type {T_ASTCONVERT, T_AST2JS} from './'\n\nexport const AST2JS: T_AST2JS[] = [\n\tAST2JS_0,\n\tAST2JS_1,\n\tAST2JS_2,\n\tAST2JS_3,\n\tAST2JS_4,\n\tAST2JS_5,\n\tAST2JS_6,\n\tAST2JS_7,\n\tAST2JS_8,\n\tAST2JS_9,\n\tAST2JS_10,\n\tAST2JS_11,\n\tAST2JS_12,\n\tAST2JS_13,\n\tAST2JS_14,\n\tAST2JS_15,\n\tAST2JS_16,\n\tAST2JS_17,\n\tAST2JS_18,\n\tAST2JS_19,\n\tAST2JS_20,\n\tAST2JS_21,\n\tAST2JS_22,\n\tAST2JS_23,\n\tAST2JS_24,\n\tAST2JS_25,\n\tAST2JS_26,\n\tAST2JS_27,\n\tAST2JS_28,\n\tAST2JS_29,\n\tAST2JS_30,\n\tAST2JS_31,\n\tAST2JS_32,\n\tAST2JS_33,\n\tAST2JS_34,\n\tAST2JS_35,\n\tAST2JS_36,\n\tAST2JS_37,\n\tAST2JS_38,\n\tAST2JS_39,\n\tAST2JS_40,\n]\n\nconst RUNTIME = {};\nObject.assign(RUNTIME, RUNTIME_9);\nObject.assign(RUNTIME, RUNTIME_17);\nObject.assign(RUNTIME, RUNTIME_22);\nObject.assign(RUNTIME, RUNTIME_27);\nObject.assign(RUNTIME, RUNTIME_33);\n\n\nexport const _b_ = RUNTIME;\n","import { KEYWORDS_IMPORT } from \"@SBrython/core_modules/lists\";\nimport { addChild, setType, VALUES } from \"@SBrython/dop\";\nimport { Context, convert_node } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, KEYWORDS_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { NL, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    let base: string|number = \"_r_.object\";\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    if( nbChildren === 2)\n        base = body+1;\n\n    wt`class ${VALUES[node]} extends ${base} {${body}${NL}}`;\n}","import { w } from \"@SBrython/ast2js\";\nimport { resultType, VALUES } from \"@SBrython/dop\";\nimport { STYPE_INT } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === STYPE_INT ) {\n        // force str write (else might assume this is an AST node ID)...\n        w(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w(`${value}`);\n}","import { wr } from \"@SBrython/ast2js\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/dop\";\nimport { STypeFctSubs } from \"@SBrython/structs/SType\";\nimport { STypes } from \"@SBrython/structs/STypes\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = STypes[resultType(coffset)]![VALUES[node]] as STypeFctSubs;\n    wr( method.substitute_call!(node, coffset, coffset+1) );\n}","import { PASS } from \"@SBrython/core_modules/lists\";\nimport { setType } from \"@SBrython/dop\";\nimport { Context } from \"@SBrython/py2ast\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, PASS);\n}","import { w, wt } from \"@SBrython/ast2js\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/dop\";\n\nexport default function ast2js(node: number) {\n\n    w(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        if( i !== 0)\n            w(\", \");\n        w(i + coffset);\n    }\n\n    w('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w(\"__SBRYTHON__.getModules()\");\n    else\n        wt`__SBRYTHON__.getModule(\"${value}\")`;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["Py_Exception","Py_object","convert","dst","node","context","setType","KEYWORDS_ASSERT","coffset","addChild","convert_node","test","result_type","STYPE_NONETYPE","undefined","value","resultType","RETURN","setResultType","meta","parent_node_context","__call__","return_type","ast2js","wt","firstChild","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Error","Function","runJSCode","getModules","getModule","name","getASTFor","_r_","_b_","nops","ops","nb_ops","length","Array","i","op","bname2pyname","constructor","$name","VALUES","OPERATORS_COMPARE","STYPE_BOOL","nbChildren","comparators","left","STypes","STypename2id","getSTypeID","id","__name__","addSType","type","Object","assign","STYPE_INT","STYPE_JSINT","STYPE_FLOAT","STYPE_STR","STYPE_NOT_IMPLEMENTED","set_py_code","brython_node","offset","PY_CODE","CODE_BEG_LINE","lineno","CODE_BEG_COL","col_offset","CODE_END_LINE","end_lineno","CODE_END_COL","end_col_offset","set_py_code_from_list","beg","end","set_py_from_beg_end","src","dst_beg","dst_end","src_offset","beg_offset","end_offset","CODE_LINE","CODE_COL","py2ast","code","parser","$B","Parser","nodes","convert_ast","_PyPegen","run_parser","dop_reset","createASTNode","Body","body","Context","ASTNODES","swapASTNodes","a","b","ao","ASTNODE_SIZE","bo","t","ap","bp","BRY2SBRY","console","warn","log","parent_context","RootContext","local_symbols","type_fct","len","RET_INT","__class__","substitute_call","call","int","str","float","w","OPERATORS_UNARY","operand","method","Py_JSException","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","nbChild","OPERATORS_ATTR","attr","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","set_js_cursor","CODE_BEG","type_id","FUNCTIONS_ARGS_VARG","wr","binary_jsop","FUNCTIONS_ARGS_KWARG","defval","Number2Int","CODE_END","BinaryOperators","AssignOperators","jsop2pyop","JSOperators","Int2Number","target","LITERALS_INT","a_value","ltype","rtype","r","JSOperatorsPriority","priority","reversed_operator","multi_jsop","first","prio","p_prio","setParentOPPrio","id_jsop","parentOPPrio","cmp","unary_jsop","rop","genUnaryOps","convert_self","NOCONVERT","pyop","self","genBinaryOps","convert_other","cs","other","rcs","o","other_value","CMPOPS_LIST","reverse","genCmpOps","reversed","cop","_","idx","list","NL","STRUCTS_TUPLE","elts","bases","CLASS_CLASSDEF","childCount","cur","orelse","CONTROLFLOWS_IFBLOCK","BODY","cn","targets","OPERATORS__EQ","OPERATORS__EQ_INIT","annotation","rchild","STRUCTS_LIST","CONTROLFLOWS_WHILE","RET_IJBF2BOOL","KEYWORDS_CONTINUE","print_obj","obj","keys","values","default_call","kw_pos","FUNCTIONS_CALL_KEYWORD","nb_pos","max","pos_size","has_kw","pos","kw","cutoff","min","varg_start","varg_nb","args_names","has_kwargs","args_pos","arg","data","sep","join","float2str","f","toExponential","sign_idx","slice","toString","includes","stackline2astnode","stackline","sb","parse_stack","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","line","col","indexOf","SYMBOL","debug_print_exception","err","_raw_err_","stack2astnodes","exception_str","get_py_exception","__SBRYTHON__","_err_","PythonError","python_exception","JSException","CONTROLFLOWS_TRYBLOCK_CATCH","KEYWORDS_BREAK","OPERATORS__BRACKETS","LITERALS_F_STRING","OPERATORS_BINARY","right","CURSOR","ARRAY_TYPE","JS_CODE","indent","cur_indent_level","indents","BB","BE","args","isArray","AST2JS","RET_IJ2INT","CONVERT_2INT","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","RET_JSINT2JSINT","RET_JSINT","_context","vtype","qname","LITERALS_BOOL","LITERALS_STR","__qualname__","LITERALS_FLOAT","LITERALS_NONE","generate","stype","convert_args","returns","fct_return_type","last_type","fake_node","push","SType_fct","posonlyargs","STypeID","FUNCTIONS_DEF","SType_type_int","other_type","otype","__int__","__str__","RET_STR","RET_INT2INT","find_and_call_substitute","jsop","SType_type_float","RET_FLOAT","LITERALS_F_STRING_FORMATTEDVALUE","STRUCTS_DICT","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","super","bname2jsop","OPERATORS_BOOLEAN","RUNTIME_0","RUNTIME_1","RUNTIME_2","handlers","CONTROLFLOWS_TRYBLOCK","ExceptHandler","SType_type_str","__len__","Name","require","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","keyword","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","KEYWORDS_RAISE","exc","assert","cond","iter","func","CONTROLFLOWS_FOR","CONTROLFLOWS_FOR_RANGE","FUNCTIONS_ARGS_POSONLY","FUNCTIONS_ARGS_KWONLY","FUNCTIONS_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","FUNCTIONS_ARGS","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","CONTROLFLOWS_TERNARY","Float64Array","NEXT_AST_NODE_ID","parent","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","KEYWORDS_IMPORT_ALIAS","asname","incr","OPERATORS_ASSIGNOP","fct_type","fct","ret_type","FUNCTIONS_CALL","keywords","KEYWORDS_IMPORT","names","module","PASS","AST2JS_0","AST2JS_1","AST2JS_2","AST2JS_3","AST2JS_4","AST2JS_5","AST2JS_6","AST2JS_7","AST2JS_8","AST2JS_9","AST2JS_10","AST2JS_11","AST2JS_12","AST2JS_13","AST2JS_14","AST2JS_15","AST2JS_16","AST2JS_17","AST2JS_18","AST2JS_19","AST2JS_20","AST2JS_21","AST2JS_22","AST2JS_23","AST2JS_24","AST2JS_25","AST2JS_26","AST2JS_27","AST2JS_28","AST2JS_29","AST2JS_30","AST2JS_31","AST2JS_32","AST2JS_33","AST2JS_34","AST2JS_35","AST2JS_36","AST2JS_37","AST2JS_38","AST2JS_39","AST2JS_40","RUNTIME","RUNTIME_9","RUNTIME_17","RUNTIME_22","RUNTIME_27","RUNTIME_33","base","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","key","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"sourceRoot":""}