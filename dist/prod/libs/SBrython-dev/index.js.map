{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"kCAAA,MAAMA,EAAO,CACZC,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,GAIDC,EAAAA,GAAMC,QAAQH,GAGd,IAAII,EAAqB,KACTA,EAAW,CAC1B,SACA,eACA,cACA,cACA,aACA,WACA,WACA,SACA,UACA,SACA,UACA,cACA,gBACA,iBACA,YACA,UACA,UACA,YACA,cACA,mBACA,WACA,WACA,YACA,aACA,mBACA,eACA,YACA,aACA,UACA,WACA,mBACA,eACA,aACA,gBACA,sBACA,eACA,eACA,iBACA,WACA,WACA,OACA,UACA,UACA,eACA,iB,yDC/Fc,SAASC,EAAOC,GAE3B,MAAMC,GAAaC,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAI3B,IAFAK,EAAAA,EAAAA,IAAM,SAASC,EAAAA,GAAON,eAElBG,EAAa,EAAI,EACjBE,EAAAA,EAAAA,IAAM,aACN,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,IAAcI,GAC9BC,EAAAA,EAAAA,IAAOP,EAAKM,IACZF,EAAAA,EAAAA,IAAM,OAEVA,EAAAA,EAAAA,IAAM,IACV,MAA0B,IAAfF,GACPK,EAAAA,EAAAA,IAAOP,EAAK,IAEZI,EAAAA,EAAAA,IAAM,eAEVI,EAAAA,EAAAA,IAAM,KAAMR,EAAM,IACtB,C,iGChBe,SAASS,EAAQC,EAAaX,EAAWY,GAEpD,IAAIC,EACAC,EACJ,GAAI,SAAUd,EAAKe,KAAO,CACtB,MAAMC,EAAQhB,EAAKe,KAAKE,KAExBH,GAAUI,EAAAA,EAAAA,IAASP,EAAK,EAAIX,EAAKmB,KAAKC,OAASpB,EAAKqB,SAASD,OAAS,IACtEE,EAAAA,EAAAA,IAAaR,EAASd,EAAKe,KAAKQ,MAAOX,GACvC,MAAMY,GAAOC,EAAAA,EAAAA,IAAWX,GAMxB,KAJEA,EAEFD,EAAMa,EAAAA,EAAMF,GAAMR,QAEOW,IAARd,EAEb,MADAe,QAAQC,KAAK7B,GACP,IAAI8B,MAAM,UAAUd,gBAElC,KAAO,CACH,MAAMA,EAAOhB,EAAKe,KAAKgB,GACjBC,EAAWpB,EAAQqB,cAAcjB,GAEvC,QAA8BW,IAAbK,EAGb,MAFAJ,QAAQC,KAAK7B,GACb4B,QAAQC,KAAKjB,EAAQqB,eACf,IAAIH,MAAM,YAAYd,iBAGhCH,EAAMa,EAAAA,EAAMM,GACZlB,GAAUI,EAAAA,EAAAA,IAASP,EAAK,EAAIX,EAAKmB,KAAKC,OAASpB,EAAKqB,SAASD,OACjE,CAEA,MAAMc,EAAW,EAAKC,SAAiBC,EAAAA,OAEvCC,EAAAA,EAAAA,IAAc1B,EAAK2B,EAAAA,KACnBC,EAAAA,EAAAA,IAAc5B,EAAKuB,IAEnBZ,EAAAA,EAAAA,IAAaR,IAAWd,EAAKe,KAAMH,GAEnC,IAAI,IAAIL,EAAI,EAAGA,EAAIP,EAAKmB,KAAKC,SAAUb,GACnCe,EAAAA,EAAAA,IAAaR,IAAWd,EAAKmB,KAAKZ,GAAIK,GAE1C,IAAI,IAAIL,EAAI,EAAGA,EAAIP,EAAKqB,SAASD,SAAUb,GACvCiC,EAAAA,EAAAA,GAAQ1B,EAASd,EAAKqB,SAASd,GAAIK,IACrB6B,EAAAA,EAAAA,IAAY3B,EAASd,EAAKqB,SAASd,MAC/CO,EAGNR,EAAAA,GAAOK,GAAOE,CAClB,C,6ECpDe,SAASd,EAAOC,GAE3B,MAAMG,GAAaC,EAAAA,EAAAA,IAAQJ,GACrBc,GAAaZ,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAIO,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BC,EAAAA,EAAAA,IAAOD,EAAEO,IACTT,EAAAA,EAAAA,IAAM,OAGV,IAAIqC,EAAiB5B,GACjBW,EAAAA,EAAAA,IAAWX,KAAa6B,EAAAA,KAAgBlB,EAAAA,EAAAA,IAAWzB,KAAU4C,EAAAA,KAC7DF,GAASG,EAAAA,EAAAA,IAAW/B,KAExBN,EAAAA,EAAAA,IAAOkC,EACX,C,+ECVO,MAAMI,EAET,GAAuC,CAAC,EACxC,GAAiD,CAC7CC,QAASC,YAObC,WAAAA,CAAYC,EAAgBC,GACxB,GAAGA,EAAIC,YAAYC,MAAK,EACpB,MAAM,IAAIvB,MAAM,OAAOqB,EAAIC,gCAM/B,OAHAC,MAAK,EAAgBF,EAAIC,UAAYD,EAG9B,IAAIG,SAAS,SAAU,GAAGJ,0BACrC,CAEAK,SAAAA,CAAUL,EAAgBC,GACtBE,MAAK,EAAUF,EAAIC,UAAYC,KAAKJ,YAAYC,EAAQC,EAAzBE,CAA8BA,KACjE,CAEAG,UAAAA,GACI,OAAOH,MAAK,CAChB,CACAI,SAAAA,CAAUzC,GACN,OAAOqC,MAAK,EAAUrC,EAC1B,CAEA0C,SAAAA,CAAUN,GACN,OAAOC,MAAK,EAAgBD,EAChC,CAEAO,KAAAA,IAASxC,GACLS,QAAQgC,OAAOzC,EACnB,CAEA,OAAI0C,GACA,OAAOA,EAAAA,CACX,CACA,QAAIC,GACA,OAAOA,EAAAA,CACX,E,yDCrDW,SAAS/D,EAAOC,IAC3BQ,EAAAA,EAAAA,KAAON,EAAAA,EAAAA,IAAWF,KAAQK,EAAAA,EAAAA,IAAM,IAAIC,EAAAA,GAAON,KAC/C,C,yICMA,QAAe+D,OAAOC,OAAOC,EAAAA,GACzB,CACIC,UAAWC,EAAAA,GACXC,QAAS,CACLjC,UAAUkC,EAAAA,EAAAA,GAAeC,EAAAA,IAAUtE,KAC/BQ,EAAAA,EAAAA,KAAQN,EAAAA,EAAAA,IAAWF,GAAQ,IAC3BK,EAAAA,EAAAA,IAAM,UAAU,OAI5BkE,EAAAA,EAAAA,GAAaC,EAAAA,GAAaC,EAAAA,KAC1BC,EAAAA,EAAAA,GAAa,CAAC,KAAYC,EAAAA,KAC1BD,EAAAA,EAAAA,GAAa,CAAC,KAAYE,EAAAA,GACtB,CACIC,cAAiBC,EAAAA,GACjBC,WAAY,CAAC/E,EAAcgF,EAAWC,EAAIC,KAEtC,IAAIzD,EAAAA,EAAAA,IAAWuD,KAAOG,EAAAA,GAAY,CAC9B,MAAMC,EAAIJ,EACVA,EAAIE,EAAGA,EAAIE,CACf,EAEA3E,EAAAA,EAAAA,IAAM,GAAIuE,EAAG,WAAYE,EAAG,IAAI,I,+CC/BjC,SAASnF,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,wBACV,C,iCCJA,SACC,OAAUV,EAAAA,MAAAA,EACV,YAAeA,EAAAA,MAAAA,EACf,UAAaA,EAAAA,MAAAA,E,+HCQd,QAAeoE,OAAOC,OAAOqB,EAAAA,GACzB,CACInB,UAAWoB,EAAAA,GACXC,SAAW,QACX,CAACC,EAAAA,IAAU,SACXrD,UAAWkC,EAAAA,EAAAA,GAAeoB,EAAAA,IAAYzF,IAElC,MAAM0F,GAAQxF,EAAAA,EAAAA,IAAWF,GAAM,EACzB2F,GAAalE,EAAAA,EAAAA,IAAWiE,GAG9B,GAAIC,IAAe/C,EAAAA,GAEf,YADApC,EAAAA,EAAAA,KAAOoF,EAAAA,EAAAA,IAAWF,IAGtB,GAAIC,IAAeE,EAAAA,IAAgBF,IAAehD,EAAAA,GAE9C,YADAnC,EAAAA,EAAAA,IAAOmF,GAKX,GAAIA,IAAeR,EAAAA,GAAa,CAE5B,MAAMW,EAAcxF,EAAAA,GAAOoF,GAE3B,IAAIlE,EAAAA,EAAAA,IAAKkE,KAAWK,EAAAA,GAAc,CAC9B,GAAoB,QAAhBD,GAAyC,aAAhBA,EAEzB,YADAzF,EAAAA,EAAAA,IAAM,4BAGV,GAAoB,SAAhByF,GAAyC,cAAhBA,EAEzB,YADAzF,EAAAA,EAAAA,IAAM,2BAGd,CAOA,YADAI,EAAAA,EAAAA,IAAM,cAAeiF,EAAO,IAEhC,CAEA,MAAMM,EAAQtE,EAAAA,GAAMiE,GACpB,QAA4BhE,IAAVqE,QAAyCrE,IAAlBqE,EAAMC,QAC3C,MAAM,IAAInE,MAAM,GAAGkE,GAAOT,gCAE9BS,EAAMC,QAASC,EAAAA,IAAalG,EAAM0F,EAAM,K,yDCvDrC,SAAShF,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKwF,EAAAA,GAEjB,C,yDCLe,SAASpG,EAAOC,IAE3BoG,EAAAA,EAAAA,MAEA,MAAMtF,GAAaZ,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAIO,EAAIO,EAASP,EAAIJ,EAAWW,IAAWP,GAC3C8F,EAAAA,EAAAA,OAAQ7F,EAAAA,EAAAA,IAAOD,IAGnB+F,EAAAA,EAAAA,MAE+B,IAAfnG,GAA6B,IAATH,IAChCqG,EAAAA,EAAAA,KACR,C,kCCTA,SACIE,OAVJ,SAAgBC,GAEZ,IAAIA,EAGJ,MAAM,IAAI1E,MAAM,mBACpB,E,gDCJe,SAAS/B,EAAO0G,IAC3BpG,EAAAA,EAAAA,IAAM,QACV,C,4GCKA,QAAe0D,OAAOC,OAAOG,EAAAA,GACzB,CACID,UAAWoB,EAAAA,GACXC,SAAW,MACX,CAACC,EAAAA,IAAU,SACXrD,UAAUkC,EAAAA,EAAAA,GAAeqC,EAAAA,IAAU1G,IAE/B,MAAM0F,GAAQxF,EAAAA,EAAAA,IAAWF,GAAM,EACzB2F,GAAalE,EAAAA,EAAAA,IAAWiE,GAG9B,GAAIC,IAAeR,EAAAA,GAEf,YADA3E,EAAAA,EAAAA,IAAOkF,GAIX,MAAMM,EAAQtE,EAAAA,GAAMiE,GACpB,QAA4BhE,IAAVqE,QAAyCrE,IAAlBqE,EAAMW,QAC3C,MAAM,IAAI7E,MAAM,GAAGkE,GAAOT,gCAE9BS,EAAMW,QAAST,EAAAA,IAAYlG,EAAM0F,EAAM,K,kGCtBpC,SAAS3F,EAAOC,GAE3B,MAAMc,GAAaZ,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAIrB4G,EAFYtG,EAAAA,GAAON,GAEFmC,SAAS0E,EAAAA,IAEhC,IAAIC,EAAWF,EAAKG,YAChBD,IAAaE,OAAOC,oBACpBH,EAAWF,EAAKM,WAAa,QAEbvF,IAAhBiF,EAAKO,QAAwBL,IAAa3G,EAAa,KACrD2G,EAEN,IAAI,IAAIvG,EAAI,EAAIA,EAAIJ,IAAeI,EACrB,IAANA,IACAF,EAAAA,EAAAA,IAAM,MAENyG,IAAavG,IACbF,EAAAA,EAAAA,IAAM,KAGV+G,EAAU7G,EAAIO,EADCP,IAAMqG,EAAKM,YAAc3G,IAAMJ,EAAW,GAIzD2G,EAAW3G,IACXE,EAAAA,EAAAA,IAAM,SACd,CAEA,SAAS+G,EAAUpH,EAAcqH,GAE7B,MAAMC,EAAS,EAAEtH,GACDuH,EAAAA,EAAAA,IAAcD,EAASE,EAAAA,IAEvC,MAAMxG,EAAOV,EAAAA,GAAON,GACdyH,GAAUjG,EAAAA,EAAAA,IAAKxB,GAErB,GAAIyH,IAAYC,EAAAA,GACRL,GACAhH,EAAAA,EAAAA,IAAM,MAAMW,MAEZX,EAAAA,EAAAA,IAAM,GAAGW,eACV,GAAIyG,IAAYE,EAAAA,IACnBtH,EAAAA,EAAAA,IAAM,GAAGW,eACN,GAAsB,KAAlBZ,EAAAA,EAAAA,IAAQJ,GAAc,CAE7B,IAAI4H,GAAc1H,EAAAA,EAAAA,IAAWF,IACzByB,EAAAA,EAAAA,IAAWmG,KAAYjF,EAAAA,KACvBiF,GAAS/E,EAAAA,EAAAA,IAAW+E,KAExBvH,EAAAA,EAAAA,IAAM,GAAGW,SACTR,EAAAA,EAAAA,IAAOoH,EACX,MACIvH,EAAAA,EAAAA,IAAMW,IAGMuG,EAAAA,EAAAA,IAAcD,EAASO,EAAAA,GAC3C,C,0DC/De,SAAS9H,EAAOC,GAE3B,MAAMc,GAAUZ,EAAAA,EAAAA,IAAWF,GAE3B,OAAgB,IAAZc,GACOT,EAAAA,EAAAA,IAAM,iBAEVI,EAAAA,EAAAA,IAAM,UAAWK,EAAS,IACrC,C,0DCRe,SAASf,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,IAAIC,EAAAA,GAAON,MACrB,C,0DCFe,SAASD,EAAOC,GAE3B,OAAOS,EAAAA,EAAAA,IAAM,gBAAgBP,EAAAA,EAAAA,IAAWF,GAAO,IACnD,C,uECJO,MAAMoC,EAAc0F,SACdC,EAAcD,SACd5B,EAAc4B,SACdtC,EAAcsC,SACdjB,EAAciB,Q,0DCHZ,SAAS/H,EAAOC,GAE3B,MAAMc,GAAaZ,EAAAA,EAAAA,IAAWF,GAIZ,KAHCI,EAAAA,EAAAA,IAAQJ,IAQ3BS,EAAAA,EAAAA,IAAM,MAAOK,EAAQ,EAAG,KAAMA,EAAS,MAJnCL,EAAAA,EAAAA,IAAM,IAAKK,EAAS,IAK5B,C,gICIA,SAASkH,EAASrH,EAAaX,EAAWY,GAEtC,MAAMqH,GAAUxG,EAAAA,EAAAA,IAAWd,GACrBG,GAAUI,EAAAA,EAAAA,IAASP,EAAK,GAGxBuH,EAAUxG,EAAAA,EAAMuG,GAChBE,EAAUD,EAAM/F,SAChByE,EAAUuB,EAAKtB,EAAAA,KAGrBjG,EAAUA,EAAQwH,iBAAiB,QAC3BC,aAAe1H,GAGvB2H,EAAAA,EAAAA,IAAaxH,EAASd,EAAMkI,EAAOtH,GAQnCgG,EAAKoB,cAAWrG,EAEhBwG,EAAK/F,EAAAA,SAAeT,EAEpB,MAAM4G,EAAavI,EAAKwI,SAASzG,GACjC,QAAmBJ,IAAf4G,EAA2B,CAC3B,IAAIE,EAAkB7H,EAAQqB,cAAcsG,GAE5CJ,EAAK/F,EAAAA,IAAe,IAAMqG,CAC9B,CAGA,MAAMC,EAAc1I,EAAKC,KAAKD,EAAKC,KAAKmB,OAAO,GAAGuH,YAAYC,MAC9D,GAAkB,WAAdF,GAAwC,UAAdA,EAEV,CACZ,MAAMG,EAAY,CACdF,YAAa,CACTC,MAAO,UAEPE,OAAQ9I,EAAK+I,WACjBA,WAAY/I,EAAK+I,WACbC,WAAYhJ,EAAKiJ,eACrBA,eAAgBjJ,EAAKiJ,gBAEzBjJ,EAAKC,KAAKJ,KAAMgJ,EACpB,EAKJK,EAAAA,EAAAA,GAAKpI,EAAQ,EAAGd,EAAKC,KAAMW,IACbuI,EAAAA,EAAAA,IAAsBrI,EAAQ,EAAGd,EAAKC,KACxD,CAEe,SAASS,EAAQC,EAAaX,EAAWY,GAEpD,MAAMwI,EAAsB,CACxB7D,SAAU,WACVpD,SAAU,CACNoD,SAAU,WACV,CAACnD,EAAAA,IAAc,KACX4F,EAASrH,EAAKX,EAAMY,GACbwI,EAAUjH,SAASC,EAAAA,OAE9B,CAAC8D,EAAAA,IAAamD,EAAAA,EACd,CAACxC,EAAAA,IAAY,CAETyC,WAAiB,IAAIC,MAAMvJ,EAAKmB,KAAKA,KAAKC,OAAOpB,EAAKmB,KAAKqI,YAAYpI,QACvEqI,SAAiB,CAAC,EAClB1C,aAAkB,EAClBG,YAAkB,EAClBwC,QAAiB,EACjB1B,cAKN2B,EAAUjI,EAAAA,EAAMN,OACtBM,EAAAA,EAAMiI,GAAWP,EAEjBxI,EAAQqB,cAAcjC,EAAKgB,MAAQ2I,EAEnC,IAAInI,EAAOoI,EAAAA,GACX,GAAqB,UAAjBhJ,EAAQY,KAAkB,CAC1BA,EAAOqI,EAAAA,GACP,MAAMC,EAAQpI,EAAAA,EAAMd,EAAQyH,cAC5B/H,EAAAA,GAAOK,GAAO,CAACX,EAAKgB,KAAM8I,EAAMvE,UAEhC,MAAMwE,EAAc/J,EAAKgB,KAEzBU,EAAAA,EAAMd,EAAQyH,cAAgB0B,GAAeX,EAE7C,MAAMY,EAAMZ,EAAUjH,SAAS0E,EAAAA,IAAWmB,SAC1CoB,EAAUjH,SAAS0E,EAAAA,IAAWmB,SAAW,IAAI7G,KACzC6I,KAAO7I,GAGP8I,EAAa9H,SAAW,IAAIiH,EAAUjH,UACtC8H,EAAa9H,SAAS0E,EAAAA,IAAa,IAAIuC,EAAUjH,SAAS0E,EAAAA,KAG1DjF,QAAQC,KAAMoI,EAAa9H,SAAS0E,EAAAA,IAAU,EAGlD,MAAMqD,GAAiBC,EAAAA,EAAAA,GAAQf,GACzBa,EAAevI,EAAAA,EAAMwI,GAE3BxI,EAAAA,EAAMd,EAAQyH,aAAa,GAAG0B,GAAeE,CAEjD,MACI3J,EAAAA,GAAOK,GAAOX,EAAKgB,MAGvBqB,EAAAA,EAAAA,IAAc1B,EAAKa,IACnBe,EAAAA,EAAAA,IAAc5B,EAAKgJ,EACvB,C,kCC1IA,SACIS,IAAMC,GACEA,GAAK,EACEA,GACHA,E,oECAD,SAAS3J,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAK2J,EAAAA,IACb,MAAMxJ,GAAUI,EAAAA,EAAAA,IAASP,EAAwB,EAAnBX,EAAKuK,KAAKnJ,QAExC,IAAI,IAAIb,EAAI,EAAGA,EAAIP,EAAKuK,KAAKnJ,SAAUb,GACnCe,EAAAA,EAAAA,IAAa,EAAEf,EAAEO,EAASd,EAAOuK,KAAKhK,GAAIK,IAC1CU,EAAAA,EAAAA,IAAa,EAAEf,EAAE,EAAEO,EAASd,EAAKwK,OAAOjK,GAAIK,EAEpD,C,0DCVO,SAAS6J,EAAczK,EAAcgF,IAExC0F,EAAAA,EAAAA,IAAiB1F,GAAG2F,EAAAA,EAAAA,IAAa3K,KAEjCQ,EAAAA,EAAAA,IAAOwE,EACX,C,0DCLA,QAAejB,OAAOC,OAAO4G,EAAAA,GACzB,CACI1G,UAAWoB,EAAAA,GACXC,SAAW,OACX,CAACC,EAAAA,IAAU,W,0DCJJ,SAASzF,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrBc,GAAaZ,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAIO,EAAI,EAAGA,EAAIJ,EAAYI,GAAG,GAC9BE,EAAAA,EAAAA,IAAM,GAAIF,EAAEO,EAAS,KAAMP,EAAE,EAAEO,EAAS,OAE5CT,EAAAA,EAAAA,IAAM,IACV,C,8ECTe,SAASK,EAAQC,EAAaX,EAAWY,GAEpD,IAAIqE,EAAK4F,EAAAA,GAAa7K,EAAKiF,GAAG0D,YAAYC,OAC1C,QAAwBjH,IAAPsD,EAEb,MADArD,QAAQC,KAAK,KAAM7B,EAAKiF,GAAG0D,YAAYC,OACjC,IAAI9G,MAAM,mBAEpBxB,EAAAA,GAAOK,GAAOsE,GAEd5C,EAAAA,EAAAA,IAAQ1B,EAAKmK,EAAAA,IACb,MAAMhK,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAE9BW,EAAAA,EAAAA,IAAaR,EAAWd,EAAK+K,OAAQnK,IACrCU,EAAAA,EAAAA,IAAaR,EAAQ,EAAGd,EAAKuB,MAAQX,IAErC2B,EAAAA,EAAAA,IAAc5B,GAAKc,EAAAA,EAAAA,IAAWX,GAClC,C,kCCrBe,MAAMkK,G,8ECKrB,QAAejH,OAAOC,OAAOiH,EAAAA,GACzB,CACI/G,UAAW0G,EAAAA,KAEfrG,EAAAA,EAAAA,GAAUC,EAAAA,GAAa0G,EAAAA,I,wFCFZ,SAASxK,EAAQC,EAAaX,EAAWY,GAEpD,IAAIuK,EAAUnL,EAAKmL,aACHxJ,IAAZwJ,IACAA,EAAU,CAACnL,EAAK+K,SAEpB,MAAM5K,EAAagL,EAAQ/J,OAAS,EAC9BN,GAAUI,EAAAA,EAAAA,IAASP,EAAKR,IAE9BmB,EAAAA,EAAAA,IAAaR,EAASd,EAAKuB,MAAOX,GAClC,IAAIqH,GAAQxG,EAAAA,EAAAA,IAAWX,GAEnBsK,EAAc,KAElB,MAAM7C,EAAavI,EAAKuI,YAAYxG,QACjBJ,IAAf4G,IACA6C,EAAcxK,EAAQqB,cAAcsG,IAEP,OAAhB6C,GAAwBA,IAAgBnD,GACrDrG,QAAQC,KAAK,qBAEG,OAAhBuJ,IACAA,EAAcnD,EACVA,IAAUtF,EAAAA,KACVyI,EAAcxI,EAAAA,MAItBL,EAAAA,EAAAA,IAAc5B,EAAKyK,GAEnB,IAAI,IAAI7K,EAAI,EAAGA,EAAIJ,IAAcI,GAE7Be,EAAAA,EAAAA,IAAaR,EAAQP,EAAG4K,EAAQ5K,EAAE,GAAIK,GACtCA,EAAQqB,cAAckJ,EAAQ5K,EAAE,GAAGwB,IAAMqJ,EAI7C,IAAI5J,EAAO6J,EAAAA,GACX,GAAqB,UAAjBzK,EAAQY,KAAkB,CAC1BA,EAAO8J,EAAAA,GAEPhL,EAAAA,GAAOK,GAAOC,EAAQyH,aAEtB,MAAMkD,EAAWjL,EAAAA,GAAOQ,EAAQ,GAC1B0K,EAAW,CAAE,CAACzD,EAAAA,IAASqD,GAE7B1J,EAAAA,GAAMd,EAAQyH,cAAgBkD,GAAYC,EAC1C9J,EAAAA,GAAMd,EAAQyH,aAAa,GAAGkD,GAAYC,CAE9C,MAAaL,EAAQ,GAAGpJ,MAAMnB,EAAQqB,gBAClCT,EAAOiK,EAAAA,KAEXpJ,EAAAA,EAAAA,IAAQ1B,EAAKa,EACjB,C,0HCvDO,MAAMkK,EAAqB,IAAIC,EAAAA,GAAW,GAE1C,IAAIzI,EAIJ,SAASnD,EAAOoD,GA2BvB,IAAoBC,EAHnB,OAGmBA,EAzBLD,EAAIC,SA2BfF,EAAU,iBAAiBE,MAC3BF,GAAU,gCAGNwI,EAAOE,EAAAA,IAAa,EACpBF,EAAOG,EAAAA,IAAY3I,EAAO9B,OA9B9BZ,EAAO,GAGP0C,GAAU,+BAiBNA,CACR,CA4BO,SAASqE,EAAcuE,GAC1BC,EAAAA,GAAQD,EAAMF,EAAAA,IAAaF,EAAOE,EAAAA,IAClCG,EAAAA,GAAQD,EAAMD,EAAAA,IAAa3I,EAAQ9B,OAASsK,EAAOG,EAAAA,GACvD,CAIA,IAAIG,EAAS,OACTC,GAAoB,EAGxB,MAAMC,EAAsB,CACxB,GACAF,EACAA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,EACRA,GAAQA,GAGL,SAAS3F,IAEZnD,GAAU,OAGJwI,EAAOE,EAAAA,IACTF,EAAOG,EAAAA,IAAY3I,EAAO9B,OAE1B8B,GAAUgJ,EAASD,EAE3B,CACO,SAAS7F,MACV6F,CACN,CAEO,SAAS3F,MACV2F,CACN,CAGO,SAAS5L,EAAM8L,GAClBjJ,GAAUiJ,CACd,CACO,SAAS3L,EAAOR,GACHuH,EAAc,EAAEvH,EAAOwH,EAAAA,IACvC4E,EAAAA,IAAO5K,EAAAA,EAAAA,IAAKxB,IAAQA,GACJuH,EAAc,EAAEvH,EAAO6H,EAAAA,GAC3C,CAOO,SAASpH,KAASU,GAErB+B,GAAU/B,EAAK,GAEf,IAAI,IAAIZ,EAAI,EAAGA,EAAIY,EAAKC,OAAQb,GAAG,EAAG,CAElC,MAAMP,EAAOmB,EAAKZ,GAEFgH,EAAc,EAAEvH,EAAOwH,EAAAA,IACvC4E,EAAAA,IAAO5K,EAAAA,EAAAA,IAAKxB,IAAQA,GACJuH,EAAc,EAAEvH,EAAO6H,EAAAA,IAEvC3E,GAAU/B,EAAKZ,EAAE,EACrB,CACJ,C,0DCtIe,SAASR,EAAOC,GAE3B,MAAMc,GAAUZ,EAAAA,EAAAA,IAAWF,IAE3BS,EAAAA,EAAAA,IAAM,SAAUK,EAAS,KAAMA,EAAQ,EAAG,IAC9C,C,0DCLe,SAASf,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,WAEN,MAAMS,GAAUZ,EAAAA,EAAAA,IAAWF,GACrBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAIO,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BC,EAAAA,EAAAA,IAAOD,EAAIO,IAAUT,EAAAA,EAAAA,IAAM,OAG/BA,EAAAA,EAAAA,IAAM,QAEN,MAAMkB,EAAQjB,EAAAA,GAAON,GAER,OAAVuB,GACClB,EAAAA,EAAAA,IAAM,wBAENA,EAAAA,EAAAA,IAAM,qBAAqBkB,MACnC,C,0DCnBe,SAASxB,EAAOC,GAE3B,IAOIO,EAPAO,GAAaZ,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAOzB,KAJAS,EAAAA,EAAAA,IAAM,MAAOK,IAAW,IAAKA,IAAW,KAIpCP,EAAI,EAAGA,EAAIJ,EAAa,EAAGI,GAAK,GAChCE,EAAAA,EAAAA,IAAM,WAAYK,IAAW,KAAMA,IAAW,KAI9CP,IAAMJ,EAAa,IACnBM,EAAAA,EAAAA,IAAM,SAAUK,EAAS,IACjC,C,kHCiBO,SAASuL,EAAOC,EAAclJ,GAEjC,MAAMmJ,EAAS,IAAIC,GAAGC,OAAOH,EAAMlJ,EAAU,QAMhD,MAAO,CACAsJ,MAHUC,EAHFH,GAAGI,SAASC,WAAWN,IAO/BnJ,WAER,CAKO,SAASuJ,EAAYxJ,IAExB2J,EAAAA,EAAAA,MAEA,MAAM/K,GAAKgL,EAAAA,EAAAA,MAIX,OAHA7D,EAAAA,EAAAA,GAAKnH,EAAIoB,EAAIlD,KAAM,IAAI+M,IACT7D,EAAAA,EAAAA,IAAsBpH,EAAIoB,EAAIlD,MAErCgN,EAAAA,EAUX,CAEO,MAAMD,EACTrE,WAAAA,CAAYnH,EAA0B,IAAK0L,EAAkCC,EAAAA,GACzE9J,KAAK7B,KAAOA,EACZ6B,KAAKpB,cAAgB,IAAIiL,EAC7B,CAEA9E,gBAAAA,CAAiB5G,EAA0B,KACvC,OAAO,IAAIwL,EAAQxL,EAAM6B,KAAKpB,cAClC,CACAmL,kBAAAA,CAAmB5L,GAEf,MAAM6L,EAAM,IAAIL,EAAQ,QAAS3J,KAAKpB,eAItC,OAFAoL,EAAIhF,aAAe7G,EAEZ6L,CACX,CAEApL,cACAoG,aAAuB,EACvB7G,K,0DC3FW,SAASzB,EAAOC,IAG3BK,EAAAA,EAAAA,IAAM,GAAGC,EAAAA,GAAON,KACpB,C,0DCJe,SAASD,EAAOC,IAE3BS,EAAAA,EAAAA,IAAM,MAAMP,EAAAA,EAAAA,IAAWF,GAAO,IAClC,C,gDCJe,MAAMsN,UAAqBtC,EAAAA,G,4GCM3B,SAAStK,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAK4M,EAAAA,IACb,MAAMzM,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAE9BW,EAAAA,EAAAA,IAAaR,EAASd,EAAKwN,QAAU5M,GAErC,IAAIqE,EAAK4F,EAAAA,GAAa7K,EAAKiF,GAAG0D,YAAYC,OAE1C,QAAwBjH,IAAPsD,EAEb,MADArD,QAAQC,KAAK,KAAM7B,EAAKiF,GAAG0D,YAAYC,OACjC,IAAI9G,MAAM,mBAKpB,GAFAxB,EAAAA,GAAOK,GAAOsE,EAEH,QAAPA,EAEA,YADA1C,EAAAA,EAAAA,IAAc5B,EAAK8M,EAAAA,IAIvB,IAAIjM,EAAOkM,EAAAA,GACPC,EAASjM,EAAAA,GAAMD,EAAAA,EAAAA,IAAWX,IAAUmE,GAKxC,QAHetD,IAAXgM,IACAnM,EAAOmM,EAAOvL,EAAAA,OAEDZ,IAASkM,EAAAA,GAEtB,MADA9L,QAAQC,KAAKH,EAAAA,GAAMD,EAAAA,EAAAA,IAAWX,IAAUyE,UAClC,IAAIzD,MAAM,GAAGmD,KAAMvD,EAAAA,GAAMD,EAAAA,EAAAA,IAAWX,IAAUyE,8BAGxDhD,EAAAA,EAAAA,IAAc5B,EAAKa,EACvB,C,gDCvCe,MAAMoM,UAAuBN,EAAAA,G,oECE7B,SAAS5M,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKkN,EAAAA,IACb,MAAM/M,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAC9BW,EAAAA,EAAAA,IAAaR,EAASd,EAAK8N,IAAKlN,EAEpC,C,sHCAA,QAAemD,OAAOC,OAAO+J,EAAAA,GACzB,CACI7J,UAAWoB,EAAAA,GACXC,SAAW,MACX,CAACC,EAAAA,IAAU,SACXrD,UAAUkC,EAAAA,EAAAA,GAAeC,EAAAA,IAAUtE,IAE/B,MAAM0F,GAAQxF,EAAAA,EAAAA,IAAWF,GAAQ,EAC3B2F,GAAYlE,EAAAA,EAAAA,IAAWiE,GAG7B,GAAIC,IAAe/C,EAAAA,GAEf,YADApC,EAAAA,EAAAA,IAAOkF,GAGX,GAAIC,IAAehD,EAAAA,GAEf,YADAnC,EAAAA,EAAAA,KAAQqC,EAAAA,EAAAA,IAAW6C,IAGvB,GAAIC,IAAeE,EAAAA,GAEf,YADApF,EAAAA,EAAAA,IAAM,qBAAsBiF,EAAO,MAKvC,GAAIC,IAAeR,EAAAA,GAQf,YAFA1E,EAAAA,EAAAA,IAAM,UAAWiF,EAAO,KAK5B,MAAMM,EAAQtE,EAAAA,GAAMiE,GACpB,QAA4BhE,IAAVqE,QAAyCrE,IAAlBqE,EAAMC,QAC3C,MAAM,IAAInE,MAAM,GAAGkE,GAAOT,gCAE9BS,EAAMC,QAASC,EAAAA,IAAYlG,EAAM0F,EAAM,K,wFCrCpC,SAAShF,EAAQC,EAAaX,EAAWY,GAEpD,IAAIwK,EAAc,EACd7J,EAAQvB,EAAK+B,GAEjB,GAAc,SAAVR,EACAA,EAAQ,YACP,GAAGA,KAAS4L,EAAAA,EAAW,CACxB/B,EAAc+B,EAAAA,EAAS5L,GAEvB,MAAMyM,EAAMtM,EAAAA,GAAM0J,GAAa5F,EAAAA,SACnB7D,IAARqM,IACAzM,EAAQyM,EAEhB,MAAWzM,KAASX,EAAQqB,gBACxBmJ,EAAcxK,EAAQqB,cAAcV,KAaxCc,EAAAA,EAAAA,IAAQ1B,EAAKsN,EAAAA,KACb1L,EAAAA,EAAAA,IAAc5B,EAAKyK,GAEnB9K,EAAAA,GAAOK,GAAOY,CAClB,C,0DC1Ce,SAASxB,EAAOC,IAC3BS,EAAAA,EAAAA,IAAM,+BAA+BP,EAAAA,EAAAA,IAAWF,GAAO,IAC3D,C,wFCCe,SAASU,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKuN,EAAAA,IACb,MAAMpN,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAE9BW,EAAAA,EAAAA,IAAaR,EAASd,EAAKuB,MAAOX,GAElC,MAAMuN,GAAW1M,EAAAA,EAAAA,IAAWX,IAE5ByB,EAAAA,EAAAA,IAAc5B,EAAKe,EAAAA,GAAMyM,GAAUnO,EAAKiB,QAAQ8G,EAAAA,KAAW,GAG3D,IAAIxG,EAAQvB,EAAKiB,KACH,cAAVM,IACAA,EAAQ,eAEZjB,EAAAA,GAAOK,GAAOY,CAClB,C,0ICXA,QAAewC,OAAOC,OAAOoK,EAAAA,GACzB,CACIlK,UAAWmB,EAAAA,GAEXsB,SAAStC,EAAAA,EAAAA,GAAeqC,EAAAA,IAAS,CAAC1G,EAAMqO,MACpC5N,EAAAA,EAAAA,IAAM,kBAAmB4N,EAAK,IAAI,IAEtCC,QAAS,CACLnM,UAAUkC,EAAAA,EAAAA,GAAeoB,EAAAA,IAAYzF,KACjCS,EAAAA,EAAAA,IAAM,aAAaP,EAAAA,EAAAA,IAAWF,GAAQ,EAAG,IAAI,OAIzD0E,EAAAA,EAAAA,GAAa,CAAC,KAAM,IAAK,IAAK,IAAK,KAAM6J,EAAAA,GACzB,CACI1J,cAAeC,EAAAA,MAGnCJ,EAAAA,EAAAA,GAAa,CAAC,MAAO6J,EAAAA,GACjB,CACI1J,cAAeC,EAAAA,GACfC,WAAe,CAACyJ,EAAOxJ,EAAGyJ,EAAKvJ,KACpBzE,EAAAA,EAAAA,IAAM,uBAAwBuE,EAAG,KAAME,EAAG,QAI7DR,EAAAA,EAAAA,GAAa,CAAC,KAAM6J,EAAAA,GAChB,CACI1J,cAAeC,EAAAA,GACfC,WAAe,CAACyJ,EAAOxJ,EAAGyJ,EAAKvJ,MAC3BzE,EAAAA,EAAAA,IAAM,kBAAmBuE,EAAG,KAAME,EAAG,IAAI,KAIrDwJ,EAAAA,EAAAA,GAAY,CAAC,OAAYjJ,EAAAA,KACzBlB,EAAAA,EAAAA,GAAYC,EAAAA,GAAa0G,EAAAA,I,0DC5Cd,SAASnL,EAAOC,GAE3B,MAAMgB,EAAOV,EAAAA,GAAON,GACdc,GAAUZ,EAAAA,EAAAA,IAAWF,IAE3BS,EAAAA,EAAAA,IAAM,YAAYO,KAASF,EAAS,KAAMA,EAAQ,EAAG,IACzD,C,oECLe,SAASJ,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKgO,EAAAA,IACb,MAAMxO,EAAaH,EAAK4O,MAAMxN,OACxBN,GAAaI,EAAAA,EAAAA,IAASP,EAAKR,GAEjC,IAAI,IAAII,EAAI,EAAGA,EAAIJ,IAAcI,GAC7Be,EAAAA,EAAAA,IAAaf,EAAIO,EAASd,EAAK4O,MAAMrO,GAAIK,GAE7CN,EAAAA,GAAOK,GAAOX,EAAK6O,MACvB,C,0DCXe,SAAS9O,EAAOC,GAE3B,MAAM8L,EAAOxL,EAAAA,GAAON,GAEd8O,GAAO5O,EAAAA,EAAAA,IAAWF,GAClBC,EAAO6O,EAAK,GAElBrO,EAAAA,EAAAA,IAAM,WAAWqL,QAAWgD,EAAM,KAAM7O,EAAM,IAClD,C,8ECNe,SAASS,EAAQC,EAAaX,EAAWY,GAEpD,IAAIT,EAAa,OACCwB,IAAd3B,EAAKwB,OACLrB,EAAa,IAEjBkC,EAAAA,EAAAA,IAAQ1B,EAAKoO,EAAAA,IACb,MAAMjO,GAAUI,EAAAA,EAAAA,IAASP,EAAKR,IAE9B+I,EAAAA,EAAAA,GAAKpI,EAASd,EAAKC,KAAMW,IACXuI,EAAAA,EAAAA,IAAsBrI,EAASd,EAAKC,MAE/B,IAAfE,IACAmB,EAAAA,EAAAA,IAAaR,EAAQ,EAAGd,EAAKwB,KAAMZ,GAEvCN,EAAAA,GAAOK,GAAOX,EAAKgB,IACvB,C,gDCnBO,SAASqD,EACgB2K,EACAC,GAC5B,MAAMC,EAAInL,OAAOoL,OAAO,MAKxB,OAHAD,EAAE9M,EAAAA,IAAe4M,EACjBE,EAAEhJ,EAAAA,IAAe+I,EAEVC,CACX,C,wFCLe,SAASxO,EAAQC,EAAaX,EAAWY,GAEpD,MAAMmK,EAAS/K,EAAK+K,OAAOhJ,GAI3B,GAHAnB,EAAQqB,cAAc8I,GAAU,EAGI,SAAhC/K,EAAKoP,KAAKzG,YAAYC,OAA0C,UAAtB5I,EAAKoP,KAAKrO,KAAKgB,GAAiB,EAE1EM,EAAAA,EAAAA,IAAQ1B,EAAK0O,EAAAA,IACb,MAAMvO,GAAUI,EAAAA,EAAAA,IAASP,EAAK,GAS9B,OAPAW,EAAAA,EAAAA,IAAaR,EAAWd,EAAKoP,KAAMxO,IAEnCsI,EAAAA,EAAAA,GAAKpI,EAAQ,EAAGd,EAAKC,KAAMW,IACbuI,EAAAA,EAAAA,IAAsBrI,EAAQ,EAAGd,EAAKC,WAEpDK,EAAAA,GAAOK,GAAOoK,EAGlB,CAEAnK,EAAQqB,cAAcjC,EAAKuB,OAASqB,EAAAA,GAGpC,MAAMzB,EAAOnB,EAAKoP,KAAKjO,MAEvBkB,EAAAA,EAAAA,IAAQ1B,EAAK2O,EAAAA,IACb,MAAMnP,EAAagB,EAAKC,OAAS,EAC3BN,GAAaI,EAAAA,EAAAA,IAASP,EAAKR,IAEjC+I,EAAAA,EAAAA,GAAKpI,EAASd,EAAKC,KAAMW,IACXuI,EAAAA,EAAAA,IAAsBrI,EAASd,EAAKC,MAElD,IAAI,IAAIM,EAAI,EAAGA,EAAIJ,IAAeI,GAC9Be,EAAAA,EAAAA,IAAaf,EAAEO,EAASK,EAAKZ,EAAE,GAAIK,GAEvCN,EAAAA,GAAOK,GAAOoK,CAClB,C,8ECtCe,SAASrK,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAK4O,EAAAA,KACbhN,EAAAA,EAAAA,IAAc5B,EAAKwE,EAAAA,IAEnB,MAAMhF,EAAaH,EAAKwK,OAAOpJ,OACzBN,GAAaI,EAAAA,EAAAA,IAASP,EAAKR,GAEjC,IAAI,IAAII,EAAI,EAAGA,EAAIJ,IAAcI,EAC7BqB,QAAQC,KAAM7B,EAAKwK,OAAOjK,GAAGoI,YAAYC,QACzCtH,EAAAA,EAAAA,IAAaf,EAAIO,EAASd,EAAKwK,OAAOjK,GAAIK,EAElD,C,0DCde,SAASb,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrBc,GAAaZ,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAIO,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BC,EAAAA,EAAAA,IAAOD,EAAIO,IACXT,EAAAA,EAAAA,IAAM,OAGVA,EAAAA,EAAAA,IAAM,IACV,C,wFCRA,MAAMmP,EAAU,CACZ,KAAM,KACN,KAAM,KACN,IAAK,IACL,IAAK,IACL,KAAM,KACN,KAAM,MAKH,SAASC,EAAmBzP,EAAcgF,EAAWC,EAAYC,EAAWwK,GAE/E,IAAIC,EAAM1K,EAENyK,KACC1K,EAAEE,GAAK,CAACA,EAAEF,GACX2K,EAAMH,EAAQG,IAGC,MAAXA,EAAI,IAAyB,MAAXA,EAAI,KACvBlO,EAAAA,EAAAA,IAAWuD,MAAOvD,EAAAA,EAAAA,IAAWyD,KAC5ByK,GAAO,MAEfC,EAAAA,EAAAA,GAAkB5P,EAAMgF,EAAG2K,EAAKzK,EACpC,CAQO,SAASX,EAAYsL,EACAC,GACA,cACIjL,EAAkBkL,EAAAA,GAAS,aAC3BC,EAAkBD,EAAAA,GAAS,WAC3BhL,EAAkB0K,GACD,CAAC,GAE9C,IAAIQ,EAA4D,CAAC,EAEjE,IAAI,MAAMhL,KAAM4K,EAIZI,EAAO,KAFMC,EAAAA,GAAUjL,SAECZ,EAAAA,EAAAA,GAAeyL,GAAa,CAAC9P,EAAcmQ,EAAcC,EAAWV,KACxF3K,EAAW/E,EAAMgQ,EAAaG,GAAOlL,EAAIJ,EAAcuL,GAAIV,EAAAA,IAInE,OAAOO,CACX,C,6JCxDO,SAASI,EAASD,GACrB,OAAOE,EAAAA,EACX,CAEO,SAASpF,EAAckF,GAC1B,OAAIxN,EAAAA,IAAcwN,GAAKA,GAAKvK,EAAAA,GACjB4H,EAAAA,GACJC,EAAAA,EACX,CAEO,SAASa,EAAe6B,GAC3B,OAAIxN,EAAAA,IAAcwN,GAAKA,GAAKvK,EAAAA,GACjBA,EAAAA,GACJ6H,EAAAA,EACX,CAEO,SAAS6C,EAAgBH,GAC5B,OAAIA,IAAMzN,EAAAA,GACCA,EAAAA,GACJ+K,EAAAA,EACX,CAQO,SAAS8C,EAAWJ,GACvB,OAAIA,IAAMxN,EAAAA,IAAcwN,IAAMzN,EAAAA,GACnBC,EAAAA,GACJ8K,EAAAA,EACX,CACO,SAAS+C,EAAYL,GACxB,OAAIA,IAAMxN,EAAAA,GACCA,EAAAA,GACJ8K,EAAAA,EACX,CAEO,SAASjJ,EAAa2L,GACzB,OAAIA,IAAMjL,EAAAA,GACCsI,EAAAA,GACJC,EAAAA,EACX,CACO,SAAS/I,EAAYyL,GACxB,OAAIA,IAAMjL,EAAAA,GACCA,EAAAA,GACJuI,EAAAA,EACX,CACO,SAAS9I,EAAWwL,GACvB,OAAIA,IAAMxN,EAAAA,IAAcwN,IAAMzN,EAAAA,GACnBwC,EAAAA,GACJuI,EAAAA,EACX,CAEO,SAASjI,EAAUgB,GAAa,OAAOZ,EAAAA,EAAc,CACrD,SAASvB,EAAUmC,GAAa,OAAO7D,EAAAA,EAAc,CACrD,SAAS8N,EAAUjK,GAAa,OAAO9D,EAAAA,EAAc,CACrD,SAAS+D,EAAUD,GAAa,OAAOtB,EAAAA,EAAc,C,8EC1D7C,SAASpF,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,QAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrBc,GAAaZ,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAIO,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BC,EAAAA,EAAAA,IAAOD,EAAEO,IACTT,EAAAA,EAAAA,IAAM,OAGV,IAAIqC,EAAiB5B,GACjBW,EAAAA,EAAAA,IAAWX,KAAa6B,EAAAA,KAAgBlB,EAAAA,EAAAA,IAAWzB,KAAU4C,EAAAA,KAC7DF,GAASG,EAAAA,EAAAA,IAAW/B,KAExBN,EAAAA,EAAAA,IAAOkC,EACX,C,wFChBe,SAAS3C,EAAOC,GAE3B,IAAIiF,EAAK0L,EAAAA,GAAgBrQ,EAAAA,GAAON,IAEhC,MAAMc,GAAUZ,EAAAA,EAAAA,IAAWF,GAE3B,IAAIwB,EAAOkM,EAAAA,GACPC,EAASjM,EAAAA,GAAMD,EAAAA,EAAAA,IAAWX,IAAUmE,GAMxC,QAJetD,IAAXgM,IACAnM,EAAOmM,EAAOvL,EAAAA,KAAaX,EAAAA,EAAAA,IAAWX,EAAQ,KAGjCU,IAASkM,EAAAA,GACtB,MAAM,IAAI5L,MAAM,GAAGJ,EAAAA,GAAMD,EAAAA,EAAAA,IAAWX,IAAUyE,YAAYN,KAAMvD,EAAAA,GAAMD,EAAAA,EAAAA,IAAWX,EAAQ,IAAIyE,6BAcjGoI,EAAOzH,EAAAA,IAAYlG,EAAMc,EAASA,EAAQ,EAC9C,C,wbCnCO,MAAMmN,EAAa,EAEb2C,EAAmB,EACnBC,EAAkB,EAClBvG,EAAkB,EAElBwG,EAAiB,EACjBC,EAAe,EACflD,EAAgB,GAChBc,EAAiB,GACjBqC,EAAuB,GACvBC,EAAmB,GACnB9K,EAAgB,GAChB+K,EAAiB,GAEjB3D,EAAe,EACf4D,EAAa,EACbC,EAAc,EACdC,EAAa,EACbnD,EAAc,GACdoD,EAAkB,GAClBxG,EAAoB,GACpBW,EAAqB,GACrBH,EAAqB,GACrBD,EAAgB,GAEhBtF,EAAc,GACdwL,EAAc,GACdC,EAAgB,GAChBjC,EAAkB,GAClBkC,EAAuB,GACvBC,EAAe,GACfC,EAAe,GAEf/H,EAAc,GACdC,EAAmB,GACnB+H,EAAmB,GACnBtP,EAAe,GACfuP,EAAuB,GAEvBC,EAAiB,GACjBC,EAAoB,GACpBhD,EAA0B,GAC1BiD,EAAmB,GACnBC,EAAmB,GACnB3C,EAAqB,GACrBD,EAAe,GAEf6C,EAAe,GACfC,EAAW,GACXC,EAAc,GACdC,EAAc,GAE3B,I,8JCvCA,QAAetO,OAAOC,OAAOsO,EAAAA,GACzB,CACIpO,UAAW6J,EAAAA,GACXpH,SAAWtC,EAAAA,EAAAA,GAAeqC,EAAAA,IAAS,CAACD,EAAG4H,MACnC7N,EAAAA,EAAAA,IAAO6N,IAAMhO,EAAAA,EAAAA,IAAM,cAAc,IAErC4F,SAAS5B,EAAAA,EAAAA,GAAeC,EAAAA,IAAS,CAACtE,EAAMmQ,MACpC1F,EAAAA,EAAAA,GAAczK,EAAMmQ,EAAK,IAE7B7B,QAAS,CACLnM,UAAUkC,EAAAA,EAAAA,GAAeC,EAAAA,IAAUtE,KAC/BS,EAAAA,EAAAA,IAAM,aAAaP,EAAAA,EAAAA,IAAWF,GAAO,IAAI,KAGjDuS,SAAU,CACNpQ,UAAUkC,EAAAA,EAAAA,GAAeC,EAAAA,IAAUtE,KAC/ByK,EAAAA,EAAAA,GAAczK,GAAME,EAAAA,EAAAA,IAAWF,GAAAA,OAI3C0E,EAAAA,EAAAA,GAAa,CAEL,KAAM,IAAK,IACX,IAAK,IAAK,IAAK,KAAM,MAEzB8L,EAAAA,GACA,CACI3L,cAAe2N,EAAAA,MAGvB9N,EAAAA,EAAAA,GAAa,CAAC,KAAM+L,EAAAA,GAChB,CACI1L,WAAY,CAAC/E,EAAMgF,EAAGyB,EAAGvB,MAEjBzD,EAAAA,EAAAA,IAAWzB,KAAU6F,EAAAA,KACrBb,GAAIY,EAAAA,EAAAA,IAAWZ,GACfE,GAAIU,EAAAA,EAAAA,IAAWV,KAGnB0K,EAAAA,EAAAA,GAAkB5P,EAAMgF,EAAG,IAAKE,EAAE,KAI9CR,EAAAA,EAAAA,GAAa,CAAC,KAAM6J,EAAAA,GAChB,CACIyB,aAAelL,EAAAA,GACfD,cAAeC,EAAAA,MAGvBJ,EAAAA,EAAAA,GAAa,CAAC,MAAO8L,EAAAA,GACjB,CACI3L,cAAiB2N,EAAAA,GACjBzN,WAAY,CAAC/E,EAAcmQ,EAAclL,EAAYS,MACjDjF,EAAAA,EAAAA,IAAM,qBAAsB0P,EAAM,KAAMzK,EAAO,IAAI,KAI/DhB,EAAAA,EAAAA,GAAa,CAAC,KAAM8L,EAAAA,GAChB,CACI3L,cAAe2N,EAAAA,GACfzN,WAAY,CAAC/E,EAAcmQ,EAAclL,EAAYS,MAEjDjF,EAAAA,EAAAA,IAAM,gBAAiB0P,EAAM,KAAMzK,EAAO,IAAI,KAI1DgJ,EAAAA,EAAAA,GAAY,CAAC,OAAQpK,EAAAA,GACjB,CACIS,WAAY,CAAC/E,EAAMiF,EAAID,MAEfvD,EAAAA,EAAAA,IAAWzB,KAAU6F,EAAAA,KACrBb,GAAIY,EAAAA,EAAAA,IAAWZ,KAEnByN,EAAAA,EAAAA,GAAiBzS,EAAM,IAAKgF,EAAE,KAI1C0J,EAAAA,EAAAA,GAAa,CAAC,KAAMpK,EAAAA,KACpBC,EAAAA,EAAAA,GAAYC,EAAAA,GAAa0G,EAAAA,I,0DCzFd,SAASnL,EAAOC,GAE3B,MAAMc,GAAUZ,EAAAA,EAAAA,IAAWF,IAC3BS,EAAAA,EAAAA,IAAM,IAAKK,EAAS,IAAKA,EAAQ,EAAG,MAAOA,EAAQ,EAAG,IAC1D,C,0DCJe,SAASf,EAAOC,IAE3BQ,EAAAA,EAAAA,KAAQN,EAAAA,EAAAA,IAAWF,GACvB,C,kCCNO,MAAM0S,UAAoB5Q,MAEpB6Q,iBAEThK,WAAAA,CAAYgK,GACRC,QACAD,EAAiBE,UAAYxP,KAC7BA,KAAKsP,iBAAmBA,CAC5B,EAIJ,SACID,c,0DCVW,SAAS3S,EAAOC,IAC3BK,EAAAA,EAAAA,IAAOC,EAAAA,GAAON,GAClB,C,sICHO,MAAM0N,EAA4B,EAC5B4C,EAA4B,EAC5B1N,EAA4B,EAC5BD,EAA4B,EAC5BkD,EAA4B,EAC5B4H,EAA4B,EAC5BtI,EAA4B,EAC5B2N,EAA4B,EAC5BC,EAA4B,EAC5BC,EAA4B,EAC5BC,EAA2B,GAGxC,I,kCCfA,SACIC,UAAYC,IACR,GAAIA,GAAK,MAAQA,GAAK,KAAM,CAExB,IAAIhH,EAAMgH,EAAEC,gBACZ,MAAMC,EAAWlH,EAAI/K,OAAO,EAG5B,MAFqB,MAAlB+K,EAAIkH,IAAuC,MAAlBlH,EAAIkH,KAC5BlH,EAAMA,EAAImH,MAAM,EAAED,EAAS,GAAK,IAAMlH,EAAImH,MAAMD,EAAS,IACtDlH,CACX,CAEA,IAAIA,EAAMgH,EAAEI,WAGZ,OAFMpH,EAAIqH,SAAS,OACfrH,GAAO,MACJA,CAAG,E,0DCXH,SAASpM,EAAOC,GAE3B,MAAMc,GAAaZ,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BS,EAAAA,EAAAA,IAAM,QAASK,EAAS,wBACxBsF,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAEIhG,EAAAA,EAAAA,IAAM,0DAEFF,EAAa,IACbK,EAAAA,EAAAA,IAAQ,EAAEM,GAEd,IAAI,IAAIP,EAAI,EAAGA,EAAIJ,IAAcI,GAC7B8F,EAAAA,EAAAA,OAAQhG,EAAAA,EAAAA,IAAM,UAAUG,EAAAA,EAAAA,IAAOD,EAAIO,GAIC,KAApCV,EAAAA,EAAAA,IAAQU,EAAUX,EAAW,MAC7BkG,EAAAA,EAAAA,OACAhG,EAAAA,EAAAA,IAAM,8BAGdiG,EAAAA,EAAAA,KAEJ,C,gDC3BO,SAAS6D,EAAQsJ,GAEpB,MAAM1R,EAAKL,EAAAA,EAAMN,OAEXsS,EAAM3P,OAAOC,OAAOD,OAAOoL,OAAO,MAAOsE,GAG/C,OAFA/R,EAAAA,EAAMK,GAAM2R,EAEL3R,CACX,C,kGCFe,SAAShC,EAAOC,GAE3B,MAAM2T,GAAQzT,EAAAA,EAAAA,IAAWF,GACnBuB,EAAQjB,EAAAA,GAAON,GAEP,QAAVuB,EAKWG,EAAAA,GAAMD,EAAAA,EAAAA,IAAWkS,IAAQpS,GAEjC2E,EAAAA,IAAalG,EAAM2T,IANtBlB,EAAAA,EAAAA,GAAiBzS,EAAM,KAAK4F,EAAAA,EAAAA,IAAW+N,EAAMhR,EAAAA,IAOrD,C,kGCbe,SAASjC,EAAQC,EAAYX,EAAWY,GAGnD,IAAIwK,EAAckF,EAAAA,GAElB,QAAkB3O,IAAf3B,EAAKuB,MAAqB,CACzB,MAAMT,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAC9BW,EAAAA,EAAAA,IAAaR,EAASd,EAAKuB,MAAOX,GAClCwK,GAAc3J,EAAAA,EAAAA,IAAWX,EAC7B,EAEAuB,EAAAA,EAAAA,IAAQ1B,EAAKmQ,EAAAA,KACbvO,EAAAA,EAAAA,IAAc5B,EAAKyK,GAEnB,MAAMxE,EAAO,KAAOnF,EAAAA,EAAAA,IAAWb,EAAQyH,eAA6BlG,cAC1CR,IAAtBiF,EAAKxE,EAAAA,MACLwE,EAAKxE,EAAAA,IAAe,IAAMgJ,EAClC,C,kCCzBA,SAAiB,C,oECIjB,MAAMwI,EAAa,CACf,IAAO,KACP,GAAO,MAGI,SAASlT,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKyQ,EAAAA,IACb,MAAMjR,EAAaH,EAAKwK,OAAOpJ,OACzBN,GAAaI,EAAAA,EAAAA,IAASP,EAAKR,GAEjC,IAAI,IAAII,EAAI,EAAGA,EAAIJ,IAAcI,GAC7Be,EAAAA,EAAAA,IAAaf,EAAIO,EAASd,EAAKwK,OAAOjK,GAAIK,IAE9C2B,EAAAA,EAAAA,IAAc5B,GAAKc,EAAAA,EAAAA,IAAWX,IAE9BR,EAAAA,GAAOK,GAAOiT,EAAW5T,EAAKiF,GAAG0D,YAAYC,MACjD,C,8ECfe,SAAS7I,EAAOC,GAE3B,MAAM6T,EAAQnS,EAAAA,GAAMpB,EAAAA,GAAON,IAAOuF,UAElClF,EAAAA,EAAAA,IAAM,WAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrBc,GAAaZ,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAIO,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BC,EAAAA,EAAAA,IAAOD,EAAEO,IACTT,EAAAA,EAAAA,IAAM,OAGV,IAAIqC,EAAiB5B,GACjBW,EAAAA,EAAAA,IAAWX,KAAa6B,EAAAA,KAAgBlB,EAAAA,EAAAA,IAAWzB,KAAU4C,EAAAA,KAC7DF,GAASG,EAAAA,EAAAA,IAAW/B,KAExBN,EAAAA,EAAAA,IAAOkC,IAEP2D,EAAAA,EAAAA,MACA,MAAMrF,EAAOV,EAAAA,GAAOQ,EAAQ,IAC5BT,EAAAA,EAAAA,IAAM,OAAOW,SACboF,EAAAA,EAAAA,OAAMC,EAAAA,EAAAA,OACNhG,EAAAA,EAAAA,IAAM,iBAAiBW,OAAUqF,EAAAA,EAAAA,OACjChG,EAAAA,EAAAA,IAAM,2BAA2BwT,KAAS7S,OAAUqF,EAAAA,EAAAA,OACpDhG,EAAAA,EAAAA,IAAM,cACNiG,EAAAA,EAAAA,OAAMD,EAAAA,EAAAA,OAENhG,EAAAA,EAAAA,IAAM,MAENgG,EAAAA,EAAAA,OACAhG,EAAAA,EAAAA,IAAM,OAAOW,mBAAsBA,eACvC,C,0DCpCe,WAAShB,IACpBS,EAAAA,EAAAA,IAAM,WAAWP,EAAAA,EAAAA,IAAWF,GAAO,IACvC,C,sFCAO,SAASqJ,EAAarJ,GAEzB,MAAM4G,EAAO,KAAQ5G,GAAmBmC,SAAS0E,EAAAA,IAE3C/F,GAAaZ,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,IAE3BQ,EAAAA,EAAAA,IAAOM,IACPT,EAAAA,EAAAA,IAAM,KAEN,MAAMyT,EAAe3T,EAAa,EAC5B4T,EAAoBjT,EAAU,EAGpC,IAAIkT,EAAcF,EAClB,IAAI,IAAIvT,EAAI,EAAGA,EAAIuT,IAAgBvT,EAC/B,IAAIiB,EAAAA,EAAAA,IAAMjB,EAAIwT,KAAsBlC,EAAAA,GAAsB,CACtDmC,EAAczT,EACd,KACJ,CAGJ,IAAI0T,EAAUrN,EAAKG,YACnB,MAAMmN,EAAeD,IAAYjN,OAAOC,mBAAqBL,EAAK8C,OAC9DwK,IACAD,EAAUrN,EAAKM,YAEnB,MAAMiN,EAASC,KAAKC,IAAIL,EAAaC,GACrC,IAAI,IAAI1T,EAAI,EAAGA,EAAI4T,IAAU5T,GACzBC,EAAAA,EAAAA,IAAOD,EAAIO,EAAU,IACrBT,EAAAA,EAAAA,IAAM,MAGV,MAAMiU,EAAiC,CAAC,EAClCnN,EAAiC,CAAC,EAExC,IAAIoN,GAAkB,EAClBC,GAAkB,EAEtB,MAAMC,EAAa,IAAIlL,MAAM6K,KAAKM,IAAI9N,EAAKM,WAAaiN,EAAO,IAG/D,GAAGD,EAAc,CACb,MAAMS,EAAa/N,EAAKM,WAClB0N,EAAaZ,EAAcW,EAEjC,GAAIC,EAAU,EAAI,EAEdvU,EAAAA,EAAAA,IAAM,MAENG,EAAAA,EAAAA,IAAOmU,EAAaZ,GAEpB,IAAI,IAAIxT,EAAI,EAAGA,EAAIqU,IAAWrU,GAC1BF,EAAAA,EAAAA,IAAM,OACNG,EAAAA,EAAAA,IAAOD,EAAIoU,EAAaZ,IAG5B1T,EAAAA,EAAAA,IAAM,IACV,CACJ,KAAO,CAEH,MAAMiJ,EAAa1C,EAAK0C,WACxB,IAAI,IAAI/I,EAAI4T,EAAQ5T,EAAIyT,IAAezT,EACnC+T,EAAIhL,EAAW/I,EAAE,IAAOA,EAAIO,EAEhCyT,EAAcJ,IAAWH,CAC7B,CAEA,MAAMvK,EAAW7C,EAAK6C,SAEtB,IAAI,IAAIlJ,EAAIyT,EAAazT,EAAIuT,IAAgBvT,EAAG,CAE5C,MAAM8N,EAAO9N,EAAIO,EACXE,EAAOV,EAAAA,GAAO+N,GACdvC,EAAOrC,EAAUzI,GAEnB8K,GAAO,EACP2I,EAAI3I,EAAMqI,GAAU9F,GAIxBkG,GAAc,GAED,IAATzI,EACAwI,EAAGtT,GAAQqN,GAEXlH,EAAOnG,GAAQqN,EACfmG,GAAkB,GAE1B,CAGA,IAAKD,IAAiBC,EAAkB,CACpC,IAAIjU,EACJ,IAAIA,EAAIkU,EAAIrT,OAAS,EAAGb,GAAK,QACVoB,IAAX8S,EAAIlU,KADsBA,GAIlCkU,EAAIrT,OAASb,EAAE,CACnB,CAGA,IAAI,IAAIA,EAAI,EAAGA,EAAIkU,EAAIrT,SAAUb,EAAG,CAChC,MAAM8N,EAAMoG,EAAIlU,QACJoB,IAAR0M,GACAhO,EAAAA,EAAAA,IAAM,iBAENG,EAAAA,EAAAA,IAAO6N,IACPhO,EAAAA,EAAAA,IAAM,MAEd,CAEA,GAAIkU,EAAc,EACdlU,EAAAA,EAAAA,IAAM,KACN,IAAI,IAAIwU,KAAOP,GACX7T,EAAAA,EAAAA,IAAM,GAAGoU,MAASP,EAAGO,GAAM,MAE/B,GAAIL,EAAkB,EAClBnU,EAAAA,EAAAA,IAAM,GAAGuG,EAAKO,aACd,IAAI,IAAI0N,KAAO1N,GACX1G,EAAAA,EAAAA,IAAM,GAAGoU,MAAS1N,EAAO0N,GAAM,OACnCxU,EAAAA,EAAAA,IAAM,IACV,EAEAA,EAAAA,EAAAA,IAAM,KACV,CAEA,IAAMuG,EAAK8C,QAAU8K,EAAkB,EACnCnU,EAAAA,EAAAA,IAAM,KACN,IAAI,IAAIwU,KAAO1N,GACX1G,EAAAA,EAAAA,IAAM,GAAGoU,MAAS1N,EAAO0N,GAAM,OACnCxU,EAAAA,EAAAA,IAAM,IACV,EAEAA,EAAAA,EAAAA,IAAM,IACV,CAEe,SAASN,EAAOC,GAC1BM,EAAAA,GAAON,GAAmBmC,SAAS+D,EAAAA,IAAalG,EACrD,C,0DC5Ie,SAASU,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKsQ,EAAAA,GAEjB,C,sICRO,MAAM9M,EAAiBJ,OAAOoL,OAAO,MAC/BpB,EAAiBhK,OAAOoL,OAAO,MAC/B9J,EAAmBtB,OAAOoL,OAAO,MACjCvE,EAAkB7G,OAAOoL,OAAO,MAChC7J,EAAYvB,OAAOoL,OAAO,MAC1BlL,EAAWF,OAAOoL,OAAO,MACzB2F,EAAa/Q,OAAOoL,OAAO,MAC3BmD,EAAWvO,OAAOoL,OAAO,MAEzBf,GADarK,OAAOoL,OAAO,MACdpL,OAAOoL,OAAO,OAC3BlE,EAAYlH,OAAOoL,OAAO,MAC1B4F,EAA0BhR,OAAOoL,OAAO,MACxC6F,EAAgBjR,OAAOoL,OAAO,K,gDCV5B,SAASpP,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,WACV,C,iBCFA,SAAS4U,EAASjQ,EAAWE,GAEzB,MAAMgQ,EAAWnR,OAAOoR,0BAA0BjQ,GAC5CkQ,EAAWrR,OAAOqR,QAAQF,GAAUG,QAAQ,EAAEC,OAASA,KAAKtQ,KAElEjB,OAAOwR,iBAAiBvQ,EAAGjB,OAAOyR,YAAYJ,GAClD,C,iBAEA,SACIK,IAAK,SAASC,KAAgBC,GAE1B,MAAMC,UAAYF,GAElB,IAAI,IAAInV,EAAI,EAAGA,EAAIoV,EAAWvU,SAAUb,EACpC0U,EAASW,EAAKD,EAAWpV,IACzB0U,EAASW,EAAIC,UAAWF,EAAWpV,GAAGsV,WAG1C,OAAOD,CACX,E,oQCrBG,MAAMjK,EAAemK,aAIflK,EAAY,EACZC,EAAY,EACZrE,EAAY,EACZK,EAAY,EACZkO,EAAgBvO,EAAWoE,EAC3BoK,EAAgBxO,EAAWqE,EAC3BoK,EAAgBpO,EAAW+D,EAC3BsK,EAAgBrO,EAAWgE,EAE3BsK,EAAsB,IAAIxK,EAAW,OACrCI,EAAsB,IAAIJ,EAAW,OAGrCrL,EAAS,IAAIiJ,MAE1B,IAAI6M,EAAmB,EAEhB,SAASlV,EAASmV,EAAgBjW,GAErC,MAAMkH,EAAS+O,EAASC,EAExBrJ,EAAS3F,EAASiP,GAAuBnW,EACzC,MAAM2B,EAAKkL,EAAS3F,EAASkP,GAA0BJ,EAGvD,OAFAA,GAAoBhW,EAEb2B,CACX,CAEO,SAASgL,IACZ,OAAOqJ,GACX,CAMe,SAAStJ,IACpBxM,EAAOc,OAAS,EAChBgV,EAAmB,EAEnBK,EAAOC,OAAQ,GAEfD,EAAOC,OAAQC,EACnB,CAEO,MAAMC,EAA6B,EAC7BC,EAA6B,EAC7BL,EAA6B,EAC7BD,EAA6B,EAC7BO,EAA6B,EAC7BR,EAA6B,EAEpCK,EAvDY,EAuDEL,EAtDI,KAwDlBG,EAAS,IAAIM,YAAYJ,EAAa,CAACK,cAAeL,IAE/C1J,EAAW,IAAItB,EAAW8K,GAEhC,SAASjV,EAAKxB,GACjB,OAAOiN,EAASjN,EAAOsW,EAAeM,EAC1C,CACO,SAASxW,EAAQiW,GACpB,OAAOpJ,EAASoJ,EAASC,EAAeC,EAC5C,CACO,SAASrW,EAAWmW,GACvB,OAAOpJ,EAASoJ,EAASC,EAAeE,EAC5C,CACO,SAAS/U,EAAWzB,GACvB,OAAOiN,EAASjN,EAAOsW,EAAeQ,EAC1C,CACO,SAASnM,EAAa3K,GACzB,OAAOiN,EAASjN,EAAOsW,EAAeO,EAC1C,CAEO,SAASI,EAAcZ,EAAgB9U,GAC1C,OAAO0L,EAASoJ,EAASC,EAAeE,GAA0BjV,CACtE,CACO,SAASc,EAAQrC,EAAcuB,GAClC,OAAO0L,EAASjN,EAAOsW,EAAeM,GAAmBrV,CAC7D,CACO,SAASgB,EAAcvC,EAAcuB,GACxC0L,EAASjN,EAAOsW,EAAeQ,GAAuBvV,CAC1D,CACO,SAASmJ,EAAgB1K,EAAcuB,GAC1C0L,EAASjN,EAAOsW,EAAeO,GAA8BtV,CACjE,C,kCCvFA,Q,QAA4ByT,E,wFCKb,SAAStU,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKwR,EAAAA,IAEb,MAAMhS,EAAaH,EAAKoB,OAClBN,GAAaI,EAAAA,EAAAA,IAASP,EAAKR,GAE3B+W,EAAMxV,EAAAA,EAAMN,OAElB,IAAI,IAAIb,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,CAEhC,IAAI4W,EAAKnX,EAAKO,GACc,SAAzB4W,EAAGxO,YAAYC,QACduO,EAAKA,EAAG5V,QAEZD,EAAAA,EAAAA,IAAaf,EAAIO,EAASqW,EAAIvW,EAClC,CAGA,MAAMwW,EAAM1V,EAAAA,EAAMN,OAClB,IAAI,IAAIb,EAAI2W,EAAK3W,EAAI6W,IAAO7W,EAAG,CAC3B,MAAMmT,EAAMhS,EAAAA,EAAMnB,GACG,aAAjBmT,EAAInO,gBAGS5D,IADA+R,EAAIvR,SAAS0E,EAAAA,IAAWmB,UAErC0L,EAAIvR,SAASC,EAAAA,MACrB,CACJ,C,oEC/Be,SAAS1B,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKkQ,EAAAA,IACb,MAAM1Q,EAAaH,EAAKqX,KAAKjW,OACvBN,GAAUI,EAAAA,EAAAA,IAASP,EAAKR,GAE9B,IAAI,IAAII,EAAI,EAAGA,EAAIJ,IAAcI,GAC7Be,EAAAA,EAAAA,IAAaf,EAAIO,EAASd,EAAKqX,KAAK9W,GAAIK,EAChD,C,4GCHA,SACI0W,IAAOvE,EAAAA,GACP5G,IAAO8G,EAAAA,GACPsE,MAAOvE,EAAAA,GACPxR,KAAOsR,EAAAA,GACP0E,KAAOrN,EAAAA,EAAAA,GAASsN,EAAc,MAAOnT,EAAAA,KACrC8F,KAAOD,EAAAA,EAAAA,GAASsN,EAAc,MAAOnT,EAAAA,KACrCX,OAAOwG,EAAAA,EAAAA,GAAQ,CACX5E,SAAU,QACVpD,UAAUkC,EAAAA,EAAAA,GAAegM,EAAAA,IAAWlI,IAChC,MAAMrH,GAAWZ,EAAAA,EAAAA,IAAWiI,GACtBuP,GAAWtX,EAAAA,EAAAA,IAAQ+H,IAEzB9H,EAAAA,EAAAA,IAAM,iBACN,IAAI,IAAIE,EAAI,EAAGA,EAAImX,IAAYnX,GAC3BC,EAAAA,EAAAA,IAAOM,EAAUP,IACjBF,EAAAA,EAAAA,IAAM,OAEVA,EAAAA,EAAAA,IAAM,IAAI,OAQtB,SAASoX,EAAczW,EAAc8O,GACjC,MAAM6H,EAAS,KAAK3W,MACpB,MAAO,CACHuE,SAAWvE,EACXmB,UAAWkC,EAAAA,EAAAA,GAAeyL,GAAc3H,IACpC,MAAMwL,GAASzT,EAAAA,EAAAA,IAAWiI,GAAM,EAEhC,OADezG,EAAAA,IAAMD,EAAAA,EAAAA,IAAWkS,IAAQgE,GAC1BxV,SAAS+D,EAAAA,IAAYiC,EAAK,IAGpD,C,kCC7CA,YACIxI,EAAAA,MAAAA,MACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,E,kCCLJ,Q,QAAsCoV,E,gDCAvB,SAAShV,EAAOC,IAC3BK,EAAAA,EAAAA,IAAM,OACV,C,8ECCe,SAASN,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,KAEN,MAAMS,GAAaZ,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAI,IAAIO,EAAIO,EAASP,EAAIJ,EAAaW,IAAWP,EAE7C,IAAIkB,EAAAA,EAAAA,IAAWlB,KAAO4E,EAAAA,GAAtB,CAaA,IAAI3D,EAAAA,EAAAA,IAAKjB,KAAOkR,EAAAA,GAKhB,MAAM,IAAI3P,MAAM,gBAJZtB,EAAAA,EAAAA,IAAOD,EAHX,KAXA,CAEI,MAAM+G,EAAS,EAAE/G,GAGHgH,EAAAA,EAAAA,IAAcD,EAASE,EAAAA,KACrChH,EAAAA,EAAAA,IAAOF,EAAAA,GAAOC,KACAgH,EAAAA,EAAAA,IAAcD,EAASO,EAAAA,GAIzC,EAUJxH,EAAAA,EAAAA,IAAM,IACV,C,oEChCe,SAASK,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKuQ,EAAAA,IACb,MAAMpQ,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAC9BW,EAAAA,EAAAA,IAAaR,EAASd,EAAK4X,KAAMhX,EACrC,C,kHCLe,SAASF,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKqQ,EAAAA,IAEb1Q,EAAAA,GAAOK,GAAO,CAACX,EAAKgB,KAAMhB,EAAK6X,OAEnC,C,4GCFe,SAASnX,EAAQC,EAAaX,EAAWY,GAEpD,IAAIqE,EAAK4F,EAAAA,GAAa7K,EAAKiF,GAAG0D,YAAYC,OAC1C,QAAwBjH,IAAPsD,EAEb,MADArD,QAAQC,KAAK,KAAM7B,EAAKiF,GAAG0D,YAAYC,OACjC,IAAI9G,MAAM,oBAGpBO,EAAAA,EAAAA,IAAQ1B,EAAK0Q,EAAAA,IAEb,MAAMvQ,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAC9BW,EAAAA,EAAAA,IAAaR,EAAWd,EAAK2T,KAAO/S,IACpCU,EAAAA,EAAAA,IAAaR,EAAQ,EAAGd,EAAK8X,MAAOlX,GAEpC,MAAMmX,GAAQtW,EAAAA,EAAAA,IAAWX,GACnBmH,GAAQxG,EAAAA,EAAAA,IAAWX,EAAQ,GAEjC,IAAIU,EAAOkM,EAAAA,GACPC,EAASjM,EAAAA,EAAMqW,GAAO9S,GAM1B,QAJetD,IAAXgM,IACAnM,EAAOmM,EAAOvL,EAAAA,IAAa6F,IAG3BzG,IAASkM,EAAAA,GAA2B,CAOpC,GANAzI,GAAS+S,EAAAA,EAAAA,IAAkB/S,GAE3B0I,EAASjM,EAAAA,EAAMuG,GAAOhD,QACPtD,IAAXgM,IACAnM,EAASmM,EAAOvL,EAAAA,IAAa2V,IAEhBvW,IAASkM,EAAAA,GACtB,MAAM,IAAI5L,MAAM,GAAGJ,EAAAA,EAAMuG,GAAO/D,WAAWqB,YAAYN,KAAMvD,EAAAA,EAAMqW,GAAO7T,WAAWqB,8BAGzF0S,EAAAA,EAAAA,IAAanX,EAASA,EAAQ,EAClC,CAEAR,EAAAA,GAAOK,GAAOsE,GAEd1C,EAAAA,EAAAA,IAAc5B,EAAKa,EACvB,C,gICvCA,SAAS0W,EAAYnN,EAA6BoN,GAC9C,IAAI,IAAItD,KAAOsD,EACJtD,KAAO9J,IACVA,EAAO8J,GAAOsD,EAAItD,GAC9B,CAEe,SAASnU,EAAQC,EAAaX,EAAWY,GAEpD,MAAMwX,GAAkBjO,EAAAA,EAAAA,GAAQ,CAAC,GAE3BkO,GAASlO,EAAAA,EAAAA,GAAQ,CACnB5E,SAAWvF,EAAKgB,KAChBkD,UAAWoB,EAAAA,GACXnD,UAAUkC,EAAAA,EAAAA,IAAe,IAAM+T,IAAkBjQ,KAE7C1H,EAAAA,EAAAA,IAAM,QAAQP,EAAAA,EAAAA,IAAWiI,GAAO,MAEhC9H,EAAAA,EAAAA,IAAM,IAAI,MAIZiY,EAAa5W,EAAAA,GAAM0W,GACnBG,EAAa7W,EAAAA,GAAM2W,GAEzBE,EAAUrU,UAAYoU,EAEtB1X,EAAQqB,cAAcjC,EAAKgB,MAAQqX,EACnCzX,EAAUA,EAAQwM,mBAAmBiL,IAErChW,EAAAA,EAAAA,IAAQ1B,EAAMuR,EAAAA,IACd,MAAM/R,EAAa,EAAIH,EAAKwY,MAAMpX,OAC5BN,GAAaI,EAAAA,EAAAA,IAASP,EAAKR,IAEjC+I,EAAAA,EAAAA,GAAKpI,EAASd,EAAKC,KAAMW,IACXuI,EAAAA,EAAAA,IAAsBrI,EAASd,EAAKC,MAElD,IAAI,IAAIM,EAAI,EAAGA,EAAIJ,IAAeI,EAAE,EAChCe,EAAAA,EAAAA,IAAaf,EAAEO,EAASd,EAAKwY,MAAMjY,EAAE,GAAIK,GACzC,MAAM6X,GAAUhX,EAAAA,EAAAA,IAAWlB,EAAEO,GAG7BoX,EAAYI,EAAY5W,EAAAA,GAAM+W,IAC9BP,EAAYK,EAAY7W,EAAAA,GAAM+W,EAAQ,GAC1C,CAEAnY,EAAAA,GAAOK,GAAOX,EAAKgB,IACvB,C,oECpDe,SAASN,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKiQ,EAAAA,IACb,MAAMzQ,EAAaH,EAAKqX,KAAKjW,OACvBN,GAAUI,EAAAA,EAAAA,IAASP,EAAKR,GAE9B,IAAI,IAAII,EAAI,EAAGA,EAAIJ,IAAcI,GAC7Be,EAAAA,EAAAA,IAAaf,EAAIO,EAASd,EAAKqX,KAAK9W,GAAIK,EAEhD,C,0DCTe,SAASF,EAAQC,EAAaX,EAAW0Y,IACpDrW,EAAAA,EAAAA,IAAQ1B,EAAKoQ,EAAAA,GACjB,C,oECFe,SAASrQ,EAAQC,EAAaX,EAAWY,GAEpD,MAAME,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAE9BW,EAAAA,EAAAA,IAAaR,EAAWd,EAAK4X,KAAQhX,IACrCU,EAAAA,EAAAA,IAAaR,EAAQ,EAAGd,EAAKC,KAAQW,IACrCU,EAAAA,EAAAA,IAAaR,EAAQ,EAAGd,EAAK2Y,OAAQ/X,IAErCyB,EAAAA,EAAAA,IAAQ1B,EAAMqR,EAAAA,KACdzP,EAAAA,EAAAA,IAAc5B,GAAKc,EAAAA,EAAAA,IAAWX,EAAQ,GAC1C,C,oECVe,SAASJ,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKgO,EAAAA,IACb,MAAMxO,EAAaH,EAAK4O,MAAMxN,OACxBN,GAAaI,EAAAA,EAAAA,IAASP,EAAKR,GAEjC,IAAI,IAAII,EAAI,EAAGA,EAAIJ,IAAcI,GAC7Be,EAAAA,EAAAA,IAAaf,EAAIO,EAASd,EAAK4O,MAAMrO,GAAIK,GAE7CN,EAAAA,GAAOK,GAAOX,EAAK6O,MACvB,C,0DCXe,SAAS9O,EAAOC,GAE3B,MAAMc,GAAUZ,EAAAA,EAAAA,IAAWF,IAE3BS,EAAAA,EAAAA,IAAM,GAAIK,EAAS,IAAKA,EAAQ,EAAG,IACvC,C,oECJe,SAASf,EAAOC,GAE3B,MAAMc,GAAUZ,EAAAA,EAAAA,IAAWF,GAEZ0B,EAAAA,GAAMD,EAAAA,EAAAA,IAAWX,IAAWR,EAAAA,GAAON,IAC3CkG,EAAAA,IAAalG,EAAMc,EAASA,EAAQ,EAC/C,C,2DCiFA,SAAS8X,EAAsBC,EAAmBC,GAE9ClX,QAAQC,KAAK,YAAagX,GAE1B,MAAME,EAhDH,SAAqBA,EAAYD,GAMpC,MAAME,EAAmB,WAFzBD,EAAQA,EAAME,MAAM,OAED,GAEnB,OAlDJ,SAAsBF,GACpB,OAAOA,EAAM1D,QAAQ6D,GAAKA,EAAE1F,SAAS,aACvC,CAgDW2F,CAAaJ,GAAOK,KAAKC,IAE9B,IAAK5S,EAAG6S,EAAOC,GAAQF,EAAEJ,MAAM,KAEH,MAAxBM,EAAKA,EAAKnY,OAAO,KACnBmY,EAAOA,EAAKjG,MAAM,GAAG,IAEvB,IAKIkG,EALAC,GAAQH,EAAQ,EAChBI,GAAQH,EAKZ,KAHEG,EAGEV,EAAO,CACT,IAAIvE,EAAMhO,EAAEkT,QAAQ,IAAK,GACzBH,EAAW/S,EAAE6M,MAAM,EAAGmB,GACL,SAAb+E,IACFA,EAAW,YAGb,MACMxZ,GADM8Y,EAAGpV,UAAU,sBACqBgJ,MA7C7C,OA8CGlL,EAAAA,EAAAA,IAAKxB,KAAUiO,EAAAA,KACjByL,GAAOpZ,EAAAA,GAAON,GAAMoB,OAExB,KAAO,CACL,IAAIqT,EAAMhO,EAAEkT,QAAQ,KACpBH,EAAW/S,EAAE6M,MAAM,EAAGmB,GACL,cAAb+E,IACFA,EAAW,WACf,CAEA,MAAO,CAACA,EAAUC,EAAMC,EAAI,GAElC,CAMkBE,CAAa,EAAa/G,UAAUkG,MAAOD,IArDtD,SAAwBC,EAAoBD,GAC1CC,EAAMK,KAAKF,GATb,SAA2BW,EAAsBf,GAEtD,OADYA,EAAGpV,UAAU,sBACegJ,MAAOmN,EAAU,GAAIA,EAAU,GALhE,IAMT,CAMyBC,CAAkBZ,EAAGJ,IAC9C,CAoDkBiB,CAAehB,EAAOD,GAKpC,IAAIkB,EACR,yCAHsBjB,EAAMK,KAAK,CAACC,EAAE9Y,IAAM,6BAAgCwY,EAAMxY,GAAG,OAIrE0Z,KAAK,4BAGfrY,QAAQgC,IAAIoW,EAChB,CAcA,SACIpB,wBACAsB,iBAdJ,SAA0BrH,EAAgBsH,GAExC,MAAMC,EAAQvH,aAAqB/O,KAAK4O,YAC1BG,EAAUF,iBAEV,IAAI9O,IAAIwW,YAAYxH,GAIlC,OAFA+F,EAAsBwB,EAAOD,GAEtBC,CACT,E,oECnHe,SAASra,EAAOC,GAE3B,IAAIuB,EAAQjB,EAAAA,GAAON,IAEfyB,EAAAA,EAAAA,IAAWzB,KAAU4C,EAAAA,IAKJ,iBAAVrB,IACPA,EAAQyF,OAAOzF,KAGnBlB,EAAAA,EAAAA,IAAM,GAAGkB,OAPLlB,EAAAA,EAAAA,IAAM,GAAGkB,KAQjB,C,oECde,SAASxB,EAAOC,GAE3B,MAAM8L,EAAOxL,EAAAA,GAAON,GAEdC,GAAaC,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAE3B,IAAIoX,GAAMvU,EAAAA,EAAAA,IAAW5C,EAAK,IAE1BI,EAAAA,EAAAA,IAAM,WAAWyL,QAEb3L,EAAa,IAEbK,EAAAA,EAAAA,IAAO4W,GACPA,GAAMvU,EAAAA,EAAAA,IAAW5C,EAAK,KAGtBI,EAAAA,EAAAA,IAAM,OAGVI,EAAAA,EAAAA,IAAM,KAAKqL,OAAUsL,EAAK,KAAKtL,SAEZ,IAAf3L,GACAK,EAAAA,EAAAA,KAAQqC,EAAAA,EAAAA,IAAW5C,EAAK,KAExBI,EAAAA,EAAAA,IAAM,OAGVI,EAAAA,EAAAA,IAAM,KAAMR,EAAM,IACtB,C,sHCvBA,SAASqa,EAAoBta,EAAc2T,EAAa1O,EAAY6S,GAEhE,IAAIpI,GAAW,EACf,MAAMzH,GAAQxG,EAAAA,EAAAA,IAAWqW,GACnBC,GAAQtW,EAAAA,EAAAA,IAAWkS,GAEzB,IAAInS,EAAOkM,EAAAA,GAEPC,EAASjM,EAAAA,EAAMqW,GAAO9S,GAI1B,QAHetD,IAAXgM,IACAnM,EAAOmM,EAAOvL,EAAAA,IAAa6F,IAE3BzG,IAASkM,EAAAA,GAA2B,CAOpC,GALAzI,GAAS+S,EAAAA,EAAAA,IAAkB/S,GAC3B0I,EAASjM,EAAAA,EAAMuG,GAAOhD,QACPtD,IAAXgM,IACAnM,EAASmM,EAAOvL,EAAAA,IAAa2V,IAE7BvW,IAASkM,EAAAA,GAA2B,CACpC,GAAwB,WAAPzI,GAA0B,WAAPA,EAChC,MAAM,IAAInD,MAAM,GAAGiW,KAAS9S,KAAMgD,sBAEtC,MAAMsS,EAAc,WAAPtV,EAAkB,MAAQ,MAIvC,YAFA2K,EAAAA,EAAAA,GAAkB5P,EAAM2T,EAAM4G,EAAMzC,EAGxC,CAEApI,GAAW,GACViE,EAAMmE,GAAS,CAACA,EAAOnE,EAC5B,CAEAhG,EAAOzH,EAAAA,IAAalG,EAAM2T,EAAMmE,EAAOpI,EAC3C,CAEe,SAAS3P,EAAOC,GAE3B,MAAMuB,EAAQjB,EAAAA,GAAON,GAEfc,GAAaZ,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAIO,EAAI,EAAGA,EAAIgB,EAAMH,SAAUb,EAAG,CACxB,IAANA,IACAF,EAAAA,EAAAA,IAAM,QAEV,MAAM4E,EAAQ1D,EAAMhB,GACdoT,EAAQpT,EAAEO,EACVgX,EAAQvX,EAAE,EAAEO,EAElB,GAAW,OAAPmE,GAAsB,WAAPA,EAqBnBqV,EAAoBta,EAAM2T,EAAM1O,EAAI6S,OArBpC,CACI,IAAI0C,EAAM,MACC,WAAPvV,IACAuV,EAAM,OAEV,MAAMzC,GAAQtW,EAAAA,EAAAA,IAAWkS,GACnB1L,GAAQxG,EAAAA,EAAAA,IAAWqW,GAEzB,IAAIuB,EAAI1F,EACJzE,EAAI4I,EAEJC,IAAUpV,EAAAA,IAAgBsF,IAAUrF,EAAAA,GACpCyW,GAAIxW,EAAAA,EAAAA,IAAWwW,GACVpR,IAAUtF,EAAAA,IAAgBoV,IAAUnV,EAAAA,KACzCsM,GAAIrM,EAAAA,EAAAA,IAAWqM,KAGnBU,EAAAA,EAAAA,GAAkB5P,EAAMqZ,EAAGmB,EAAKtL,EAEpC,CAGJ,CACJ,C,8EC/Ee,SAASxO,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKmR,EAAAA,IACb,MAAMhR,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAE9BW,EAAAA,EAAAA,IAAaR,EAAWd,EAAK4X,KAAMhX,IAEnCsI,EAAAA,EAAAA,GAAKpI,EAAQ,EAAGd,EAAKC,KAAMW,IACbuI,EAAAA,EAAAA,IAAsBrI,EAAQ,EAAGd,EAAKC,KAExD,C,0DCZe,SAASF,EAAOC,GAE3B,MAAMuB,EAAQjB,EAAAA,GAAON,IAErBK,EAAAA,EAAAA,IAAMkB,EAAM,SAEKI,IAAbJ,EAAM,KACNlB,EAAAA,EAAAA,IAAM,KAAOkB,EAAM,GAC3B,C,0DCRe,SAASxB,EAAOC,IAE3BK,EAAAA,EAAAA,IAAM,mBAEN,MAAMF,GAAaC,EAAAA,EAAAA,IAAQJ,GACrBc,GAAaZ,EAAAA,EAAAA,IAAWF,GAE9B,IAAI,IAAIO,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BC,EAAAA,EAAAA,IAAOD,EAAIO,IACXT,EAAAA,EAAAA,IAAM,OAGVA,EAAAA,EAAAA,IAAM,KACV,C,0DCbe,SAASN,EAAOC,IAC3Bya,EAAAA,EAAAA,IAAiBza,EAAMM,EAAAA,GAAON,GAClC,C,oECDe,SAASU,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAKkR,EAAAA,IAEb,MAAM/Q,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAC9BW,EAAAA,EAAAA,IAAcR,EAASd,EAAKuB,MAAOX,IACnC2B,EAAAA,EAAAA,IAAc5B,GAAKc,EAAAA,EAAAA,IAAWX,IAE9BR,EAAAA,GAAOK,GAAOX,EAAKqO,GACvB,C,+FCLO,SAAS4J,EAAajT,EAAWE,GAEpC,MAAMwV,EAAKpE,EAAAA,GAAetR,EACpB2V,EAAKrE,EAAAA,GAAepR,EAE1B,IAAIE,EACJ,IAAI,IAAI7E,EAAI,EAAGA,EAAI+V,EAAAA,KAAgB/V,EAC/B6E,EAAI6H,EAAAA,GAASyN,EAAGna,GAChB0M,EAAAA,GAASyN,EAAGna,GAAK0M,EAAAA,GAAS0N,EAAGpa,GAC7B0M,EAAAA,GAAS0N,EAAGpa,GAAK6E,EAGL,CACZ,MAAMwV,EAAK,EAAE5V,EACP6V,EAAK,EAAE3V,EACb,IAAI,IAAI3E,EAAI,EAAGA,EAAI,IAAKA,EACpB6E,EAAI+Q,EAAAA,GAAQyE,EAAGra,GACf4V,EAAAA,GAAQyE,EAAGra,GAAK4V,EAAAA,GAAQ0E,EAAGta,GAC3B4V,EAAAA,GAAQ0E,EAAGta,GAAK6E,CAExB,CAEAA,EAAI9E,EAAAA,GAAO0E,GACX1E,EAAAA,GAAO0E,GAAK1E,EAAAA,GAAO4E,GACnB5E,EAAAA,GAAO4E,GAAKE,CAChB,CAEO,SAAS9D,EAAaS,EAAY+Y,EAAmBla,GAExD,MAAMI,EAAO8Z,EAAanS,YAAYC,MAEhClI,EAAUqa,EAAAA,EAAS/Z,GAEzB,QAA6BW,IAAZjB,EAIb,MAHAkB,QAAQC,KAAK,yBAA0Bb,GACvCY,QAAQC,KAAK,MAAMiZ,EAAahS,UAAUgS,EAAa9R,cACvDpH,QAAQgC,IAAKkX,GACP,IAAIhZ,MAAM,oBAAoBd,QAAW8Z,EAAahS,UAAUgS,EAAa9R,cAGvFtI,EAAQqB,EAAI+Y,EAAcla,GACV6B,EAAYV,EAAI+Y,EAEpC,CAIO,SAASrY,EAAYV,EAAY+Y,GAEpC,MAAMxT,EAAS,EAAEvF,EACjBoU,EAAAA,GAAS7O,EAASyO,EAAAA,IAAkB+E,EAAahS,OACjDqN,EAAAA,GAAS7O,EAAS0O,EAAAA,IAAkB8E,EAAa9R,WACjDmN,EAAAA,GAAS7O,EAAS2O,EAAAA,IAAkB6E,EAAa/R,WACjDoN,EAAAA,GAAS7O,EAAS4O,EAAAA,IAAkB4E,EAAa7R,cACrD,CAEO,SAASE,EAAsBpH,EAAY+Y,GAE9C,MAAMxT,EAAS,EAAEvF,EAEXmV,EAAM4D,EAAa,GACnB1D,EAAM0D,EAAaA,EAAa1Z,OAAO,GAE7C+U,EAAAA,GAAS7O,EAASyO,EAAAA,IAAkBmB,EAAIpO,OACxCqN,EAAAA,GAAS7O,EAAS0O,EAAAA,IAAkBkB,EAAIlO,WACxCmN,EAAAA,GAAS7O,EAAS2O,EAAAA,IAAkBmB,EAAIrO,WACxCoN,EAAAA,GAAS7O,EAAS4O,EAAAA,IAAkBkB,EAAInO,cAC5C,CAGO,SAAS+R,EAAqB7C,EAAa8C,EAAiBC,GAE/D,MAAMC,EAAa,EAAEhD,EACfiD,EAAa,EAAEH,EACfI,EAAa,EAAEH,EAAU,EAE/B/E,EAAAA,GAASgF,EAAapF,EAAAA,IAAkBI,EAAAA,GAASiF,EAAaxP,EAAAA,IAC9DuK,EAAAA,GAASgF,EAAanF,EAAAA,IAAkBG,EAAAA,GAASiF,EAAavP,EAAAA,IAE9DsK,EAAAA,GAASgF,EAAalF,EAAAA,IAAkBE,EAAAA,GAASkF,EAAazP,EAAAA,IAC9DuK,EAAAA,GAASgF,EAAajF,EAAAA,IAAkBC,EAAAA,GAASkF,EAAaxP,EAAAA,GAClE,C,iHCvEO,MAAMhB,EAAe,CACxB,KAAQ,UACR,IAAQ,MAER,IAAQ,UAER,KAAY,UACZ,IAAY,cACZ,SAAY,eACZ,IAAY,UAEZ,IAAY,UACZ,IAAY,UAEZ,GAAY,KACZ,MAAY,SACZ,GAAY,SACZ,MAAY,SAEZ,GAAY,SACZ,IAAY,SACZ,GAAY,SACZ,IAAY,SAEZ,OAAY,UAEZ,MAAY,SACZ,OAAY,UACZ,OAAY,UACZ,OAAY,aACZ,OAAY,cAGHyQ,EAAkB,CAC3B,QAAgB,WAChB,QAAgB,WAChB,YAAgB,eAChB,aAAgB,gBAChB,QAAgB,WAEhB,QAAe,WACf,QAAe,WAEf,OAAe,SACf,OAAe,SAEf,OAAe,SACf,OAAe,SACf,OAAe,SACf,OAAe,SAEf,QAAe,WACf,OAAe,UACf,QAAe,WACf,QAAe,WACf,WAAe,cACf,WAAe,eAIN3K,EAAkB,CAC3B,QAAgB,WAChB,QAAgB,WAChB,YAAgB,eAChB,aAAgB,gBAChB,QAAgB,WAEhB,QAAe,WACf,QAAe,WAEf,OAAe,UACf,QAAe,WACf,QAAe,WACf,WAAe,cACf,WAAe,eAINT,EAAY,CACrB,KAAM,MACN,IAAM,MACN,IAAM,UACN,KAAM,WACN,IAAM,MAEN,IAAO,MACP,IAAO,MACP,MAAO,MAEP,KAAO,KACP,KAAO,KACP,IAAO,KACP,KAAO,KACP,KAAO,KACP,IAAO,KAEP,IAAM,MACN,IAAM,KACN,IAAM,MACN,IAAM,MACN,KAAM,SACN,KAAM,UAOGqL,EAAc,CACvB,GACA,CAAC,KACD,CAAC,KAAM,MACP,CAAC,MACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KAAM,KAAM,MAAO,OACpB,CAAC,IAAK,KAAM,KAAM,KAClB,CAAC,KAAM,KAAM,OACb,CAAC,IAAK,KACN,CAAC,IAAK,IAAK,KACX,CAAC,MACD,CAAC,IAAK,KAAM,KAAM,IAAK,QA4J3B,IAAIC,EAA8C,CAAC,EACnD,IAAI,IAAIjb,EAAI,EAAGA,EAAIgb,EAAYna,SAAUb,EAAG,CAExC,MAAMkb,EAAWlb,EACjB,IAAI,MAAM0E,KAAMsW,EAAYhb,GACxBib,EAAoBvW,GAAMwW,CAElC,CAEO,MAAMC,EAAkBF,EAExB,SAASxD,EAA0D/S,GACtE,OAAOqW,EAAgBrW,EAC3B,CAKO,SAASwV,EAAiBza,EAAciF,GAE3C,MAAM0W,GAAazb,EAAAA,EAAAA,IAAWF,GACxBG,GAAaC,EAAAA,EAAAA,IAAQJ,GAErB4b,EAASJ,EAAoBvW,GAC7B4W,EAASL,EAAoBvW,IAEnCyF,EAAAA,EAAAA,IAAgBiR,EAAOC,GAEvB,IAAI,IAAIrb,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BmK,EAAAA,EAAAA,IAAiBiR,EAAQpb,EAAGqb,EAAO,GAEvC,MAAME,EAAcD,EAASD,EACzBE,IACAzb,EAAAA,EAAAA,IAAM,MAEVG,EAAAA,EAAAA,IAAOmb,GAEP,IAAI,IAAIpb,EAAI,EAAGA,EAAIJ,IAAcI,GAC7BF,EAAAA,EAAAA,IAAM,SACNG,EAAAA,EAAAA,IAAOmb,EAAM,GAGbG,IACAzb,EAAAA,EAAAA,IAAM,IACd,CAEO,MAAMmE,EAAc,CAAC,KAAM,KAAM,IAAK,IAAK,KAAM,K,oHC9UzC,SAAS9D,IAGxB,CAEO,MAAMqb,EAA2B,EAC3BpU,EAA2B,EAC3BqU,EAA2B,EAC3BtU,EAA2B,EAC3BuU,EAA2B,EAKjC,SAAS3T,EAAa3H,EAAaX,EAAWoJ,EAAqBxI,GAEtE,MAAMgG,EAAOwC,EAAUjH,SAAS0E,EAAAA,IAG1BqV,EAAQlc,EAAKmB,KACbgb,OAA8Bxa,IAAjBua,EAAME,OACnBC,OAA8B1a,IAAjBua,EAAMI,MACnB7S,EAAa7C,EAAK6C,SAClBH,EAAa1C,EAAK0C,WAElBiT,EAAaL,EAAM1S,YAAYpI,OAClB8a,EAAM/a,KAAKC,SACV+a,EACDD,EAAMM,WAAWpb,SAChBib,GAEpBha,EAAAA,EAAAA,IAAQ1B,EAAKiR,EAAAA,IAEb,MAAM9Q,GAAUI,EAAAA,EAAAA,IAASP,EAAK4b,GAExBE,EAAezc,EAAKmB,KAAKub,SACzBC,EAAUT,EAAM1S,YAChBiL,EAAUyH,EAAM/a,KAGtB,IAAIyb,EAAUH,EAAarb,OAASub,EAAQvb,OAASqT,EAAIrT,OACzD,IAAI,IAAIb,EAAI,EAAGA,EAAIoc,EAAQvb,SAAUb,EACjCsc,EAAYtc,EAAIO,EAAS6b,EAAQpc,GAAIkc,EAAalc,EAAIqc,GAAUb,EAA0Bnb,GAC1FA,EAAQqB,cAAc0a,EAAQpc,GAAG8N,MAAO5M,EAAAA,EAAAA,IAAWlB,EAAEO,GAIzD,IAAIwG,EAASqV,EAAQvb,OACnBwb,GAAWD,EAAQvb,OACrB,IAAI,IAAIb,EAAI,EAAGA,EAAIkU,EAAIrT,SAAUb,EAE7Bsc,EAAYvV,EAASxG,EAAS2T,EAAIlU,GAAIkc,EAAalc,EAAIqc,GAAUX,EAAsBrb,GAEvF0I,EAAWhC,KAAYmN,EAAIlU,GAAG8N,IAMlC,GAHAzH,EAAKM,WAAaI,EAGd6U,EACAvV,EAAKG,YAAcC,OAAOC,kBAE1B4V,EAAYvV,EAASxG,EAASob,EAAME,YAAQza,EAAW+F,EAAuB9G,KAE5E0G,MACC,CAEHV,EAAKG,YAAcO,EAEnB,MAAMwV,EAAkB1I,KAAKC,IAAIoI,EAAarb,OAAQqT,EAAIrT,QACpD2b,EAAaN,EAAarb,OAASqT,EAAIrT,QAAUmb,IAAejV,GAElEwV,EAAkB,GAAyB,IAApBA,GAAyBC,KAChDnW,EAAKG,aAAe+V,EAC5B,CAEA,IAAIE,EAAYpW,EAAKG,YACjBiW,IAAYhW,OAAOC,oBACnB+V,EAAUpW,EAAKM,YACnB,IAAI,IAAI3G,EAAIoc,EAAQvb,OAAQb,EAAIyc,IAAWzc,EACvCkJ,EAASnJ,EAAAA,GAAOC,EAAIO,IAAYP,EAEpC,MAAM6W,EAAMxQ,EAAKM,WAAa8V,EAC9B,IAAI,IAAIzc,EAAI,EAAGA,EAAI6W,IAAO7W,EACtBkJ,EAASnJ,EAAAA,GAAOC,EAAIO,KAAa,EAKrC,MAAMmc,EAAcf,EAAMM,WACpBU,EAAchB,EAAMgB,YAE1BtW,EAAK8C,OAAS9C,EAAKM,aAAe8V,GAA6B,IAAlBC,EAAO7b,OAEpDwb,EAAUM,EAAY9b,OAAS6b,EAAO7b,OACtC,IAAI,IAAIb,EAAI,EAAGA,EAAI0c,EAAO7b,SAAUb,EAEhCsc,EAAYvV,EAASxG,EAASmc,EAAO1c,GAAI2c,EAAY3c,GAAIyb,EAAyBpb,GAElF6I,EAASwT,EAAO1c,GAAG8N,MAAQ,IAEzB/G,EAwBF,GApBA+U,IAEAQ,EAAYvV,EAASxG,EAASob,EAAMI,WAAO3a,EAAWgG,EAAwB/G,GAE9EgG,EAAKO,OAAS+U,EAAMI,MAAMjO,MAExB/G,GAWNhH,EAAAA,GAAOK,GAAOyI,EAGS,IAAfmT,GAEAvB,EAAAA,EAAAA,IAAoBra,EAAKG,EAASA,EAAUyb,EAAa,OAEtD,CAEH,MAAM7C,EAAM1Z,EAAKgJ,WAAa,EAAIhJ,EAAKgB,KAAKI,OAAS,EAE/C+b,EAAY,EAAExc,EACpBwV,EAAAA,GAASgH,EAAYpH,EAAAA,IAAkBI,EAAAA,GAASgH,EAAYlH,EAAAA,IAAkBjW,EAAK8I,OACnFqN,EAAAA,GAASgH,EAAYnH,EAAAA,IAAkBG,EAAAA,GAASgH,EAAYjH,EAAAA,IAAkBwD,CAClF,CAER,CACO,SAASmD,EAAYlc,EAAaX,EAAW4H,EAAapG,EAAaZ,GAE1E,MAAMI,EAAOhB,EAAKqO,IAElB,IAAIjD,EAAcsC,EAAAA,GAElB,MAAMnF,EAAavI,EAAKuI,YAAYxG,GAMpC,QALmBJ,IAAf4G,IAEA6C,EADa1J,EAAAA,GAAMd,EAAQqB,cAAcsG,IACtBpG,SAASC,EAAAA,YAGjBT,IAAXiG,EAAuB,CAEvB,MAAM9G,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAC9BW,EAAAA,EAAAA,IAAaR,EAAS8G,EAAQhH,GAE1BwK,IAAgBsC,EAAAA,KAChBtC,GAAc3J,EAAAA,EAAAA,IAAWX,GACtBsK,IAAgBzI,EAAAA,KACfyI,EAAcxI,EAAAA,IAE1B,EAEAP,EAAAA,EAAAA,IAAQ1B,EAAKa,IACbe,EAAAA,EAAAA,IAAc5B,EAAKyK,GAEnB9K,EAAAA,GAAOK,GAAOK,EACdJ,EAAQqB,cAAcjB,GAAQoK,GAEf3I,EAAAA,EAAAA,IAAY9B,EAAKX,EACpC,CA9JAU,EAAQ0c,aAAe,W,+BCpBvB,MAAM1d,EAAO,CACZ2d,KAAM1d,EAAAA,MAAAA,EACN2d,SAAU3d,EAAAA,MAAAA,EACV4d,SAAU5d,EAAAA,MAAAA,EACVuJ,KAAMvJ,EAAAA,MAAAA,EACN6d,MAAO7d,EAAAA,MAAAA,EACP8d,KAAM9d,EAAAA,MAAAA,EACN+d,KAAM/d,EAAAA,MAAAA,EACNge,QAAShe,EAAAA,MAAAA,EACTie,UAAWje,EAAAA,MAAAA,EACXke,QAASle,EAAAA,MAAAA,EACTme,OAAQne,EAAAA,MAAAA,EACRoe,MAAOpe,EAAAA,MAAAA,EACPqe,UAAWre,EAAAA,MAAAA,EACXse,UAAWte,EAAAA,MAAAA,EACXue,OAAQve,EAAAA,MAAAA,EACRwe,OAAQxe,EAAAA,MAAAA,EACRye,MAAOze,EAAAA,MAAAA,EACP0e,KAAM1e,EAAAA,MAAAA,EACN2e,SAAU3e,EAAAA,MAAAA,EACV4e,MAAO5e,EAAAA,KAAAA,EACP6e,OAAQ7e,EAAAA,MAAAA,EACR8e,MAAO9e,EAAAA,MAAAA,EACP+e,WAAY/e,EAAAA,MAAAA,EACZgf,OAAQhf,EAAAA,MAAAA,EACR6C,QAAS7C,EAAAA,MAAAA,EACTif,YAAajf,EAAAA,MAAAA,EACbkf,KAAMlf,EAAAA,KAAAA,EACNmf,KAAMnf,EAAAA,MAAAA,GACNof,UAAWpf,EAAAA,MAAAA,EACXqf,eAAgBrf,EAAAA,MAAAA,EAChBsf,MAAOtf,EAAAA,MAAAA,EACPuf,IAAKvf,EAAAA,MAAAA,EACLwf,MAAOxf,EAAAA,MAAAA,EACPyf,GAAIzf,EAAAA,MAAAA,EACJ0f,IAAK1f,EAAAA,MAAAA,EACL2f,cAAe3f,EAAAA,MAAAA,GAIhBoE,OAAOC,OAAOpE,EAAAA,EAAOF,E,kCCxCrB,SACI6f,eAAgB,CAACva,EAAWE,IACjBkP,KAAKoL,MAAOxa,EAAEE,GAEzBua,aAAc,CAACza,EAAWE,KAEtB,IAAI+K,EAASjL,EAAEE,EACf,OAAI+K,EAAS,GAAKjL,EAAEE,IAAM,GACf+K,IAEFA,CAAM,EAEnByP,UAAW,CAAI1a,EAAWE,KAEtB,MAAMya,GAAO3a,EAAIE,EAAIA,GAAKA,EAC1B,OAAY,IAARya,GAAaza,EAAI,GACT,EACLya,CAAG,EAEdC,QAAS,CAAI5a,EAAWE,KAEZF,EAAIE,EAAIA,GAAKA,E,gDCrB7B,MAAMxF,EAAO,CACZC,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EACAA,EAAAA,MAAAA,GAIDC,EAAAA,GAAMC,QAAQH,GACd,QAAeE,EAAKA,E,8ECZL,SAASc,EAAQC,EAAaX,EAAWY,GAEpD,IAAIif,EAAa,EAEbC,EAAM9f,EACV,KAAO,WAAY8f,GAA6B,IAAtBA,EAAInH,OAAOvX,QAAe,CAEhD,KAAO,SAAU0e,EAAInH,OAAO,IAAM,GAC5BkH,EACF,KACJ,CACAC,EAAMA,EAAInH,OAAO,GACjBkH,GAAc,CAClB,EAEAxd,EAAAA,EAAAA,IAAQ1B,EAAKsR,EAAAA,IACb,IAAInR,GAAUI,EAAAA,EAAAA,IAASP,EAAKkf,GAW5B,KARAve,EAAAA,EAAAA,IAAaR,IAAWd,EAAK4X,KAAMhX,IAEnCsI,EAAAA,EAAAA,GAAKpI,EAASd,EAAKC,KAAMW,IACXuI,EAAAA,EAAAA,IAAsBrI,EAASd,EAAKC,QAChDa,EAGFgf,EAAM9f,EACC,WAAY8f,GAA6B,IAAtBA,EAAInH,OAAOvX,QAAe,CAGhD,KAAO,SAAU0e,EAAInH,OAAO,IAAM,EAC9BrX,EAAAA,EAAAA,IAAaR,EAASgf,EAAInH,OAAQ/X,GAClC,KACJ,CAEAkf,EAAMA,EAAInH,OAAO,IAEjBrX,EAAAA,EAAAA,IAAaR,IAAWgf,EAAIlI,KAAMhX,IAElCsI,EAAAA,EAAAA,GAAKpI,EAASgf,EAAI7f,KAAMW,IACVuI,EAAAA,EAAAA,IAAsBrI,EAASgf,EAAI7f,QAC/Ca,EAEF+e,GAAc,CAClB,CACJ,C,wFC5Ce,SAASnf,EAAQC,EAAaX,EAAWY,GAEpD,MAAMT,EAAaH,EAAK+f,SAAS3e,OAAO,GAExCiB,EAAAA,EAAAA,IAAQ1B,EAAKoR,EAAAA,IACb,MAAMjR,GAAUI,EAAAA,EAAAA,IAASP,EAAKR,IAG9B+I,EAAAA,EAAAA,GAAKpI,EAASd,EAAKC,KAAMW,IACXuI,EAAAA,EAAAA,IAAsBrI,EAASd,EAAKC,MAElD,IAAI,IAAIM,EAAI,EAAGA,EAAIJ,IAAcI,GAC7B+e,EAAAA,EAAAA,GAAc/e,EAAEO,EAASd,EAAK+f,SAASxf,EAAE,GAAIK,IAC/BuI,EAAAA,EAAAA,IAAsB5I,EAAEO,EAASd,EAAK+f,SAASxf,EAAE,GAGvE,C,0DCnBe,WAASP,IACpBS,EAAAA,EAAAA,IAAM,WAAWP,EAAAA,EAAAA,IAAWF,GAAO,IACvC,C,oECAe,SAASU,EAAQC,EAAaX,EAAW0Y,GAEpD,MAAMnX,EAAQvB,EAAKuB,MACbye,SAAeze,EACrB,IAAI0e,EAEJ,GAAa,WAAVD,EAAoB,CAEnB,GAAc,YAAVA,EAOA,OALA3d,EAAAA,EAAAA,IAAc1B,EAAK+Q,EAAAA,KACnBnP,EAAAA,EAAAA,IAAc5B,EAAK8M,EAAAA,SAEnBnN,EAAAA,GAAOK,GAAOY,GAKlB,GAAc,WAAVye,EAOA,OALA3d,EAAAA,EAAAA,IAAc1B,EAAKoF,EAAAA,KACnBxD,EAAAA,EAAAA,IAAc5B,EAAKwE,EAAAA,SAEnB7E,EAAAA,GAAOK,GAAOY,EAKtB,KAAO,CAGH,GAFA0e,EAAQ1e,EAAM2C,UAAUgc,aAEV,UAAVD,EAOA,OALA5d,EAAAA,EAAAA,IAAc1B,EAAK6Q,EAAAA,KACnBjP,EAAAA,EAAAA,IAAc5B,EAAKkF,EAAAA,SAEnBvF,EAAAA,GAAOK,GAAOY,EAAMA,OAKxB,GAAc,aAAV0e,EAKA,OAHA5d,EAAAA,EAAAA,IAAc1B,EAAKgR,EAAAA,SACnBpP,EAAAA,EAAAA,IAAc5B,EAAK2P,EAAAA,GAI3B,CAEA,GAA2B,QAAV2P,GAA6B,WAAVD,EAChC,MAAM,IAAIle,MAAM,gBAAgBke,KAASC,MAE7C5d,EAAAA,EAAAA,IAAc1B,EAAK4Q,EAAAA,IAEL,QAAV0O,IACA1d,EAAAA,EAAAA,IAAc5B,EAAKiC,EAAAA,IACnBtC,EAAAA,GAAOK,GAAOY,EAAMA,SAEpBgB,EAAAA,EAAAA,IAAc5B,EAAKgC,EAAAA,IACnBrC,EAAAA,GAAOK,GAAOY,EAEtB,C,sFCvDO,SAASmN,EAAYmB,EACAC,GACA,WAEI/K,EAAe0N,GACG,CAAC,GAG/C,IAAIxC,EAA4D,CAAC,EAEjE,IAAI,IAAIhL,KAAM4K,EAAK,CAEf,MAAMsQ,EAAOjQ,EAAAA,GAAUjL,GACZ,QAAPA,IACAA,EAAK,KAETgL,EAAO,KAAKkQ,QAAY9b,EAAAA,EAAAA,GAAeyL,GACnC,CAAC9P,EAAcmQ,IACJpL,EAAW/E,EAAMiF,EAAIkL,IAGxC,CAEA,OAAOF,CACX,CAEO,SAASwC,EAAiBzS,EAAciF,EAAYD,GAEvD,IAAIob,EAAMnb,EACE,MAARmb,IACAA,EAAM,OAGV,MAAMxE,EAASF,EAAAA,GAAgB0E,GACzBvE,GAASlR,EAAAA,EAAAA,IAAa3K,IAE5B0K,EAAAA,EAAAA,IAAgB1F,EAAG4W,GAEnB,IAAIvC,EAAIpU,EAAQiK,EAAI,GAEhB2M,EAASD,IACTvC,EAAI,IAAIpU,IAAMiK,EAAI,MAGtBzO,EAAAA,EAAAA,IAAM4Y,EAAGrU,EAAGkK,EAChB,C,0DCtDe,SAASnP,EAAOC,GAE3B,MAAOgB,EAAM6S,GAASvT,EAAAA,GAAON,GACvBc,GAAUZ,EAAAA,EAAAA,IAAWF,IAE3BS,EAAAA,EAAAA,IAAM,UAAUO,KAASF,EAAS,KAAMA,EAAQ,EAAG,MAEnDuF,EAAAA,EAAAA,OAEAhG,EAAAA,EAAAA,IAAM,GAAGW,eAAkB6S,KAAS7S,qBACxC,C,oECTe,SAASN,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAK8Q,EAAAA,IACb,MAAM3Q,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAE9BW,EAAAA,EAAAA,IAAaR,EAASd,EAAKuB,MAAOX,EACtC,C,yGCJO,MAAMmP,EAAa/P,GAAiBA,EAE9B8E,EAAoBc,EACpB4M,EAAoB3P,EAE1B,SAAS+C,EAAWZ,EAAW+F,EAASlF,EAAAA,IAE3C,IAAIpE,EAAAA,EAAAA,IAAWuD,KAAOpC,EAAAA,GAClB,OAAOoC,EAEX,IAAIxD,EAAAA,EAAAA,IAAKwD,KAAOuM,EAAAA,GAIZ,OAFIxG,IAAWlF,EAAAA,KACXtD,EAAAA,EAAAA,IAAcyC,EAAGrC,EAAAA,IACdqC,EAGX,MAAMqb,EAAU/f,EAAAA,GAAO0E,GAEjBlE,GAAUZ,EAAAA,EAAAA,IAAW8E,GAE3B,GAAgB,YAAZqb,GAAqC,aAAZA,EAAyB,CAClD,MAAMtI,GAAQtW,EAAAA,EAAAA,IAAWX,GACnBmH,GAAQxG,EAAAA,EAAAA,IAAWX,EAAQ,GACjC,KAAQiX,IAAUnV,EAAAA,IAAcmV,IAAUpV,EAAAA,IAClCsF,IAAUrF,EAAAA,IAAcqF,IAAUtF,EAAAA,IAGtC,OADAJ,EAAAA,EAAAA,IAAcyC,EAAG+F,GACV/F,CAEf,CACA,GAAgB,YAAZqb,IAAyB5e,EAAAA,EAAAA,IAAWX,KAAa8B,EAAAA,GAEjD,OADAL,EAAAA,EAAAA,IAAcyC,EAAG+F,GACV/F,EAGX,GAAI+F,IAAWlF,EAAAA,GAEX,OAAOb,EAEX,MAAM8G,GAAMiB,EAAAA,EAAAA,MAIZ,OAHA1K,EAAAA,EAAAA,IAAQyJ,EAAKuG,EAAAA,KACb4E,EAAAA,EAAAA,IAAcnL,EAAK9G,GAEZ8G,CACX,CAEO,SAASjJ,EAAWmC,GAEvB,IAAIvD,EAAAA,EAAAA,IAAWuD,KAAOpC,EAAAA,GAClB,OAAOoC,EAEX,IAAIxD,EAAAA,EAAAA,IAAKwD,KAAOuM,EAAAA,GAEZ,OADAhP,EAAAA,EAAAA,IAAcyC,EAAGpC,EAAAA,IACVoC,EAEX,GAAkB,YAAd1E,EAAAA,GAAO0E,KAAoBvD,EAAAA,EAAAA,KAAWvB,EAAAA,EAAAA,IAAW8E,MAAQrC,EAAAA,GAEzD,OADAJ,EAAAA,EAAAA,IAAcyC,EAAGpC,EAAAA,IACVoC,EAGX,MAAM8G,GAAMiB,EAAAA,EAAAA,MAIZ,OAHA1K,EAAAA,EAAAA,IAAQyJ,EAAKsG,EAAAA,KACb6E,EAAAA,EAAAA,IAAcnL,EAAK9G,GAEZ8G,CACX,C,wFClEe,SAASpL,EAAQC,EAAaX,EAAWY,GAEpD,MAAM0f,EAAOtgB,EAAK6P,IACZ0Q,EAASD,EAAKlf,OACdyO,EAAM,IAAItG,MAAMgX,GACtB,IAAI,IAAIhgB,EAAI,EAAGA,EAAIggB,IAAUhgB,EAAG,CAE5B,MAAM0E,EAAK4F,EAAAA,GAAayV,EAAK/f,GAAGoI,YAAYC,OAC5C,QAAwBjH,IAAPsD,EACb,MAAM,IAAInD,MAAM,GAAGwe,EAAK/f,GAAGoI,YAAYC,0BAE3CiH,EAAItP,GAAK0E,CACb,CAEA3E,EAAAA,GAAOK,GAAOkP,GAEdxN,EAAAA,EAAAA,IAAQ1B,EAAKwQ,EAAAA,KACb5O,EAAAA,EAAAA,IAAc5B,EAAK8M,EAAAA,IACnB,MAAMtN,EAAaH,EAAKwgB,YAAYpf,OAAS,EACvCN,GAAUI,EAAAA,EAAAA,IAASP,EAAKR,IAE9BmB,EAAAA,EAAAA,IAAaR,EAASd,EAAK2T,KAAM/S,GACjC,IAAI,IAAIL,EAAI,EAAIA,EAAIJ,IAAcI,GAC9Be,EAAAA,EAAAA,IAAaf,EAAIO,EAASd,EAAKwgB,YAAYjgB,EAAE,GAAIK,EACzD,C,wFCxBA,QAAemD,OAAOC,OAAOsB,EAAAA,GACzB,CACIpB,UAAWoB,EAAAA,GACXC,SAAW,OACXpD,UAAWkC,EAAAA,EAAAA,IAAgB,IAAMyO,EAAAA,KAAc3K,IAC3C,MAAMrH,GAAUZ,EAAAA,EAAAA,IAAWiI,IAC3B1H,EAAAA,EAAAA,IAAM,IAAKK,EAAQ,EAAG,gBAAgB,K,0GCE3C,SAAS4D,EAAamL,EACDC,GACH,cACGjL,EAAkBkL,EAAAA,GAAS,aAC3BC,EAAkBD,EAAAA,GAAS,WAC3BhL,EAAkB6K,GACE,CAAC,GAE7C,IAAIK,EAA4D,CAAC,EAEjE,IAAI,IAAIhL,KAAM4K,EAAK,CAEf,MAAMsQ,EAAOjQ,EAAAA,GAAUjL,GACZ,OAAPA,IACAA,EAAK,KAETgL,EAAO,KAAKkQ,QAAa9b,EAAAA,EAAAA,GAAeyL,GACpC,CAAC9P,EAAcmQ,EAAczK,IACtBX,EAAW/E,EAAMgQ,EAAaG,GAAOlL,EAAIJ,EAAca,MAGlEuK,EAAO,MAAMkQ,QAAY9b,EAAAA,EAAAA,GAAeyL,GACpC,CAAC9P,EAAcmQ,EAAczK,IACtBX,EAAW/E,EAAM6E,EAAca,GAAQT,EAAI+K,EAAaG,MAG/DH,IAAiBD,EAAAA,IAAahL,IAAe6K,IAE7CK,EAAO,MAAMkQ,QAAY9b,EAAAA,EAAAA,GAAeyL,GAEpC,CAAC9P,EAAcmQ,EAAczK,KAEzB,MAAMI,EAAcxF,EAAAA,GAAOoF,GAE3B,MAAW,MAAPT,GAA8B,IAAhBa,GACP2M,EAAAA,EAAAA,GAAiBzS,EAAM,KAAMmQ,GAC7B,MAAPlL,GAA8B,IAAhBa,GACP2M,EAAAA,EAAAA,GAAiBzS,EAAM,KAAMmQ,GAEjCP,EAAkB5P,EAAMmQ,EAAMlL,EAAG,IAAKJ,EAAca,GAAAA,IAI3E,CAEA,OAAOuK,CACX,CAEO,SAASL,EAAkB5P,EAAcgF,EAAWC,EAAYC,GAEnE,MAAQ0W,EAAOF,EAAAA,GAAgBzW,GACzB4W,GAASlR,EAAAA,EAAAA,IAAa3K,IAE5B0K,EAAAA,EAAAA,IAAgB1F,EAAG4W,IACnBlR,EAAAA,EAAAA,IAAgBxF,EAAG0W,GAEnB,IAAIvC,EAAI,GAAQnK,EAAI,GAEhB2M,EAASD,IACTvC,EAAI,IAAKnK,EAAI,MAGjBzO,EAAAA,EAAAA,IAAM4Y,EAAGrU,EAAGC,EAAIC,EAAGgK,EACvB,C,oECzEe,SAASxO,EAAQC,EAAaX,EAAWY,IAEpDyB,EAAAA,EAAAA,IAAQ1B,EAAK2Q,EAAAA,IACb,MAAMxQ,GAAUI,EAAAA,EAAAA,IAASP,EAAK,IAE9BW,EAAAA,EAAAA,IAAaR,EAAWd,EAAKuB,MAAOX,IACpCU,EAAAA,EAAAA,IAAaR,EAAQ,EAAGd,EAAKsT,MAAO1S,EACxC,C,8JCEA,QAAemD,OAAOC,OAAO8Q,EAAAA,GACzB,CACI5Q,UAAW6J,EAAAA,GACXO,QAAS,CACLnM,UAAUkC,EAAAA,EAAAA,GAAeqM,EAAAA,IAAY1Q,KACjCS,EAAAA,EAAAA,IAAM,aAAaP,EAAAA,EAAAA,IAAWF,GAAO,IAAI,KAGjDuS,SAAU,CACNpQ,UAAUkC,EAAAA,EAAAA,GAAeC,EAAAA,IAAUtE,KAC/ByK,EAAAA,EAAAA,GAAczK,GAAME,EAAAA,EAAAA,IAAWF,GAAAA,OAI3C0E,EAAAA,EAAAA,GAEI,CACI,KAAM,IAAK,IACX,IAAK,IAAK,IAAK,KAAM,MAEzB8L,EAAAA,GACA,CACIR,aAAewC,EAAAA,GACf3N,cAAe2N,EAAAA,MAGvB9N,EAAAA,EAAAA,GAAa,CAAC,KAAM8L,EAAAA,GAChB,CACIzL,WAAY,CAAC/E,EAAMgF,EAAGC,EAAIC,MAClBzD,EAAAA,EAAAA,IAAWzB,KAAU4C,EAAAA,IACrBoC,GAAInC,EAAAA,EAAAA,IAAWmC,GACfE,GAAIrC,EAAAA,EAAAA,IAAWqC,KAEfF,GAAIY,EAAAA,EAAAA,IAAWZ,GACfE,GAAIU,EAAAA,EAAAA,IAAWV,KAGnB0K,EAAAA,EAAAA,GAAkB5P,EAAMgF,EAAG,IAAKE,EAAE,KAI9CR,EAAAA,EAAAA,GAAa,CAAC,KAAM6J,EAAAA,GAChB,CACI1J,cAAeC,EAAAA,MAGvBJ,EAAAA,EAAAA,GAAa,CAAC,MAAO6L,EAAAA,GACjB,CACIxL,WAAY,CAAC/E,EAAcmQ,EAAclL,EAAIS,MACzCjF,EAAAA,EAAAA,IAAM,uBAAwB0P,EAAM,KAAMzK,EAAO,IAAI,KAIjEhB,EAAAA,EAAAA,GAAa,CAAC,KAAM6L,EAAAA,GAChB,CACIxL,WAAY,CAAC/E,EAAcmQ,EAAclL,EAAIS,MAEzCjF,EAAAA,EAAAA,IAAM,gBAAiB0P,EAAM,KAAMzK,EAAO,IAAI,KAI1DgJ,EAAAA,EAAAA,GAAY,CAAC,OAAQgC,EAAAA,GACjB,CACI3L,WAAY,CAAC/E,EAAMiF,EAAID,MAEfvD,EAAAA,EAAAA,IAAWzB,KAAU4C,EAAAA,KACrBoC,GAAInC,EAAAA,EAAAA,IAAWmC,KAEZyN,EAAAA,EAAAA,GAAiBzS,EAAM,IAAKgF,OAI/C0J,EAAAA,EAAAA,GAAY,CAAC,KAAMpK,EAAAA,GACf,CACIS,WAAY,CAAC/E,EAAMiF,EAAID,MACnByN,EAAAA,EAAAA,GAAiBzS,EAAM,KAAK6C,EAAAA,EAAAA,IAAWmC,GAAAA,KAInDT,EAAAA,EAAAA,GAAYC,EAAAA,GAAa0G,EAAAA,I,0DCzFd,SAASnL,EAAOC,IAC3BK,EAAAA,EAAAA,IAAOC,EAAAA,GAAON,GAClB,C,GCJIygB,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBhf,IAAjBif,EACH,OAAOA,EAAaC,QAGrB,IAAIhS,EAAS4R,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAC,EAAoBH,GAAU9R,EAAQA,EAAOgS,QAASH,GAG/C7R,EAAOgS,OACf,CCrBAH,EAAoBK,EAAI,CAACF,EAASG,KACjC,IAAI,IAAInM,KAAOmM,EACXN,EAAoBtQ,EAAE4Q,EAAYnM,KAAS6L,EAAoBtQ,EAAEyQ,EAAShM,IAC5E9Q,OAAOkd,eAAeJ,EAAShM,EAAK,CAAEqM,YAAY,EAAMC,IAAKH,EAAWnM,IAE1E,ECND6L,EAAoBtQ,EAAI,CAACsD,EAAK0N,IAAUrd,OAAO8R,UAAUwL,eAAelZ,KAAKuL,EAAK0N,G","sources":["webpack://sbrython/./src/sbry/ast2js/list.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Call.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/runtime/index.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/sbry/types/type[float].ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Break.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/types/type[str].ts","webpack://sbrython/./src/sbry/ast2js/fct/def_args.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/FunctionDef.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Dict.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/types/type[bool].ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/AugAssign.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Assign.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ifblock.ts","webpack://sbrython/./src/sbry/py2ast.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/UnaryOp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Raise.ts","webpack://sbrython/./src/sbry/types/type[int].ts","webpack://sbrython/./src/sbry/bry2sbry/Name.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Attribute.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/fct/def.ts","webpack://sbrython/./src/sbry/bry2sbry/import/ImportFrom.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/ExceptHandler.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/For.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/JoinedStr.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/index.js","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/fct/call_keyword.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/lit/bool.ts","webpack://sbrython/./src/sbry/types/index.js","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/types/utils/addType.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Return.ts","webpack://sbrython/./src/sbry/bry2sbry/index.js","webpack://sbrython/./src/sbry/bry2sbry/operators/BoolOp.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/fct/call.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Continue.ts","webpack://sbrython/./src/sbry/types/bases.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/sbry/types/NoneType.ts","webpack://sbrython/./src/sbry/bry2sbry/Body.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/List.ts","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/sbry/types/NotImplementedType.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Assert.ts","webpack://sbrython/./src/sbry/bry2sbry/import/alias.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/BinOp.ts","webpack://sbrython/./src/sbry/bry2sbry/ClassDef.ts","webpack://sbrython/./src/sbry/bry2sbry/structs/Tuple.ts","webpack://sbrython/./src/sbry/bry2sbry/keywords/Pass.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/IfExp.ts","webpack://sbrython/./src/sbry/bry2sbry/import/Import.ts","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/While.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/keyword.ts","webpack://sbrython/./src/sbry/bry2sbry/utils.ts","webpack://sbrython/./src/sbry/structs/BinaryOperators.ts","webpack://sbrython/./src/sbry/bry2sbry/functions/Args.ts","webpack://sbrython/./src/sbry/bry2sbry/list.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/types/list.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/If.ts","webpack://sbrython/./src/sbry/bry2sbry/controlflows/Try.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/bry2sbry/Constant.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/ast2js/fct/def_meth.ts","webpack://sbrython/./src/sbry/bry2sbry/fstring/FormattedValue.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Compare.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/bry2sbry/operators/Subscript.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["const LIST = [\n\trequire(\"./symbol\").default,\n\trequire(\"./struct/tuple\").default,\n\trequire(\"./struct/list\").default,\n\trequire(\"./struct/dict\").default,\n\trequire(\"./key/return\").default,\n\trequire(\"./key/pass\").default,\n\trequire(\"./op/unary\").default,\n\trequire(\"./op/cmp\").default,\n\trequire(\"./op/bool\").default,\n\trequire(\"./op/bin\").default,\n\trequire(\"./op/attr\").default,\n\trequire(\"./op/brackets\").default,\n\trequire(\"./op/assign_aug\").default,\n\trequire(\"./op/assign_init\").default,\n\trequire(\"./op/assign\").default,\n\trequire(\"./lit/str\").default,\n\trequire(\"./lit/int\").default,\n\trequire(\"./lit/float\").default,\n\trequire(\"./lit/fstring\").default,\n\trequire(\"./lit/fstring_fval\").default,\n\trequire(\"./lit/bool\").default,\n\trequire(\"./lit/none\").default,\n\trequire(\"./key/raise\").default,\n\trequire(\"./key/import\").default,\n\trequire(\"./key/import_alias\").default,\n\trequire(\"./key/continue\").default,\n\trequire(\"./key/break\").default,\n\trequire(\"./key/assert\").default,\n\trequire(\"./fct/def\").default,\n\trequire(\"./fct/call\").default,\n\trequire(\"./fct/call_keyword\").default,\n\trequire(\"./fct/def_args\").default,\n\trequire(\"./ctrl/while\").default,\n\trequire(\"./ctrl/tryblock\").default,\n\trequire(\"./ctrl/tryblock_catch\").default,\n\trequire(\"./ctrl/ternary\").default,\n\trequire(\"./ctrl/ifblock\").default,\n\trequire(\"./ctrl/for_range\").default,\n\trequire(\"./ctrl/for\").default,\n\trequire(\"./classdef\").default,\n\trequire(\"./body\").default,\n\trequire(\"./2bigint\").default,\n\trequire(\"./2number\").default,\n\trequire(\"./fct/def_meth\").default,\n\trequire(\"./op/assign_attr\").default,\n];\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n\nlet _id2name: string[] = [];\nif( __DEBUG__ ) _id2name = [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_BOOL\",\n\t\"LIT_NONE\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"FCT_DEF\",\n\t\"FCT_CALL\",\n\t\"FCT_CALL_KEYWORD\",\n\t\"FCT_DEF_ARGS\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IFBLOCK\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"FCT_DEF_METH\",\n\t\"OP_ASSIGN_ATTR\",\n]\nexport const id2name = _id2name;\n","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_str(`class ${VALUES[node]} extends `);\n\n    if( nbChildren > 2 ) {\n        w_str(\"_sb_.mix(\");\n        for (let i = 1; i < nbChildren; ++i) {\n            w_node(body+i);\n            w_str(\", \");\n        }\n        w_str(\")\");\n    } else if( nbChildren === 2)\n        w_node(body+1);\n    else\n        w_str(\"_r_.object\");\n\n    w_sns(\" {\", body, \"}\");\n}","import { AST_FCT_CALL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport keyword from \"./keyword\";\nimport { Fct, RETURN_TYPE, Type } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let fct: Type;\n    let coffset: number;\n    if( \"attr\" in node.func ) {\n        const name =  node.func.attr;\n\n        coffset = addChild(dst, 1 + node.args.length + node.keywords.length + 1);\n        convert_node(coffset, node.func.value, context );\n        const type = resultType(coffset);\n\n        ++coffset;\n\n        fct = Types[type][name] as Type;\n\n        if( __DEBUG__ && fct === undefined ) {\n            console.warn(node);\n            throw new Error(`Method ${name} not defined`);\n        }\n    } else {\n        const name = node.func.id;\n        const fct_type = context.local_symbols[name]!;\n        \n        if( __DEBUG__ && fct_type === undefined ) {\n            console.warn(node);\n            console.warn(context.local_symbols);\n            throw new Error(`Function ${name} not defined`);\n        }\n\n        fct = Types[fct_type];\n        coffset = addChild(dst, 1 + node.args.length + node.keywords.length);\n    }\n\n    const ret_type = (fct.__call__ as Fct)[RETURN_TYPE]();\n\n    setType      (dst, AST_FCT_CALL);\n    setResultType(dst, ret_type);\n\n    convert_node(coffset++, node.func, context ); // fct to call\n\n    for(let i = 0; i < node.args.length; ++i)\n        convert_node(coffset++, node.args[i], context );\n\n    for(let i = 0; i < node.keywords.length; ++i) {\n        keyword(coffset, node.keywords[i], context );\n        if(__DEBUG__) set_py_code(coffset, node.keywords[i]);\n        ++coffset;\n    }\n\n    VALUES[dst] = fct;\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { RET_IJ2STR, RET_INT, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_str, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str } from \".\";\n\nexport default Object.assign(TYPE_str,\n    {\n        __class__: TYPE_type_str_,\n        __len__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_node( firstChild(node) + 1 );\n                w_str(\".length\");\n            })\n        }\n    },\n    genCmpOps   (CMPOPS_LIST, RET_STR2BOOL),\n    genBinaryOps([\"+\"]      , RET_STR2STR),\n    genBinaryOps([\"*\"]      , RET_IJ2STR,\n        {\n            convert_other  : CONVERT_INT2FLOAT,\n            write_call: (node: number, a: number, op, b: number) => {\n                \n                if( resultType(a) !== TYPEID_str ){\n                    const t = a;\n                    a = b; b = t;\n                }\n\n                w_sns(\"\", a, \".repeat(\", b, \")\");\n            }\n        }),\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"/* not implemented */\");\n}","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","import { RET_FLOAT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_float_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_float_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"float\",\n        [JS_NAME]: \"Number\",\n        __call__ : method_wrapper(RET_FLOAT, (node: number) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(Int2Number(other));\n                return;\n            }\n            if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n                w_node(other_type);\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                const other_value = VALUES[other];\n\n                if( type(other) === AST_LIT_STR ) {\n                    if( other_value === \"inf\" || other_value === \"infinity\" ){\n                        w_str(\"Number.POSITIVE_INFINITY\");\n                        return;\n                    }\n                    if( other_value === \"-inf\"|| other_value === \"-infinity\") {\n                        w_str(\"Number.NEGATIVE_INFINITY\");\n                        return;\n                    }\n                }\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"parseFloat(\", other, \")\")\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL]!(node, other);\n        }\n        )\n    },\n);","import { AST_KEY_BREAK } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_KEY_BREAK);\n\n}","import { BB, BE, w_NL, w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    BB();\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren+coffset; ++i) {\n        w_NL(); w_node(i);\n    }\n\n    BE();\n\n    if(__DEBUG__ && nbChildren !== 0 && node !== 0)\n        w_NL();\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(_: number) {\n    w_str(\"break\");\n}","import { RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_str_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport Types from \"./index\";\nimport { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_str_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"str\",\n        [JS_NAME]: \"String\",\n        __call__: method_wrapper(RET_STR, (node) => {\n\n            const other = firstChild(node)+1;\n            const other_type = resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_str ) {\n                w_node(other);\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__str__ === undefined) )\n                throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n            otype.__str__![WRITE_CALL](node, other);\n        })\n    }\n);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_FCT_DEF_ARGS_KWARG, AST_FCT_DEF_ARGS_VARG } from \"@SBrython/sbry/bry2sbry/functions/Args\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { ARGS_INFO, Callable } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    const SType_fct = VALUES[node]! as Callable;\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    let kw_start = meta.idx_end_pos;\n    if( kw_start === Number.POSITIVE_INFINITY )\n        kw_start = meta.idx_vararg + 1;\n\n    if( meta.kwargs !== undefined && kw_start === nbChildren - 1)\n        ++kw_start;\n    \n    for(let i = 0 ; i < nbChildren ; ++i) {\n        if( i !== 0)\n            w_str(\", \");\n\n        if( kw_start === i)\n            w_str(\"{\");\n\n        const isLast = i === meta.idx_vararg && i === nbChildren-1;\n        write_arg(i + coffset, isLast);\n    }\n\n    if( kw_start < nbChildren)\n        w_str('} = {}');\n}\n\nfunction write_arg(node: number, isLast: boolean) {\n    \n    const offset = 4*node;\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_BEG);\n\n    const name = VALUES[node];\n    const type_id = type(node);\n\n    if( type_id === AST_FCT_DEF_ARGS_VARG ) {\n        if( isLast )\n            w_str(`...${name}`);\n        else\n            w_str(`${name} = []`);\n    } else if( type_id === AST_FCT_DEF_ARGS_KWARG ) {\n        w_str(`${name} = {}`);\n    } else if( nbChild(node) === 1 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(`${name} = `);\n        w_node(defval);\n    }else {\n        w_str(name);\n    }\n\n    if( __DEBUG__ ) set_js_cursor(offset + CODE_END);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str(`'${VALUES[node]}'`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    return w_sns(\"_sb_.assert(\", firstChild(node), \")\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport const RETURN_TYPE = Symbol();\nexport const TYPEID      = Symbol();\nexport const WRITE_CALL  = Symbol();\nexport const JS_NAME     = Symbol();\nexport const ARGS_INFO   = Symbol();\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct<[number]>,\n    __int__  ?: Fct<[number]>,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct<T extends any[] = unknown[]> = Type & {\n    [RETURN_TYPE]: (o?: number) => number,\n    [WRITE_CALL] : (node: number, ...args: T) => void\n}\n\nexport type Callable<T extends any[] = unknown[]> = Type & {\n    __name__?: string,\n    __call__: Fct<T> & {\n        __name__: \"__call__\",\n        [ARGS_INFO]: {\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: number, context: Context) => void );\n        }\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    // else is handled by tryblock\n    if(nbChildren === 1) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", coffset+1, \"){\", coffset, \"}\");\n}","import { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { default_call } from \"@SBrython/sbry/ast2js/fct/call\";\nimport { convert_args } from \"./Args\";\nimport { AST_FCT_DEF, AST_FCT_DEF_METH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport Body from \"@SBrython/sbry/bry2sbry/Body\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\n\nconst FAKE_RETURN_NODE = {\n    constructor: {\n        $name: \"Return\"\n    }\n};\n\n// required as some symbols may have been declared out of order\n// (not only for return type computation)\nfunction generate(dst: number, node: any, context: Context) {\n\n    const rtype   = resultType(dst);\n    const coffset = addChild(dst, 2);\n\n    // fuck...\n    const stype   = Types[rtype] as Callable;\n    const call    = stype.__call__;\n    const meta    = call[ARGS_INFO];\n\n    // new context for the function local variables\n    context = context.createSubContext(\"fct\");\n    context.parentTypeID = dst; // <- here\n\n    // fake the node... => better doing here to not have context issues.\n    convert_args(coffset, node, stype, context);\n    // already done in convert_args\n    /* const c_offset  = firstChild(coffset);\n    const c_end     = c_offset + nbChild(coffset);\n    for(let i = c_offset; i < c_end; ++i)\n        context.local_symbols[VALUES[i]] = resultType(i);*/\n\n    // tell body this function has been generated.\n    meta.generate = undefined;\n    // prevents recursive calls or reaffectation.\n    call[RETURN_TYPE] = undefined as any;\n\n    const annotation = node.returns?.id;\n    if( annotation !== undefined ) {\n        let fct_return_type = context.local_symbols[annotation]; // ?\n        // force the type.\n        call[RETURN_TYPE] = () => fct_return_type!;\n    }\n\n    // implicit return...\n    const last_type   = node.body[node.body.length-1].constructor.$name;\n    if( last_type !== \"Return\" && last_type !== \"Raise\" ) {\n\n        if( __DEBUG__ ) {\n            const fake_node = {\n                constructor: {\n                    $name: \"Return\"\n                },\n                    lineno: node.end_lineno,\n                end_lineno: node.end_lineno,\n                    col_offset: node.end_col_offset,\n                end_col_offset: node.end_col_offset,\n            }\n            node.body.push( fake_node );\n        } else {\n            node.body.push( FAKE_RETURN_NODE );\n        }\n    }\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const SType_fct: Callable = {\n        __name__: \"function\",\n        __call__: {\n            __name__: \"__call__\",\n            [RETURN_TYPE]: () => {\n                generate(dst, node, context); // should be the new context\n                return SType_fct.__call__[RETURN_TYPE]();\n            },\n            [WRITE_CALL]: default_call,\n            [ARGS_INFO]: {\n                //TODO...\n                args_names     : new Array(node.args.args.length+node.args.posonlyargs.length),\n                args_pos       : {},\n                idx_end_pos    : -1,\n                idx_vararg     : -1,\n                has_kw         : false,\n                generate,\n            }\n        }\n    }\n\n    const STypeID = Types.length;\n    Types[STypeID] = SType_fct;\n\n    context.local_symbols[node.name] = STypeID;\n\n    let type = AST_FCT_DEF;\n    if( context.type === \"class\") {\n        type = AST_FCT_DEF_METH;\n        const klass = Types[context.parentTypeID];\n        VALUES[dst] = [node.name, klass.__name__];\n\n        const method_name = node.name;\n        \n        Types[context.parentTypeID  ][method_name] = SType_fct;\n\n        const gen = SType_fct.__call__[ARGS_INFO].generate!;\n        SType_fct.__call__[ARGS_INFO].generate = (...args) => {\n            gen(...args);\n\n            //@ts-ignore\n            instanceType.__call__ = {...SType_fct.__call__};\n            instanceType.__call__[ARGS_INFO] = {...SType_fct.__call__[ARGS_INFO]};\n\n            //TODO: update ARGS_INFO...\n            console.warn( instanceType.__call__[ARGS_INFO] );\n            // WRITE_CALL => no issues as it uses ARGS_INFO...\n        }\n        const instanceTypeID = addType(SType_fct);\n        const instanceType = Types[instanceTypeID];\n\n        Types[context.parentTypeID-1][method_name] = instanceType;\n\n    } else {\n        VALUES[dst] = node.name;\n    }\n\n    setType      (dst, type);\n    setResultType(dst, STypeID);\n}","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { AST_STRUCT_DICT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_DICT);\n    const coffset = addChild(dst, node.keys.length * 2);\n\n    for(let i = 0; i < node.keys.length; ++i) {\n        convert_node(2*i+coffset, node.  keys[i], context);\n        convert_node(2*i+1+coffset, node.values[i], context);\n    }\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function write_id_jsop(node: number, a: number) {\n\n    setParentOPPrio( a, parentOPPrio(node) );\n\n    w_node(a);\n}","import { TYPE_type, TYPE_type_bool_ } from \"./bases\";\nimport { JS_NAME } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_bool_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"bool\",\n        [JS_NAME]: \"Boolean\",\n    }\n);","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str('{');\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; i+=2)\n        w_sns(\"\", i+coffset, \": \", i+1+coffset, \", \");\n\n    w_str('}');\n}","import { AST_OP_ASSIGN_AUG } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n    VALUES[dst] = op;\n\n    setType(dst, AST_OP_ASSIGN_AUG);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.target, context);\n    convert_node(coffset+1, node.value,  context);\n\n    setResultType(dst, resultType(coffset));\n}","export default class Py_object {\n\n}","import { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPE_bool, TYPE_type_bool_ } from \"./bases\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\n\nexport default Object.assign(TYPE_bool,\n    {\n        __class__: TYPE_type_bool_,\n    },\n    genCmpOps(CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { AST_OP_ASSIGN, AST_OP_ASSIGN_ATTR, AST_OP_ASSIGN_INIT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, firstChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport Types, { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport { printNode } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    let targets = node.targets;\n    if( targets === undefined )\n        targets = [node.target];\n\n    const nbChildren = targets.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.value, context); // right\n    let rtype = resultType(coffset);\n\n    let result_type = null;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined)\n        result_type = context.local_symbols[annotation]; //?\n\n    if( __DEBUG__ && result_type !== null && result_type !== rtype )\n        console.warn(\"Wrong result_type\");\n\n    if( result_type === null ) {\n        result_type = rtype;\n        if( rtype === TYPEID_jsint)\n            result_type = TYPEID_int; // prevents issues.\n            //TODO: only if assign...\n    }\n\n    setResultType(dst, result_type);\n\n    for(let i = 1; i < nbChildren; ++i) {\n    \n        convert_node(coffset+i, targets[i-1], context );\n        context.local_symbols[targets[i-1].id] = result_type;\n    }\n\n\n    let type = AST_OP_ASSIGN;\n    if( context.type === \"class\") {\n        type = AST_OP_ASSIGN_ATTR;\n\n        VALUES[dst] = context.parentTypeID;\n\n        const attrname = VALUES[coffset+1];\n        const attrdef  = { [TYPEID]: result_type };\n\n        Types[context.parentTypeID  ][attrname] = attrdef\n        Types[context.parentTypeID-1][attrname] = attrdef; // duplicated (good ?)\n\n    }else if( ! (targets[0].id in context.local_symbols) )\n        type = AST_OP_ASSIGN_INIT;\n    \n    setType(dst, type);\n}\n\n// [\"Assign\", \"AnnAssign\"];","// must NOT depends on list.\nimport AST2JS from \"./index\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, JS_CODE, type } from \"../dop\";\n\nexport const CURSOR = __DEBUG__ ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode(ast.filename);\n\n    w_node(0);\n\n    // TODO: better export strategy (?)\n    jscode += `\\nconst __exported__ = {};\\n`;\n\n    //console.warn(jscode);\n\n    /**\n    const lines = ast.body.children;\n    const exported = new Array(lines.length);\n    let offset = 0;\n    for(let i = 0; i < lines.length; ++i) {\n        if( lines[i].type === \"functions.def\")\n        exported[i] = lines[i].value;\n    }\n    exported.length = offset;\n\n    jscode += `\\nconst __exported__ = {${exported.join(', ')}};\\n`;\n    /**/\n\n\treturn jscode;\n}\n\nfunction new_jscode(filename: string) {\n\n    jscode  = `//# sourceURL=${filename}\\n`;\n    jscode += `const {_r_, _sb_} = __SB__;\\n`;\n\n    if(__DEBUG__) {\n        CURSOR[CODE_LINE] = 3;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: number) {\n    const offset = 4*id;\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __DEBUG__ ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __DEBUG__ ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: number) {\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n    AST2JS[type(node)!](node);\n    if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n}\n\ntype W_SNS = [string, number, string]\n    | [string, number, string, number, string]\n    | [string, number, string, number, string, number, string]\n    | [string, number, string, number, string, number, string, number, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as number;\n\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( __DEBUG__ ) set_js_cursor(4*node + CODE_END);\n\n        jscode += args[i+1];\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", coffset+1, \"}\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"const {\");\n\n    const coffset = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset); w_str(\", \");\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SB__.getModules()\");\n    else\n        w_str(`__SB__.getModule(\"${value}\")`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    let coffset    = firstChild(node);\n    let nbChildren = nbChild(node);\n\n    // if\n    w_sns(\"if(\", coffset++, \"{\", coffset++, \"}\");\n\n    // else if\n    let i;\n    for(i = 2; i < nbChildren - 1; i += 2) {\n        w_sns(\"else if(\", coffset++, \"){\", coffset++, \"}\");\n    }\n\n    // else\n    if( i === nbChildren - 1 )\n        w_sns(\"else {\", coffset, \"}\");\n}","import dop_reset, {ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, CODE_LINE, createASTNode, PY_CODE, resultType, type, VALUES} from \"@SBrython/sbry/dop\";\nimport Body from \"./bry2sbry/Body\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { id2name } from \"./ast2js/list\";\nimport { set_py_code_from_list } from \"./bry2sbry/utils\";\n\nexport type AST = {\n    nodes   : typeof ASTNODES,\n    filename: string\n}\n\nexport function printNode(id: number) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : Types[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}\n\nexport function buildPyCode(id: number) {\n    const offset = 4*id;\n\n    return {\n        start: {\n            line: PY_CODE[ offset + CODE_BEG_LINE ],\n            col : PY_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: PY_CODE[ offset + CODE_END_LINE ],\n            col : PY_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function py2ast(code: string, filename: string): AST {\n\n    const parser = new $B.Parser(code, filename, 'file');\n\tconst _ast   = $B._PyPegen.run_parser(parser);\n    //console.log(\"AST\", _ast);\n    \n    const nodes = convert_ast(_ast)\n\n\treturn {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\nimport \"@SBrython/sbry/bry2sbry/list\"; \nimport builtins from \"./types/builtins\";\n\nexport function convert_ast(ast: any) {\n\n    dop_reset();\n\n    const id = createASTNode();\n    Body(id, ast.body, new Context() );\n    if(__DEBUG__) set_py_code_from_list(id, ast.body);\n\n    return ASTNODES;\n\n    /*function count(node: ASTNode) {\n\n        let sum = 1; // count myself\n        for(let i = 0; i < node.children.length; ++i )\n            sum += count(node.children[i]);\n        return sum;\n    }\n    console.warn( count(result) );*/\n}\n\nexport class Context {\n    constructor(type: \"?\"|\"class\"|\"fct\" = \"?\", symbols: Record<string, number> = builtins) {\n        this.type = type; //TODO: remove\n        this.local_symbols = {...symbols};\n    }\n\n    createSubContext(type: \"?\"|\"class\"|\"fct\" = \"?\") {\n        return new Context(type, this.local_symbols);\n    }\n    createClassContext(type: number) {\n\n        const ctx = new Context(\"class\", this.local_symbols);\n\n        ctx.parentTypeID = type;\n\n        return ctx;\n    }\n\n    local_symbols: Record<string, number>;\n    parentTypeID: number = 0; // is it used ?\n    type; //TODO: remove ?\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_UNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_bool, TYPEID_int, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_UNARY);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.operand , context );\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    VALUES[dst] = op;\n\n    if( op === 'not') { // logical not\n        setResultType(dst, TYPEID_bool);\n        return;\n    }\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE]();\n\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        console.warn(Types[resultType(coffset)].__name__);\n        throw new Error(`${op} ${Types[resultType(coffset)].__name__} NOT IMPLEMENTED!`);\n    }\n\n    setResultType(dst, type);\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { AST_KEY_RAISE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_RAISE);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.exc, context);\n\n}","import { RET_INT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_type, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport Types from \"./index\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str } from \".\";\nimport { JS_NAME, WRITE_CALL } from \"./utils/types\";\n\nexport default Object.assign(TYPE_type_int_,\n    {\n        __class__: TYPE_type,\n        __name__ : \"int\",\n        [JS_NAME]: \"BigInt\",\n        __call__: method_wrapper(RET_INT, (node: number) => {\n\n            const other = firstChild(node) + 1;\n            const other_type =resultType(other);\n\n            //TODO use their __int__ ?\n            if( other_type === TYPEID_int ) {\n                w_node(other);\n                return;\n            }\n            if( other_type === TYPEID_jsint) {\n                w_node( Number2Int(other) );\n                return;\n            }\n            if( other_type === TYPEID_float ) {\n                w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n                return;\n            }\n\n            //TODO: power...\n            if( other_type === TYPEID_str ) {\n\n                //if( node.children.length === 3)\n                //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n                //TODO: optimize if other is string litteral...\n                w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n                return;\n            }\n\n            const otype = Types[other_type];\n            if( __DEBUG__ && (otype === undefined || otype.__int__ === undefined) )\n                throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n            otype.__int__![WRITE_CALL](node, other);\n        })\n    }\n);","import { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_SYMBOL } from \"@SBrython/sbry/ast2js/index\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport builtins from \"../types/builtins\";\nimport Types from \"../types/\";\nimport { JS_NAME } from \"../types/utils/types\";\n\nfunction isClass(_: unknown) {\n    // from https://stackoverflow.com/questions/526559/testing-if-something-is-a-class-in-javascript\n    return Object.getOwnPropertyDescriptors(_)?.prototype?.writable === false;\n}\n// + https://github.com/brython-dev/brython/issues/2513\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let result_type = 0;\n    let value = node.id as string;\n\n    if( value === 'self')\n        value = 'this'; //TODO type of current context ! -> self in local_symbols ?\n    else if(value in builtins ) {\n        result_type = builtins[value as keyof typeof builtins];\n\n        const alt = Types[result_type][JS_NAME];\n        if( alt !== undefined)\n            value = alt;\n\n    } else if( value in context.local_symbols) {\n        result_type = context.local_symbols[value];\n    }\n\n    /*\n        //TODO globalSymbols\n    else if(value in _r_) {\n        if( isClass(_r_[value as keyof typeof _r_]) )\n            result_type = `class.${value}`;\n\n        value = `_r_.${value}`;\n    }\n    */\n\n    setType(dst, AST_SYMBOL);\n    setResultType(dst, result_type);\n    \n    VALUES[dst] = value;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","import { AST_OP_ATTR } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_OP_ATTR);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n\n    const type_obj = resultType(coffset);\n    // @ts-ignore\n    setResultType(dst, Types[type_obj][node.attr]?.[TYPEID] ?? 0);\n\n    //TODO: return type...\n    let value = node.attr;\n    if( value === \"__class__\")\n        value = \"constructor\";\n\n    VALUES[dst] = value;\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { TYPE_float, TYPE_type_float_ } from \"./bases\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { genBinaryOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genUnaryOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild } from \"../dop\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_float,\n    {\n        __class__: TYPE_type_float_,\n\n        __str__: method_wrapper(RET_STR, (node, arg) => {\n            w_sns(\"_sb_.float2str(\", arg, \")\");\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_FLOAT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node) + 1, \")\");\n            })\n        },\n    },\n    genBinaryOps(['**', '*', '/', '+', '-'], RET_IJBF2FLOAT,\n                    {\n                        convert_other: CONVERT_INT2FLOAT\n                    }\n    ),\n    genBinaryOps(['//'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT,\n            write_call   : (_node, a, _op, b) => {\n                w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-']    , RET_FLOAT),\n    genCmpOps  (CMPOPS_LIST, RET_IJBF2BOOL),\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", coffset+1, \"}\");\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n    const body = list+1;\n\n    w_sns(`for(var ${idx} of `, list, \"){\", body, \"}\");\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK_CATCH } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let nbChildren = 1;\n    if( node.type !== undefined )\n        nbChildren = 2;\n\n    setType(dst, AST_CTRL_TRYBLOCK_CATCH);\n    const coffset = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    if( nbChildren === 2)\n        convert_node(coffset+1, node.type, context);\n    \n    VALUES[dst] = node.name;\n}","import { Fct, RETURN_TYPE, WRITE_CALL } from \"./types\";\n\nexport function method_wrapper<T extends any[]>(\n                                RET_TYPE: (o: number) => number,\n                                write   : (node: number, ...args: T) => void) {\n    const r = Object.create(null);\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    return r satisfies Fct<T>;\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_FOR, AST_CTRL_FOR_RANGE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context): false|void {\n\n    const target = node.target.id;\n    context.local_symbols[target] = 0; //TODO\n\n    // FOR RANGE\n    if( node.iter.constructor.$name === \"Call\" && node.iter.func.id === \"range\" ) {\n    \n        setType(dst, AST_CTRL_FOR);\n        const coffset = addChild(dst, 2);\n    \n        convert_node(coffset  , node.iter, context);\n    \n        Body(coffset+1, node.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n    \n        VALUES[dst] = target;\n\n        return;\n    }\n\n    context.local_symbols[node.value] = TYPEID_int;\n    // TODO: jsint opti if this.value not used...\n\n    const args = node.iter.args;\n\n    setType(dst, AST_CTRL_FOR_RANGE);\n    const nbChildren = args.length + 1;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i)\n        convert_node(i+coffset, args[i-1], context);\n\n    VALUES[dst] = target;\n}","import { AST_LIT_FSTRING } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING);\n    setResultType(dst, TYPEID_str);\n\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        console.warn( node.values[i].constructor.$name); //TODO: not used yet.\n        convert_node(i + coffset, node.values[i], context);\n    }\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"[\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"]\");\n}","import { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { jsop2pyop } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { resultType } from \"@SBrython/sbry/dop\";\nimport { write_binary_jsop } from \"./binary\";\n\n//TODO....\nconst reverse = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \"<\",\n    \"<\": \">\",\n    \">=\": \"<=\",\n    \"<=\": \">=\",\n} as const;\n\n//TODO: handle reversed : remove condition ??? -> switch children ???\n\nexport function write_compare_jsop(node: number, a: number, op: string, b: number, reversed: boolean) {\n\n    let cop = op;\n\n    if( reversed ) {\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }\n\n    if(    (cop[0] === '=' || cop[0] === '!')\n        && resultType(a) === resultType(b) )\n            cop += '=';\n\n    write_binary_jsop(node, a, cop, b);\n}\n\nexport type GenCmpOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number, reversed: boolean) => void\n};\n\nexport function genCmpOps(  ops        : readonly (keyof typeof reverse)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                convert_other   = NOCONVERT,\n                                convert_self    = NOCONVERT,\n                                write_call      = write_compare_jsop,\n                             }: GenCmpOps_Opts = {} ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(const op of ops) {\n\n        const pyop = jsop2pyop[op];\n\n        result[`__${pyop}__`] = method_wrapper(return_type, (node: number, self: number, o: number, reversed: boolean) => {\n            write_call(node, convert_self(self), op, convert_other(o), reversed );\n        });\n    }\n    \n    return result;\n}","import { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types\";\nimport { TYPEID_NoneType } from \"../types\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n    \n    w_str(\"var \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { AssignOperators } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(coffset+1)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(coffset+1)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        */\n    }\n\n    method[WRITE_CALL](node, coffset, coffset+1);\n}","export const AST_SYMBOL = 0;\n// structures\nexport const AST_STRUCT_TUPLE = 1;\nexport const AST_STRUCT_LIST = 2;\nexport const AST_STRUCT_DICT = 3;\n// keywords\nexport const AST_KEY_RETURN = 4;\nexport const AST_KEY_PASS = 5;\nexport const AST_KEY_RAISE = 22;\nexport const AST_KEY_IMPORT = 23;\nexport const AST_KEY_IMPORT_ALIAS = 24;\nexport const AST_KEY_CONTINUE = 25;\nexport const AST_KEY_BREAK = 26;\nexport const AST_KEY_ASSERT = 27;\n// operators\nexport const AST_OP_UNARY = 6;\nexport const AST_OP_CMP = 7;\nexport const AST_OP_BOOL = 8;\nexport const AST_OP_BIN = 9;\nexport const AST_OP_ATTR = 10;\nexport const AST_OP_BRACKETS = 11;\nexport const AST_OP_ASSIGN_AUG = 12;\nexport const AST_OP_ASSIGN_INIT = 13;\nexport const AST_OP_ASSIGN_ATTR = 44;\nexport const AST_OP_ASSIGN = 14;\n// Litterals\nexport const AST_LIT_STR = 15;\nexport const AST_LIT_INT = 16;\nexport const AST_LIT_FLOAT = 17;\nexport const AST_LIT_FSTRING = 18;\nexport const AST_LIT_FSTRING_FVAL = 19;\nexport const AST_LIT_BOOL = 20;\nexport const AST_LIT_NONE = 21;\n// Functions\nexport const AST_FCT_DEF = 28;\nexport const AST_FCT_DEF_METH = 43;\nexport const AST_FCT_DEF_ARGS = 31;\nexport const AST_FCT_CALL = 29;\nexport const AST_FCT_CALL_KEYWORD = 30;\n// Controlflows\nexport const AST_CTRL_WHILE = 32;\nexport const AST_CTRL_TRYBLOCK = 33;\nexport const AST_CTRL_TRYBLOCK_CATCH = 34;\nexport const AST_CTRL_TERNARY = 35;\nexport const AST_CTRL_IFBLOCK = 36;\nexport const AST_CTRL_FOR_RANGE = 37;\nexport const AST_CTRL_FOR = 38;\n// Others\nexport const AST_CLASSDEF = 39;\nexport const AST_BODY = 40;\nexport const AST_2BIGINT = 41;\nexport const AST_2NUMBER = 42;\n\nexport default [];","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPE_int, TYPE_type_int_ } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_id_jsop } from \"@SBrython/sbry/structs/operators/id\";\nimport { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_float } from \".\";\nimport { printNode } from \"../py2ast\";\n\nexport default Object.assign(TYPE_int,\n    {\n        __class__: TYPE_type_int_,\n        __str__  : method_wrapper(RET_STR, (_, arg) => {\n            w_node(arg); w_str(\".toString()\");\n        }),\n        __int__: method_wrapper(RET_INT, (node, self) => {\n            write_id_jsop(node, self);\n        }),\n        __abs__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                w_sns(\"_sb_.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps([\n            // '**' => if \"as float\" could accept loss of precision.\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<'\n        ],\n        RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_INT2INT,\n        {\n            write_call: (node, a, _, b) => {\n\n                if( resultType(node) === TYPEID_float ) {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_self : CONVERT_INT2FLOAT,\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_IJ2INT,\n        {\n            convert_other  : CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                w_sns(\"_sb_.floordiv_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_IJ2INT,\n        {\n            convert_other: CONVERT_2INT,\n            write_call: (node: number, self: number, op: string, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_INT,\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_float )\n                    a = Int2Number(a);\n                \n                write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps( ['~'], RET_INT),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n    /* */\n);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    w_sns(\"(\", coffset, \"?\", coffset+1, \" : \", coffset+2, \")\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_node( firstChild(node) );\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// bases.ts prevents circular dependancies.\n\nexport const TYPEID_NotImplementedType = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_int                = 2;\nexport const TYPEID_jsint              = 3;\nexport const TYPEID_float              = 4;\nexport const TYPEID_bool               = 5;\nexport const TYPEID_str                = 6;\nexport const TYPEID_type               = 7;\nexport const TYPEID_type_int_          = 8;\nexport const TYPEID_type_float_        = 9;\nexport const TYPEID_type_str_          =10;\nexport const TYPEID_type_bool_         =11;\n\nexport default [];","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_sns(\"try {\", coffset, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SB__)\");\n\n        if( nbChildren > 1)\n            w_node( 1+coffset );\n\n        for(let i = 2; i < nbChildren; ++i) {\n            w_NL(); w_str(\"else \"); w_node(i + coffset);\n        }\n\n        // no \"catch all\" clause...\n        if( nbChild(coffset + nbChildren-1) !== 1) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n\n    BE();\n    //w_NL(); - no needs ?\n}","import Types from \"../list\";\n\nexport function addType(typedesc: any) {\n\n    const id = Types.length;\n\n    const obj = Object.assign(Object.create(null), typedesc);\n    Types[id] = obj;\n\n    return id;\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: number) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        write_unary_jsop(node, '!', Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct<[number]>;\n\n    method[WRITE_CALL]!(node, left);\n}","import { AST_KEY_RETURN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_NoneType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst:number, node: any, context: Context) {\n\n    // context.parent_node_context\n    let result_type = TYPEID_NoneType;\n    \n    if(node.value !== undefined) {\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, node.value, context);\n        result_type = resultType(coffset);\n    }\n\n    setType(dst, AST_KEY_RETURN);\n    setResultType(dst, result_type);\n\n    const meta = (Types[resultType(context.parentTypeID!)] as Callable).__call__;\n    if( meta[RETURN_TYPE] === undefined )\n        meta[RETURN_TYPE] = () => result_type;\n}","export default {};","import { AST_OP_BOOL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nconst bname2jsop = {\n    'And': '&&',\n    'Or' : '||'\n};\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BOOL);\n    const nbChildren = node.values.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.values[i], context )\n\n    setResultType(dst, resultType(coffset) );\n    \n    VALUES[dst] = bname2jsop[node.op.constructor.$name as keyof typeof bname2jsop];\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: number) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n    \n    for(let i = 1; i < nbChildren; ++i) {\n        w_node(i+coffset);\n        w_str(\" = \");\n    }\n\n    let rchild: number = coffset;\n    if( resultType(coffset) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(coffset);\n\n    w_node(rchild);\n\n    w_NL();\n    const name = VALUES[coffset+1];\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { firstChild, nbChild, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { ARGS_INFO, Callable, Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport function default_call(node: number) {\n\n    const meta = (VALUES[node] as Callable).__call__[ARGS_INFO];\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    w_node(coffset);\n    w_str('(');\n\n    const nb_call_args = nbChildren - 1; // could have short if nb_call_args = 0...\n    const call_args_offset  = coffset + 1;\n\n    // nb_pos_call\n    let nb_pos_call = nb_call_args;\n    for(let i = 0; i < nb_call_args; ++i)\n        if( type( i + call_args_offset) === AST_FCT_CALL_KEYWORD) {\n            nb_pos_call = i;\n            break;\n        }\n\n    // 1) Consume call pos (nb_pos_call) until max_pos\n    let max_pos = meta.idx_end_pos;\n    const vararg_array = max_pos === Number.POSITIVE_INFINITY && meta.has_kw;\n    if( vararg_array )\n        max_pos = meta.idx_vararg; // vararg_array + max_pos: can be precomputed ?\n\n    const cutoff = Math.min(nb_pos_call, max_pos);\n    for(let i = 0; i < cutoff; ++i) {\n        w_node(i + coffset + 1);\n        w_str(\", \");\n    }\n\n    const kw    : Record<string, number> = {};\n    const kwargs: Record<string, number> = {};\n\n    let call_has_kw     = false;\n    let call_has_kwargs = false;\n\n    const pos        = new Array(Math.max(meta.idx_vararg - cutoff,0));\n\n    // 2) If (...pos, [vargars], ...)\n    if(vararg_array) {\n        const varg_start = meta.idx_vararg;\n        const varg_nb    = nb_pos_call - varg_start;\n\n        if( varg_nb > 0 ) { // we have varargs to write...\n\n            w_str(\"[\");\n\n            w_node(varg_start + call_args_offset);\n            \n            for(let i = 1; i < varg_nb; ++i) {\n                w_str(\", \");\n                w_node(i + varg_start + call_args_offset );\n            }\n\n            w_str(\"]\");\n        }\n    } else {\n        // WHY ???\n        const args_names = meta.args_names;\n        for(let i = cutoff; i < nb_pos_call; ++i)\n            kw[ args_names[i-1] ] = i + coffset;\n\n        call_has_kw = cutoff !== nb_pos_call;\n    }\n    // 3) process call kw...\n    const args_pos = meta.args_pos;\n\n    for(let i = nb_pos_call; i < nb_call_args; ++i) {\n\n        const arg  = i + coffset;\n        const name = VALUES[arg];\n        const idx  = args_pos[ name ];\n\n        if( idx >= 0 ) { // pos args given by kw...\n            pos[idx - cutoff] = arg;\n            continue;\n        }\n\n        call_has_kw = true;\n\n        if( idx === -1)\n            kw[name] = arg;\n        else {\n            kwargs[name] = arg;\n            call_has_kwargs = true;\n        }\n    }\n\n    // do not print useless \"undefined\"\n    if( !call_has_kw && ! call_has_kwargs ) {\n        let i;\n        for(i = pos.length - 1; i >= 0; --i) {\n            if( pos[i] !== undefined)\n                break;\n        }\n        pos.length = i+1;\n    }\n\n    // write pos given by call kw...\n    for(let i = 0; i < pos.length; ++i) {\n        const arg = pos[i];\n        if( arg === undefined )\n            w_str(\"undefined, \");\n        else {\n            w_node(arg);\n            w_str(\", \");\n        }\n    }\n\n    if( call_has_kw ) {\n        w_str(\"{\");\n        for(let key in kw)\n            w_sns(`${key}: `, kw[key], \", \");\n\n        if( call_has_kwargs ) {\n            w_str(`${meta.kwargs}: {`);\n            for(let key in kwargs)\n                w_sns(`${key}: `, kwargs[key], \", \");\n            w_str(\"}\");\n        }\n\n        w_str(\"},\");\n    }\n\n    if( ! meta.has_kw && call_has_kwargs ) {\n        w_str(`{`);\n        for(let key in kwargs)\n            w_sns(`${key}: `, kwargs[key], \", \");\n        w_str(\"}\");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: number) {\n    (VALUES[node] as Callable).__call__[WRITE_CALL]!(node);\n}","import { AST_KEY_CONTINUE } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_CONTINUE);\n\n}","export const TYPE_type_str_\t= Object.create(null);\nexport const TYPE_type_int_\t= Object.create(null);\nexport const TYPE_type_float_\t= Object.create(null);\nexport const TYPE_type_bool_\t= Object.create(null);\nexport const TYPE_type\t= Object.create(null);\nexport const TYPE_str\t= Object.create(null);\nexport const TYPE_jsint\t= Object.create(null);\nexport const TYPE_int\t= Object.create(null);\nexport const TYPE_index\t= Object.create(null);\nexport const TYPE_float\t= Object.create(null);\nexport const TYPE_bool\t= Object.create(null);\nexport const TYPE_NotImplementedType\t= Object.create(null);\nexport const TYPE_NoneType\t= Object.create(null);\n","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"continue\");\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 40 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(4*MAX_NB_ASTNODES) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>();\n\nlet NEXT_AST_NODE_ID = 0;\n\nexport function addChild(parent: number, nbChild: number) {\n\n    const offset = parent * ASTNODE_SIZE;\n    \n    ASTNODES[offset + ASTNODE_NB_CHILDREN] = nbChild;\n    const id = ASTNODES[offset + ASTNODE_CHILDREN_START] = NEXT_AST_NODE_ID;\n    NEXT_AST_NODE_ID += nbChild;\n\n    return id;\n}\n\nexport function createASTNode() {\n    return NEXT_AST_NODE_ID++;\n}\n\nexport function createASTNodes(nb: number) {\n    NEXT_AST_NODE_ID += nb;\n}\n\nexport default function dop_reset() {\n    VALUES.length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_CHILDREN_START     = 2; // set if children\nexport const ASTNODE_NB_CHILDREN        = 3; // set if unknown nb children\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID];\n}\nexport function nbChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_NB_CHILDREN];\n}\nexport function firstChild(parent: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START];\n}\nexport function resultType(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE];\n}\nexport function parentOPPrio(node: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: number, value: number) {\n    return ASTNODES[parent * ASTNODE_SIZE + ASTNODE_CHILDREN_START] = value;\n}\nexport function setType(node: number, value: number) {\n    return ASTNODES[node * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value;\n}\nexport function setResultType(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value;\n}\nexport function setParentOPPrio(node: number, value: number) {\n    ASTNODES[node * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","import { TYPE_NoneType } from \"./bases\";\n\nexport default TYPE_NoneType;","import { AST_BODY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_BODY);\n\n    const nbChildren = node.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    const beg = Types.length;\n\n    for(let i = 0; i < nbChildren; ++i) {\n\n        let cn = node[i];\n        if(cn.constructor.$name === \"Expr\") // only found in body ?\n            cn = cn.value;\n\n        convert_node(i + coffset, cn, context);\n    }\n\n    // generate ungenerated functions...\n    const end = Types.length;\n    for(let i = beg; i < end; ++i) {\n        const obj = Types[i] as Callable;\n        if( obj.__name__ !== \"function\")\n            continue;\n        const generate = obj.__call__[ARGS_INFO].generate;\n        if( generate !== undefined)\n            obj.__call__[RETURN_TYPE](); // h4ck\n    }\n}","import { AST_STRUCT_LIST } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_STRUCT_LIST);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n}","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \".\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nbChild, resultType } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { addType } from \"./utils/addType\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { Callable, Fct, WRITE_CALL } from \"./utils/types\";\n\n// builtin symbols.\nexport default {\n    int  : TYPEID_type_int_,\n    str  : TYPEID_type_str_,\n    float: TYPEID_type_float_,\n    type : TYPEID_type,\n    len  : addType( genUnaryOpFct(\"len\", RET_INT)),\n    abs  : addType( genUnaryOpFct(\"abs\", RET_INT)), //TODO...\n    print: addType({\n        __name__: \"print\",\n        __call__: method_wrapper(RET_None, (call:number) => {\n            const coffset  = firstChild(call);\n            const nb_child = nbChild(call);\n\n            w_str(\"__SB__.print(\");\n            for(let i = 1; i < nb_child; ++i) {\n                w_node(coffset + i);\n                w_str(\", \");\n            }\n            w_str(\")\");\n        })\n    }),\n};\n\n//TODO: move...\n//TODO: binary/unary\n//TODO: remove return_type (get from the __{name}__)\nfunction genUnaryOpFct(name: string, return_type: RETURN_TYPE_FCT) {\n    const opname = `__${name}__`;\n    return {\n        __name__ : name,\n        __call__ : method_wrapper(return_type, (call: number) => {\n            const left   = firstChild(call)+1;\n            const method = Types[resultType(left)]![opname] as Callable;\n            return method.__call__[WRITE_CALL](call);\n        })\n    }\n}","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import { TYPE_NotImplementedType } from \"./bases\";\n\nexport default TYPE_NotImplementedType;","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\n\nexport default function ast2js(node: number) {\n    w_str(\"null\");\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { CODE_BEG, CODE_END, firstChild, nbChild, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"`\");\n\n    const coffset    = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    for(let i = coffset; i < nbChildren + coffset; ++i) {\n\n        if( resultType(i) === TYPEID_str) {\n\n            const offset = 4*i;\n\n            // we write the children directly...\n            if(__DEBUG__) set_js_cursor(offset + CODE_BEG);\n            w_node(VALUES[i]);\n            if(__DEBUG__) set_js_cursor(offset + CODE_END);\n\n            continue;\n\n        }\n        \n        if( type(i) === AST_LIT_FSTRING_FVAL) {\n            w_node(i);\n            continue;\n        }\n        \n        throw new Error(\"unsupported\");\n    }\n\n    w_str(\"`\");\n}","import { AST_KEY_ASSERT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_ASSERT);\n    const coffset = addChild(dst, 1);\n    convert_node(coffset, node.test, context);\n}","import { AST_KEY_IMPORT_ALIAS } from \"@SBrython/sbry/ast2js/\";\nimport { setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/py2ast\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT_ALIAS);\n    \n    VALUES[dst] = [node.name, node.asname];\n\n}","import { type Context, convert_node, swapASTNodes } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname, reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { AST_OP_BIN } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let op = bname2pyname[node.op.constructor.$name as keyof typeof bname2pyname];\n    if( __DEBUG__ && op === undefined) {\n        console.warn(\"OP\", node.op.constructor.$name);\n        throw new Error(\"not implemented\");\n    }\n\n    setType(dst, AST_OP_BIN);\n\n    const coffset = addChild(dst, 2);\n    convert_node(coffset  , node.left , context); // left\n    convert_node(coffset+1, node.right, context); // right\n\n    const ltype = resultType(coffset);\n    const rtype = resultType(coffset+1);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[ltype][op] as Fct;\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype);\n\n    // try reversed operator\n    if( type === TYPEID_NotImplementedType) {\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        \n        method = Types[rtype][op] as Fct;\n        if( method !== undefined)\n            type   = method[RETURN_TYPE](ltype!);\n\n        if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n            throw new Error(`${Types[rtype].__class__?.__name__} ${op} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        swapASTNodes(coffset, coffset+1); // costly, use 2 ast2js instead ?\n    }\n\n    VALUES[dst] = op;\n\n    setResultType(dst, type);\n}\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CLASSDEF } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, firstChild, resultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { addType } from \"@SBrython/sbry/types/utils/addType\";\nimport { method_wrapper } from \"../types/utils/methods\";\nimport { w_sns, w_str } from \"../ast2js/utils\";\nimport { TYPE_type } from \"../types/bases\";\nimport Types from \"../types\";\n\nfunction weak_assign(target: Record<string, any>, src: Record<string, any>) {\n    for(let key in src)\n        if( ! (key in target) )\n            target[key] = src[key];\n}\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const instance_TypeID = addType({});\n\n    const typeID = addType({\n        __name__ : node.name,\n        __class__: TYPE_type,\n        __call__: method_wrapper(() => instance_TypeID, (call) => {\n            //TODO: should not be here...\n            w_sns(\"new \", firstChild(call), \"(\");\n            //TODO: args...\n            w_str(\")\");\n        })\n    });\n\n    const klass_type = Types[instance_TypeID];\n    const inst_type  = Types[typeID];\n\n    inst_type.__class__ = klass_type;\n\n    context.local_symbols[node.name] = typeID;\n    context = context.createClassContext(typeID);\n\n    setType(dst , AST_CLASSDEF);\n    const nbChildren = 1 + node.bases.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren ; ++i){\n        convert_node(i+coffset, node.bases[i-1], context);\n        const stypeID = resultType(i+coffset);\n\n        // could be optimized...\n        weak_assign(klass_type, Types[stypeID]);\n        weak_assign(inst_type , Types[stypeID-1]);\n    }\n\n    VALUES[dst] = node.name;\n}","import { AST_STRUCT_TUPLE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n    \n    setType(dst, AST_STRUCT_TUPLE);\n    const nbChildren = node.elts.length;\n    const coffset = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.elts[i], context);\n\n}","import { AST_KEY_PASS } from \"@SBrython/sbry/ast2js/\";\nimport { setType } from \"@SBrython/sbry/dop\";\nimport type { Context } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, _context: Context) {\n    setType(dst, AST_KEY_PASS);\n}","import { AST_CTRL_TERNARY } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const coffset = addChild(dst, 3);\n\n    convert_node(coffset  , node.test  , context);\n    convert_node(coffset+1, node.body  , context); // true\n    convert_node(coffset+2, node.orelse, context); // false\n\n    setType(dst , AST_CTRL_TERNARY);\n    setResultType(dst, resultType(coffset+1));\n}","import { AST_KEY_IMPORT } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_KEY_IMPORT);\n    const nbChildren = node.names.length;\n    const coffset    = addChild(dst, nbChildren);\n\n    for(let i = 0; i < nbChildren; ++i)\n        convert_node(i + coffset, node.names[i], context); // not used yet ?\n\n    VALUES[dst] = node.module;\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", coffset+1, \"]\");\n}","import { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: number) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct<[number, number]>;\n    method[WRITE_CALL]!(node, coffset, coffset+1);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|number {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): number {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): number[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types\";\n\nexport default function ast2js(node: number) {\n\n    let value = VALUES[node];\n\n    if( resultType(node) === TYPEID_int ) {\n        // force str write (else might assume this is an AST node ID)...\n        w_str(`${value}n`); \n        return;\n    }\n    if( typeof value === \"bigint\" )\n        value = Number(value); // remove useless precision.\n\n    // force str write (else might assume this is an AST node ID)...\n    w_str(`${value}`);\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: number) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n    const nbChildren = nbChild(node);\n\n    let end = Number2Int(body+1);\n\n    w_str(`for(var ${idx} = `);\n\n    if( nbChildren > 2) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(body+1);\n\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    if( nbChildren === 4) {\n        w_node( Number2Int(body+2) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { reversed_operator } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: number, left:number, op: string, right: number) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __DEBUG__ && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            write_binary_jsop(node, left, jsop, right);\n\n            return;\n        }\n\n        reversed = true;\n        [left, right] = [right, left];\n    }\n\n    method[WRITE_CALL]!(node, left, right, reversed);\n}\n\nexport default function ast2js(node: number) {\n    \n    const value = VALUES[node];\n\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < value.length; ++i) {\n        if( i !== 0 )\n            w_str(' && ');\n\n        const op    = value[i];\n        const left  = i+coffset;\n        const right = i+1+coffset;\n\n        if( op === 'is' || op === \"is not\") {\n            let jop = '===';\n            if( op === \"is not\")\n                jop = '!==';\n\n            const ltype = resultType(left);\n            const rtype = resultType(right);\n\n            let l = left;\n            let r = right;\n\n            if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n                l = Number2Int(l);\n            else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n                r = Number2Int(r);\n\n\n            write_binary_jsop(node, l, jop, r);\n            continue;\n        }\n        \n        find_and_write_call(node, left, op, right);\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_WHILE } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_CTRL_WHILE);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset  , node.test, context);\n\n    Body(coffset+1, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset+1, node.body);\n\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    w_str(\"Object.freeze([\");\n\n    const nbChildren = nbChild(node);\n    const coffset    = firstChild(node);\n\n    for(let i = 0; i < nbChildren; ++i) {\n        w_node(i + coffset);\n        w_str(\", \");\n    }\n\n    w_str(\"])\");\n}","import { VALUES } from \"@SBrython/sbry/dop\";\nimport { write_multi_jsop } from \"@SBrython/sbry/structs/BinaryOperators\";\n\nexport default function ast2js(node: number) {\n    write_multi_jsop(node, VALUES[node]);\n}","import { AST_FCT_CALL_KEYWORD } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, resultType, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_FCT_CALL_KEYWORD);\n\n    const coffset = addChild(dst, 1);\n    convert_node (coffset, node.value, context )\n    setResultType(dst, resultType(coffset));\n\n    VALUES[dst] = node.arg;\n}","// must NOT depends on list.\nimport BRY2SBRY from \"./index\"; // required for correct type deduction...\nimport type {Context} from \"./index.d.ts\";\nexport type {Context};\n\nimport { ASTNODE_SIZE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END_COL, CODE_END_LINE, CODE_LINE, PY_CODE, VALUES } from \"../dop\";\n\n//TODO: use firstChild + nextSibling instead of nbChild\nexport function swapASTNodes(a: number, b: number ) {\n\n    const ao = ASTNODE_SIZE * a;\n    const bo = ASTNODE_SIZE * b;\n\n    let t:any;\n    for(let i = 0; i < ASTNODE_SIZE; ++i) {\n        t = ASTNODES[ao+i];\n        ASTNODES[ao+i] = ASTNODES[bo+i];\n        ASTNODES[bo+i] = t;\n    }\n\n    if( __DEBUG__ ) {\n        const ap = 4*a;\n        const bp = 4*b;\n        for(let i = 0; i < 4; ++i) {\n            t = PY_CODE[ap+i];\n            PY_CODE[ap+i] = PY_CODE[bp+i];\n            PY_CODE[bp+i] = t;\n        }\n    }\n\n    t = VALUES[a];\n    VALUES[a] = VALUES[b];\n    VALUES[b] = t;\n}\n\nexport function convert_node(id: number, brython_node: any, context: Context) {\n\n    const name = brython_node.constructor.$name;\n\n    const convert = BRY2SBRY[name as keyof typeof BRY2SBRY];\n\n    if( __DEBUG__ && convert === undefined) {\n        console.warn(\"Module not registered:\", name);\n        console.warn(`at ${brython_node.lineno}:${brython_node.col_offset}`);\n        console.log( brython_node );\n        throw new Error(`Unsupported node ${name} at ${brython_node.lineno}:${brython_node.col_offset}`);\n    }\n\n    convert(id, brython_node, context);\n    if( __DEBUG__ ) set_py_code(id, brython_node);\n\n}\n\n// ================ POS ====================\n\nexport function set_py_code(id: number, brython_node: any) {\n\n    const offset = 4*id;\n    PY_CODE[ offset + CODE_BEG_LINE ] = brython_node.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = brython_node.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = brython_node.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = brython_node.end_col_offset;\n}\n\nexport function set_py_code_from_list(id: number, brython_node: any) {\n\n    const offset = 4*id;\n\n    const beg = brython_node[0];\n    const end = brython_node[brython_node.length-1];\n\n    PY_CODE[ offset + CODE_BEG_LINE ] = beg.lineno;\n    PY_CODE[ offset + CODE_BEG_COL  ] = beg.col_offset;\n    PY_CODE[ offset + CODE_END_LINE ] = end.end_lineno;\n    PY_CODE[ offset + CODE_END_COL  ] = end.end_col_offset;\n}\n\n\nexport function set_py_from_beg_end( src: number, dst_beg: number, dst_end: number ) {\n\n    const src_offset = 4*src;\n    const beg_offset = 4*dst_beg;\n    const end_offset = 4*dst_end + 2;\n\n    PY_CODE[ src_offset + CODE_BEG_LINE ] = PY_CODE[ beg_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_BEG_COL  ] = PY_CODE[ beg_offset + CODE_COL  ];\n\n    PY_CODE[ src_offset + CODE_END_LINE ] = PY_CODE[ end_offset + CODE_LINE ];\n    PY_CODE[ src_offset + CODE_END_COL  ] = PY_CODE[ end_offset + CODE_COL  ];\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nbChild, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\n// current\n    // astname => pyname (bname2pyname)\n    // pyname => r.pyname (BinaryOperators) - adds r except eq/ne/(l/g)(t/e)\n    // pyname => a.pyname (AssignOperators) - adds \"i\"\n    // jsname => pyname (jsop2pyop)\n// astname => IDX => Py name (?) [needs py name as it is on its SType...]\n    // AST Type ID = OP_IDX + CSNTE ?\n    // reverse/assign/JS_OP_IDX = IDX + CSNTE ?\n    // remove jsname => pyname (use CSNTE + reuse lists).\n\n// current\n    // a op b js cmp => b op a js cmp (reverse) [with the operator was reversed]\n    // js op => priority (JSOperatorsPriority) ! u.- (for unary -)\n// use JSOP_IDX => get reversed + priority + jssymb ?\n\nexport const bname2pyname = {\n    \"USub\": \"__neg__\",\n    \"Not\" : \"not\",\n\n    \"Pow\" : \"__pow__\",\n\n    \"Mult\"    : \"__mul__\",\n    \"Div\"     : \"__truediv__\",\n    \"FloorDiv\": \"__floordiv__\",\n    \"Mod\"     : \"__mod__\",\n\n    \"Add\"     : \"__add__\",\n    \"Sub\"     : \"__sub__\",\n\n    \"Is\"      : \"is\",\n    \"IsNot\"   : \"is not\",\n    \"Eq\"      : \"__eq__\",\n    \"NotEq\"   : \"__ne__\",\n\n    \"Gt\"      : \"__gt__\",\n    \"GtE\"     : \"__ge__\",\n    \"Lt\"      : \"__lt__\",\n    \"LtE\"     : \"__le__\",\n\n    \"Invert\"  : \"__not__\",\n\n    \"BitOr\"   : \"__or__\",\n    \"BitXor\"  : \"__xor__\",\n    \"BitAnd\"  : \"__and__\",\n    \"RShift\"  : \"__rshift__\",\n    \"LShift\"  : \"__lshift__\",\n}\n\nexport const BinaryOperators = {\n    '__pow__'     : '__rpow__',\n    '__mul__'     : '__rmul__',\n    '__truediv__' : '__rtruediv__',\n    '__floordiv__': '__rfloordiv__',\n    '__mod__'     : '__rmod__',\n\n    '__add__'    : '__radd__',\n    '__sub__'    : '__rsub__',\n\n    '__eq__'     : '__eq__',\n    '__ne__'     : '__ne__',\n\n    '__lt__'     : '__gt__',\n    '__gt__'     : '__lt__',\n    '__le__'     : '__ge__',\n    '__ge__'     : '__le__',\n\n    '__not__'    : '__rnot__',\n    '__or__'     : '__ror__',\n    '__and__'    : '__rand__',\n    '__xor__'    : '__rxor__',\n    '__lshift__' : '__rlshift__',\n    '__rshift__' : '__rrshift__',\n}\n\n// adds i\nexport const AssignOperators = {\n    '__pow__'     : '__ipow__',\n    '__mul__'     : '__imul__',\n    '__truediv__' : '__itruediv__',\n    '__floordiv__': '__ifloordiv__',\n    '__mod__'     : '__imod__',\n\n    '__add__'    : '__iadd__',\n    '__sub__'    : '__isub__',\n\n    '__or__'     : '__ior__',\n    '__and__'    : '__iand__',\n    '__xor__'    : '__ixor__',\n    '__lshift__' : '__ilshift__',\n    '__rshift__' : '__irshift__',\n}\n\n\nexport const jsop2pyop = {\n    '**': 'pow',\n    '*' : 'mul',\n    '/' : 'truediv',\n    '//': 'floordiv',\n    '%' : 'mod',\n    \n    '+'  : 'add',\n    '-'  : 'sub',\n    'u.-': 'neg',\n\n    '==' : 'eq',\n    '!=' : 'ne',\n    '<'  : 'lt',\n    '<=' : 'le',\n    '>=' : 'ge',\n    '>'  : 'gt',\n\n    '~' : 'not',\n    '|' : 'or',\n    '&' : 'and',\n    '^' : 'xor',\n    '<<': 'lshift',\n    '>>': 'rshift'\n};\n\n// TODO: unary op too...\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// bigger = more priority (0 by default).\nexport const JSOperators = [\n    [],\n    ['='], /* et tous les dérivés */ // right to left !\n    ['||', '??'],\n    ['&&'], //TODO\n    ['|'],  //TODO\n    ['^'],  //TODO\n    ['&'],  //TODO\n    ['==', '!=', '===', '!=='],\n    ['<', '<=', '>=', '>'],\n    ['<<', '>>', '>>>'], //TODO\n    ['+', '-'],\n    ['*', '/', '%'], // Python also has //\n    ['**'],          // right to left !\n    ['!', '++', '--', '~', 'u.-'],\n];\n\n/*\nhttps://docs.python.org/3/library/functions.html#callable\n\n-> classes\nbool()\nfloat()\nint()\nstr()\nbytearray() [Uint8Array] (RW)\nbytes()     [?]          (RO) <- no types in JS...\n                              <- Uint8Array with flag ? freeze() [JS unsafe]\n            b\"e\\xFF\" instead of [101,101], etc. (32 <= byt <= 126)\ntype()\nlist()      [Array]\ntuple()     [Object.frozen(Array)]\n\nset()       // relies on hash()... => set[literals]\n                            => set() / <- JS set.\n                       => bytes/bytearray/etc.\n                            => inherit Set()\n                                => Internal keys() set [recompute hash when add/remove]\n                                  or\n                                => internally stored as Map(hash, value) (?)\nfrozenset()            => extends set to replace modifiers.\n\ndict()\n                        dict[str] as Object.create(null) + (and pure JSObj as dict[str] )\n                        => inherit Map()\n                            => Set(hash) / Map(hash, key) / Map(key, hash) ???\n                                // get/set.\n                            => Map(key, value)\n\nobject()\ncomplex()\nmemoryview()            => ArrayBuffer ?\n\n-> print\nascii()\nbin()\nhex()\noct()\nrepr()\nhash()\n\n-> maths\nabs()\ndivmod()\npow()\nround()\n\n-> lists\nall()\nany()\nfilter()\nmap()\nmax()\nmin()\nsum()\nlen()\nenumerate()\nreversed()\nslice()\nsorted()\nzip()\n\n-> iter\nrange()\naiter()\niter()\nanext()\nnext()\n\n-> str\nord()\nchr()\nformat()\nprint()\nf\"\"\n\ncallable()\nclassmethod()\nstaticmethod()\nproperty()\nsuper()\nisinstance()\nissubclass()\ndelattr()\ngetattr()\nhasattr()\nsetattr()\ndir()\n\neval()\nexec()\ncompile()\nbreakpoint()\n\nglobals()\nlocals()\nvars()\n__import__()\n\nid()\n    -> on-demand weakref ?\n\nhelp()\ninput()\nopen()\n\n*/\n\n/*\nunary\n- pos (unary +)\n\n- bool\n- float\n- int\n- str\n- repr\n\n- abs\n- ceil\n- floor\n- round\n- trunc\n\nbinary\n- pow/rpow\n- divmod/rdivmod\n\nclass\n- class\n- new\n- init\n- init_subclass\n\n- subclasshook // __isinstancecheck__ \n\n- dir\n- delattr\n- setattr\n- getattribute\n\n- doc\n- format\n- getnewargs\n- hash\n- index (?)\n- sizeof\n*/\n\n\nlet JSOperatorsPriority: Record<string, number> = {};\nfor(let i = 0; i < JSOperators.length; ++i) {\n\n    const priority = i;\n    for(const op of JSOperators[i])\n        JSOperatorsPriority[op] = priority;\n\n}\n\nexport const JSOperatorsPrio = JSOperatorsPriority;\n\nexport function reversed_operator<T extends keyof typeof BinaryOperators>(op: T) {\n    return BinaryOperators[op];\n}\n\nconst LEFT  = 1;\nconst RIGHT = 2;\n\nexport function write_multi_jsop(node: number, op: string ) {\n\n    const first      = firstChild(node);\n    const nbChildren = nbChild(node); \n\n    const prio   = JSOperatorsPriority[op];\n    const p_prio = JSOperatorsPriority[op];\n\n    setParentOPPrio(first, prio);\n\n    for(let i = 1; i < nbChildren; ++i)\n        setParentOPPrio( first + i, prio + 1 );\n\n    const parenthesis = p_prio < prio;\n    if( parenthesis )\n        w_str(\"(\");\n\n    w_node(first);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        w_str(' && ');\n        w_node(first+1);\n    }\n\n    if( parenthesis )\n        w_str(\")\");\n}\n\nexport const CMPOPS_LIST = ['==', '!=', '>', '<', '>=', '<='] as const;\n","import { Context, convert_node, set_py_code, set_py_from_beg_end } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { AST_FCT_DEF_ARGS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, PY_CODE, resultType, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types\";\nimport { ARGS_INFO, Callable, RETURN_TYPE } from \"@SBrython/sbry/types/utils/types\";\nimport Types from \"@SBrython/sbry/types\";\n\n//TODO: fake node...\nexport default function convert() {\n    // args node doesn't exist...\n    return;\n}\n\nexport const AST_FCT_DEF_ARGS_POSONLY = 0;\nexport const AST_FCT_DEF_ARGS_KWARG   = 1;\nexport const AST_FCT_DEF_ARGS_KWONLY  = 2;\nexport const AST_FCT_DEF_ARGS_VARG    = 3;\nexport const AST_FCT_DEF_ARGS_POS     = 4;\n\n\nconvert.brython_name = \"arguments\";\n\nexport function convert_args(dst: number, node: any, SType_fct: Callable, context: Context) {\n\n    const meta = SType_fct.__call__[ARGS_INFO];\n\n    // compute total args...\n    const _args = node.args;\n    const has_vararg = _args.vararg !== undefined;\n    const has_kwarg  = _args.kwarg  !== undefined;\n    const args_pos   = meta.args_pos;\n    const args_names = meta.args_names;\n\n    const total_args = _args.posonlyargs.length\n                     + _args.args.length\n                     + +has_vararg\n                     + _args.kwonlyargs.length\n                     + +has_kwarg;\n\n    setType(dst, AST_FCT_DEF_ARGS);\n\n    const coffset = addChild(dst, total_args); // args\n\n    const pos_defaults = node.args.defaults;\n    const posonly = _args.posonlyargs;\n    const pos     = _args.args;\n\n    // posonly\n    let doffset = pos_defaults.length - posonly.length - pos.length;\n    for(let i = 0; i < posonly.length; ++i ) {\n        convert_arg(i + coffset, posonly[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POSONLY, context);\n        context.local_symbols[posonly[i].arg] = resultType(i+coffset);\n    }\n\n    // pos\n    let offset = posonly.length;\n      doffset -= posonly.length;\n    for(let i = 0; i < pos.length; ++i ) {\n        \n        convert_arg(offset + coffset, pos[i], pos_defaults[i - doffset], AST_FCT_DEF_ARGS_POS, context);\n        \n        args_names[offset++] = pos[i].arg;\n    }\n\n    meta.idx_vararg = offset;\n\n    // vararg\n    if( has_vararg ) {\n        meta.idx_end_pos = Number.POSITIVE_INFINITY;\n\n        convert_arg(offset + coffset, _args.vararg, undefined, AST_FCT_DEF_ARGS_VARG, context);\n        \n        ++offset;\n    } else {\n        \n        meta.idx_end_pos = offset;\n\n        const nb_pos_defaults = Math.min(pos_defaults.length, pos.length);\n        const has_others = pos_defaults.length > pos.length || total_args !== offset;\n\n        if( nb_pos_defaults > 1 || nb_pos_defaults === 1 && has_others)\n            meta.idx_end_pos -= nb_pos_defaults;\n    }\n\n    let cut_off   = meta.idx_end_pos;\n    if( cut_off === Number.POSITIVE_INFINITY)\n        cut_off = meta.idx_vararg;\n    for(let i = posonly.length; i < cut_off; ++i)\n        args_pos[VALUES[i + coffset]] = i;\n\n    const end = meta.idx_vararg - cut_off;\n    for(let i = 0; i < end; ++i)\n        args_pos[VALUES[i + coffset]] = -1;\n\n    //TODO: idx_end_pos (if default and no idx_vararg)\n\n    // kwonly\n    const kwonly      = _args.kwonlyargs;\n    const kw_defaults = _args.kw_defaults;\n\n    meta.has_kw = meta.idx_vararg !== cut_off || kwonly.length !== 0;\n\n    doffset = kw_defaults.length - kwonly.length;\n    for(let i = 0; i < kwonly.length; ++i ) {\n        \n        convert_arg(offset + coffset, kwonly[i], kw_defaults[i], AST_FCT_DEF_ARGS_KWONLY, context);\n        \n        args_pos[kwonly[i].arg] = -1;\n\n        ++offset;\n    }\n\n    // kwarg\n    if( has_kwarg ) {\n        \n        convert_arg(offset + coffset, _args.kwarg, undefined, AST_FCT_DEF_ARGS_KWARG, context);\n\n        meta.kwargs = _args.kwarg.arg;\n\n        ++offset;\n    }\n\n    //TODO...\n    /*\n    if( context.type === \"class\")\n        _args = _args.slice(1);\n    */\n\n    //TODO...\n\n    VALUES[dst] = SType_fct;\n    \n    if( __DEBUG__ ) {\n        if( total_args !== 0) {\n\n            set_py_from_beg_end(dst, coffset, coffset + total_args - 1);\n\n        } else {\n            // an estimation...\n            const col = node.col_offset + 4 + node.name.length + 1;\n\n            const py_offset = 4*dst;\n            PY_CODE[ py_offset + CODE_BEG_LINE ] = PY_CODE[ py_offset + CODE_END_LINE ] = node.lineno;\n            PY_CODE[ py_offset + CODE_BEG_COL  ] = PY_CODE[ py_offset + CODE_END_COL  ] = col;\n        }\n    }\n}\nexport function convert_arg(dst: number, node: any, defval: any, type:number, context: Context) {\n\n    const name = node.arg;\n\n    let result_type = TYPEID_NotImplementedType;\n\n    const annotation = node.annotation?.id;\n    if( annotation !== undefined) {\n        const type = Types[context.local_symbols[annotation]] as Callable;\n        result_type = type.__call__[RETURN_TYPE]()\n    }\n\n    if( defval !== undefined ) {\n\n        const coffset = addChild(dst, 1);\n        convert_node(coffset, defval, context);\n\n        if( result_type === TYPEID_NotImplementedType ) {\n            result_type = resultType(coffset);\n            if(result_type === TYPEID_jsint)\n                result_type = TYPEID_int;\n        }\n    }\n\n    setType(dst, type);\n    setResultType(dst, result_type);\n\n    VALUES[dst] = name;\n    context.local_symbols[name] = result_type;\n\n    if( __DEBUG__) set_py_code(dst, node);\n}","const LIST = {\n\tName: require(\"./Name\").default,\n\tConstant: require(\"./Constant\").default,\n\tClassDef: require(\"./ClassDef\").default,\n\tBody: require(\"./Body\").default,\n\tTuple: require(\"./structs/Tuple\").default,\n\tList: require(\"./structs/List\").default,\n\tDict: require(\"./structs/Dict\").default,\n\tUnaryOp: require(\"./operators/UnaryOp\").default,\n\tSubscript: require(\"./operators/Subscript\").default,\n\tCompare: require(\"./operators/Compare\").default,\n\tBoolOp: require(\"./operators/BoolOp\").default,\n\tBinOp: require(\"./operators/BinOp\").default,\n\tAugAssign: require(\"./operators/AugAssign\").default,\n\tAttribute: require(\"./operators/Attribute\").default,\n\tAssign: require(\"./operators/Assign\").default,\n\tReturn: require(\"./keywords/Return\").default,\n\tRaise: require(\"./keywords/Raise\").default,\n\tPass: require(\"./keywords/Pass\").default,\n\tContinue: require(\"./keywords/Continue\").default,\n\tBreak: require(\"./keywords/Break\").default,\n\tAssert: require(\"./keywords/Assert\").default,\n\talias: require(\"./import/alias\").default,\n\tImportFrom: require(\"./import/ImportFrom\").default,\n\tImport: require(\"./import/Import\").default,\n\tkeyword: require(\"./functions/keyword\").default,\n\tFunctionDef: require(\"./functions/FunctionDef\").default,\n\tCall: require(\"./functions/Call\").default,\n\tArgs: require(\"./functions/Args\").default,\n\tJoinedStr: require(\"./fstring/JoinedStr\").default,\n\tFormattedValue: require(\"./fstring/FormattedValue\").default,\n\tWhile: require(\"./controlflows/While\").default,\n\tTry: require(\"./controlflows/Try\").default,\n\tIfExp: require(\"./controlflows/IfExp\").default,\n\tIf: require(\"./controlflows/If\").default,\n\tFor: require(\"./controlflows/For\").default,\n\tExceptHandler: require(\"./controlflows/ExceptHandler\").default,\n}\n\nimport ILIST from './index';\nObject.assign(ILIST, LIST);\nexport default ILIST;\n","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","const LIST = [\n\trequire(\"./NotImplementedType\").default,\n\trequire(\"./NoneType\").default,\n\trequire(\"./int\").default,\n\trequire(\"./jsint\").default,\n\trequire(\"./float\").default,\n\trequire(\"./bool\").default,\n\trequire(\"./str\").default,\n\trequire(\"./type\").default,\n\trequire(\"./type[int]\").default,\n\trequire(\"./type[float]\").default,\n\trequire(\"./type[str]\").default,\n\trequire(\"./type[bool]\").default,\n]\n\nimport ILIST from './index';\nILIST.push(...LIST);\nexport default ILIST;\n","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_IFBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    let childCount = 2;\n\n    let cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            ++childCount;\n            break;\n        }\n        cur = cur.orelse[0];\n        childCount += 2;\n    }\n\n    setType(dst, AST_CTRL_IFBLOCK);\n    let coffset = addChild(dst, childCount);\n\n    // if\n    convert_node(coffset++, node.test, context);\n\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n    ++coffset;\n\n    // else if\n    cur = node;\n    while( \"orelse\" in cur && cur.orelse.length === 1 ) {\n\n        // cur.orelse[0] is the body\n        if( ! (\"test\" in cur.orelse[0]) ) { // final else\n            convert_node(coffset, cur.orelse, context)\n            break;\n        }\n\n        cur = cur.orelse[0];\n\n        convert_node(coffset++, cur.test, context);\n\n        Body(coffset, cur.body, context);\n        if(__DEBUG__) set_py_code_from_list(coffset, cur.body);\n        ++coffset;\n\n        childCount += 2;\n    }\n}","import Body from \"@SBrython/sbry/bry2sbry/Body\";\nimport { AST_CTRL_TRYBLOCK } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, set_py_code_from_list } from \"@SBrython/sbry/bry2sbry/utils\";\nimport ExceptHandler from \"./ExceptHandler\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nbChildren = node.handlers.length+1;\n\n    setType(dst, AST_CTRL_TRYBLOCK);\n    const coffset = addChild(dst, nbChildren)\n\n    // try body\n    Body(coffset, node.body, context);\n    if(__DEBUG__) set_py_code_from_list(coffset, node.body);\n\n    for(let i = 1; i < nbChildren; ++i) {\n        ExceptHandler(i+coffset, node.handlers[i-1], context);\n        if(__DEBUG__) set_py_code_from_list(i+coffset, node.handlers[i-1]);\n    }\n    //TODO: finally ?\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild } from \"@SBrython/sbry/dop\";\n\nexport default function(node: number) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { AST_LIT_BOOL, AST_LIT_FLOAT, AST_LIT_INT, AST_LIT_NONE, AST_LIT_STR } from \"@SBrython/sbry/ast2js/\";\nimport { setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NoneType, TYPEID_str } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, _context: Context): false|void {\n\n    const value = node.value;\n    const vtype = typeof value;\n    let qname;\n\n    if(vtype !== \"object\") {\n\n        if( vtype === \"boolean\" ) {\n\n            setType      (dst, AST_LIT_BOOL);\n            setResultType(dst, TYPEID_bool);\n            \n            VALUES[dst] = value; // TODO: 2 types instead of one ?\n\n            return;\n        }\n\n        if( vtype === \"string\") {\n        \n            setType      (dst, AST_LIT_STR);\n            setResultType(dst, TYPEID_str);\n        \n            VALUES[dst] = value;\n\n            return;\n        }\n\n    } else {\n        qname = value.__class__.__qualname__;\n\n        if( qname === \"float\") {\n        \n            setType      (dst, AST_LIT_FLOAT);\n            setResultType(dst, TYPEID_float);\n            \n            VALUES[dst] = value.value;\n\n            return;\n        }\n\n        if( qname === \"NoneType\" ) {\n        \n            setType      (dst, AST_LIT_NONE);\n            setResultType(dst, TYPEID_NoneType);\n\n            return;\n        }\n    }\n\n    if( __DEBUG__ && qname !== \"int\" && vtype !== \"number\" )\n        throw new Error(`Unknown type ${vtype}:${qname}`);\n\n    setType      (dst, AST_LIT_INT);\n\n    if( qname === \"int\" ) { // bigint\n        setResultType(dst, TYPEID_int);\n        VALUES[dst] = value.value;\n    } else {\n        setResultType(dst, TYPEID_jsint);\n        VALUES[dst] = value;\n    }\n}","import { parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\n\n\ntype GenUnaryOps_Opts = {\n    //convert_self ?: Converter,\n    write_call   ?: (node: number, op: string, a: number) => void\n};\n\nexport function genUnaryOps(ops        : (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT,\n                            {\n                                //convert_self = NOCONVERT,\n                                write_call   = write_unary_jsop,\n                            }: GenUnaryOps_Opts = {}\n                        ) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op];\n        if( op === 'u.-')\n            op = '-';\n\n        result[`__${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number) => {\n                return write_call(node, op, self); //convert_self(self) );\n            }\n        )\n    }\n    \n    return result;\n}\n\nexport function write_unary_jsop(node: number, op: string, a: number) {\n\n    let rop = op;\n    if( rop === '-')\n        rop = 'u.-';\n\n    // unary JS Op prio list (?)\n    const prio   = JSOperatorsPrio[rop];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = op; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${op}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n\n    const [name, kname] = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", coffset+1, \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ ${kname}.${name}(this, ...args) }`);\n}","import { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_LIT_FSTRING_FVAL);\n    const coffset = addChild(dst, 1);\n\n    convert_node(coffset, node.value, context);\n}","import { createASTNode, firstChild, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types\";\n\nexport type Converter = (node: number) => number;\n\nexport const NOCONVERT = (node: number) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: number, target = TYPEID_float) {\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType(coffset+1);\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: number) {\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","import { AST_OP_CMP } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setResultType, setType, VALUES } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { bname2pyname } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { TYPEID_bool } from \"@SBrython/sbry/types\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    const nops = node.ops;\n    const nb_ops = nops.length\n    const ops = new Array(nb_ops);\n    for(let i = 0; i < nb_ops; ++i) {\n\n        const op = bname2pyname[nops[i].constructor.$name as keyof typeof bname2pyname];\n        if( __DEBUG__ && op === undefined)\n            throw new Error(`${nops[i].constructor.$name} not implemented!`);\n        \n        ops[i] = op;\n    }\n\n    VALUES[dst] = ops;\n\n    setType(dst, AST_OP_CMP);\n    setResultType(dst, TYPEID_bool);\n    const nbChildren = node.comparators.length + 1;\n    const coffset = addChild(dst, nbChildren);\n\n    convert_node(coffset, node.left, context );\n    for(let i = 1 ; i < nbChildren; ++i)\n        convert_node(i + coffset, node.comparators[i-1], context);\n}\n","import { TYPEID_type } from \"./index\";\nimport { w_sns } from \"../ast2js/utils\";\nimport { firstChild } from \"../dop\";\nimport { TYPE_type } from \"./bases\";\nimport { method_wrapper } from \"./utils/methods\";\n\nexport default Object.assign(TYPE_type,\n    {\n        __class__: TYPE_type,\n        __name__ : \"type\",\n        __call__ : method_wrapper( () => TYPEID_type, (call: number) => {\n            const coffset = firstChild(call);\n            w_sns(\"(\", coffset+1, \").constructor\");\n        })\n    });","import { parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { jsop2pyop, JSOperatorsPrio } from \"../BinaryOperators\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { method_wrapper } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { write_unary_jsop } from \"./unary\";\n\nexport type GenBinaryOps_Opts = {\n    convert_other   ?: Converter,\n    convert_self    ?: Converter,\n    write_call      ?: (node: number, self: number, op: string, other: number) => void\n};\n\nexport function genBinaryOps(ops: (keyof typeof jsop2pyop)[],\n                            return_type: RETURN_TYPE_FCT, \n                         {\n                            convert_other   = NOCONVERT,\n                            convert_self    = NOCONVERT,\n                            write_call      = write_binary_jsop,\n                         }: GenBinaryOps_Opts = {}) {\n\n    let result: Record<string, ReturnType<typeof method_wrapper>> = {};\n\n    for(let op of ops) {\n\n        const pyop = jsop2pyop[op]; //TODO: op...\n        if( op === '//')\n            op = '/';\n\n        result[`__${pyop}__`]  = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_self(self), op, convert_other(other) );\n        });\n\n        result[`__r${pyop}__`] = method_wrapper(return_type,\n            (node: number, self: number, other: number) => {\n            return write_call(node, convert_other(other), op, convert_self(self) );\n        });\n\n        if( convert_self === NOCONVERT && write_call === write_binary_jsop) {\n\n            result[`__i${pyop}__`] = method_wrapper(return_type,\n        \n                (node: number, self: number, other: number) => {\n                    \n                    const other_value = VALUES[other];\n\n                    if( op === '+' && other_value === 1)\n                        return write_unary_jsop(node, '++', self);\n                    if( op === '-' && other_value === 1)\n                        return write_unary_jsop(node, '--', self);\n                    \n                    return write_binary_jsop(node, self, op+'=', convert_other(other) );\n                },\n            );\n        }\n    }\n    \n    return result;\n}\n\nexport function write_binary_jsop(node: number, a: number, op: string, b: number) {\n\n    const   prio = JSOperatorsPrio[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, op, b, r);\n}","import { AST_OP_BRACKETS } from \"@SBrython/sbry/ast2js/\";\nimport { addChild, setType } from \"@SBrython/sbry/dop\";\nimport { type Context, convert_node } from \"@SBrython/sbry/bry2sbry/utils\";\n\nexport default function convert(dst: number, node: any, context: Context) {\n\n    setType(dst, AST_OP_BRACKETS);\n    const coffset = addChild(dst, 2);\n\n    convert_node(coffset,   node.value, context),\n    convert_node(coffset+1, node.slice, context)\n}","import { genBinaryOps, write_binary_jsop } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPE_jsint, TYPE_type_int_ } from \"./bases\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, resultType } from \"@SBrython/sbry/dop\";\nimport { CMPOPS_LIST } from \"@SBrython/sbry/structs/BinaryOperators\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { genUnaryOps, write_unary_jsop } from \"@SBrython/sbry/structs/operators/unary\";\nimport { genCmpOps } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_int } from \".\";\nimport { method_wrapper } from \"./utils/methods\";\nimport { write_id_jsop } from \"../structs/operators/id\";\n\nexport default Object.assign(TYPE_jsint,\n    {\n        __class__: TYPE_type_int_,\n        __abs__: {\n            __call__: method_wrapper(RET_JSINT, (node) => {\n                w_sns(\"Math.abs(\", firstChild(node), \")\");\n            })\n        },\n        __ceil__: {\n            __call__: method_wrapper(RET_INT, (node) => {\n                write_id_jsop(node, firstChild(node) );\n            })\n        }\n    },\n    genBinaryOps(\n        // '**' and '*' => if \"as float\" could accept loss of precision.\n        [\n            '**', '+', '-',\n            '&', '|', '^', '>>', '<<' // in JS bit operations are on 32bits\n        ],\n        RET_IJ2INT,\n        {\n            convert_self : CONVERT_2INT,\n            convert_other: CONVERT_2INT\n        }\n    ),\n    genBinaryOps(['*'], RET_IJ2INT,\n        {\n            write_call: (node, a, op, b) => {\n                if( resultType(node) === TYPEID_int ){\n                    a = Number2Int(a);\n                    b = Number2Int(b);\n                } else {\n                    a = Int2Number(a);\n                    b = Int2Number(b);\n                }\n                \n                write_binary_jsop(node, a, '*', b);\n            },\n        }\n    ),\n    genBinaryOps(['/'], RET_IJBF2FLOAT,\n        {\n            convert_other: CONVERT_INT2FLOAT\n        }\n    ),\n    genBinaryOps(['//'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                w_sns(\"_sb_.floordiv_float(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genBinaryOps(['%'], RET_JSINT2JSINT,\n        {\n            write_call: (node: number, self: number, op, other: number) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", self, \", \", other, \")\");\n            },\n        }\n    ),\n    genUnaryOps(['u.-'], RET_JSINT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) => {\n\n                if( resultType(node) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return write_unary_jsop(node, '-', a);\n            },\n        }\n    ),\n    genUnaryOps(['~'], RET_INT, // min_safe_integer == max_safe_integer.\n        {\n            write_call: (node, op, a) =>{\n                write_unary_jsop(node, '~', Number2Int(a) );\n            }\n        }\n    ),\n    genCmpOps(  CMPOPS_LIST, RET_IJBF2BOOL)\n);","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: number) {\n    w_str( VALUES[node] );\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["LIST","require","ILIST","push","_id2name","ast2js","node","body","firstChild","nbChildren","nbChild","w_str","VALUES","i","w_node","w_sns","convert","dst","context","fct","coffset","func","name","attr","addChild","args","length","keywords","convert_node","value","type","resultType","Types","undefined","console","warn","Error","id","fct_type","local_symbols","ret_type","__call__","RETURN_TYPE","setType","AST_FCT_CALL","setResultType","keyword","set_py_code","rchild","TYPEID_jsint","TYPEID_int","Number2Int","SBrython","browser","globalThis","buildModule","jscode","ast","filename","this","Function","runJSCode","getModules","getModule","getASTFor","print","log","_r_","_sb_","Object","assign","TYPE_str","__class__","TYPE_type_str_","__len__","method_wrapper","RET_INT","genCmpOps","CMPOPS_LIST","RET_STR2BOOL","genBinaryOps","RET_STR2STR","RET_IJ2STR","convert_other","CONVERT_INT2FLOAT","write_call","a","op","b","TYPEID_str","t","TYPE_type_float_","TYPE_type","__name__","JS_NAME","RET_FLOAT","other","other_type","Int2Number","TYPEID_float","other_value","AST_LIT_STR","otype","__int__","WRITE_CALL","AST_KEY_BREAK","BB","w_NL","BE","assert","cond","_","RET_STR","__str__","meta","ARGS_INFO","kw_start","idx_end_pos","Number","POSITIVE_INFINITY","idx_vararg","kwargs","write_arg","isLast","offset","set_js_cursor","CODE_BEG","type_id","AST_FCT_DEF_ARGS_VARG","AST_FCT_DEF_ARGS_KWARG","defval","CODE_END","Symbol","TYPEID","generate","rtype","stype","call","createSubContext","parentTypeID","convert_args","annotation","returns","fct_return_type","last_type","constructor","$name","fake_node","lineno","end_lineno","col_offset","end_col_offset","Body","set_py_code_from_list","SType_fct","default_call","args_names","Array","posonlyargs","args_pos","has_kw","STypeID","AST_FCT_DEF","AST_FCT_DEF_METH","klass","method_name","gen","instanceType","instanceTypeID","addType","abs","n","AST_STRUCT_DICT","keys","values","write_id_jsop","setParentOPPrio","parentOPPrio","TYPE_type_bool_","bname2pyname","AST_OP_ASSIGN_AUG","target","Py_object","TYPE_bool","RET_IJBF2BOOL","targets","result_type","AST_OP_ASSIGN","AST_OP_ASSIGN_ATTR","attrname","attrdef","AST_OP_ASSIGN_INIT","CURSOR","ARRAY_TYPE","CODE_LINE","CODE_COL","idx","JS_CODE","indent","cur_indent_level","indents","str","AST2JS","py2ast","code","parser","$B","Parser","nodes","convert_ast","_PyPegen","run_parser","dop_reset","createASTNode","Context","ASTNODES","symbols","builtins","createClassContext","ctx","Py_Exception","AST_OP_UNARY","operand","TYPEID_bool","TYPEID_NotImplementedType","method","Py_JSException","AST_KEY_RAISE","exc","TYPE_type_int_","alt","AST_SYMBOL","AST_OP_ATTR","type_obj","TYPE_float","arg","__abs__","RET_IJBF2FLOAT","_node","_op","genUnaryOps","AST_KEY_IMPORT","names","module","list","AST_CTRL_TRYBLOCK_CATCH","RET_TYPE","write","r","create","iter","AST_CTRL_FOR","AST_CTRL_FOR_RANGE","AST_LIT_FSTRING","reverse","write_compare_jsop","reversed","cop","write_binary_jsop","ops","return_type","NOCONVERT","convert_self","result","jsop2pyop","self","o","RET_None","TYPEID_NoneType","RET_JSINT2JSINT","RET_IJ2INT","RET_INT2INT","RET_JSINT","AssignOperators","AST_STRUCT_TUPLE","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_IMPORT_ALIAS","AST_KEY_CONTINUE","AST_KEY_ASSERT","AST_OP_CMP","AST_OP_BOOL","AST_OP_BIN","AST_OP_BRACKETS","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_BOOL","AST_LIT_NONE","AST_FCT_DEF_ARGS","AST_FCT_CALL_KEYWORD","AST_CTRL_WHILE","AST_CTRL_TRYBLOCK","AST_CTRL_TERNARY","AST_CTRL_IFBLOCK","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","TYPE_int","__ceil__","CONVERT_2INT","write_unary_jsop","PythonError","python_exception","super","_raw_err_","TYPEID_type","TYPEID_type_int_","TYPEID_type_float_","TYPEID_type_str_","float2str","f","toExponential","sign_idx","slice","toString","includes","typedesc","obj","left","bname2jsop","kname","nb_call_args","call_args_offset","nb_pos_call","max_pos","vararg_array","cutoff","Math","min","kw","call_has_kw","call_has_kwargs","pos","max","varg_start","varg_nb","key","TYPE_jsint","TYPE_NotImplementedType","TYPE_NoneType","addProps","newProps","getOwnPropertyDescriptors","entries","filter","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","Float64Array","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","PY_CODE","NEXT_AST_NODE_ID","parent","ASTNODE_SIZE","ASTNODE_NB_CHILDREN","ASTNODE_CHILDREN_START","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","ArrayBuffer","maxByteLength","setFirstChild","beg","cn","end","elts","int","float","len","genUnaryOpFct","nb_child","opname","test","asname","right","ltype","reversed_operator","swapASTNodes","weak_assign","src","instance_TypeID","typeID","klass_type","inst_type","bases","stypeID","_context","orelse","debug_print_exception","err","sb","stack","isV8","split","e","filter_stack","map","l","_line","_col","fct_name","line","col","indexOf","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","get_py_exception","__SB__","_err_","JSException","find_and_write_call","jsop","jop","write_multi_jsop","ao","bo","ap","bp","brython_node","BRY2SBRY","set_py_from_beg_end","dst_beg","dst_end","src_offset","beg_offset","end_offset","BinaryOperators","JSOperators","JSOperatorsPriority","priority","JSOperatorsPrio","first","prio","p_prio","parenthesis","AST_FCT_DEF_ARGS_POSONLY","AST_FCT_DEF_ARGS_KWONLY","AST_FCT_DEF_ARGS_POS","_args","has_vararg","vararg","has_kwarg","kwarg","total_args","kwonlyargs","pos_defaults","defaults","posonly","doffset","convert_arg","nb_pos_defaults","has_others","cut_off","kwonly","kw_defaults","py_offset","brython_name","Name","Constant","ClassDef","Tuple","List","Dict","UnaryOp","Subscript","Compare","BoolOp","BinOp","AugAssign","Attribute","Assign","Return","Raise","Pass","Continue","Break","Assert","alias","ImportFrom","Import","FunctionDef","Call","Args","JoinedStr","FormattedValue","While","Try","IfExp","If","For","ExceptHandler","floordiv_float","floor","floordiv_int","mod_float","mod","mod_int","childCount","cur","handlers","vtype","qname","__qualname__","pyop","rop","a_value","nops","nb_ops","comparators","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","d","definition","defineProperty","enumerable","get","prop","hasOwnProperty"],"sourceRoot":""}