{"version":3,"file":"libs/SBrython-dev/index.js","mappings":"8YACA,IAAIA,EAAU,EAEP,MAAMC,EAAyBD,IAGzBE,GADyBF,IACAA,KAGzBG,GAFyBH,IAEAA,KACzBI,EAAyBJ,IAIzBK,GAHyBL,IACAA,IACAA,IACAA,KACzBM,EAAyBN,IACzBO,EAAyBP,IAEzBQ,EAAyBR,IAOzBS,GALyBT,IACAA,IACAA,IACAA,IAEAA,KAEzBU,EAAyBV,IAEzBW,GADyBX,IACAA,KACzBY,EAAyBZ,IAEzBa,GADyBb,IACAA,KAEzBc,EAAyBd,IACzBe,EAAyBf,IACzBgB,EAAyBhB,IAEzBiB,GADyBjB,IACAA,KACzBkB,EAAyBlB,IACzBmB,EAAyBnB,IACzBoB,EAAyBpB,IAEzBqB,EAAyBrB,IACzBsB,EAAyBtB,IACzBuB,EAAyBvB,IACzBwB,EAAyBxB,IACzByB,EAAyBzB,IACzB0B,EAAyB1B,IACzB2B,EAAyB3B,IACzB4B,EAAyB5B,IAEzB6B,EAAyB7B,IACzB8B,EAAyB9B,IAEzB+B,EAAyB/B,IAIzBgC,GAHyBhC,IACAA,IACAA,IACAA,KACzBiC,EAAyBjC,IACzBkC,EAAyBlC,IAEzBmC,GADyBnC,IACAA,KAEzBoC,EAAyBpC,IACzBqC,EAAyBrC,IACzBsC,EAAyBtC,IACzBuC,EAAyBvC,IACzBwC,EAAyBxC,IAEtC,I,yDCpEe,SAASyC,EAAOC,GAE3B,MAAMC,GAAUC,EAAAA,EAAAA,IAAWF,IAE3BG,EAAAA,EAAAA,IAAM,GAAIF,EAAS,KAAKG,EAAAA,EAAAA,IAAYH,GAAU,IAClD,C,yDCLe,SAASF,EAAOC,GAE3B,IAAIK,GAAMH,EAAAA,EAAAA,IAAWF,IACrBG,EAAAA,EAAAA,IAAM,IAAKE,EAAK,IAAKA,GAAMD,EAAAA,EAAAA,IAAYC,GAAM,OAAOD,EAAAA,EAAAA,IAAYC,GAAM,IAC1E,C,yDCJe,SAASN,EAAOC,IAE3BM,EAAAA,EAAAA,IAAM,mBAEN,IAAID,GAAMH,EAAAA,EAAAA,IAAWF,GACrB,KAAc,IAARK,IAEFE,EAAAA,EAAAA,IAAOF,IACPC,EAAAA,EAAAA,IAAM,MAEND,GAAMD,EAAAA,EAAAA,IAAYC,IAGtBC,EAAAA,EAAAA,IAAM,KACV,C,6DCdO,MAAME,EAAcC,OAAO,eACrBC,EAAcD,OAAO,UACrBE,EAAcF,OAAO,cACrBG,EAAcH,OAAO,WACPA,OAAO,Y,yICKlC,MAAMI,GAAQC,EAAAA,EAAAA,IAAiBC,EAAAA,GAAcC,EAAAA,GAAoB,MAAO,WAExEC,EAAAA,EAAAA,IAAWJ,EAAO,UAAWK,EAAAA,IAAYC,KACrChB,EAAAA,EAAAA,IAAM,aAAaC,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWiB,IAAQ,IAAI,KAG1DF,EAAAA,EAAAA,IAAWJ,EAAO,WAAYK,EAAAA,IAAYC,KACtCC,EAAAA,EAAAA,GAAOD,GAAMf,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWiB,IAAO,KAI/CE,EAAAA,EAAAA,GAAYR,EACA,CAACS,EAAAA,GAAYC,EAAAA,GAAYC,EAAAA,GAAYC,EAAAA,GACpCC,EAAAA,GAAYC,EAAAA,GAAYC,EAAAA,GAAeC,EAAAA,IACxCC,EAAAA,GACA,CAEIC,aAAeC,EAAAA,GACfC,cAAeD,EAAAA,MAG/BX,EAAAA,EAAAA,GAAYR,EAAO,CAACqB,EAAAA,IAAaJ,EAAAA,GAAY,CACjCK,OAAQ,CAACnC,EAAMoC,EAAGC,EAAIC,MACVC,EAAAA,EAAAA,IAAWvC,KAAUwC,EAAAA,IACrBJ,GAAIK,EAAAA,EAAAA,IAAWL,GACfE,GAAIG,EAAAA,EAAAA,IAAWH,KAEfF,GAAIM,EAAAA,EAAAA,IAAWN,GACfE,GAAII,EAAAA,EAAAA,IAAWJ,KAGnBK,EAAAA,EAAAA,GAAU3C,EAAMoC,EAAGF,EAAAA,GAAYI,EAAE,KAIrDjB,EAAAA,EAAAA,GAAYR,EAAO,CAAC+B,EAAAA,IAAaC,EAAAA,GAAgB,CAACZ,cAAea,EAAAA,MAEjEzB,EAAAA,EAAAA,GAAYR,EAAO,CAACkC,EAAAA,IAAcC,EAAAA,GAAiB,CACvCb,OAAQ,CAAChB,EAAeiB,EAAYC,EAAIC,MACpCnC,EAAAA,EAAAA,IAAM,uBAAwBiC,EAAG,KAAME,EAAG,IAAI,KAI9DjB,EAAAA,EAAAA,GAAYR,EAAO,CAACoC,EAAAA,IAAaD,EAAAA,GAAiB,CACtCb,OAAQ,CAAChB,EAAeiB,EAAYC,EAAIC,MAEpCnC,EAAAA,EAAAA,IAAM,gBAAiBiC,EAAG,KAAME,EAAG,IAAI,KAIvDY,EAAAA,EAAAA,GAAYrC,EAAO,CAACsC,EAAAA,IAAejC,EAAAA,IAAW,CAACC,EAAMkB,EAAID,MAErCG,EAAAA,EAAAA,IAAWpB,KAAUqB,EAAAA,KACrBJ,GAAIK,EAAAA,EAAAA,IAAWL,KAEZgB,EAAAA,EAAAA,GAAUjC,EAAMgC,EAAAA,GAAcf,OAGrDc,EAAAA,EAAAA,GAAYrC,EAAO,CAACwC,EAAAA,IAAaC,EAAAA,IAAS,CAACtD,EAAMqC,EAAID,MACrCgB,EAAAA,EAAAA,GAAUpD,EAAMqD,EAAAA,IAAYZ,EAAAA,EAAAA,IAAWL,GAAAA,KAGvDmB,EAAAA,EAAAA,IAAY1C,EAAO2C,EAAAA,GAAeC,EAAAA,G,yDCvEnB,SAAS1D,EAAOC,GAE3B,MAAMC,GAAUC,EAAAA,EAAAA,IAAWF,IAE3BG,EAAAA,EAAAA,IAAM,SAAUF,EAAS,MAAMG,EAAAA,EAAAA,IAAYH,GAAU,IACzD,C,0DCLO,SAASmB,EAAOD,EAAeuC,IAElCC,EAAAA,EAAAA,IAAiBD,GAAUE,EAAAA,EAAAA,IAAazC,KAExCZ,EAAAA,EAAAA,IAAOmD,EACX,C,0DCLe,SAAS3D,EAAOC,IAC3BO,EAAAA,EAAAA,KAAOL,EAAAA,EAAAA,IAAWF,KAAQM,EAAAA,EAAAA,IAAM,IAAIuD,EAAAA,GAAO7D,KAC/C,C,0DCFe,SAASD,EAAOC,IAE3BG,EAAAA,EAAAA,IAAM,MAAMD,EAAAA,EAAAA,IAAWF,GAAO,IAClC,C,kCCCA,SACI8D,OARJ,SAAgBC,EAAeC,EAAc,oBAEzC,IAAMD,EACF,MAAM,IAAIE,MAAMD,EACxB,E,0DCDe,SAASjE,EAAOC,GAE3B,MAAMkE,GAAOhE,EAAAA,EAAAA,IAAWF,IAExBG,EAAAA,EAAAA,IAAM,MAAO+D,EAAM,OAAO9D,EAAAA,EAAAA,IAAY8D,GAAO,IACjD,C,uFCFe,SAASnE,EAAOC,GAC3B,IAAImE,GAAYjE,EAAAA,EAAAA,IAAWF,GACvBoE,GAAYhE,EAAAA,EAAAA,IAAY+D,IAExBE,EAAAA,EAAAA,IAAKF,KAAYjG,EAAAA,KACjBqC,EAAAA,EAAAA,IAAO4D,IACPG,EAAAA,EAAAA,MACAH,GAAS/D,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWiE,MACzB5B,EAAAA,EAAAA,IAAW4B,KAAYpD,EAAAA,KAAgBwB,EAAAA,EAAAA,IAAWvC,KAAUwC,EAAAA,KACnE2B,GAAS1B,EAAAA,EAAAA,IAAW0B,KAExBhE,EAAAA,EAAAA,IAAM,GAAIiE,EAAQ,MAAOD,EAAQ,GACrC,C,gDCfe,SAASpE,EAAOwE,IAC3BjE,EAAAA,EAAAA,IAAM,QACV,C,0DCFe,SAASP,EAAOC,GAE3B,MAAMkE,GAAOhE,EAAAA,EAAAA,IAAWF,IAExBG,EAAAA,EAAAA,IAAM,WAAY+D,EAAM,OAAO9D,EAAAA,EAAAA,IAAY8D,GAAO,IACtD,C,yICMA,MAAMrD,GAAQC,EAAAA,EAAAA,IAAiB0D,EAAAA,GAAcC,EAAAA,GAAoB,QAAS,WAE1ExD,EAAAA,EAAAA,IAAWJ,EAAO,WAAY6D,EAAAA,IAAY1E,IAEtC,MAAM2E,GAAQvE,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWF,IAC/B4E,GAAarC,EAAAA,EAAAA,IAAWoC,GAG9B,GAAIC,IAAepC,EAAAA,GAEf,YADAjC,EAAAA,EAAAA,KAAOmC,EAAAA,EAAAA,IAAWiC,IAGtB,GAAIC,IAAeJ,EAAAA,IAAgBI,IAAe7D,EAAAA,GAE9C,YADAR,EAAAA,EAAAA,IAAOoE,GAKX,GAAIC,IAAeC,EAAAA,GAAa,CAE5B,IAAIR,EAAAA,EAAAA,IAAKM,KAAWvG,EAAAA,GAAc,CAE9B,MAAM0G,EAAcjB,EAAAA,GAAOc,GAAOI,MAAM,GAAG,GAE3C,GAAoB,QAAhBD,GAAyC,aAAhBA,EAEzB,YADAxE,EAAAA,EAAAA,IAAM,4BAGV,GAAoB,SAAhBwE,GAA0C,cAAhBA,EAE1B,YADAxE,EAAAA,EAAAA,IAAM,4BAGV,GAAoB,QAAhBwE,GAAyC,QAAhBA,EAEzB,YADAxE,EAAAA,EAAAA,IAAM,aAGd,CAQA,YADAH,EAAAA,EAAAA,IAAM,cAAewE,EAAO,IAEhC,CAEA,MAAMK,EAAQC,EAAAA,GAAML,GACpB,QAA0CM,IAAVF,QAAyCE,IAAlBF,EAAMG,QACzD,MAAM,IAAIlB,MAAM,GAAGe,GAAOI,gCAG7BJ,EAAMG,QAAiBxE,YAAaX,EAAK,KAG9CiB,EAAAA,EAAAA,IAAWJ,EAAO,UAAWwE,EAAAA,IAAUlE,IACX,SAApBmE,WAAAA,kBACA/E,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWiB,MAAUb,EAAAA,EAAAA,IAAM,kBAE/CH,EAAAA,EAAAA,IAAM,mBAAmBC,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWiB,IAAQ,IAAI,KAGpEF,EAAAA,EAAAA,IAAWJ,EAAO,UAAW6D,EAAAA,IAAYvD,KACrChB,EAAAA,EAAAA,IAAM,aAAaC,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWiB,IAAQ,IAAI,KAG1DE,EAAAA,EAAAA,GAAYR,EAAO,CAACS,EAAAA,GAAYY,EAAAA,GAAYU,EAAAA,GAAYrB,EAAAA,GAAYC,EAAAA,IACxDqB,EAAAA,GAAgB,CAAEZ,cAAea,EAAAA,MAE7CzB,EAAAA,EAAAA,GAAYR,EAAO,CAACkC,EAAAA,IAAcF,EAAAA,GAAgB,CAClCZ,cAAea,EAAAA,GACfX,OAAW,CAAChB,EAAMiB,EAAGmD,EAAKjD,KACfnC,EAAAA,EAAAA,IAAM,uBAAwBiC,EAAG,KAAME,EAAG,QAIrEjB,EAAAA,EAAAA,GAAYR,EAAO,CAACoC,EAAAA,IAAaJ,EAAAA,GAAgB,CACjCZ,cAAea,EAAAA,GACfX,OAAW,CAAChB,EAAMiB,EAAGmD,EAAKjD,MACtBnC,EAAAA,EAAAA,IAAM,kBAAmBiC,EAAG,KAAME,EAAG,IAAI,KAI7DY,EAAAA,EAAAA,GAAYrC,EAAO,CAACsC,EAAAA,IAAeuB,EAAAA,KAEnCnB,EAAAA,EAAAA,IAAY1C,EAAO2C,EAAAA,GAAeC,EAAAA,G,uFC5FlC,SAAS+B,EAAUxF,GAMf,IAJ8ByF,EAAAA,EAAAA,IAAc,EAAGzF,EAAkB0F,EAAAA,KAEjEpF,EAAAA,EAAAA,IAAOuD,EAAAA,GAAO7D,IAEW,KAArBE,EAAAA,EAAAA,IAAWF,GAAc,CAEzB,IAAI2F,GAAczF,EAAAA,EAAAA,IAAWF,IACzBuC,EAAAA,EAAAA,IAAWoD,KAAY5E,EAAAA,KACvB4E,GAASlD,EAAAA,EAAAA,IAAWkD,KAExBrF,EAAAA,EAAAA,IAAM,QACNC,EAAAA,EAAAA,IAAOoF,EACX,EAC8BF,EAAAA,EAAAA,IAAc,EAAGzF,EAAkB4F,EAAAA,KAEjEtF,EAAAA,EAAAA,IAAM,KACV,CAEA,SAASuF,EAAa7F,GAMlB,IAJ8ByF,EAAAA,EAAAA,IAAc,EAAGzF,EAAkB0F,EAAAA,KAEjEpF,EAAAA,EAAAA,IAAM,IAAIuD,EAAAA,GAAO7D,MAEQ,KAArBE,EAAAA,EAAAA,IAAWF,GAAc,CAEzB,IAAI2F,GAAczF,EAAAA,EAAAA,IAAWF,IACzBuC,EAAAA,EAAAA,IAAWoD,KAAY5E,EAAAA,KACvB4E,GAASlD,EAAAA,EAAAA,IAAWkD,KAExBrF,EAAAA,EAAAA,IAAM,QACNC,EAAAA,EAAAA,IAAOoF,EACX,EAC8BF,EAAAA,EAAAA,IAAc,EAAGzF,EAAkB4F,EAAAA,KAEjEtF,EAAAA,EAAAA,IAAM,KACV,CAEe,SAASP,EAAOC,GAE3B,IAAIK,GAAMH,EAAAA,EAAAA,IAAWF,GAErB,MAAOqE,EAAAA,EAAAA,IAAKhE,KAASvB,EAAAA,IACjB0G,EAAUnF,GACVA,GAAMD,EAAAA,EAAAA,IAAYC,GAGtB,IAAIyF,EAAiB,EACrB,IAAIzB,EAAAA,EAAAA,IAAKhE,KAAStB,EAAAA,GAAkB,CAChC+G,EAAQzF,EACR,GACIwF,EAAaxF,GACbA,GAAMD,EAAAA,EAAAA,IAAYC,UACbgE,EAAAA,EAAAA,IAAKhE,KAAStB,EAAAA,GAC3B,CAWA,IATIsF,EAAAA,EAAAA,IAAKhE,KAASrB,EAAAA,MAEgByG,EAAAA,EAAAA,IAAc,EAAGpF,EAAiBqF,EAAAA,KAChEpF,EAAAA,EAAAA,IAAM,MAAMuD,EAAAA,GAAO7D,OACWyF,EAAAA,EAAAA,IAAc,EAAGpF,EAAiBuF,EAAAA,IAEhEvF,GAAMD,EAAAA,EAAAA,IAAYC,IAGE,SAApBiF,WAAAA,kBAIc,KAAdjB,EAAAA,EAAAA,IAAKhE,IAAwB,IAAVyF,GAAc,CAIjC,KAFAxF,EAAAA,EAAAA,IAAM,OAEC+D,EAAAA,EAAAA,IAAKyB,KAAW/G,EAAAA,IAAiB,CAEpC,MAAMgH,EAAOlC,EAAAA,GAAOiC,IACpBxF,EAAAA,EAAAA,IAAM,GAAGyF,QAAWA,MAEpBD,GAAQ1F,EAAAA,EAAAA,IAAY0F,EACxB,CAEA,MAAOzB,EAAAA,EAAAA,IAAKhE,KAASpB,EAAAA,IAEjBuG,EAAUnF,GACVA,GAAMD,EAAAA,EAAAA,IAAYC,GAGV,IAARA,KAE8BoF,EAAAA,EAAAA,IAAc,EAAGpF,EAAiBqF,EAAAA,KAChEpF,EAAAA,EAAAA,IAAM,MAAMuD,EAAAA,GAAOxD,QAEWoF,EAAAA,EAAAA,IAAc,EAAGpF,EAAiBuF,EAAAA,MAGpEtF,EAAAA,EAAAA,IAAM,oBAEV,CACJ,C,kCC3GA,IAAI0F,EAA0B,CAAC,EAE/B,SACIC,GAAKC,IACDF,EAAKE,CAAQ,EAEjBC,MAAO,KACH,MAAM5B,EAAIyB,EAEV,OADAA,EAAK,CAAC,EACCzB,CAAC,E,0DCND,SAASxE,EAAOC,GAE3B,MAAM+F,EAAOlC,EAAAA,GAAO7D,GACdC,GAAUC,EAAAA,EAAAA,IAAWF,IAE3BG,EAAAA,EAAAA,IAAM,UAAU4F,KAAS9F,EAAS,MAAMG,EAAAA,EAAAA,IAAYH,GAAU,MAE9DqE,EAAAA,EAAAA,OAEAhE,EAAAA,EAAAA,IAAM,GAAGyF,uCAA0CA,qBACvD,C,gDCXe,MAAMK,UAAqBC,EAAAA,G,gDCC3B,SAAStG,EAAOC,IAC3BM,EAAAA,EAAAA,IAAM,WACV,C,uCCFAQ,E,QAAAA,IAAiBwF,EAAAA,GAAuBC,EAAAA,GAA2B,qBAAsB,G,kCCHzF,SACIC,UAAYC,IACR,GAAIA,GAAK,MAAQA,GAAK,KAAM,CAExB,IAAIC,EAAMD,EAAEE,gBACZ,MAAMC,EAAWF,EAAIG,OAAO,EAG5B,MAFqB,MAAlBH,EAAIE,IAAuC,MAAlBF,EAAIE,KAC5BF,EAAMA,EAAI3B,MAAM,EAAE6B,EAAS,GAAK,IAAMF,EAAI3B,MAAM6B,EAAS,IACtDF,CACX,CAEA,IAAIA,EAAMD,EAAEK,WAGZ,OAFMJ,EAAIK,SAAS,OACfL,GAAO,MACJA,CAAG,E,wFCRH,WAAS1G,IACpBoD,EAAAA,EAAAA,GAAUpD,EAAMgH,EAAAA,IAAatE,EAAAA,EAAAA,KAAYxC,EAAAA,EAAAA,IAAWF,GAAOe,EAAAA,IAC/D,C,0DCLe,SAAShB,EAAOC,GAE3B,MAAMiH,GAAa/G,EAAAA,EAAAA,IAAWF,GAC9B,IAAIK,GAAMD,EAAAA,EAAAA,IAAY6G,GAItB,IAFA3G,EAAAA,EAAAA,IAAM,SAASuD,EAAAA,GAAO7D,MAEV,IAARK,EAGA,IAFAC,EAAAA,EAAAA,IAAM,aAEmB,KAArBF,EAAAA,EAAAA,IAAYC,IACZE,EAAAA,EAAAA,IAAOF,OACJ,EACHC,EAAAA,EAAAA,IAAM,cACNC,EAAAA,EAAAA,IAAOF,GACPA,GAAMD,EAAAA,EAAAA,IAAYC,GAClB,IACIC,EAAAA,EAAAA,IAAM,OACNC,EAAAA,EAAAA,IAAOF,GACPA,GAAMD,EAAAA,EAAAA,IAAYC,SACN,IAARA,IAERC,EAAAA,EAAAA,IAAM,IACV,EAIJH,EAAAA,EAAAA,IAAM,KAAM8G,EAAM,IACtB,C,0DC5Be,SAASlH,EAAOC,IAC3BM,EAAAA,EAAAA,IAAMuD,EAAAA,GAAO7D,GACjB,C,gDCFe,SAASD,EAAOC,IAC3BM,EAAAA,EAAAA,IAAM,OACV,C,kCCLO,MAAM4G,UAAoBjD,MAEpBkD,iBAETC,WAAAA,CAAYD,GACRE,QACAF,EAAiBG,UAAYC,KAC7BA,KAAKJ,iBAAmBA,CAC5B,EAIJ,SACID,c,mECTW,SAASnH,EAAOC,IAE3BwH,EAAAA,EAAAA,MAEA,MAAMC,GAAWvH,EAAAA,EAAAA,IAAWF,GAC5B,IAAIK,EAAMoH,EACV,KAAc,IAARpH,GACoB,IAAlBqH,EAAAA,GAAOb,SAAevC,EAAAA,EAAAA,OAEtBD,EAAAA,EAAAA,IAAKhE,KAASjC,EAAAA,IACdmC,EAAAA,EAAAA,IAAOF,KAEPoF,EAAAA,EAAAA,IAAc,EAAGpF,EAAiBqF,EAAAA,KAClCpF,EAAAA,EAAAA,IAAM,KAAKuD,EAAAA,GAAOxD,GAAK0E,MAAM,GAAG,SAChCU,EAAAA,EAAAA,IAAc,EAAGpF,EAAiBuF,EAAAA,KAGtCvF,GAAMD,EAAAA,EAAAA,IAAYC,IAGtBsH,EAAAA,EAAAA,MAEwC,IAAVF,GAAwB,IAATzH,IACzCsE,EAAAA,EAAAA,KACR,C,mLC5BO,MAAMsD,EAA4B,EAC5BC,EAA4B,EAC5BC,EAA4B,EAC5BvB,EAA4B,EAC5BD,EAA4B,EAC5ByB,EAA4B,EAC5BC,EAA4B,EAC5BxF,EAA4B,EAC5BxB,EAA4B,EAC5BD,EAA4B,EAC5B0D,EAA2B,GAC3BD,EAA2B,GAC3ByD,EAA2B,GAC3BC,EAA2B,GAC3BC,EAA2B,GAC3BtD,EAA2B,GAElCI,EAAQ,IAAImD,MAAM,IACxB,IAAI,IAAIC,EAAI,EAAGA,EAAI,KAAMA,EACrBpD,EAAMoD,GAAKC,OAAOC,OAAO,MAE7B,S,0CCpBA,Q,QAAmBC,GAEnBC,EAAQ,MACRA,EAAQ,MACRA,EAAQ,MACRA,EAAQ,MACRA,EAAQ,MACRA,EAAQ,KACRA,EAAQ,MACRA,EAAQ,MACRA,EAAQ,MAER,MAkBaC,EAlBmC,CAC/C,UACA,WACA,OACA,qBACA,iBACA,OACA,YACA,MACA,cACA,QACA,cACA,QACA,aACA,OACA,YACA,M,0DCxBD,MAAM7H,GAAQC,E,QAAAA,IAAiBoH,EAAAA,GAAaD,EAAAA,GAAmB,OAAQ,YAEvE1E,EAAAA,EAAAA,IAAY1C,EAAO2C,EAAAA,GAAeC,EAAAA,G,0DCJnB,SAAS1D,EAAOC,GAE3B,MAAM+F,EAAOlC,EAAAA,GAAO7D,GACdC,GAAUC,EAAAA,EAAAA,IAAWF,IAE3BG,EAAAA,EAAAA,IAAM,YAAY4F,KAAS9F,EAAS,MAAMG,EAAAA,EAAAA,IAAYH,GAAU,IACpE,C,0DCNe,SAASF,EAAOC,GAE3B,MAAM2I,EAAQ9E,EAAAA,GAAO7D,IAErBM,EAAAA,EAAAA,IAAMqI,EAAM,SAEKzD,IAAbyD,EAAM,KACNrI,EAAAA,EAAAA,IAAM,KAAOqI,EAAM,GAC3B,C,0DCRe,SAAS5I,EAAOC,IAC3BM,EAAAA,EAAAA,IAAM,GAAGuD,EAAAA,GAAO7D,SAChBO,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWF,GACvB,C,mECFe,SAASD,EAAOC,GAE3B,MAAMC,GAAUC,EAAAA,EAAAA,IAAWF,GAEZ4I,EAAAA,IAAMrG,EAAAA,EAAAA,IAAWtC,IAAW4D,EAAAA,GAAO7D,IAC3CW,EAAAA,IAAaX,EACxB,C,iGCDe,SAASD,EAAOC,GAE3B,MAAM6I,GAAQ3I,EAAAA,EAAAA,IAAWF,GACnB2I,EAAQ9E,EAAAA,GAAO7D,GAEP,QAAV2I,EAKWC,EAAAA,IAAMrG,EAAAA,EAAAA,IAAWsG,IAAQF,GAEjChI,EAAAA,IAAaX,IANhBoD,EAAAA,EAAAA,GAAUpD,EAAMgH,EAAAA,IAAatE,EAAAA,EAAAA,IAAWmG,EAAM9H,EAAAA,IAOtD,C,0DCnBe,SAAShB,EAAOC,GAE3B,IAAIK,GAASH,EAAAA,EAAAA,IAAWF,GAapB,KAXJG,EAAAA,EAAAA,IAAM,QAASE,EAAK,wBACpBmH,EAAAA,EAAAA,OACAlD,EAAAA,EAAAA,OAEIhE,EAAAA,EAAAA,IAAM,4DAEND,GAAMD,EAAAA,EAAAA,IAAYC,GACN,IAARA,IACAE,EAAAA,EAAAA,IAAQF,GAEZA,GAAMD,EAAAA,EAAAA,IAAYC,GACJ,IAARA,IACFiE,EAAAA,EAAAA,OAAQhE,EAAAA,EAAAA,IAAM,UAAUC,EAAAA,EAAAA,IAAOF,GAC/BA,GAAMD,EAAAA,EAAAA,IAAYC,IAY1BsH,EAAAA,EAAAA,KAEJ,C,0DC/Be,SAAS5H,EAAOC,IACCM,EAAAA,EAAAA,IAAM,KAAKuD,EAAAA,GAAO7D,QAClD,C,0DCFe,SAASD,EAAOC,IAGvBG,EAAAA,EAAAA,IAAM,WAAWD,EAAAA,EAAAA,IAAWF,GAAO,IAC3C,C,wFCDO,MAAMwD,EAAgB,CAACsF,EAAAA,GAAWC,EAAAA,GAAYC,EAAAA,GAAWC,EAAAA,GAAWC,EAAAA,GAAWC,EAAAA,IAE/E,SAAS5F,EAAY6F,EACAC,EACAC,GAExB,IAAI,IAAIjB,EAAI,EAAGA,EAAIgB,EAAIxC,SAAUwB,EAAG,CAEhC,MAAMhG,EAAKgH,EAAIhB,IAEfpH,EAAAA,EAAAA,IAAWmI,EAAQG,EAAAA,GAAclH,GAAKiH,GAAcnI,IAChD,MAAMiB,GAAIhC,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWiB,IAC3BmB,GAAIlC,EAAAA,EAAAA,IAAYgC,GACtBoH,EAAUrI,EAAMiB,EAAGC,EAAIC,EAAAA,GAE/B,CACJ,CAGO,SAASkH,EAAUxJ,EAAeoC,EAAYC,EAAWC,GAOvDD,IAAOyG,EAAAA,IAAazG,IAAO0G,EAAAA,KAAexG,EAAAA,EAAAA,IAAWH,MAAOG,EAAAA,EAAAA,IAAWD,KACxED,GAAMoH,EAAAA,KAEV9G,EAAAA,EAAAA,GAAU3C,EAAMoC,EAAGC,EAAIC,EAC3B,C,0DCuDA,SAASoH,EAAsBC,EAAmBC,GAE9CC,QAAQC,KAAK,YAAaH,GAE1B,MAAMI,EAhDH,SAAqBA,EAAYH,GAMpC,MAAMI,EAAmB,WAFzBD,EAAQA,EAAME,MAAM,OAED,GAEnB,OAlDJ,SAAsBF,GACpB,OAAOA,EAAMG,QAAQC,GAAKA,EAAEpD,SAAS,aACvC,CAgDWqD,CAAaL,GAAOM,KAAKC,IAE9B,IAAK/F,EAAGgG,EAAOC,GAAQF,EAAEL,MAAM,KAEH,MAAxBO,EAAKA,EAAK3D,OAAO,KACnB2D,EAAOA,EAAKzF,MAAM,GAAG,IAEvB,IAKI0F,EALAC,GAAQH,EAAQ,EAChBI,GAAQH,EAKZ,KAHEG,EAGEX,EAAO,CACT,IAAIY,EAAMrG,EAAEsG,QAAQ,IAAK,GACzBJ,EAAWlG,EAAEQ,MAAM,EAAG6F,GACL,SAAbH,IACFA,EAAW,YAGb,MACMzK,GADM4J,EAAGkB,UAAU,sBACqBC,MA7C7C,OA8CG1G,EAAAA,EAAAA,IAAKrE,KAAUzC,EAAAA,KACjBoN,GAAO9G,EAAAA,GAAO7D,GAAM6G,OAExB,KAAO,CACL,IAAI+D,EAAMrG,EAAEsG,QAAQ,KACpBJ,EAAWlG,EAAEQ,MAAM,EAAG6F,GACL,cAAbH,IACFA,EAAW,WACf,CAEA,MAAO,CAACA,EAAUC,EAAMC,EAAI,GAElC,CAMkBK,CAAa,EAAa1D,UAAUyC,MAAOH,IArDtD,SAAwBG,EAAoBH,GAC1CG,EAAMM,KAAKF,GATb,SAA2Bc,EAAsBrB,GAEtD,OADYA,EAAGkB,UAAU,sBACeC,MAAOE,EAAU,GAAIA,EAAU,GALhE,IAMT,CAMyBC,CAAkBf,EAAGP,IAC9C,CAoDkBuB,CAAepB,EAAOH,GAKpC,IAAIwB,EACR,yCAHsBrB,EAAMM,KAAK,CAACC,EAAEjC,IAAM,6BAAgC0B,EAAM1B,GAAG,OAIrEgD,KAAK,4BAGfxB,QAAQyB,IAAIF,EAChB,CAcA,SACI1B,wBACA6B,iBAdJ,SAA0BjE,EAAgBkE,GAExC,MAAMC,EAAQnE,aAAqBoE,KAAKxE,YAC1BI,EAAUH,iBAEV,IAAIwE,IAAIC,YAAYtE,GAIlC,OAFAoC,EAAsB+B,EAAOD,GAEtBC,CACT,E,0DCpHe,SAAS1L,EAAOC,IAC3BM,EAAAA,EAAAA,IAAMuD,EAAAA,GAAO7D,GACjB,C,0DCFe,SAASD,EAAOC,GAE3B,MAAMC,GAAUC,EAAAA,EAAAA,IAAWF,GAE3B,OAAgB,IAAZC,GACOK,EAAAA,EAAAA,IAAM,iBAEVH,EAAAA,EAAAA,IAAM,UAAWF,EAAS,IACrC,C,uICLO,SAASiD,EAAYkG,EACAC,EACAC,EACAnH,EAASiB,GAGjC,IAAI,IAAIiF,EAAI,EAAGA,EAAIgB,EAAIxC,SAAUwB,EAAG,CAEhC,MAAMhG,EAAKgH,EAAIhB,IAEfpH,EAAAA,EAAAA,IAAWmI,EAAQG,EAAAA,GAAclH,GAAKiH,GAActJ,IAChDmC,EAAOnC,EAAMqC,GAAIjC,EAAAA,EAAAA,KAAYF,EAAAA,EAAAA,IAAWF,IAAO,GAEvD,CACJ,CAEO,SAASoD,EAAUpD,EAAeqC,EAAWD,GAEhD,MACMyJ,GAASjI,EAAAA,EAAAA,IAAa5D,IAE5B2D,EAAAA,EAAAA,IAAgBvB,EAHD,IAKf,IAAIkI,EAAIwB,EAAAA,GAAUzJ,GAAS0J,EAAI,GAE3BF,EAPW,KAQXvB,EAAI,IAAIA,IAAKyB,EAAI,MAGrB5L,EAAAA,EAAAA,IAAMmK,EAAGlI,EAAG2J,EAChB,C,wGC9BO,MAAMC,EAAahM,GAAkBA,EAE/B8C,EAAoBJ,EACpBV,EAAoBS,EAE1B,SAASC,EAAWN,EAAYgH,EAAS5E,EAAAA,IAE5C,GAAwB,SAApBc,WAAAA,gBACA,OAAOlD,EAEX,IAAIG,EAAAA,EAAAA,IAAWH,KAAOI,EAAAA,GAClB,OAAOJ,EAEX,IAAIiC,EAAAA,EAAAA,IAAKjC,KAAO/D,EAAAA,GAIZ,OAFI+K,IAAW5E,EAAAA,KACXyH,EAAAA,EAAAA,IAAc7J,EAAGrB,EAAAA,IACdqB,EAGX,MAAM8J,EAAUrI,EAAAA,GAAOzB,GAEjBnC,GAAUC,EAAAA,EAAAA,IAAWkC,GAE3B,GAAgB,YAAZ8J,GAAqC,aAAZA,EAAyB,CAClD,MAAMC,GAAQ5J,EAAAA,EAAAA,IAAWtC,GACnBmM,GAAQ7J,EAAAA,EAAAA,KAAYnC,EAAAA,EAAAA,IAAYH,IACtC,KAAQkM,IAAU3J,EAAAA,IAAc2J,IAAUpL,EAAAA,IAClCqL,IAAU5J,EAAAA,IAAc4J,IAAUrL,EAAAA,IAGtC,OADAkL,EAAAA,EAAAA,IAAc7J,EAAGgH,GACVhH,CAEf,CACA,GAAgB,YAAZ8J,IAAyB3J,EAAAA,EAAAA,IAAWtC,KAAauC,EAAAA,GAEjD,OADAyJ,EAAAA,EAAAA,IAAc7J,EAAGgH,GACVhH,EAGX,GAAIgH,IAAW5E,EAAAA,GAEX,OAAOpC,EAEX,MAAMiK,GAAMC,EAAAA,EAAAA,MAIZ,OAHAC,EAAAA,EAAAA,IAAQF,EAAKxM,EAAAA,KACb2M,EAAAA,EAAAA,IAAcH,EAAKjK,GAEZiK,CACX,CAEO,SAAS5J,EAAWL,GAEvB,GAAwB,SAApBkD,WAAAA,gBACA,OAAOlD,EAEX,IAAIG,EAAAA,EAAAA,IAAWH,KAAOI,EAAAA,GAClB,OAAOJ,EAEX,IAAIiC,EAAAA,EAAAA,IAAKjC,KAAO/D,EAAAA,GAEZ,OADA4N,EAAAA,EAAAA,IAAc7J,EAAGI,EAAAA,IACVJ,EAEX,GAAkB,YAAdyB,EAAAA,GAAOzB,KAAoBG,EAAAA,EAAAA,KAAWrC,EAAAA,EAAAA,IAAWkC,MAAQrB,EAAAA,GAEzD,OADAkL,EAAAA,EAAAA,IAAc7J,EAAGI,EAAAA,IACVJ,EAGX,MAAMiK,GAAMC,EAAAA,EAAAA,MAIZ,OAHAC,EAAAA,EAAAA,IAAQF,EAAKzM,EAAAA,KACb4M,EAAAA,EAAAA,IAAcH,EAAKjK,GAEZiK,CACX,C,wSC5EO,MAAM3K,EAAgB,EAChBC,EAAgB,EAChBF,EAAgB,EAChBG,EAAgB,EAChBC,EAAgB,EAChBN,EAAgB,EAChBC,EAAgB,EAChBU,EAAgB,EAChBU,EAAgB,EAChBG,EAAgB,EAChBE,EAAgB,GAChB3B,EAAgB,GAChB4H,EAAgB,GAChBF,EAAgB,GAChBF,EAAgB,GAChBC,EAAgB,GAChBI,EAAgB,GAChBF,EAAgB,GAChBwD,EAAgB,GAEhBtJ,EAAgB,GAChBE,EAAgB,GAMhB2D,EAAgB,GAKhB0F,EAAkB,CAC9B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,GAKYC,EAAkB,CAC9B,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GAGYpD,EAAiB,CAC7B,SACA,UACA,UACA,aACA,aACA,UACA,UACA,UACA,cACA,eACA,UACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,gBAGYqD,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UAGYC,EAAiB,CAC7B,UACA,WACA,WACA,cACA,cACA,WACA,WACA,WACA,eACA,gBACA,WACA,YAGYf,EAAY,CACxB,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,I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AAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,KAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EACZD,EAAAA,GAAK,IAAOC,EAAAA,MAAAA,EAEZ,MC7DA,IACC,OAAUA,EAAAA,MAAAA,EACV,YAAeA,EAAAA,MAAAA,EACf,UAAaA,EAAAA,MAAAA,GCHd,OACIA,EAAAA,MAAAA,MACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,KACAA,EAAAA,MAAAA,GCCG,MAAMoS,GAET,GAAmD,CAAC,EAEpDC,QAAAA,CAAS/U,EAAcoL,GACnB5J,MAAK,EAAYxB,GAAQoL,CAC7B,CAOA,GAAuC,CAAC,EAMxC4J,WAAAA,CAAYrT,EAAgBqJ,GACxB,GAAGA,EAAIQ,YAAYhK,MAAK,EACpB,MAAM,IAAItD,MAAM,OAAO8M,EAAIQ,gCAM/B,OAHAhK,MAAK,EAAgBwJ,EAAIQ,UAAYR,EAG9B,IAAIiK,SAAS,WAAYtT,EACpC,CAEAuT,SAAAA,CAAUvT,EAAgBqJ,GACtBxJ,MAAK,EAAYwJ,EAAIQ,UAAYhK,KAAKwT,YAAYrT,EAAQqJ,EAAzBxJ,CAA8BA,KACnE,CAEA2T,UAAAA,GACI,OAAO3T,MAAK,CAChB,CACA4T,SAAAA,CAAUpV,GACN,OAAOwB,MAAK,EAAYxB,EAC5B,CAEA+E,SAAAA,CAAUyG,GACN,OAAOhK,MAAK,EAAgBgK,EAChC,CAEA6J,KAAAA,IAAStJ,GACLjI,QAAQyB,OAAOwG,EACnB,CAEA,OAAInG,GACA,MAA2B,SAApBrG,WAAAA,gBAA6B,KAAOqG,EAC/C,CACA,QAAID,GACA,MAA2B,SAApBpG,WAAAA,gBAA6B,KAAOoG,EAC/C,EAIW2P,WAAWC,SAAW,IAAIT,G","sources":["webpack://sbrython/./src/sbry/ast2js/list.js","webpack://sbrython/./src/sbry/ast2js/op/brackets.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/ternary.ts","webpack://sbrython/./src/sbry/ast2js/struct/tuple.ts","webpack://sbrython/./src/sbry/types/utils/types.ts","webpack://sbrython/./src/sbry/types/jsint.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/while.ts","webpack://sbrython/./src/sbry/structs/operators/id.ts","webpack://sbrython/./src/sbry/ast2js/op/attr.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring_fval.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/if.ts","webpack://sbrython/./src/sbry/ast2js/op/assign.ts","webpack://sbrython/./src/sbry/ast2js/key/break.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/elif.ts","webpack://sbrython/./src/sbry/types/float.ts","webpack://sbrython/./src/sbry/ast2js/def/args.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/sbry/ast2js/def/meth.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/sbry/ast2js/key/continue.ts","webpack://sbrython/./src/sbry/types/NotImplemented.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/sbry/ast2js/op/not.ts","webpack://sbrython/./src/sbry/ast2js/classdef.ts","webpack://sbrython/./src/sbry/ast2js/lit/float.ts","webpack://sbrython/./src/sbry/ast2js/lit/none.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/./src/sbry/ast2js/body.ts","webpack://sbrython/./src/sbry/types/list.js","webpack://sbrython/./src/sbry/types/index.ts","webpack://sbrython/./src/sbry/types/bool.ts","webpack://sbrython/./src/sbry/ast2js/def/fct.ts","webpack://sbrython/./src/sbry/ast2js/key/import_alias.ts","webpack://sbrython/./src/sbry/ast2js/call/arg_kw.ts","webpack://sbrython/./src/sbry/ast2js/op/bin.ts","webpack://sbrython/./src/sbry/ast2js/op/unary.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock.ts","webpack://sbrython/./src/sbry/ast2js/comment.ts","webpack://sbrython/./src/sbry/ast2js/key/assert.ts","webpack://sbrython/./src/sbry/structs/operators/compare.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/lit/str.ts","webpack://sbrython/./src/sbry/ast2js/key/return.ts","webpack://sbrython/./src/sbry/structs/operators/unary.ts","webpack://sbrython/./src/sbry/structs/Converters.ts","webpack://sbrython/./src/sbry/structs/operators/index.ts","webpack://sbrython/./src/sbry/ast2js/2bigint.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for.ts","webpack://sbrython/./src/sbry/types/str.ts","webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/sbry/ast2js/key/raise.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_aug.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/tryblock_catch.ts","webpack://sbrython/./src/sbry/ast2js/symbol.ts","webpack://sbrython/./src/sbry/ast2js/lit/false.ts","webpack://sbrython/./src/sbry/structs/ReturnTypeFcts.ts","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/sbry/types/unknown.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/sbry/ast2js/lit/fstring.ts","webpack://sbrython/./src/sbry/ast2js/lit/int.ts","webpack://sbrython/./src/sbry/ast2js/struct/list.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/for_range.ts","webpack://sbrython/./src/sbry/ast2js/lit/true.ts","webpack://sbrython/./src/sbry/types/type.ts","webpack://sbrython/./src/sbry/types/int.ts","webpack://sbrython/./src/sbry/ast2js/def/arg_posonly.ts","webpack://sbrython/./src/sbry/ast2js/2number.ts","webpack://sbrython/./src/sbry/types/utils/methods.ts","webpack://sbrython/./src/sbry/ast2js/utils.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/sbry/ast2js/key/pass.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_init.ts","webpack://sbrython/./src/sbry/ast2js/op/op.ts","webpack://sbrython/./src/sbry/ast2js/struct/dict.ts","webpack://sbrython/./src/sbry/ast2js/op/cmp.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/sbry/types/None.ts","webpack://sbrython/./src/sbry/ast2js/call/index.ts","webpack://sbrython/./src/sbry/ast2js/key/import.ts","webpack://sbrython/./src/sbry/ast2js/op/assign_attr.ts","webpack://sbrython/./src/sbry/ast2js/ctrl/else.ts","webpack://sbrython/./src/sbry/structs/operators/binary.ts","webpack://sbrython/./src/sbry/ast2js/op/bool.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/webpack/runtime/make namespace object","webpack://sbrython/./src/sbry/types/builtins.ts","webpack://sbrython/./src/utils/print/printNode.ts","webpack://sbrython/./stubs/JS/__init__.pyi","webpack://sbrython/./src/sbry/py2ast_fast.ts","webpack://sbrython/./src/sbry/ast2js/index.ts","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts"],"sourcesContent":["// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const coffset = firstChild(node);\n\n    w_sns(\"\", coffset, \"[\", nextSibling(coffset), \"]\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur = firstChild(node);\n    w_sns(\"(\", cur, \"?\", cur = nextSibling(cur), \" : \", nextSibling(cur), \")\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"Object.freeze([\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"])\");\n}","import { type Context } from \"@SBrython/sbry/bry2sbry/utils\";\nimport { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\n\nexport const RETURN_TYPE = Symbol(\"RETURN_TYPE\");\nexport const TYPEID      = Symbol(\"TYPEID\");\nexport const WRITE_CALL  = Symbol(\"WRITE_CALL\");\nexport const JS_NAME     = Symbol(\"JS_NAME\");\nexport const ARGS_INFO   = Symbol(\"ARGS_INFO\");\n\nexport type Type = {\n    [key: string]: string|Type,\n    [key: symbol]: unknown,\n    __class__?: Type,\n    __name__ ?: string,\n    __str__  ?: Fct,\n    __int__  ?: Fct,\n    [JS_NAME]?: string,\n    [TYPEID ]?: number,\n}\n\nexport type Fct = Type & {\n    [RETURN_TYPE]: (o?: number) => TYPE_ID,\n    [WRITE_CALL] : (node: NODE_ID) => void\n}\n\nexport type Callable = Type & {\n    __name__?: string,\n    __call__: Fct & {\n        __name__: \"__call__\",\n        [ARGS_INFO]?: { //TODO: bry2sbry\n            \n            args_names : string[],\n            args_pos   : Record<string, number>,\n            idx_end_pos: number;\n            idx_vararg : number;\n            has_kw     : boolean;\n            kwargs    ?: string;\n    \n            // used to delay function body parsing in order to handle out of order decl.\n            generate   : undefined|( (node: any, astnode: NODE_ID, context: Context) => void );\n        }\n    }\n}","import { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_JSINT, RET_JSINT2JSINT } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { TYPEID_jsint, TYPEID_int, TYPEID_type_jsint_ } from \"./list\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_subs } from \"../structs/operators/id\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_jsint, TYPEID_type_jsint_, \"int\", \"BigInt\");\n\nadd_method(klass, \"__abs__\", RET_JSINT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_JSINT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)));\n});\n\n// '**' and '*' => if \"as float\" could accept loss of precision.\naddJSBinOps(klass,\n            [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB, OP_BIT_AND,\n             OP_BIT_OR , OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT,\n            {\n                // in JS bit operations are on 32bits\n                convert_self : CONVERT_2INT,\n                convert_other: CONVERT_2INT\n            });\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2INT, {\n            w_call: (node, a, op, b) => {\n                    if( resultType(node) === TYPEID_int ){\n                        a = Number2Int(a);\n                        b = Number2Int(b);\n                    } else {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(node, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], RET_IJBF2FLOAT, {convert_other: CONVERT_INT2FLOAT});\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n            },\n        });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_JSINT2JSINT, {\n            w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                // do not handle -0\n                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n            },\n        })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_JSINT, (call, op, a) => {\n\n                if( resultType(call) === TYPEID_int )\n                    a = Number2Int(a);\n                \n                return w_JSUnrOp(call, OP_UNR_MINUS, a);\n        }); // min_safe_integer == max_safe_integer.\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT, (node, op, a) =>{\n                w_JSUnrOp(node, OP_BIT_NOT, Number2Int(a) );\n            })\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    w_sns(\"while(\", coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_node } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\n\nexport function w_subs(call: NODE_ID, to_write: NODE_ID) {\n\n    setParentOPPrio( to_write, parentOPPrio(call) );\n\n    w_node(to_write);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_node(firstChild(node)); w_str(`.${VALUES[node]}`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_sns(\"${\", firstChild(node), \"}\")\n}","function assert(cond: boolean, msg: string = 'Assertion failed') {\n\n    if( ! cond )\n        throw new Error(msg);\n}\n\n\nexport default {\n    assert\n};","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);\n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"\", lchild, \" = \", rchild, \"\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {\n    w_str(\"break\");\n}","import { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const fist = firstChild(node);\n\n    w_sns(\"else if(\", fist, \") {\", nextSibling(fist), \"}\");\n}","import { RET_FLOAT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT, Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { addJSUnrOps } from \"@SBrython/sbry/structs/operators/unary\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"../dop\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_float_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_UNR_MINUS } from \"../structs/operators\";\nimport { AST_LIT_STR } from \"../ast2js/list\";\nimport TYPES from \"./list\";\nimport { Fct } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_float, TYPEID_type_float_, \"float\", \"Number\");\n\nadd_method(klass, \"__call__\", RET_FLOAT, (node: NODE_ID) => {\n    \n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(Int2Number(other));\n        return;\n    }\n    if( other_type === TYPEID_float || other_type === TYPEID_jsint) {\n        w_node(other);\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        if( type(other) === AST_LIT_STR ) {\n\n            const other_value = VALUES[other].slice(1,-1);\n\n            if( other_value === \"inf\" || other_value === \"infinity\" ){\n                w_str(\"Number.POSITIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"-inf\" || other_value === \"-infinity\") {\n                w_str(\"Number.NEGATIVE_INFINITY\");\n                return;\n            }\n            if( other_value === \"nan\" || other_value === \"NaN\" ){\n                w_str(\"Number.NaN\");\n                return;\n            }\n        }\n\n    \n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"parseFloat(\", other, \")\");\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    // @ts-ignore\n    (otype.__int__ as Fct)![WRITE_CALL]!(node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    if( __SBRY_COMPAT__ === \"NONE\") {\n        w_node( nextSibling(firstChild(call)) ); w_str(' .toString()');\n    } else\n        w_sns(\"_sb_.float2str(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__abs__\", RET_FLOAT, (call: NODE_ID) => {\n    w_sns(\"Math.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_MUL, OP_BIN_DIV, OP_BIN_ADD, OP_BIN_SUB],\n            RET_IJBF2FLOAT, { convert_other: CONVERT_INT2FLOAT })\n\naddJSBinOps(klass, [OP_BIN_FDIV], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    return w_sns(\"_sb_.floordiv_float(\", a, \", \", b, \")\");\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_MOD], RET_IJBF2FLOAT, {\n                convert_other: CONVERT_INT2FLOAT,\n                w_call   : (call, a, _op, b) => {\n                    w_sns(\"_sb_.mod_float(\", a, \", \", b, \")\");\n                },\n            })\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_FLOAT);\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_DEF_ARG_KWONLY, AST_DEF_ARG_POS, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS } from \"../list\";\n\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nfunction write_arg(node: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str( VALUES[node] ); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nfunction write_posarg(node: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_BEG);\n\n    w_str(`_${VALUES[node]}`); // arg name\n\n    if( firstChild(node) !== 0 ) {\n\n        let defval: any = firstChild(node);\n        if( resultType(defval) === TYPEID_jsint )\n            defval = Number2Int(defval);\n\n        w_str(\" = \");\n        w_node(defval);\n    }\n    if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(node as number) + CODE_END);\n\n    w_str(\", \");\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let cur = firstChild(node);\n\n    while( type(cur) === AST_DEF_ARG_POSONLY) {\n        write_arg(cur);\n        cur = nextSibling(cur);\n    }\n\n    let start: NODE_ID = 0;\n    if( type(cur) === AST_DEF_ARG_POS ) {\n        start = cur;\n        do {\n            write_posarg(cur);\n            cur = nextSibling(cur);\n        } while( type(cur) === AST_DEF_ARG_POS );\n    }\n\n    if( type(cur) === AST_DEF_ARG_VARARGS ) {\n        \n        if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_BEG);\n        w_str(`...${VALUES[node]}`);\n        if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_END);\n\n        cur = nextSibling(cur);\n    }\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return;\n\n    //TODO: if has varargs...\n    if( type(cur) === 0 || start !== 0 ) {\n\n        w_str(\" {\");\n\n        while( type(start) === AST_DEF_ARG_POS) {\n            \n            const name = VALUES[start];\n            w_str(`${name} = _${name},`);\n\n            start = nextSibling(start);\n        }\n\n        while( type(cur) === AST_DEF_ARG_KWONLY ) {\n\n            write_arg(cur);\n            cur = nextSibling(cur);\n        }\n\n        if( cur !== 0 ) { // kwargs...\n            // @ts-ignore\n            if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`...${VALUES[cur]} `);\n            // @ts-ignore\n            if( __SBRY_MODE__ === \"dev\" ) set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        w_str(\"} = _sb_.getKW() \");\n\n    }\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import { w_NL, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`static ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n\n    w_NL();\n\n    w_str(`${name}(...args){ return this.constructor.${name}(this, ...args) }`);\n}","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"continue\");\n}","import { TYPEID_NotImplemented, TYPEID_NotImplementedType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_NotImplemented, TYPEID_NotImplementedType, \"NotImplementedType\", \"\");","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport default function(node: NODE_ID) {\n    w_JSUnrOp(node, OP_BOOL_NOT, Int2Number( firstChild(node), TYPEID_jsint) );\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const body       = firstChild(node);\n    let cur = nextSibling(body);\n\n    w_str(`class ${VALUES[node]}`);\n\n    if( cur !== 0) {\n        w_str(\" extends \");\n    \n        if( nextSibling(cur) === 0) {\n            w_node(cur);\n        } else {\n            w_str(\"_sb_.mix(\");\n            w_node(cur);\n            cur = nextSibling(cur);\n            do {\n                w_str(\", \");\n                w_node(cur);\n                cur = nextSibling(cur);\n            } while(cur !== 0);\n            \n            w_str(\")\");\n        }\n    }\n        \n\n    w_sns(\" {\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"null\");\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","import { BB, BE, jscode, set_js_cursor, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_STR } from \"./list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    BB();\n\n    const first    = firstChild(node);\n    let cur = first;\n    while(cur !== 0) {\n        if( jscode.length !== 0 ) w_NL();\n\n        if( type(cur) !== AST_LIT_STR )\n            w_node(cur);\n        else if(__SBRY_MODE__ === \"dev\") {\n            set_js_cursor(4*(cur as number) + CODE_BEG);\n            w_str(`/*${VALUES[cur].slice(1,-1)}*/`);\n            set_js_cursor(4*(cur as number) + CODE_END);\n        }\n\n        cur = nextSibling(cur);\n    }\n\n    BE();\n\n    if(__SBRY_MODE__ === \"dev\" && first !== 0 && node !== 0)\n        w_NL();\n}","export const TYPEID_unknown            = 0;\nexport const TYPEID_NoneType           = 1;\nexport const TYPEID_None               = 2;\nexport const TYPEID_NotImplementedType = 3;\nexport const TYPEID_NotImplemented     = 4;\nexport const TYPEID_type               = 5;\nexport const TYPEID_type_int_          = 6;\nexport const TYPEID_int                = 7;\nexport const TYPEID_type_jsint_        = 8;\nexport const TYPEID_jsint              = 9;\nexport const TYPEID_type_float_        =10;\nexport const TYPEID_float              =11;\nexport const TYPEID_type_bool_         =12;\nexport const TYPEID_bool               =13;\nexport const TYPEID_type_str_          =14;\nexport const TYPEID_str                =15;\n\nconst TYPES = new Array(16);\nfor(let i = 0; i < 16; ++i)\n    TYPES[i] = Object.create(null);\n\nexport default TYPES;","import LIST from './list';\nexport default LIST;\n\nrequire(\"./unknown\");\nrequire(\"./None\");\nrequire(\"./NotImplemented\");\nrequire(\"./type\");\nrequire(\"./int\");\nrequire(\"./jsint\");\nrequire(\"./float\");\nrequire(\"./bool\");\nrequire(\"./str\");\n\nconst _id2name = __SBRY_MODE__ !== 'dev' ? [] : [\n\t\"unknown\",\n\t\"NoneType\",\n\t\"None\",\n\t\"NotImplementedType\",\n\t\"NotImplemented\",\n\t\"type\",\n\t\"type_int_\",\n\t\"int\",\n\t\"type_jsint_\",\n\t\"jsint\",\n\t\"type_float_\",\n\t\"float\",\n\t\"type_bool_\",\n\t\"bool\",\n\t\"type_str_\",\n\t\"str\",\n];\nexport const id2name = _id2name;\n","import { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { RET_IJBF2BOOL } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { TYPEID_bool, TYPEID_type_bool_ } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\nconst klass = initBuiltinClass(TYPEID_bool, TYPEID_type_bool_, \"bool\", \"Boolean\");\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const name = VALUES[node];\n    const coffset = firstChild(node);\n\n    w_sns(`function ${name}(`, coffset, \"){\", nextSibling(coffset), \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n    \n    w_str(value[0])\n\n    if( value[1] !== undefined)\n        w_str(\": \" + value[1]);\n}","import { firstChild, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { w_node, w_str } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(`${VALUES[node]}: `); // arg name\n    w_node( firstChild(node) );\n}","import { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    \n    const method = Types[resultType(coffset)]![VALUES[node]] as Fct;\n    method[WRITE_CALL]!(node);\n}","import { firstChild, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Int2Number } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { Fct, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport { OP_BOOL_NOT } from \"@SBrython/sbry/structs/operators\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const left  = firstChild(node);\n    const value = VALUES[node];\n\n    if( value === 'not') {\n        w_JSUnrOp(node, OP_BOOL_NOT, Int2Number(left, TYPEID_jsint) );\n        return;\n    }\n\n    const method = Types[resultType(left)!][value] as Fct;\n\n    method[WRITE_CALL]!(node);\n}","import { BB, BE, w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    let cur    = firstChild(node);\n\n    w_sns(\"try {\", cur, \"} catch(_raw_err_){\");\n    BB();\n    w_NL();\n\n        w_str(\"const _err_ = _sb_.get_py_exception(_raw_err_, __SBRY__)\");\n\n        cur = nextSibling(cur);\n        if( cur !== 0)\n            w_node( cur );\n\n        cur = nextSibling(cur);\n        while(cur !== 0) {\n            w_NL(); w_str(\"else \"); w_node(cur);\n            cur = nextSibling(cur);\n        }\n\n        // no \"catch all\" clause...\n        //TODO:\n        /*\n        if( nextSibling(firstChild(cur)) !== 0 ) {\n            w_NL();\n            w_str(\"else { throw _raw_err_ }\");\n        }\n        */\n\n    BE();\n    //w_NL(); - no needs ?\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    if(__SBRY_MODE__ === \"dev\") w_str(`/*${VALUES[node]} */`);\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    if( __SBRY_MODE__ !== \"prod\")\n        w_sns(\"assert(\", firstChild(node), \")\");\n}","import { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_JSBinOp } from \"./binary\";\nimport { OP_CMP_EQ, OP_CMP_GE, OP_CMP_GT, OP_CMP_LE, OP_CMP_LT, OP_CMP_NEQ, OP_EQ2IS, OP_ID, opid2opmethod } from \".\";\n\nexport const JSCmpOps_LIST = [OP_CMP_EQ, OP_CMP_NEQ, OP_CMP_LT, OP_CMP_LE, OP_CMP_GT, OP_CMP_GE] as const;;\n\nexport function addJSCmpOps(target     : any,\n                            ops        : readonly OP_ID[],\n                            return_type: RETURN_TYPE_FCT) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const a = nextSibling(firstChild(call));\n            const b = nextSibling(a);\n            w_JSCmpOp(call, a, op, b );\n        });\n    }\n}\n\n\nexport function w_JSCmpOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    /*if( reversed ) { // reverse OP: meh\n        [a,b] = [b,a];\n        cop = reverse[cop as keyof typeof reverse];\n    }*/\n\n    if( (op === OP_CMP_EQ || op === OP_CMP_NEQ) && resultType(a) === resultType(b) )\n        op += OP_EQ2IS; // use is/is not JS op.\n\n    w_JSBinOp(node, a, op, b);\n}","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(VALUES[node]);\n}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n\n    if( coffset === 0)\n        return w_str(\"return null;\");\n\n    return w_sns(\"return \", coffset, \";\");\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport {  OP_ID, opid2jsop, opid2opmethod } from \".\";\n\nexport function addJSUnrOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT,\n                            w_call = w_JSUnrOp\n                        ) {\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (node: NODE_ID) => {\n            w_call(node, op, nextSibling(firstChild(node)));\n        })\n    }\n}\n\nexport function w_JSUnrOp(node: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    const prio   = 14; //jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n\n    let l = opid2jsop[op]; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = `(${l}`; r = \")\";\n    }\n\n    w_sns(l, a, r);\n}","import { createASTNode, firstChild, nextSibling, NODE_ID, resultType, setFirstChild, setResultType, setType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { AST_LIT_INT, AST_2BIGINT, AST_2NUMBER } from \"@SBrython/sbry/ast2js/list\";\nimport { TYPEID_float, TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\n\nexport type Converter = (node: NODE_ID) => NODE_ID;\n\nexport const NOCONVERT = (node: NODE_ID) => node;\n\nexport const CONVERT_INT2FLOAT = Int2Number;\nexport const CONVERT_2INT      = Number2Int;\n\nexport function Int2Number(a: NODE_ID, target = TYPEID_float) {\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return a;\n\n    if( resultType(a) !== TYPEID_int) // already a number\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        // if bigint can't safely convert to JSINT.\n        if( target === TYPEID_float )\n            setResultType(a, TYPEID_jsint);\n        return a;\n    }\n\n    const a_value = VALUES[a];\n\n    const coffset = firstChild(a);\n\n    if( a_value === '__mul__' || a_value === '__rmul__' ) {\n        const ltype = resultType(coffset);\n        const rtype = resultType( nextSibling(coffset) );\n        if(    (ltype === TYPEID_int || ltype === TYPEID_jsint)\n            && (rtype === TYPEID_int || rtype === TYPEID_jsint)\n        ) {\n            setResultType(a, target);\n            return a;\n        }\n    }\n    if( a_value === '__neg__' && resultType(coffset) === TYPEID_int) {\n        setResultType(a, target);\n        return a;\n    }\n\n    if( target !== TYPEID_float )\n        // int -> jsint cast is facultative...\n        return a;\n\n    const idx = createASTNode();\n    setType(idx, AST_2NUMBER);\n    setFirstChild(idx, a);\n\n    return idx;\n}\n\nexport function Number2Int(a: NODE_ID) {\n\n    if( __SBRY_COMPAT__ === \"NONE\" )\n        return a;\n\n    if( resultType(a) === TYPEID_int)\n        return a;\n\n    if( type(a) === AST_LIT_INT) {\n        setResultType(a, TYPEID_int); // force bigint convertion\n        return a;\n    }\n    if( VALUES[a] === '__neg__' && resultType(firstChild(a)) === TYPEID_jsint) {\n        setResultType(a, TYPEID_int);\n        return a;\n    }\n\n    const idx = createASTNode();\n    setType(idx, AST_2BIGINT);\n    setFirstChild(idx, a);\n\n    return idx;\n}","export type OP_ID = number;\n\nexport const OP_BIT_OR     = 0 as const;\nexport const OP_BIT_XOR    = 1 as const;\nexport const OP_BIT_AND    = 2 as const;\nexport const OP_BIT_LSHIFT = 3 as const;\nexport const OP_BIT_RSHIFT = 4 as const;\nexport const OP_BIN_ADD    = 5 as const;\nexport const OP_BIN_SUB    = 6 as const;\nexport const OP_BIN_MUL    = 7 as const;\nexport const OP_BIN_DIV    = 8 as const;\nexport const OP_BIN_FDIV   = 9 as const;\nexport const OP_BIN_MOD    = 10 as const;\nexport const OP_BIN_POW    = 11 as const;\nexport const OP_CMP_GT     = 12 as const;\nexport const OP_CMP_LT     = 13 as const;\nexport const OP_CMP_EQ     = 14 as const;\nexport const OP_CMP_NEQ    = 15 as const;\nexport const OP_CMP_GE     = 16 as const;\nexport const OP_CMP_LE     = 17 as const;\nexport const OP_ASSIGN     = 18 as const;\nexport const OP_UNR_PLUS   = 19 as const;\nexport const OP_UNR_MINUS  = 20 as const;\nexport const OP_BIT_NOT    = 21 as const;\nexport const OP_CMP_IN     = 22 as const;\nexport const OP_CMP_IS     = 23 as const;\nexport const OP_CMP_IS_NOT = 24 as const;\nexport const OP_BOOL_OR    = 25 as const;\nexport const OP_BOOL_AND   = 26 as const;\nexport const OP_BOOL_NOT   = 27 as const;\nexport const OP_CMP_NOT_IN = 28 as const;\n\n// https://docs.python.org/3/reference/expressions.html#operator-precedence\n// the higher the more priority\nexport const pyop_priorities = [\n\t5,\n\t6,\n\t7,\n\t8,\n\t8,\n\t9,\n\t9,\n\t10,\n\t10,\n\t10,\n\t10,\n\t11,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t4,\n\t0,\n\t12,\n\t12,\n\t12,\n\t4,\n\t4,\n\t4,\n\t1,\n\t2,\n\t3,\n\t4,\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\n// the higher the more priority\nexport const jsop_priorities = [\n\t5,\n\t6,\n\t7,\n\t10,\n\t10,\n\t11,\n\t12,\n\t12,\n\t12,\n\t12,\n\t12,\n\t13,\n\t9,\n\t9,\n\t8,\n\t8,\n\t9,\n\t9,\n\t2,\n\t14,\n\t14,\n\t14,\n\t9,\n\t8,\n\t8,\n\t3,\n\t4,\n\t14,\n\t9,\n];\n\nexport const opid2opmethod  = [\n\t\"__or__\",\n\t\"__xor__\",\n\t\"__and__\",\n\t\"__lshift__\",\n\t\"__rshift__\",\n\t\"__add__\",\n\t\"__sub__\",\n\t\"__mul__\",\n\t\"__truediv__\",\n\t\"__floordir__\",\n\t\"__mod__\",\n\t\"__pow__\",\n\t\"__gt__\",\n\t\"__lt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__ge__\",\n\t\"__le__\",\n\t\"__pos__\",\n\t\"__neg__\",\n\t\"__not__\",\n\t\"__contains__\",\n]\n\nexport const opid2ropmethod = [\n\t\"__ror__\",\n\t\"__rxor__\",\n\t\"__rand__\",\n\t\"__rlshift__\",\n\t\"__rrshift__\",\n\t\"__radd__\",\n\t\"__rsub__\",\n\t\"__rmul__\",\n\t\"__rtruediv__\",\n\t\"__rfloordir__\",\n\t\"__rmod__\",\n\t\"__rpow__\",\n\t\"__lt__\",\n\t\"__gt__\",\n\t\"__eq__\",\n\t\"__neq__\",\n\t\"__le__\",\n\t\"__ge__\",\n]\n\nexport const opid2iopmethod = [\n\t\"__ior__\",\n\t\"__ixor__\",\n\t\"__iand__\",\n\t\"__ilshift__\",\n\t\"__irshift__\",\n\t\"__iadd__\",\n\t\"__isub__\",\n\t\"__imul__\",\n\t\"__itruediv__\",\n\t\"__ifloordir__\",\n\t\"__imod__\",\n\t\"__ipow__\",\n]\n\nexport const opid2jsop = [\n\t\"|\",\n\t\"^\",\n\t\"&\",\n\t\"<<\",\n\t\">>\",\n\t\"+\",\n\t\"-\",\n\t\"*\",\n\t\"/\",\n\t\"/\",\n\t\"%\",\n\t\"**\",\n\t\">\",\n\t\"<\",\n\t\"==\",\n\t\"!=\",\n\t\">=\",\n\t\"<=\",\n\t\"=\",\n\t\"+\",\n\t\"-\",\n\t\"~\",\n\t\"in\",\n\t\"===\",\n\t\"!==\",\n\t\"||\",\n\t\"&&\",\n\t\"!\",\n\t\"\",\n\n\t\"|=\",\n\t\"^=\",\n\t\"&=\",\n\t\"<<=\",\n\t\">>=\",\n\t\"+=\",\n\t\"-=\",\n\t\"*=\",\n\t\"/=\",\n\t\"/=\",\n\t\"%=\",\n\t\"**=\",\n]\n\nexport const opsymbol2opid  = {\n\t\"|\": OP_BIT_OR,\n\t\"|=\": OP_BIT_OR+29,\n\t\"^\": OP_BIT_XOR,\n\t\"^=\": OP_BIT_XOR+29,\n\t\"&\": OP_BIT_AND,\n\t\"&=\": OP_BIT_AND+29,\n\t\"<<\": OP_BIT_LSHIFT,\n\t\"<<=\": OP_BIT_LSHIFT+29,\n\t\">>\": OP_BIT_RSHIFT,\n\t\">>=\": OP_BIT_RSHIFT+29,\n\t\"+\": OP_BIN_ADD,\n\t\"+=\": OP_BIN_ADD+29,\n\t\"-\": OP_BIN_SUB,\n\t\"-=\": OP_BIN_SUB+29,\n\t\"*\": OP_BIN_MUL,\n\t\"*=\": OP_BIN_MUL+29,\n\t\"/\": OP_BIN_DIV,\n\t\"/=\": OP_BIN_DIV+29,\n\t\"//\": OP_BIN_FDIV,\n\t\"//=\": OP_BIN_FDIV+29,\n\t\"%\": OP_BIN_MOD,\n\t\"%=\": OP_BIN_MOD+29,\n\t\"**\": OP_BIN_POW,\n\t\"**=\": OP_BIN_POW+29,\n\t\">\": OP_CMP_GT,\n\t\"<\": OP_CMP_LT,\n\t\"==\": OP_CMP_EQ,\n\t\"!=\": OP_CMP_NEQ,\n\t\">=\": OP_CMP_GE,\n\t\"<=\": OP_CMP_LE,\n\t\"=\": OP_ASSIGN,\n\t\"in\": OP_CMP_IN,\n\t\"is\": OP_CMP_IS,\n\t\"is not\": OP_CMP_IS_NOT,\n\t\"or\": OP_BOOL_OR,\n\t\"and\": OP_BOOL_AND,\n\t\"not in\": OP_CMP_NOT_IN,\n};\n\nexport const opsymbol2uopid = {\n\t\"+\": OP_UNR_PLUS,\n\t\"-\": OP_UNR_MINUS,\n\t\"~\": OP_BIT_NOT,\n\t\"not\": OP_BOOL_NOT,\n};\n\nexport const OP_EQ2IS = OP_CMP_IS - OP_CMP_EQ;","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"BigInt(\", firstChild(node), \")\");\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const list = firstChild(node);\n\n    w_sns(`for(var ${idx} of `, list, \"){\", nextSibling(list), \"}\");\n}","import { RET_IJ2STR, RET_INT, RET_STR, RET_STR2BOOL, RET_STR2STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { CONVERT_INT2FLOAT } from \"@SBrython/sbry/structs/Converters\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"@SBrython/sbry/structs/operators/compare\";\nimport { addJSBinOps } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_str, TYPEID_type_str_ } from \"./list\";\nimport { OP_BIN_ADD, OP_BIN_MUL } from \"../structs/operators\";\nimport TYPES from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\n\nconst klass = initBuiltinClass(TYPEID_str, TYPEID_type_str_, \"str\", \"String\");\n\nadd_method(klass, \"__call__\", RET_STR, (node) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type = resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_str ) {\n        w_node(other);\n        return;\n    }\n\n    const otype = TYPES[other_type].__class__;\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__str__ === undefined) )\n        throw new Error(`${otype?.__name__}.__str__ not defined`);\n\n    // @ts-ignore\n    otype.__str__!.__call__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__len__\", RET_INT, (call: NODE_ID) => {\n    w_node( nextSibling(firstChild(call)) ); w_str(\".length\");\n});\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_STR2BOOL);\n\naddJSBinOps(klass, [OP_BIN_ADD], RET_STR2STR);\n\naddJSBinOps(klass, [OP_BIN_MUL], RET_IJ2STR, {\n                convert_other  : CONVERT_INT2FLOAT,\n                w_call: (call: NODE_ID, a: NODE_ID, op, b: NODE_ID) => {\n                    \n                    if( resultType(a) !== TYPEID_str ){\n                        const _ = a;\n                        a = b; b = _;\n                    }\n\n                    w_sns(\"\", a, \".repeat(\", b, \")\");\n                }\n            });","export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"throw new _sb_.PythonError(\", firstChild(node), \")\");\n}","// @ts-nocheck\n\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    VALUES[node].__call__[WRITE_CALL](node);\n\n    /*\n\n    let op = AssignOperators[VALUES[node] as keyof typeof AssignOperators];\n\n    const coffset = firstChild(node);\n\n    let type = TYPEID_NotImplementedType;\n    let method = Types[resultType(coffset)][op] as Fct;\n\n    const c2 = nextSibling(coffset);\n\n    if( method !== undefined )\n        type = method[RETURN_TYPE](resultType(c2)!);\n\n    // try a = a + b\n    if( __DEBUG__ && type === TYPEID_NotImplementedType) {\n        throw new Error(`${Types[resultType(coffset)].__name__} ${op} ${Types[resultType(c2)].__name__} NOT IMPLEMENTED!`);\n        /*\n        op     = reversed_operator(op);\n        method = name2SType(right.result_type as STypeName)?.[op];\n        if( method !== undefined)\n            type   = method.return_type(left.result_type);\n\n        if( type === SType_NOT_IMPLEMENTED)\n            throw new Error(`${right.result_type} ${op} ${left.result_type} NOT IMPLEMENTED!`);\n\n        [left, right] = [right, left];\n        *//*\n    }\n\n    method[WRITE_CALL](node);*/\n}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const coffset = firstChild(node);\n    const cond    = nextSibling(coffset);\n\n    // else is handled by tryblock\n    if( cond === 0) {\n        w_sns(\"{\", coffset, \"}\");\n        return;\n    }\n\n    w_sns(\"if(\", cond, \"){\", coffset, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str( VALUES[node] );\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"false\");\n}","import { TYPEID_NoneType, TYPEID_bool, TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType, TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport type RETURN_TYPE_FCT = (o: number) => number;\n\nexport function RET_None(o: number) {\n    return TYPEID_NoneType;\n}\n\nexport function RET_IJBF2BOOL(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJBF2FLOAT(o: number) {\n    if( TYPEID_int <= o && o <= TYPEID_float)\n        return TYPEID_float;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_JSINT2JSINT(o: number) {\n    if( o === TYPEID_jsint)\n        return TYPEID_jsint;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJB2INT(o: number) {\n    if( o >= TYPEID_int && o <= TYPEID_bool)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_IJ2INT(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_INT2INT(o: number) {\n    if( o === TYPEID_int)\n        return TYPEID_int;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_STR2BOOL(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_bool;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_STR2STR(o: number) {\n    if( o === TYPEID_str )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\nexport function RET_IJ2STR(o: number) {\n    if( o === TYPEID_int || o === TYPEID_jsint )\n        return TYPEID_str;\n    return TYPEID_NotImplementedType;\n}\n\nexport function RET_FLOAT(_: number) { return TYPEID_float; }\nexport function RET_INT  (_: number) { return TYPEID_int;   }\nexport function RET_JSINT(_: number) { return TYPEID_jsint; }\nexport function RET_STR  (_: number) { return TYPEID_str;   }","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __SBRY_MODE__ === \"dev\" ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__SBRY_MODE__ === \"dev\") {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","export default class Py_object {\n\n}","import { TYPEID_unknown } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_unknown, TYPEID_unknown, \"unknown\", \"undefined\");","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","import { set_js_cursor, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { AST_LIT_FSTRING_FVAL } from \"@SBrython/sbry/ast2js/list\";\nimport { CODE_BEG, CODE_END, firstChild, nextSibling, NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_str } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"`\");\n\n    let cur    = firstChild(node);\n    while( cur !== 0) {\n\n        if( resultType(cur) === TYPEID_str) {\n\n            // we write the children directly...\n            if(__SBRY_MODE__ === \"dev\") set_js_cursor( (cur as any as number)*4 + CODE_BEG);\n            w_node(VALUES[cur]);\n            if(__SBRY_MODE__ === \"dev\") set_js_cursor( (cur as any as number)*4 + + CODE_END);\n        } else if( type(cur) === AST_LIT_FSTRING_FVAL) {\n            w_node(cur);\n        } else {\n            throw new Error(\"unsupported\");\n        }\n        \n        cur = nextSibling(cur);\n    }\n\n    w_str(\"`\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { TYPEID_int } from \"@SBrython/sbry/types/list\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const value = VALUES[node];\n\n    w_str(value);\n    if( __SBRY_COMPAT__ !== \"NONE\" && resultType(node) === TYPEID_int )\n        w_str(\"n\");\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"[\");\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n\n        w_node(cur);\n        w_str(\", \");\n\n        cur = nextSibling(cur);\n    }\n\n    w_str(\"]\");\n}","import { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    const idx  = VALUES[node];\n\n    const body       = firstChild(node);\n\n    let cur = nextSibling(body);\n    let end = Number2Int(cur);\n\n    w_str(`for(var ${idx} = `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n\n        w_node(end); // finally it was beg\n        end = Number2Int(cur);\n    } else {\n        w_str(\"0n\");\n    }\n\n    w_sns(`; ${idx} < `, end, `; ${idx} += `);\n\n    cur = nextSibling(cur);\n    if( cur !== 0) {\n        w_node( Number2Int(cur) );\n    } else {\n        w_str(\"1n\");\n    }\n\n    w_sns(\"){\", body, \"}\");\n}","import { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_str(\"true\");\n}","import { w_sns } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, TYPE_ID } from \"../dop\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\n\nimport { TYPEID_bool, TYPEID_NotImplemented, TYPEID_type } from \"./list\";\nimport { addJSCmpOps } from \"../structs/operators/compare\";\nimport { OP_CMP_EQ, OP_CMP_NEQ } from \"../structs/operators\";\n\nconst klass = initBuiltinClass(TYPEID_type, TYPEID_type, \"type\", \"\");\n\nadd_method(klass, \"__call__\", () => TYPEID_type, (call: NODE_ID) => {\n                w_sns(\"(\", nextSibling(firstChild(call)), \").constructor\");\n            });\n\n\naddJSCmpOps(klass, [OP_CMP_EQ, OP_CMP_NEQ], (type: number) => {\n    if(type === TYPEID_type)\n        return TYPEID_bool;\n    return TYPEID_NotImplemented;\n});","import { RET_IJ2INT, RET_IJBF2BOOL, RET_IJBF2FLOAT, RET_INT, RET_INT2INT, RET_STR } from \"@SBrython/sbry/structs/ReturnTypeFcts\";\nimport { add_method, initBuiltinClass } from \"./utils/methods\";\nimport { w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { w_subs } from \"@SBrython/sbry/structs/operators/id\";\nimport { addJSBinOps, w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { CONVERT_2INT, CONVERT_INT2FLOAT, Int2Number, Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { firstChild, nextSibling, NODE_ID, resultType } from \"@SBrython/sbry/dop\";\nimport { addJSUnrOps, w_JSUnrOp } from \"@SBrython/sbry/structs/operators/unary\";\nimport TYPES, { TYPEID_float, TYPEID_int, TYPEID_jsint, TYPEID_str, TYPEID_type_int_ } from \"./list\";\nimport { WRITE_CALL } from \"./utils/types\";\nimport { OP_BIN_ADD, OP_BIN_DIV, OP_BIN_FDIV, OP_BIN_MOD, OP_BIN_MUL, OP_BIN_POW, OP_BIN_SUB, OP_BIT_AND, OP_BIT_LSHIFT, OP_BIT_NOT, OP_BIT_OR, OP_BIT_RSHIFT, OP_BIT_XOR, OP_UNR_MINUS } from \"../structs/operators\";\nimport { addJSCmpOps, JSCmpOps_LIST } from \"../structs/operators/compare\";\n\nconst JSType = __SBRY_COMPAT__ === \"NONE\" ? \"Number\" : \"BigInt\";\n\nconst klass = initBuiltinClass(TYPEID_int, TYPEID_type_int_, \"int\", JSType);\n\nadd_method(klass, \"__call__\", RET_INT, (node: NODE_ID) => {\n\n    const other = nextSibling(firstChild(node));\n    const other_type =resultType(other);\n\n    //TODO use their __int__ ?\n    if( other_type === TYPEID_int ) {\n        w_node(other);\n        return;\n    }\n    if( other_type === TYPEID_jsint) {\n        w_node( Number2Int(other) );\n        return;\n    }\n    if( other_type === TYPEID_float ) {\n        if( __SBRY_COMPAT__ === \"NONE\") {\n            w_sns(\"Math.trunc(\", other, \")\");\n        } else {\n            w_sns(\"BigInt(Math.trunc(\", other, \"))\");\n        }\n        return;\n    }\n\n    //TODO: power...\n    if( other_type === TYPEID_str ) {\n\n        //if( node.children.length === 3)\n        //    return r`BigInt(parseInt(${other}, ${node.children[2]}))`;\n\n        //TODO: optimize if other is string litteral...\n        w_sns(\"BigInt(\", other, \")\"); //, ${node.children[2]}))`; \n\n        return;\n    }\n\n    const otype = TYPES[other_type];\n    if( __SBRY_MODE__ === \"dev\" && (otype === undefined || otype.__int__ === undefined) )\n        throw new Error(`${otype?.__name__}.__int__ not defined`);\n\n    otype.__int__![WRITE_CALL](node);\n});\n\nadd_method(klass, \"__str__\", RET_STR, (call: NODE_ID) => {\n    //TODO: may be litteral...\n    w_node( nextSibling(firstChild(call)) ); w_str(\".toString()\");\n});\n\nadd_method(klass, \"__int__\", RET_STR, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\nadd_method(klass, \"__abs__\", RET_INT, (call: NODE_ID) => {\n    w_sns(\"_sb_.abs(\", nextSibling(firstChild(call)), \")\");\n});\n\nadd_method(klass, \"__ceil__\", RET_INT, (call: NODE_ID) => {\n    w_subs(call, nextSibling(firstChild(call)) );\n});\n\naddJSBinOps(klass, [OP_BIN_POW, OP_BIN_ADD, OP_BIN_SUB,    OP_BIT_AND,\n                    OP_BIT_OR,  OP_BIT_XOR, OP_BIT_LSHIFT, OP_BIT_RSHIFT],\n            RET_IJ2INT, { convert_other: CONVERT_2INT});\n\naddJSBinOps(klass, [OP_BIN_MUL], // *\n            RET_INT2INT, {\n                w_call: (call) => {\n    \n                    let a = nextSibling(firstChild(call)); let b = nextSibling(a);\n\n                    if( resultType(call) === TYPEID_float ) {\n                        a = Int2Number(a);\n                        b = Int2Number(b);\n                    }\n                    \n                    w_JSBinOp(call, a, OP_BIN_MUL, b);\n                },\n            });\n\naddJSBinOps(klass, [OP_BIN_DIV], // /\n            RET_IJBF2FLOAT, {\n                convert_self : CONVERT_INT2FLOAT,\n                convert_other: CONVERT_INT2FLOAT\n            });\n\naddJSBinOps(klass, [OP_BIN_FDIV], // //\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            w_sns(\"_sb_.floordiv_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSBinOps(klass, [OP_BIN_MOD], // %\n                    RET_IJ2INT, {\n                        convert_other  : CONVERT_2INT,\n                        w_call: (call: NODE_ID, a: NODE_ID, op: any, b: NODE_ID) => {\n                            // do not handle -0\n                            if( __SBRY_COMPAT__ === \"NONE\")\n                                w_JSBinOp(call, a, op, b);\n                            else\n                                w_sns(\"_sb_.mod_int(\", a, \", \", b, \")\");\n                        },\n                    });\n\naddJSUnrOps(klass, [OP_UNR_MINUS], RET_INT, (call, op, a) => {\n\n    if( resultType(call) === TYPEID_float ) // conversion asked.\n        a = Int2Number(a);\n    \n    w_JSUnrOp(call, OP_UNR_MINUS, a);\n});\n\naddJSUnrOps(klass, [OP_BIT_NOT], RET_INT); //~\n\naddJSCmpOps(klass, JSCmpOps_LIST, RET_IJBF2BOOL);","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(_: NODE_ID) {}","import { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(node: NODE_ID) {\n    w_sns(\"Number(\", firstChild(node), \")\");\n}","import { NODE_ID, TYPE_ID } from \"@SBrython/sbry/dop\";\nimport { JS_NAME, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types\";\nimport TYPES, { TYPEID_type } from \"../list\";\n\nconst TypeKlass = TYPES[TYPEID_type];\n\nexport function initBuiltinClass(instance: TYPE_ID,\n                                 klass   : TYPE_ID,\n                                 name    : string,\n                                 jsname  : string,\n                                ) {\n\n    const Klass = TYPES[klass];\n\n    TYPES[instance].__class__ = Klass;\n\n    Klass.__class__ = TypeKlass;\n    Klass.__name__  = Klass.__qualname__ = name;\n    Klass[JS_NAME]  = jsname;\n\n    return Klass;\n}\n\nexport function add_method( target  : any,\n                            name    : string,\n                            RET_TYPE: (o: number) => number,\n                            write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__name__     = name;\n    r.__qualname__ = `${target.__qualname__}.${name}`;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    TYPES[r[TYPEID] = TYPES.length] = r;\n\n    target[name] = r;\n}\n\nexport function create_function(name    : string,\n                                RET_TYPE: (o: number) => number,\n                                write   : (call: NODE_ID) => void) {\n\n    const r = Object.create(null);\n\n    r.__qualname__ = r.__name__ = name;\n    r.__call__     = r;\n\n    r[RETURN_TYPE] = RET_TYPE;\n    r[WRITE_CALL]  = write;\n\n    const id = r[TYPEID] = TYPES.length as TYPE_ID;\n    TYPES[id] = r;\n\n    return id;\n}","// must NOT depends on list.\nimport AST2JS, { AST_CLASSDEF, AST_DEF_FCT, AST_OP_ASSIGN_INIT, AST_SYMBOL } from \"./list\"; // required for correct type deduction...\n\nimport { ARRAY_TYPE, CODE_BEG, CODE_BEG_COL, CODE_BEG_LINE, CODE_COL, CODE_END, CODE_END_COL, CODE_END_LINE, CODE_LINE, firstChild, JS_CODE, nextSibling, NODE_ID, type, VALUES } from \"../dop\";\n\nexport const CURSOR = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport let jscode: string;\n\nimport type { AST } from \"@SBrython/sbry/py2ast\";\n\nexport function ast2js(ast: AST) {\n\n    new_jscode();\n\n    w_node(0);\n\n    const exported = [];\n    let cur = firstChild(0);\n\n    let node_type;\n    while( cur !== 0) {\n\n        node_type = type(cur);\n\n        if( node_type === AST_CLASSDEF || node_type === AST_DEF_FCT)\n            exported.push( VALUES[cur]);\n        if( node_type === AST_OP_ASSIGN_INIT ) {\n            const child = firstChild(cur);\n            if( type(child) === AST_SYMBOL)\n                exported.push( VALUES[child] );\n        }\n\n        cur = nextSibling(cur);\n    }\n\n    if( __SBRY_EXPORT__ === \"GLOBAL\" )\n        jscode += `\\nglobalThis.__SBRY_LAST_EXPORTED__ = {${exported.join(', ')}};\\n`;\n    if( __SBRY_EXPORT__ === \"SBRY\")\n        jscode += `\\n__SBRY__.register(\"${ast.filename}\", {${exported.join(', ')}});\\n`;\n    if( __SBRY_EXPORT__ === \"ES6\" )\n        jscode += `\\nexport {${exported.join(', ')}};\\n`;\n\n\treturn jscode;\n}\n\nfunction new_jscode() {\n\n    jscode = \"\";\n\n    let nbLines = 1;\n\n    if( __SBRY_COMPAT__ !== \"NONE\") {\n        if( __SBRY_EXPORT__ === \"ES6\" ) {\n            jscode += `import __SBRY__ from \"@SBrython\";\\n`;\n            ++nbLines;\n        }\n\n        if( __SBRY_EXPORT__ !== \"NONE\") {\n            jscode += `const {_r_, _sb_} = __SBRY__;\\n`;\n            ++nbLines;\n        }\n    }\n\n    if(__SBRY_MODE__ === \"dev\") {\n        CURSOR[CODE_LINE] = nbLines;\n        CURSOR[CODE_COL] = jscode.length;\n    }\n}\n\nexport function buildJSCode(id: NODE_ID) {\n    const offset = 4*(id as number);\n    \n    return {\n        start: {\n            line: JS_CODE[ offset + CODE_BEG_LINE ],\n            col : JS_CODE[ offset + CODE_BEG_COL  ]\n        },\n        end  : {\n            line: JS_CODE[ offset + CODE_END_LINE ],\n            col : JS_CODE[ offset + CODE_END_COL  ]\n        }\n    };\n}\n\nexport function hasJSCursor(node: NODE_ID) {\n    return JS_CODE[(node as any)*4 + CODE_LINE] !== 0;\n}\n\nexport function set_js_cursor(idx: number) {\n    JS_CODE[idx + CODE_LINE] = CURSOR[CODE_LINE];\n    JS_CODE[idx + CODE_COL ] = jscode!.length - CURSOR[CODE_COL];\n}\n// ================== INDENT ======================\n\n\nlet indent = \"    \";\nlet cur_indent_level = -1;\n//let cur_indent = \"\";\n\nconst indents = __SBRY_MODE__ === \"dev\" ? [\n    \"\",\n    indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n    indent+=indent,\n] : null;\n\nexport function w_NL() {\n\n    jscode += \"\\n\";\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        ++CURSOR[CODE_LINE];\n        CURSOR[CODE_COL] = jscode.length;\n\n        jscode += indents![cur_indent_level];\n    }\n}\nexport function BB() {\n    ++cur_indent_level;\n}\n\nexport function BE() {\n    --cur_indent_level;\n}\n\n// ================== WRITE ======================\nexport function w_str(str: string) {\n    jscode += str;\n}\nexport function w_node(node: NODE_ID) {\n    if( __SBRY_MODE__ === \"dev\" ) {\n        const has = hasJSCursor(node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n        AST2JS[type(node)!](node);\n        if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n    } else {\n        AST2JS[type(node)!](node);\n    }\n}\n\ntype W_SNS = [string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string]\n    | [string, NODE_ID, string, NODE_ID, string, NODE_ID, string, NODE_ID, string];\n\nexport function w_sns(...args: W_SNS) { //TODO: alternate\n\n    jscode += args[0];\n\n    for(let i = 1; i < args.length; i+=2) {\n\n        const node = args[i] as NODE_ID;\n\n        if( __SBRY_MODE__ === \"dev\" ) {\n            const has = hasJSCursor(node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_BEG);\n            AST2JS[type(node)!](node);\n            if( ! has ) set_js_cursor(4*(node as number) + CODE_END);\n        } else {\n            AST2JS[type(node)!](node);\n        }\n\n        jscode += args[i+1] as string;\n    }\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    //w_str(\"/* not implemented */\");\n}","import { w_NL, w_node, w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, type } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport { AST_OP_ASSIGN_INIT } from \"../list\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    let rchild    = firstChild(node);\n    let lchild    = nextSibling(rchild);   \n\n    if( type(rchild) === AST_OP_ASSIGN_INIT) {\n        w_node(rchild);\n        w_NL();\n        rchild = nextSibling(firstChild(rchild));\n    } else if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_sns(\"var \", lchild, \" = \", rchild, \"\");\n}","import { NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function(_: NODE_ID) {}","import { w_sns, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str('{');\n\n    let cur = firstChild(node);\n    while(cur !== 0) {\n        w_sns(\"\", cur, \": \", cur = nextSibling(cur), \", \");\n        cur = nextSibling(cur)\n    }\n\n    w_str('}');\n}","// @ts-nocheck\n\nimport { w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { w_JSBinOp } from \"@SBrython/sbry/structs/operators/binary\";\nimport { TYPEID_int, TYPEID_jsint, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\n\nimport Types from \"@SBrython/sbry/types/list\";\nimport { Fct, RETURN_TYPE, WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\n\nfunction find_and_write_call(node: NODE_ID, left:NODE_ID, op: string, right: NODE_ID) {\n    \n    let reversed = false;\n    const rtype = resultType(right);\n    const ltype = resultType(left);\n\n    let type = TYPEID_NotImplementedType;\n\n    let method = Types[ltype][op] as Fct;\n    if( method !== undefined )\n        type = method[RETURN_TYPE](rtype!);\n\n    if( type === TYPEID_NotImplementedType) {\n\n        op     = reversed_operator(op as Parameters<typeof reversed_operator>[0]);\n        method = Types[rtype][op] as Fct;\n        if( method !== undefined )\n            type   = method[RETURN_TYPE](ltype!);\n        \n        if( type === TYPEID_NotImplementedType) {\n            if( __SBRY_MODE__ === \"dev\" && op !== '__eq__' && op !== '__ne__' )\n                throw new Error(`${ltype} ${op} ${rtype} not implemented!`);\n\n            const jsop = op === '__eq__' ? '===' : '!==';\n\n            //TODO... (delete ?)\n            w_JSBinOp(node, left, 0, right);\n\n            return;\n        }\n    }\n\n    method[WRITE_CALL]!(node);\n}\n\nfunction writeOp(node: NODE_ID, cur: NODE_ID, value: string[], count: number): NODE_ID {\n\n    const op    = value[count];\n    const left  = cur;\n    cur = nextSibling(cur)\n    const right = cur;\n\n    if( op === 'is' || op === \"is not\") {\n        let jop = '===';\n        if( op === \"is not\")\n            jop = '!==';\n\n        const ltype = resultType(left);\n        const rtype = resultType(right);\n\n        let l = left;\n        let r = right;\n\n        if( ltype === TYPEID_jsint && rtype === TYPEID_int )\n            l = Number2Int(l);\n        else if (rtype === TYPEID_jsint && ltype === TYPEID_int )\n            r = Number2Int(r);\n\n        //TODO : delete ?\n        w_JSBinOp(node, l, 0, r);\n    } else {\n        find_and_write_call(node, left, op, right);\n    }\n    return nextSibling(cur);\n}\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const value = VALUES[node];\n\n    let cur    = firstChild(node);\n \n    cur = writeOp(node, cur, value, 0);\n\n    let count  = 0;\n    while( cur !== 0 ) {\n        w_str(' && ');\n        console.warn(count+1, value);\n        cur = writeOp(node, cur, value, ++count);\n    }\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","import { TYPEID_None, TYPEID_NoneType } from \"./list\";\nimport { initBuiltinClass } from \"./utils/methods\";\n\ninitBuiltinClass(TYPEID_None, TYPEID_NoneType, \"NoneType\", \"null\");","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { WRITE_CALL } from \"@SBrython/sbry/types/utils/types\";\nimport { AST_CALL_ARG_KW } from \"../list\";\n\nexport function default_call(node: NODE_ID) {\n\n    let cur = firstChild(node);\n\n    w_node(cur);\n    w_str('( ');\n\n    while( (cur = nextSibling(cur)) !== 0 && type(cur) !== AST_CALL_ARG_KW) {\n        w_node(cur);\n        w_str(\", \");\n    }\n\n    if( cur !== 0) {\n\n        w_str(\"_sb_.kw({\");\n\n        w_node(cur);\n\n        while( (cur = nextSibling(cur)) !== 0 ) {\n            w_str(\", \");\n            w_node(cur);\n        }\n\n        w_str(\"}) \");\n    }\n\n    w_str(')');\n}\n\nexport default function ast2js(node: NODE_ID) {\n\n    //const fct_type = types[resultType(firstChild(node))] as Callable;\n\n    VALUES[node].__call__[WRITE_CALL]!(node);\n}","import { w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n\n    w_str(\"const {\");\n\n    let cur = firstChild(node);\n    w_node(cur);\n    cur = nextSibling(cur);\n\n    while(cur !== 0) {\n\n        w_str(\", \"); w_node(cur);\n        cur = nextSibling(cur);\n    }\n\n    w_str('} = ');\n\n    const value = VALUES[node];\n    \n    if(value === null)\n        w_str(\"__SBRY__.getModules()\");\n    else\n        w_str(`__SBRY__.getModule(\"${value}\")`);\n}","import { BB, BE, w_NL, w_node, w_str } from \"@SBrython/sbry/ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, VALUES } from \"@SBrython/sbry/dop\";\nimport { Number2Int } from \"@SBrython/sbry/structs/Converters\";\nimport { TYPEID_int, TYPEID_jsint } from \"@SBrython/sbry/types/list\";\nimport Types from \"@SBrython/sbry/types/\";\n\nexport default function ast2js(node: NODE_ID) {\n    \n    const kname = Types[VALUES[node]].__name__;\n\n    w_str(\"static \");\n\n    let rchild    = firstChild(node);\n    let cur = nextSibling(rchild);\n    const name = VALUES[cur];\n    \n    do {\n\n        w_node(cur);\n        w_str(\" = \");\n\n        cur = nextSibling(rchild);\n    } while(cur !== 0);\n\n    if( resultType(rchild) === TYPEID_jsint && resultType(node) === TYPEID_int )\n        rchild = Number2Int(rchild);\n\n    w_node(rchild);\n\n    w_NL();\n    w_str(`get ${name}(){`);\n    BB(); w_NL();\n    w_str(`let v = this._${name};`); w_NL();\n    w_str(`if(v === undefined) v = ${kname}.${name};`); w_NL();\n    w_str(\"return v;\");\n    BE(); w_NL();\n\n    w_str(\"}\");\n\n    w_NL();\n    w_str(`set ${name}(value){ this._${name} = value; }`);\n}","import { firstChild, NODE_ID } from \"@SBrython/sbry/dop\";\nimport { w_sns } from \"../utils\";\n\nexport default function ast2js(node: NODE_ID) {\n    w_sns(\"else {\", firstChild(node), \"}\");\n}","import { firstChild, nextSibling, NODE_ID, parentOPPrio, setParentOPPrio, VALUES } from \"@SBrython/sbry/dop\";\nimport { Converter, NOCONVERT } from \"../Converters\";\nimport { RETURN_TYPE_FCT } from \"../ReturnTypeFcts\";\nimport { add_method } from \"@SBrython/sbry/types/utils/methods\";\nimport { w_sns } from \"@SBrython/sbry/ast2js/utils\";\nimport { jsop_priorities, OP_BIN_ADD, OP_BIN_SUB, opid2iopmethod, opid2jsop, opid2opmethod, opid2ropmethod, type OP_ID } from \".\";\nimport { w_JSUnrOp } from \"./unary\";\n\nexport type addJSBinOps_Opts = {\n    convert_other?: Converter,\n    convert_self ?: Converter,\n    w_call       ?: (call: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) => void\n};\n\nexport function addJSBinOps(target     : any,\n                            ops        : OP_ID[],\n                            return_type: RETURN_TYPE_FCT, \n                            {\n                                convert_other = NOCONVERT,\n                                convert_self  = NOCONVERT,\n                                w_call        = w_JSBinOp,\n                            }: addJSBinOps_Opts = {}) {\n\n    const ADD_EQ = convert_self === NOCONVERT && w_call === w_JSBinOp;\n\n    for(let i = 0; i < ops.length; ++i) {\n\n        const op = ops[i];\n\n        add_method(target, opid2opmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_self(a), op, convert_other(b) );\n        });\n        add_method(target, opid2ropmethod[op], return_type, (call: NODE_ID) => {\n            const _ = firstChild(call);\n            const a = nextSibling(_); const b = nextSibling(a);\n            return w_call(call, convert_other(b), op, convert_self(a) );\n        });\n\n        if( ADD_EQ ) {\n\n            const iop = op+29;\n\n            const ADD_INCR = op === OP_BIN_ADD;\n            const ADD_DECR = op === OP_BIN_SUB;\n\n            //TODO:\n            add_method(target, opid2iopmethod[op], return_type, (call: NODE_ID) => {\n\n                const a = nextSibling(firstChild(call));\n                const b = nextSibling(a);\n\n                /*\n                const other_value = VALUES[b]; //TODO...\n\n                if( ADD_INCR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... ++\n                if( ADD_DECR && other_value === \"1\")\n                    return w_JSUnrOp(node, 0, a); //TODO... --*/\n\n                //TODO...\n\n                return w_JSBinOp(call, a, iop, convert_other(b) );\n            });\n        }\n    }\n}\n\n// a & b not necessary children of node...\nexport function w_JSBinOp(node: NODE_ID, a: NODE_ID, op: OP_ID, b: NODE_ID) {\n\n    const   prio = jsop_priorities[op];\n    const p_prio = parentOPPrio(node);\n\n    setParentOPPrio(a, prio);\n    setParentOPPrio(b, prio);\n\n    let l = \"\"; let r = \"\";\n\n    if( p_prio > prio ) {\n        l = \"(\"; r = \")\";\n    }\n\n    w_sns(l, a, opid2jsop[op], b, r);\n}","// @ts-nocheck\n\nimport { NODE_ID, VALUES } from \"@SBrython/sbry/dop\";\n\nexport default function ast2js(node: NODE_ID) {\n    write_multi_jsop(node, VALUES[node]);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Types, { TYPEID_type, TYPEID_type_float_, TYPEID_type_int_, TYPEID_type_str_ } from \"./list\";\nimport { w_node, w_str } from \"../ast2js/utils\";\nimport { firstChild, nextSibling, NODE_ID, resultType, TYPE_ID } from \"../dop\";\nimport { RET_INT, RET_None, RETURN_TYPE_FCT } from \"../structs/ReturnTypeFcts\";\nimport { create_function } from \"./utils/methods\";\nimport { Callable, WRITE_CALL } from \"./utils/types\";\n\nconst builtins: [string, TYPE_ID][] = [\n    //TODO: true/false... => issues true/false... if=== (?)\n    [\"int\"  , TYPEID_type_int_],\n    [\"str\"  , TYPEID_type_str_],\n    [\"float\", TYPEID_type_float_],\n    [\"type\" , TYPEID_type     ],\n    genOpFct(\"len\", RET_INT),\n    genOpFct(\"abs\", RET_INT),\n    genFct(\"print\", RET_None, (call: NODE_ID) => {\n\n        w_str(\"console.log(\");\n        let cur = nextSibling(firstChild(call));\n        while(cur !== 0) {\n            w_node(cur);\n            w_str(\", \");\n            cur = nextSibling(cur);\n        }\n        w_str(\")\");\n    })\n];\n\nconst nbBuiltins = builtins.length;\n\nexport function resetSymbols() {\n    builtins.length = nbBuiltins;\n}\n\nexport function addSymbol(name: string, type: TYPE_ID) {\n    builtins[builtins.length] = [name, type];\n}\n\nexport function getSymbol(name: string): TYPE_ID {\n\n    for(let i = builtins.length - 1; i >= 0; --i)\n        if(builtins[i][0] === name)\n            return builtins[i][1];\n\n    return 0;\n}\n\nexport default builtins;\n\nfunction genOpFct(name: string, return_type: RETURN_TYPE_FCT): [string, TYPE_ID] {\n\n    const opname = `__${name}__`;\n\n    const id = create_function(name, return_type, (call: NODE_ID) => {\n        const a      = nextSibling(firstChild(call));\n        // @ts-ignore\n        const method = Types[resultType(a)]!.__class__![opname] as Callable;\n\n        return method.__call__[WRITE_CALL](call);\n    });\n\n    return [name, id] as const;\n}\n\nfunction genFct(name: string,\n                return_type: RETURN_TYPE_FCT,\n                w_call: (call: NODE_ID) => void ): [string, TYPE_ID] {\n\n    return [name, create_function(name, return_type, w_call)] as const;\n}","import { NODE_ID, resultType, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { id2name } from \"@SBrython/sbry/types\";\nimport TYPES from \"@SBrython/sbry/types/list\";\n\nexport function printNode(id: NODE_ID) {\n    console.warn({\n        id,\n        typeID   : type(id),\n        type     : id2name[type(id)],\n        ret_typeID: resultType(id),\n        ret_type : TYPES[resultType(id)]?.__name__,\n        value    : VALUES[id],\n    });\n}","export default \"# Missing:\\n# - Final[T]\\n# - Callable[] (requires fct type refactor...)\\n# - TypedDict + NotRequired\\n#        - from typing import TypedDict\\n#        - type NameInfo = TypedDict('NameInfo', {'name': str, 'first-letter': str})\\n# - circular type hints\\n# - static attributes/methods\\n# - async + iterators\\n# - some API (mainly in Window)\\n# - split into separate files\\n# - special stubs parser\\n# - better import system.\\n# - @overload\\n# - add constructors + special methods (__getattr__ etc)\\n# https://developer.mozilla.org/en-US/docs/Web/API (1006 classes)\\n\\nclass Undefined:\\n    pass\\n\\nundefined: Undefined\\n\\nclass Event:\\n    # TODO: read-only : Final[bool] (they are all RO)\\n    bubble: bool\\n    cancelable: bool\\n    composed: bool\\n    currentTarget: EventTarget\\n    defaultPrevented: bool\\n    # TODO: enum ?\\n    eventPhase: float\\n    NONE = 0.\\n    CAPTURING_PHASE = 1.\\n    AT_TARGET = 2.\\n    BUBBLING_PHASE = 3.\\n    isTrusted: bool\\n    target: EventTarget\\n    timeStamp: float\\n    type: str\\n\\n    def composedPath(self) -> EventTarget : ...\\n    def preventDefault(self) -> Undefined: ...\\n    def stopImmediatePropagation(self) -> Undefined: ...\\n    def stopPropagation(self) -> Undefined: ...\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\\nclass EventTarget:\\n    # TODO: listener type...\\n    # TODO: option/capture optional arg...\\n    # TODO: listener: This must be null, an object with a handleEvent() method, or a JavaScript function.\\n    # def addEventListener(self, type: str, listener, /) -> Undefined: ...\\n    # def removeEventListener(self, type: str, listener, /) -> Undefined: ...\\n\\n    def dispatchEvent(self, event: Event, /) -> bool: ...\\n\\nclass NodeList:\\n    length: float\\n    # entries\\n    # values\\n    # keys\\n    # forEach\\n    def item(self, index: float, /) -> Node: ...\\n\\nclass Node(EventTarget):\\n    # TODO: RO\\n    baseURI: str\\n    childNodes: NodeList\\n    firstChild: Node|None\\n    isConnected: bool\\n    lastChild: Node|None\\n    nextSibling: Node|None\\n    nodeName: str\\n    # TODO: enum ?\\n    nodeType: float\\n    ELEMENT_NODE = 0.\\n    ATTRIBUTE_NODE = 1.\\n    TEXT_NODE = 3.\\n    CDATA_SECTION_NODE = 4.\\n    PROCESSING_INSTRUCTION_NODE = 7.\\n    COMMENT_NODE = 8.\\n    DOCUMENT_NODE = 9.\\n    DOCUMENT_TYPE_NODE = 10.\\n    DOCUMENT_FRAGMENT_NODE = 11.\\n    # RW:\\n    nodeValue: str|None\\n    # RO\\n    ownerDocument: Document|None\\n    parentElement: Element|None\\n    parentNode: Node|None\\n    previousSibling: Node|None\\n    textContent: str|None\\n\\n    def appendChild(self, child: Node) -> Node: ...\\n    def cloneNode(self, deep: bool = False) -> Node: ...\\n    def compareDocumentPosition(self, otherNode: Node) -> float: ...\\n    DOCUMENT_POSITION_DISCONNECTED = 1.\\n    DOCUMENT_POSITION_PRECEDING = 2.\\n    DOCUMENT_POSITION_FOLLOWING = 4.\\n    DOCUMENT_POSITION_CONTAINS = 8.\\n    DOCUMENT_POSITION_CONTAINED_BY = 16.\\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32.\\n    def contains(self, otherNode: Node|None) -> bool: ...\\n    # TODO: options\\n    # https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\\n    def getRootNode(self) -> Node: ...\\n    def hasChildNodes(self) -> bool: ...\\n    def insertBefore(self, newNode: Node, referenceNode: Node|None) -> Node: ...\\n    def isDefaultNamespace(self, namespaceURI: str|None) -> bool: ...\\n    def isEqualNode(self, otherNode: Node|None) -> bool: ...\\n    def isSameNode(self, otherNode: Node|None) -> bool: ...\\n    def lookupNamespaceURI(self, prefix: str|None) -> str|None: ...\\n    def lookupPrefix(self, namespace: str|None) -> str|None: ...\\n    def normalize(self) -> Undefined: ...\\n    def removeChild(self, child: Node) -> Undefined: ...\\n    # TODO: can be generic\\n    def replaceChild(self, newChild: Node, oldChild: Node) -> Node: ...\\n\\n# TODO\\n\\n# Getter/setter/deleter\\nclass DOMStringMap:\\n    pass\\n\\nclass CSSStyleDeclaration:\\n    cssFloat: str\\n    cssText: str\\n    length: float\\n    parentRule: CSSRule\\n    \\n    def getPropertyPriority(self, property: str, /) -> str: ...\\n    def getPropertyValue(self, property: str, /) -> str: ...\\n    def item(self, index: float, /) -> str: ...\\n    def removeProperty(self, property: str, /) -> str: ...\\n    def setProperty(self, propertyName: str, value: str, priority: str = \\\"\\\") -> Undefined : ...\\n\\nclass NamedNodeMap:\\n    # RO\\n    length: float\\n    def getNamedItem(self, name: str, /) -> Attr|None: ...\\n    def getNamedItemNS(self, namespace: str, localName: str, /) -> Attr|None: ...\\n    def item(self, index: float, /) -> Attr|None: ...\\n    def removeNamedItem(self, attrName: str, /) -> Attr: ...\\n    def removeNamedItemNS(self, namespace: str, localName: str, /) -> Attr: ...\\n    def setNamedItem(self, attr: Attr, /) -> Attr|None: ...\\n    def setNamedItemNS(self, attr: Attr, /) -> Attr|None: ...\\n\\nclass HTMLCollection:\\n    length: float\\n    def item(self, index: float, /) -> Element|None: ...\\n    def namedItem(self, key: str, /) -> Element|None: ...\\n\\nclass DOMTokenList:\\n    length: float\\n    value: str\\n\\n    def add(self, token1: str, /) -> Undefined: ...\\n    def contains(self, token: str, /) -> bool: ...\\n    # entries : iterator\\n    # forEach\\n    def item(self, index: float, /) -> str|None: ...\\n    # keys\\n    def remove(self, token1: str, /) -> Undefined: ...\\n    def replace(self, oldToken: str, newToken: str, /) -> bool: ...\\n    def supports(self, token: str, /) -> bool: ...\\n    def toggle(self, token: str, force: bool = False, /) -> bool: ...\\n    def toString(self, /) -> str: ...\\n    # values\\n\\nclass StyleSheet:\\n    # RW\\n    disabled: bool\\n    # RO\\n    href: str\\n    # media: MediaList\\n    ownerNode: Node\\n    parentStyleSheet: StyleSheet\\n    title: str\\n    type: str\\n\\nclass CSSRule:\\n    # RO\\n    cssText: str\\n    parentRule: CSSRule|None\\n    parentStyleSheet: StyleSheet\\n\\nclass CSSRuleList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSRule|None: ...\\n\\nclass CSSImportRule(CSSRule):\\n    # RO\\n    href: str\\n    layerName: str|None\\n    # media : MediaList\\n    styleSheet: CSSStyleSheet\\n    supportsText: str|None\\n\\nclass CSSStyleSheet(StyleSheet):\\n    # RO\\n    cssRules: CSSRuleList\\n    ownerRule: CSSImportRule|None\\n\\n    def deleteRule(self, index: float, /) -> Undefined: ...\\n    def insertRule(self, rule: str, index: float = 0., /) -> float: ...\\n    #TODO:  Async : replace\\n    def replaceSync(self, text: str, /) -> Undefined: ...\\n\\n\\nclass StyleSheetList:\\n    # RO\\n    length: float\\n    def item(self, index: float, /) -> CSSStyleSheet|None: ...\\n\\n\\nclass DocumentFragment(Node):\\n    childElementCount: float\\n    children: HTMLCollection\\n    firstElementChild: Element|None\\n    lastElementChild: Element|None\\n    \\n    def append(self, param1: Node, /) -> Undefined: ...\\n    # + make generic\\n    def getElementById(self, id: str, /) -> Element|None: ...\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n\\n\\nclass ShadowRoot(DocumentFragment):\\n    # RO...\\n    activeElement: Element|None\\n    # adoptedStyleSheets (array)\\n    clonable: bool\\n    delegatesFocus: bool\\n    # fullscreenElement (limited)\\n    host: Element\\n    innerHTML: str|None\\n    # TODO: enum ?\\n    mode: str\\n    pointerLockElement: Element|None\\n    serializable: bool\\n    # TODO: enum ?\\n    slotAssignment: str\\n    styleSheets: StyleSheetList\\n\\n    # getAnimations\\n    #TODO: opts\\n    def getHTML(self, /) -> str: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n\\nclass DOMRect:\\n    # RW\\n    height: float\\n    width: float\\n    x: float\\n    y: float\\n    # TODO: static\\n    # fromRect()\\n\\n    # RO\\n    top: float\\n    bottom: float\\n    left: float\\n    right: float\\n\\nclass Attr(Node):\\n    # RO\\n    localName: str\\n    name: str\\n    namespaceURI: str\\n    ownerElement: Element\\n    prefix: str|None\\n    value: str\\n\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Element\\n# no aria (too much)\\nclass Element(Node):\\n    # RO\\n    assignedSlot: HTMLSlotElement|None\\n    attributes: NamedNodeMap\\n    childElementCount: float\\n    children: HTMLCollection\\n    classList: DOMTokenList\\n    # RW\\n    className: str\\n    # RO\\n    clientHeight: float\\n    clientLeft: float\\n    clientTop: float\\n    clientWidth: float\\n    currentCSSZoom: float\\n    firstElementChild: Element|None\\n    id: str\\n    # RW\\n    innerHTML: str\\n    lastElementChild: Element|None\\n    localName: str\\n    namespaceURI: str|None\\n    nextElementSibling: Element|None\\n    outerHTML: str\\n    part: DOMTokenList\\n    prefix: str|None\\n    previousElementSibling: Element|None\\n    # RW\\n    role: str|None\\n    # RW\\n    scrollHeight: float\\n    scrollLeft: float\\n    scrollTop: float\\n    scrollWidth: float\\n    # RO\\n    shadowRoot: ShadowRoot|None\\n    slot: str\\n    tagName: str\\n\\n    #TODO: *args\\n    def after(self, node1: Node, /) -> Undefined: ...\\n    # def animate()\\n    def append(self, param1: None, /) -> Undefined: ...\\n    #TODO: attachShadow\\n    def before(self, node1: Node, /) -> Undefined: ...\\n    #TODO: checkVisibility\\n    def closest(self, selectors: str, /) -> Element|None: ...\\n    # TODO: computedStyleMap (limited)\\n    # TODO: getAnimations\\n    def getAttribute(self, attributeName: str, /) -> str|None: ...\\n    #TODO getAttributeNames (list)\\n    def getAttributeNode(self, attrName: str, /) -> Attr: ...\\n    def getAttributeNodeNS(self, namespace: str, attrName: str, /) -> Attr: ...\\n    def getAttributeNS(self, namespace: str, attributeName: str, /) -> str|None: ...\\n    def getBoundingClientRect(self, /) -> DOMRect: ...\\n    #TODO getClientRects\\n    def getElementsByClassName(self, names: str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, tagName: str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespaceURI: str, localName: str, /) -> HTMLCollection: ...\\n    # TODO: options\\n    def getHTML(self, /) -> str: ...\\n    def hasAttribute(self, name: str, /) -> bool: ...\\n    def hasAttributeNS(self, namespace: str, localName: str, /) -> bool: ...\\n    def hasAttributes(self, /) -> bool: ...\\n    # TODO: pointerId ?\\n    def hasPointerCapture(self, pointerId: float, /) -> bool: ...\\n    # TODO: more restrictive position str\\n    def insertAdjacentElement(self, position: str, element: Element, /) -> Element|None: ...\\n    def insertAdjacentHTML(self, position: str, text: str, /) -> Undefined: ...\\n    def insertAdjacentText(self, where: str, data: str, /) -> Undefined: ...\\n    def matches(self, selectors: str, /) -> bool: ...\\n    # moveBefore\\n    #TODO:\\n    def prepend(self, param1: Node, /) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def releasePointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def removeAttribute(self, attrName: str, /) -> Undefined: ...\\n    def removeAttributeNode(self, attributeNode: Attr, /) -> Node: ...\\n    def removeAttributeNS(self, namespace: str, attrName: str, /) -> Undefined: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    def replaceWith(self, param1: Node, /) -> Undefined: ...\\n    # requestFullScreen (limited)\\n    # requestPointerLock (limited)\\n    # TODO: 2 possibilites :\\n    def scroll(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollBy(self, x: float, y: float, /) -> Undefined: ...\\n    # TODO: options\\n    def scrollIntoView(self) -> Undefined: ...\\n    # TODO: 2 possibilites :\\n    def scrollTo(self, x: float, y: float, /) -> Undefined: ...\\n    def setAttribute(self, name: str, value: str|None, /) -> Undefined: ...\\n    def setAttributeNode(self, attribute: Attr, /) -> Attr|None: ...\\n    def setAttributeNodeNS(self, attributeNode: Attr, /) -> Attr|None: ...\\n    def setAttributeNS(self, namespace: str, name: str, value: str|None, /) -> Undefined: ...\\n    def setHTMLUnsafe(self, html: str, /) -> Undefined: ...\\n    def setPointerCapture(self, pointerId: float, /) -> Undefined: ...\\n    def toggleAttribute(self, name: str, toggle: bool = False, /) -> bool: ...\\n\\n\\nclass HTMLElement(Element):\\n\\n    accessKeyLabel: str\\n    autofocus: bool\\n    contentEditable: str\\n    dataset: DOMStringMap\\n    dir: str\\n    draggable: bool\\n    enterKeyHint: str\\n    hidden: bool\\n    inert: bool\\n    innerText: str\\n    inputMode: str\\n    isContentEditable: bool\\n    lang: str\\n    nonce: float\\n    offsetHeight: float\\n    offsetLeft: float\\n    offsetParent: float\\n    offsetTop: float\\n    offsetWidth: float\\n    outerText: str\\n    popover: str\\n    spellcheck: bool\\n    style: CSSStyleDeclaration|None\\n    tabIndex: float\\n    title: str\\n    translate: bool\\n\\n    # attachInternals\\n    def blur(self) -> Undefined: ...\\n    def click(self) -> Undefined: ...\\n    def focus(self) -> Undefined: ...\\n    def hidePopover(self) -> Undefined: ...\\n    # TODO: options\\n    def showPopover(self) -> Undefined: ...\\n    # TODO:\\n    def togglePopover(self, force: bool=False, /) -> Undefined: ...\\n\\nclass HTMLSlotElement(HTMLElement):\\n    pass\\n\\nclass HTMLBodyElement(HTMLElement):\\n    pass\\n\\nclass HTMLHeadElement(HTMLElement):\\n    pass\\n\\nclass HTMLScriptElement:\\n    # async ?\\n    crossOrigin: str\\n    defer: bool\\n    fetchPriority: str\\n    integrity: str\\n    nomodule: bool\\n    referrerPolicy: str\\n    str: str\\n    text: str\\n    type: str\\n    # static support\\n\\nclass DOMStringList:\\n    length: float\\n    def contains(self, string: str, /) -> bool: ...\\n    def item(self, index: float, /) -> str|None: ...\\n\\nclass URLSearchParams:\\n    size: float\\n\\n    def append(self, name: str, value: str, /) -> Undefined: ...\\n    def delete(self, name: str, value: str|Undefined = undefined, /) -> Undefined: ...\\n    # entries/forEach/keys/values\\n    def get(self, name: str) -> str|None: ...\\n    # getAll (array)\\n    def has(self, name: str, value: str|Undefined = undefined, /) -> bool: ...\\n    def set(self, name: str, value: str, /) -> Undefined: ...\\n    def sort(self) -> Undefined: ...\\n    def toString(self) -> str: ...\\n\\nclass URL:\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n    searchParams: URLSearchParams\\n    username: str\\n\\n    # static\\n    # canParse + createObjectURL + parse + revokeObjectURL\\n    def toJSON(self) -> str: ...\\n    def toString(self) -> str: ...\\n\\nclass Location:\\n    ancestorOrigins: DOMStringList\\n    hash: str\\n    host: str\\n    hostname: str\\n    href: str\\n    origin: str\\n    pathname: str\\n    port: str\\n    protocol: str\\n    search: str\\n\\n    def assign(self, url: str|URL, /) -> Undefined: ...\\n    def reload(self) -> Undefined: ...\\n    def replace(self, url: str|URL, /) -> Undefined: ...\\n    def toString(self) -> Undefined: ...\\n\\nclass Window(EventTarget):\\n    \\\"\\\"\\\"\\n    The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.\\n\\n    See https://developer.mozilla.org/en-US/docs/Web/API/Window\\n    \\\"\\\"\\\"\\n\\n    # caches\\n    closed: bool\\n    # cookieStore\\n    crossOriginIsolated: bool\\n    # crypto\\n    # customElements\\n    document: Document\\n    frameElement: HTMLElement|None\\n    # frames\\n    # history\\n    # indexedDB\\n    innerHeight: float\\n    innerWidth: float\\n    isSecureContext: bool\\n    length: float\\n    # localStorage\\n    location: Location\\n    # locationBar\\n    # menubar\\n    name: str\\n    # navigator\\n    # opener\\n    origin: str\\n    originAgentCluster: bool\\n    outerHeight: float\\n    outerWidth: float\\n    parent: Window\\n    # performance\\n    # personalbar\\n    # screen\\n    screenLeft: float\\n    screenTop: float\\n    screenX: float\\n    screenY: float\\n    # scrollbars\\n    scrollX: float\\n    scrollY: float\\n    self: Window\\n    # sessionStorage\\n    # speechSynthesis\\n    # statusbar\\n    # toolbar\\n    top: Window\\n    # visualViewport\\n    window: Window\\n\\n    def alert(self, message: str = \\\"\\\", /) -> Undefined: ...\\n    def atob(self, encodedData: str, /) -> str: ...\\n    def btoa(self, stringToEncode: str, /) -> str: ...\\n    def cancelAnimationFrame(self, requestID: float, /) -> Undefined: ...\\n    def clearInterval(self, intervalID: float, /) -> Undefined: ...\\n    def clearTimeout(self, timeoutID: float, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def confirm(self, message: str = \\\"\\\", /) -> bool: ...\\n    # createImageBitmap\\n    # fetch\\n    def focus(self) -> Undefined: ...\\n    def getComputedStyle(self, element: Element, pseudoElt: str|None = None, /) -> CSSStyleDeclaration: ...\\n    # getSelection\\n    # matchMedia\\n    def moveBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def moveTo(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def open(self, url: str = \\\"\\\", target: str = \\\"\\\", windowFeatures: str = \\\"\\\", /) -> Window|None: ...\\n    def postMessage(self, message: object, targetOrigin: str = \\\"\\\", /) -> Undefined: ...\\n    def print(self) -> Undefined: ...\\n    def prompt(self, message: str, defaultValue: str|None = None, /) -> str|None: ...\\n    # queueMicrotask\\n    # reportError\\n    # requestAnimationFrame\\n\\n    def resizeBy(self, deltaX: float, deltaY: float, /) -> Undefined: ...\\n    def resizeTo(self, width: float, height: float, /) -> Undefined: ...\\n    def scroll(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollBy(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    def scrollTo(self, xCoord: float, yCoord: float, /) -> Undefined: ...\\n    # def setInterval(self, )\\n    # def setTimeout\\n    def stop(self) -> Undefined: ...\\n    # TODO: generic\\n    def structuredClone[T](self, value: T, /) -> T: ...\\n\\n\\nwindow: Window\\n\\nclass DocumentType(Node):\\n    name: str\\n    publicId: str\\n    systemId: str\\n\\n    def after(self, param1: Node, /) -> Undefined: ...\\n    def before(self, param1: Node, /) -> Undefined: ...\\n    def remove(self) -> Undefined: ...\\n    def replaceWith(self, node1: Node, /) -> Undefined: ...\\n\\n# https://developer.mozilla.org/en-US/docs/Web/API/Document/\\n# also lot of methods...\\nclass Document(Node):\\n    activeElement: Element|None\\n    adoptedStyleSheets: CSSStyleSheet\\n    body: HTMLBodyElement\\n    characterSet: str\\n    childElementCount: float\\n    children: HTMLCollection\\n    compatMode: str\\n    contentType: str\\n    cookie: str\\n    currentScript: HTMLScriptElement|None\\n    defaultView: Window|None\\n    designMode: str\\n    dir: str\\n    doctype: DocumentType\\n    documentElement: Element\\n    documentURI: str\\n    embeds: HTMLCollection\\n    firstElementChild: HTMLElement|None\\n    #fonts: FontFaceSet\\n    forms: HTMLCollection\\n    #fragmentDirective: FragmentDirective\\n    head: HTMLHeadElement\\n    hidden: bool\\n    images: HTMLCollection\\n    #implementation: DOMImplementation\\n    lastElementChild: Element|None\\n    lastModified: str\\n    links: HTMLCollection\\n    location: Location\\n    plugins: HTMLCollection\\n    readyState: str\\n    referrer: str\\n    scripts: HTMLCollection\\n    scrollingElement: Element\\n    styleSheets: StyleSheetList\\n    # timeline\\n    title: str\\n    URL: str\\n    visibilityState: str\\n\\n    # static parseHTMLUnsafe\\n    def adoptNode(self, externalNode: Node, /) -> Node: ...\\n    def append(self, param1: Node, /) -> Undefined: ...\\n    def close(self) -> Undefined: ...\\n    def createAttribute(self, name: str, /) -> Attr: ...\\n    def createAttributeNS(self, namespaceURI: str, qualifiedName: str, /) -> Attr: ...\\n    def createCDATASection(self, data:str, /) -> Node: ...\\n    def createComment(self, data: str, /) -> Node: ...\\n    def createDocumentFragment(self) -> DocumentFragment: ...\\n    # TODO: options\\n    def createElement(self, localName: str, /) -> Element: ...\\n    def createElementNS(self, namespaceURI: str, qualifiedName: str) -> Element: ...\\n    # createExpression\\n    # createNodeIterator\\n    # createProcessingInstruction\\n    # createRange\\n    def createTextNode(self, data: str, /) -> Node: ...\\n    # createTreeWalker\\n    def elementFromPoint(self, x: float, y: float) -> Element: ...\\n    # elementsFromPoint (array)\\n    # evaluate (XPath)\\n    # getAnimations\\n    def getElementById(self, selectors: str, /) -> Element|None: ...\\n    def getElementsByClassName(self, names:str, /) -> HTMLCollection: ...\\n    def getElementsByName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagName(self, name:str, /) -> HTMLCollection: ...\\n    def getElementsByTagNameNS(self, namespace: str, name: str, /) -> HTMLCollection: ...\\n    # getSelection\\n    def hasFocus(self) -> bool: ...\\n    def hasStorageAccess(self) -> bool: ...\\n    def importNode[T: Node](self, externalNode: T, deep: bool = False) -> T: ...\\n    def open(self) -> Undefined: ...\\n    def prepend(self, param1: Node) -> Undefined: ...\\n    def querySelector(self, selectors: str, /) -> Element|None: ...\\n    def querySelectorAll(self, selectors: str, /) -> NodeList: ...\\n    def replaceChildren(self, param1: Node, /) -> Undefined: ...\\n    # TODO: options + promise\\n    # def requestStorageAccess(self): \\n    def writeln(self, line: str, /) -> Undefined: ...\\n\\ndocument: Document\";","import Types, { TYPEID_None, TYPEID_NotImplementedType } from \"@SBrython/sbry/types/list\";\nimport { AST_BODY, AST_LIT_TRUE, AST_LIT_FALSE, AST_KEY_ASSERT, AST_CTRL_WHILE, AST_KEY_BREAK, AST_KEY_CONTINUE, AST_KEY_PASS, AST_CTRL_IF, AST_DEF_FCT, AST_DEF_ARGS, AST_KEY_RETURN, AST_LIT_FLOAT, AST_LIT_NONE, AST_LIT_STR, AST_LIT_INT, AST_CTRL_ELSE, AST_CTRL_ELIF, AST_STRUCT_LIST, AST_CTRL_FOR, AST_DEF_ARG_POSONLY, AST_DEF_ARG_VARARGS, AST_DEF_ARG_KWONLY, AST_DEF_ARG_KWARGS, AST_CALL, AST_DEF_ARG_POS, AST_OP_OP, AST_OP_ASSIGN, AST_SYMBOL, AST_OP_ASSIGN_AUG, AST_CLASSDEF, AST_DEF_METH, AST_OP_ATTR } from \"./ast2js/list\";\nimport dop_reset, { addFirstChild, addSibling, ARRAY_TYPE, ASTNODES, CODE_BEG_COL, CODE_BEG_LINE, CODE_END_COL, CODE_END_LINE, createASTNode, firstChild, nextSibling, NODE_ID, NODE_TYPE, PY_CODE, resultType, setFirstChild, setResultType, setSibling, setType, type, TYPE_ID, VALUES } from \"./dop\"\nimport { AST } from \"./py2ast\"\nimport { Callable, Fct, RETURN_TYPE, TYPEID, WRITE_CALL } from \"./types/utils/types\";\nimport { default_call } from \"./ast2js/call/\";\nimport { TYPEID_str, TYPEID_float, TYPEID_int, TYPEID_jsint } from \"./types/list\";\nimport { OP_ASSIGN, OP_BIT_NOT, OP_ID, OP_UNR_MINUS, opid2iopmethod, opid2opmethod, opid2ropmethod, opsymbol2opid, pyop_priorities } from \"./structs/operators\";\nimport { AST_COMMENT } from \"./ast2js/list\";\nimport builtins, { addSymbol, getSymbol, resetSymbols } from \"./types/builtins\";\nimport { AST_OP_ASSIGN_INIT } from \"./ast2js/list\";\nimport TYPES from \"./types/list\";\nimport { AST_OP_NOT } from \"./ast2js/list\";\nimport { printNode } from \"@SBrython/utils/print/printNode\";\nimport { w_str } from \"./ast2js/utils\";\n\nconst END_OF_SYMBOL = /[^\\w]/;\nconst CHAR_NL    = 10;\nconst CHAR_SPACE = 32;\nconst CHAR_QUOTE = 34;\nconst CHAR_HASH  = 35;\nconst CHAR_SINGLE_QUOTE = 39;\nconst CHAR_PARENTHESIS_LEFT   = 40;\nconst CHAR_PARENTHESIS_RIGHT  = 41;\nconst CHAR_STAR  = 42;\nconst CHAR_PLUS  = 43;\nconst CHAR_COMMA = 44;\nconst CHAR_MINUS = 45;\nconst CHAR_DOT   = 46;\nconst CHAR_SLASH = 47;\nconst CHAR_COLON = 58;\nconst CHAR_DIGIT_0 = 48;\nconst CHAR_DIGIT_9 = 57;\nconst CHAR_EQ      = 61;\nconst CHAR_BRACKET_LEFT   = 91;\nconst CHAR_BRACKET_RIGHT  = 93;\nconst CHAR_a              = 97;\nconst CHAR_z              = 122;\nconst CHAR_TILDE          = 126;\n\nlet offset = 0;\nlet code: string;\nlet curChar!: number;\n\nlet JS: Record<string, TYPE_ID> = {};\n\nfunction consumeEmptyLines(): boolean {\n\n    while( offset < code.length ) {\n\n        curChar = code.charCodeAt(offset);\n\n        //TODO: if # => consume...\n\n        if(curChar !== CHAR_NL) {\n            if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n            return true;\n        }\n\n        if(__SBRY_MODE__ === \"dev\") ++CURSOR[0];\n        ++offset;\n    }\n\n    if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n\n    return false;\n}\n\nfunction nextSymbol(){\n    const end = offset + code.slice(offset).search(END_OF_SYMBOL);\n\n    curChar = code.charCodeAt(end);\n\n    return code.slice(offset, offset = end );\n}\n\nlet CURRENT_PARAM_TYPE!: NODE_TYPE;\nlet POSONLY_END       !: NODE_ID;\n\nfunction nextArg(cur: NODE_ID): boolean {\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n    \n    ++offset; // ( or ,\n    consumeSpaces();\n\n    if( curChar === CHAR_PARENTHESIS_RIGHT )\n        return false;\n\n    if( curChar === CHAR_SLASH) {\n\n        POSONLY_END = cur;\n\n        ++offset; // /\n        consumeSpaces();\n\n        // @ts-ignore\n        if( curChar === CHAR_PARENTHESIS_RIGHT )\n            return false;\n\n        return nextArg(cur);\n    }\n\n    if( curChar === CHAR_STAR) {\n        \n        curChar = code.charCodeAt(++offset);\n\n        if( curChar === CHAR_STAR) {\n            ++offset;\n            consumeSpaces();\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWARGS;\n            return true;\n        }\n\n        consumeSpaces();\n\n        if( curChar === CHAR_COMMA) {\n            CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n            return nextArg(cur);\n        }\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_VARARGS\n        return true;\n    }\n\n    if( CURRENT_PARAM_TYPE === AST_DEF_ARG_VARARGS)\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_KWONLY;\n\n    return true;\n}\n\nfunction readArg(id: NODE_ID) {\n\n    VALUES[id] = nextSymbol(); // name\n    if( curChar === CHAR_COLON ) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol(); // type\n        setResultType(id, getSymbol(type) + 1 as TYPE_ID );\n    }\n    consumeSpaces();\n\n    if( curChar === CHAR_EQ ) { // might be or not, but well...\n        ++offset;\n        consumeSpaces();\n        setFirstChild(id, readExpr()); // default value...\n        // no needs for consumeSpace due to readExpr...\n    }\n}\n\nconst KNOWN_SYMBOLS: Record<string, (parent: NODE_ID)=>void> = {\n    // possibles in expr:\n    \"None\" :    (id) => setType(id, AST_LIT_NONE),\n    \"True\" :    (id) => setType(id, AST_LIT_TRUE),\n    \"False\":    (id) => setType(id, AST_LIT_FALSE),\n    \"not\"  :    (id) => {\n\n        setType(id, AST_OP_NOT);\n        consumeSpaces();\n        setFirstChild(id, readToken());\n    },\n    // not possibles in expr:\n    \"break\":    (id) => setType(id, AST_KEY_BREAK),\n    \"continue\": (id) => setType(id, AST_KEY_CONTINUE),\n    \"pass\":     (id) => setType(id, AST_KEY_PASS),\n    \"return\":   (id) => {\n        setType(id, AST_KEY_RETURN);\n        consumeSpaces();\n        if( curChar !== CHAR_NL)\n            setFirstChild(id, readExpr() );\n    },\n    \"assert\":   (id) => {\n        setType(id, AST_KEY_ASSERT);\n        consumeSpaces();\n\n        const cond = setFirstChild(id, readExpr() );\n        if( curChar === CHAR_COMMA) {\n            ++offset; // consume comma\n            consumeSpaces();\n            setSibling(cond, readExpr() );\n        }\n    },\n    \"for\": (id) => {\n        // TODO: for range\n\n        setType(id, AST_CTRL_FOR);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        VALUES[id] = nextSymbol(); // name\n        consumeSpaces();\n        offset += 2; // \"in\"\n        consumeSpaces();\n        const first = setFirstChild(id, readExpr()); // list\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"while\": (id) => {\n        setType(id, AST_CTRL_WHILE);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody()  );\n    },\n    \"if\": (id) => {\n        setType(id, AST_CTRL_IF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"elif\": (id) => {\n        setType(id, AST_CTRL_ELIF);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const first = setFirstChild(id, readExpr());\n        ++offset; // this is a :\n\n        setSibling(first, readBody() );\n    },\n    \"else\": (id) => {\n        setType(id, AST_CTRL_ELSE);\n        ++offset; // this is a :\n\n        setFirstChild(id, readBody() );\n    },\n    //TODO: elif/else\n    \"def\": (id) => {\n\n        setType(id, AST_DEF_FCT);\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n\n        const name = VALUES[id] = nextSymbol(); // name\n\n        let genericName = \"\";\n        let genericType = \"\";\n        if( curChar === CHAR_BRACKET_LEFT) {\n            ++offset;\n            genericName = nextSymbol();\n            offset += 2; // \": \"\n            genericType = nextSymbol();\n            ++offset; // ]\n        }\n\n        const args = addFirstChild(id);\n        setType(args, AST_DEF_ARGS);\n\n        let ret_type: TYPE_ID = 0;\n\n        //TODO: if same return + write_call, can be shared (i.e. same type/typeID)\n        const SType_fct: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => {\n                    return ret_type; //TODO...\n                },\n                [WRITE_CALL]: default_call,\n            }\n        }\n    \n        const STypeID = Types.length as TYPE_ID;\n        Types[STypeID] = SType_fct;\n        addSymbol(name, STypeID);\n\n        setResultType(id, STypeID);\n\n        const cur_builtin_idx = builtins.length;\n\n        CURRENT_PARAM_TYPE = AST_DEF_ARG_POS;\n        POSONLY_END        = 0;\n\n        let cur: NODE_ID = 0;\n\n        if( nextArg(cur) ) {\n\n            readArg( cur = addFirstChild(args) );\n            setType(cur, CURRENT_PARAM_TYPE);\n\n            while( nextArg(cur) ) {\n                readArg( cur = addSibling(cur) );\n                setType(cur, CURRENT_PARAM_TYPE);\n            }\n\n            if( POSONLY_END !== 0) {\n\n                let cur = firstChild(args);\n                while(cur !== POSONLY_END) {\n                    setType(cur, AST_DEF_ARG_POSONLY);\n                    cur = nextSibling(cur);\n                }\n                setType(cur, AST_DEF_ARG_POSONLY); // ?\n            }\n        }\n\n        ++offset; // )\n\n        consumeSpaces();\n        if( curChar === CHAR_MINUS ) {\n            offset += 2; // ->\n            consumeSpaces();\n            let ret_name = nextSymbol();\n            if( ret_name === genericName)\n                ret_name = genericType;\n            ret_type = getSymbol( ret_name ) + 1 as TYPE_ID;\n\n            // @ts-ignore\n            while(curChar === 124) { // |\n                ++offset;\n                nextSymbol();\n            }\n            consumeSpaces();\n        }\n\n        ++offset; // :\n\n        curChar = code.charCodeAt(offset);\n\n        if( curChar === CHAR_SPACE && code.charCodeAt(++offset) === CHAR_DOT ) {\n            offset += 3; // ...\n        } else {\n\n            const body = readBody();\n            setSibling(args, body);\n\n            if( ret_type === 0 ) {\n\n                ret_type = TYPEID_None;\n\n                cur = firstChild(body);\n                while( nextSibling(cur) !== 0) {\n                    cur = nextSibling(cur);\n                }\n\n                if( type(cur) === AST_KEY_RETURN && (cur = firstChild(cur)) !== 0)\n                    ret_type = resultType(cur);\n            }\n        }\n\n        builtins.length = cur_builtin_idx;\n    },\n    \"from\": (id) => {\n        // only stubs for now...\n        consumeSpaces();\n        const module = nextSymbol();\n\n        consumeSpaces();\n        //TODO...\n        nextSymbol(); // from\n        consumeSpaces();\n        const imported_name = nextSymbol(); //TODO: many\n\n        if(module === \"JS\" ) {\n            addSymbol(imported_name, JS[imported_name] ); //TODO...\n            setType(id, AST_KEY_PASS); //TODO...\n        } else {\n            throw new Error(\"Not implemented !\");\n        }\n        //TODO: parse studs...\n    },\n    \"class\": (id) => {\n\n        ++offset; //TODO: consume white spaces at the start of readExpr (?)\n        const name = VALUES[id] = nextSymbol(); // name\n\n        const inherit: NODE_ID[] = []; //TODO...\n\n        if( curChar === CHAR_PARENTHESIS_LEFT) {\n            //TODO read args like call (?)\n            ++offset; // consume (\n            consumeSpaces();\n\n            // @ts-ignore\n            while( curChar !== CHAR_PARENTHESIS_RIGHT ) {\n\n                inherit.push( readToken() );\n\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset; // consume ,\n                    consumeSpaces();\n                }\n            }\n            ++offset; // consume )\n        }\n\n        ++offset; // \":\"\n        \n        const body = readBody();\n\n        let cur = body;\n        for(let i = 0; i < inherit.length; ++i) {\n            setSibling(cur, inherit[i]);\n            cur = inherit[i];\n        }\n\n        setType(id, AST_CLASSDEF);\n        setFirstChild(id, body); // too lazy to duplicate...\n\n        const STypeID = Types.length as TYPE_ID;\n        const SInstID = Types.length+1 as TYPE_ID;\n\n        const SType_klass: Callable = {\n            __qualname__: name,\n            __name__    : name,\n            __call__: {\n                __name__: \"__call__\",\n                [RETURN_TYPE]: () => SInstID,\n                [WRITE_CALL]: (id: NODE_ID) => {\n                    w_str(\"new \");\n                    default_call(id);\n                },\n            }\n        }\n\n        const SType_instance = {};\n        for(let i = 0; i < inherit.length; ++i)\n            Object.assign(SType_instance, TYPES[resultType(inherit[i]) + 1]);\n\n        // @ts-ignore\n        SType_instance.__class__ = SType_klass;\n    \n        Types[STypeID] = SType_klass;\n        Types[SInstID] = SType_instance;\n\n\n        //TODO: refactor/fix...\n\n        cur = firstChild(body);\n        let node_type: NODE_TYPE;\n        do {\n\n            node_type = type(cur);\n\n            // not ideal : needs it BEFORE...\n            if( node_type === AST_DEF_FCT) {\n\n                // @ts-ignore\n                SType_instance[VALUES[cur]] = resultType(cur);\n\n                setType(cur, AST_DEF_METH);\n            }\n\n            //TODO: fix...\n            if( node_type === AST_OP_ASSIGN_INIT || node_type === AST_OP_ASSIGN) {\n\n                // @ts-ignore\n                SType_instance[VALUES[nextSibling(firstChild(cur))]] = resultType(cur);\n\n                setType(cur, AST_OP_ASSIGN);\n            }\n\n            cur = nextSibling(cur);\n\n        } while( cur !== 0);\n\n        addSymbol(name, STypeID);\n\n        //TODO: inherit...\n\n        //TODO: SType...\n    }\n}\n\nlet CURRENT_INDENTATION = 0;\nfunction consumeIndentedLines() {\n\n    curChar = code.charCodeAt(offset);\n    if( curChar !== CHAR_NL ) // indentation already consumed\n        return;\n\n    let beg = ++offset;\n    while( offset < code.length ) {\n\n        while( (curChar = code.charCodeAt(offset)) === CHAR_SPACE )\n            ++offset;\n\n        // we have a non-empty line.\n        if(curChar !== CHAR_NL) {\n            if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n            CURRENT_INDENTATION = offset - beg;\n            return;\n        }\n\n        // empty line, consume next line.\n        if(__SBRY_MODE__ === \"dev\") ++CURSOR[0];\n        beg = ++offset;\n    }\n\n    if(__SBRY_MODE__ === \"dev\") CURSOR[1] = offset;\n\n    CURRENT_INDENTATION = 0;\n}\n\nfunction readComment() {\n\n    const node = createASTNode();\n    setType(node, AST_COMMENT);\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(node);\n\n    const beg = offset + 1;\n    \n    do {\n        curChar = code.charCodeAt(++offset);\n    } while(curChar !== CHAR_NL);\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n    VALUES[node] = code.slice(beg, offset);\n\n    return node;\n}\n\nfunction readLine() {\n\n    if( curChar === CHAR_HASH)\n        return readComment();\n\n    // TODO: move Expr if/else/etc. here...\n    // TODO: true/false: how to handle ?\n\n    return readExpr(false); //TODO... : typehint too...\n}\n\nfunction readBody(){\n\n    const id = createASTNode();\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(id);\n\n    setType(id, AST_BODY);\n\n    consumeIndentedLines(); // guaranty...\n    const indent = CURRENT_INDENTATION;\n\n    // a child is guaranteed.\n    let cur = setFirstChild(id, readLine() );\n\n    consumeIndentedLines(); // + check at the same time ???\n    while(CURRENT_INDENTATION === indent) {\n        cur = setSibling(cur, readLine() );\n        consumeIndentedLines();\n    }\n\n    offset -= CURRENT_INDENTATION + 1;\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(id);\n\n    return id;\n}\n\nfunction consumeSpaces() {\n\n    curChar = code.charCodeAt(offset);\n    while(curChar === CHAR_SPACE)\n        curChar = code.charCodeAt(++offset);\n}\n\nfunction readToken(): NODE_ID {\n\n    //TODO: known symbol 2 versions...\n    if( curChar === CHAR_MINUS) { // 43/45/126\n\n        const call = createASTNode();\n\n        if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(call);\n\n        const op = OP_UNR_MINUS; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    if( curChar === CHAR_TILDE) {\n\n        const call = createASTNode();\n\n        if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(call);\n\n        const op = OP_BIT_NOT; //opsymbol2uopid[code[offset++] as keyof typeof opsymbol2uopid];\n        ++offset;\n        consumeSpaces();\n        return createCallUopNode(call, op, readToken());\n    }\n    /*\n        \"+\": OP_UNR_PLUS,\n    */\n\n    // sub expr\n    if( curChar === CHAR_PARENTHESIS_LEFT) {\n\n        ++offset; // (\n        consumeSpaces();\n        const node = readExpr();\n        ++offset; // )\n        consumeSpaces();\n\n        return node;\n    }\n\n    let node = createASTNode();\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_beg(node);\n\n    if( curChar === CHAR_QUOTE || curChar === CHAR_SINGLE_QUOTE) { // consume str\n\n        const end = curChar;\n\n        setType(node, AST_LIT_STR);\n        setResultType(node, TYPEID_str);\n\n        const beg = offset;\n\n        if( code.charCodeAt(++offset) ===  end) {\n\n            if( code.charCodeAt(++offset) !==  end ) {\n                // empty str.\n                VALUES[node] = \"\";\n            } else { \n                //TODO: multi-str.\n\n                let count = 0;\n\n                while(true) {\n                    curChar = code.charCodeAt(++offset);\n                    \n                    if( __SBRY_MODE__ === \"dev\" && offset >= code.length)\n                        throw new Error(\"NOK\");\n\n                    if( curChar !== end ) {\n                        count = 0;\n                        continue;\n                    }\n                    \n                    if( ++count === 3)\n                        break;\n                        \n                }\n\n                ++offset;\n                VALUES[node] = \"`\" + code.slice(beg+3, offset-3) + \"`\";\n            }\n        } else {\n            do {\n                curChar = code.charCodeAt(++offset);\n            } while( curChar !== end);\n\n           ++offset;\n            VALUES[node] = code.slice(beg, offset);\n        }\n\n    } else if(curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) { // consume number\n\n        const beg = offset;\n\n        const nextChar = code.charCodeAt(++offset);\n       \n        if( curChar === CHAR_DIGIT_0 && nextChar > CHAR_DIGIT_9) {\n\n            setType(node, AST_LIT_INT);\n    \n            if( nextChar === 66 || nextChar === 98 ) { // b\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar === CHAR_DIGIT_0 || curChar === 49 ); // 1\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg < 32 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n                \n            } else if( nextChar === 79 || nextChar === 111 ) { // o\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= 55 ); // 0 to 7\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 10 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n    \n            } else if( nextChar === 88 || nextChar === 120 ) { // x\n    \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while(   curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9\n                        || curChar >= CHAR_a       && curChar <= 102\n                        || curChar >= 65           && curChar <= 70\n                 );\n    \n                let result_type  = TYPEID_int;\n                if( offset - beg <= 8 ) // opti\n                    result_type = TYPEID_jsint\n        \n                setResultType(node, result_type);\n            }\n        } else {\n\n            curChar = nextChar;\n            while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 ) {\n                curChar = code.charCodeAt(++offset);\n            }\n\n            let astnode_type = AST_LIT_INT;\n            let result_type  = TYPEID_int;\n\n            if( curChar === CHAR_DOT ) {\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n            \n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( curChar === 69 || curChar === 101 ) { // e\n\n                astnode_type = AST_LIT_FLOAT;\n                result_type  = TYPEID_float;\n\n                ++offset;\n                do {\n                    curChar = code.charCodeAt(++offset);\n                } while( curChar >= CHAR_DIGIT_0 && curChar <= CHAR_DIGIT_9 );\n            }\n            \n            if( result_type === AST_LIT_INT && offset - beg <= 9 ) // opti\n                result_type = TYPEID_jsint\n\n                setType(node, astnode_type);\n            setResultType(node, result_type);\n        }\n        \n        VALUES[node] = code.slice(beg, offset);\n\n    }  else if( curChar === CHAR_BRACKET_LEFT ) {\n        // consume list\n\n        setType(node, AST_STRUCT_LIST);\n\n        ++offset;\n\n        consumeSpaces();\n        // @ts-ignore\n        if(curChar !== CHAR_BRACKET_RIGHT) {\n\n            let cur = setFirstChild(node, readExpr() );\n\n            consumeSpaces();\n            // @ts-ignore\n            if( curChar === CHAR_COMMA ) {\n                ++offset;\n                consumeSpaces();\n            }\n\n            // @ts-ignore\n            while(curChar !== CHAR_BRACKET_RIGHT) {\n\n                cur = setSibling(cur, readExpr() );\n\n                consumeSpaces();\n                // @ts-ignore\n                if( curChar === CHAR_COMMA ) {\n                    ++offset;\n                    consumeSpaces();\n                }\n            }\n        }\n\n        ++offset;\n\n    } else {\n        //TODO: not\n        const token  = nextSymbol();\n        const symbol = KNOWN_SYMBOLS[token];\n        if( symbol !== undefined)\n            symbol(node);\n        else {\n\n            //TODO: search in local -> True/False/None in context ?\n\n            if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n\n            setType(node, AST_SYMBOL);\n\n            setResultType(node, getSymbol(token) );\n\n            VALUES[node] = token;\n\n            consumeSpaces(); // end of py code not exact... (set again later...)\n\n            if( curChar !== CHAR_DOT && curChar !== CHAR_BRACKET_LEFT ) {\n\n                //TODO: better way for inlineKlasses\n                if( token === \"int\")\n                    VALUES[node] = __SBRY_COMPAT__ === \"NONE\" ? \"Number\" : \"BigInt\";\n                if( token === \"float\")\n                    VALUES[node] = \"Number\";\n                if( token === \"str\")\n                    VALUES[node] = \"String\";\n                if( token === \"bool\")\n                    VALUES[node] = \"Boolean\";\n            }\n\n            if( curChar === CHAR_DOT) { // get attr...\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_OP_ATTR);\n                setFirstChild(node, cur);\n\n                ++offset;\n\n                const name = VALUES[node] = nextSymbol(); //TODO: continue...\n\n                // @ts-ignore\n                setResultType(node, TYPES[resultType(cur)][name]);\n            }\n\n            if( curChar === CHAR_PARENTHESIS_LEFT ) { // CALL\n\n                let cur = node;\n\n                node = createASTNode();\n                setType(node, AST_CALL);\n                setFirstChild(node, cur);\n\n                if( __SBRY_MODE__ === \"dev\" ) copy_py_code_beg(cur, node);\n\n                const fctType = VALUES[node] = Types[resultType(cur)];\n\n                if( __SBRY_MODE__ === \"dev\" && fctType === undefined) {\n                    console.warn( VALUES[node], resultType(cur), Types[resultType(cur)]);\n                    throw \"nok\";\n                }\n\n                //TODO: return type...\n\n                ++offset; // (\n                consumeSpaces();\n\n                let next: NODE_ID;\n\n                // @ts-ignore\n                while(curChar !== CHAR_PARENTHESIS_RIGHT) {\n\n                    next = readExpr();\n\n                    if(    type(next) === AST_OP_ASSIGN_INIT\n                        || type(next) === AST_OP_ASSIGN ) {\n\n                        //TODO: AST_CALL_ARG_KW\n                        //TODO\n\n                    }\n\n                    cur = setSibling(cur, next);\n                    // @ts-ignore\n                    if( curChar === CHAR_COMMA) {\n                        ++offset; // ,\n                        consumeSpaces();\n                    }\n                    // TODO kw arg...\n                    // TODO **kwargs + *varargs\n                }\n\n                // TODO: give call node...\n                // @ts-ignore\n                setResultType(node, fctType.__call__[RETURN_TYPE]() );\n\n                ++offset; // )\n            }\n        }\n    }\n\n    if( __SBRY_MODE__ === \"dev\" ) set_py_code_end(node);\n\n    consumeSpaces();\n    return node;\n}\n\nfunction isEndOfExpr() {\n\n    return curChar === CHAR_NL\n        || curChar === CHAR_COLON\n        || curChar === CHAR_COMMA\n        || curChar === CHAR_BRACKET_RIGHT\n        || curChar === CHAR_PARENTHESIS_RIGHT\n}\n\nfunction readOp() {\n\n    const beg      = offset;\n    if( curChar >= CHAR_a && curChar <= CHAR_z) { // and, not, in, etc.\n\n        do {\n            curChar = code.charCodeAt(++offset);\n        } while( curChar >= CHAR_a && curChar <= CHAR_z );\n\n    } else {\n        let   nextChar = code.charCodeAt(offset+1);\n        if( nextChar === curChar ) { // **, //, >>, <<, etc.\n            ++offset;\n            nextChar = code.charCodeAt(offset+1);\n        }\n        if( nextChar === CHAR_EQ ) // *=, **=, etc.\n            ++offset;\n\n        ++offset;\n    }\n\n    const op_str = code.slice(beg, offset);\n    consumeSpaces();\n\n    return opsymbol2opid[op_str as keyof typeof opsymbol2opid];\n}\n\nfunction readExpr(colon_is_end = true) { //TODO...\n\n    let value = readToken();\n\n    if( ! colon_is_end && curChar === CHAR_COLON) {\n        ++offset;\n        consumeSpaces();\n        const type = nextSymbol();\n        const typeID = getSymbol(type) + 1 as TYPE_ID;\n\n        // @ts-ignore\n        while(curChar === 124) { // |\n            ++offset;\n            nextSymbol();\n        }\n\n        setResultType(value, typeID);\n        addSymbol(VALUES[value], typeID); //TODO...\n\n        consumeSpaces();\n    }\n\n    if( isEndOfExpr() )\n        return value;\n\n    let op      = readOp();\n    const right = readToken();\n\n    if( isEndOfExpr() )\n        return createCallOpNode(createASTNode(), value, op, right);\n\n    type OP_INFO = [NODE_ID, NODE_ID, number, NODE_ID];\n\n    let lop : OP_INFO = [createASTNode(), value, op, 0];\n    let rop : OP_INFO;\n\n    let lop_prio = pyop_priorities[op];\n    let rop_prio;\n\n    value = right;\n\n    const stack: OP_INFO[] = [\n        lop\n    ];\n\n    do {\n        \n        op = readOp();\n        rop_prio = pyop_priorities[op];\n\n        // TODO...\n\n        // priority\n        if( lop_prio < rop_prio || lop_prio + rop_prio === 0) { // a+(b+...)\n\n            rop    = [createASTNode(), value, op, 0]; // ?\n            lop[3] = rop[0];\n\n            stack.push(rop);\n\n        } else { // (a+b)+...\n\n            lop[3] = value;\n\n            createCallOpNode(...lop);\n            for(let i = stack.length - 1; i >= 0 ; --i)\n                createCallOpNode(...stack[i]);\n\n            stack.length = 1;\n\n            rop      = [createASTNode(), stack[0][0], op, 0];\n            stack[0] = rop;\n        }\n\n        lop      = rop;\n        lop_prio = rop_prio;\n        value = readToken();\n\n    } while( ! isEndOfExpr() );\n\n    lop[3] = value;\n    createCallOpNode(...lop);\n\n    for(let i = stack.length - 1; i >= 0 ; --i)\n        createCallOpNode(...stack[i]);\n\n    return stack[0][0];\n}\n\n// @ts-ignore\nimport JS_stubs  from \"!!raw-loader!../../stubs/JS/__init__.pyi\";\n\nexport function py2ast(_code: string, filename: string): AST {\n\n    //TODO: better handle imports...\n    let import_offset = 0;\n    while( _code.slice(import_offset, import_offset+5) === \"from \") {\n\n        const start = builtins.length;\n\n        py2ast(JS_stubs, \"JS\");\n\n        for(let i = start; i < builtins.length; ++i)\n            JS[builtins[i][0]] = builtins[i][1]; //TODO: array (?)\n\n        import_offset = _code.indexOf(\"\\n\", import_offset) + 1;\n    }\n\n    resetSymbols();\n    \n    if( _code[_code.length-1] !== '\\n')\n        _code += '\\n'; // avoid EOF issue when parsing...\n\n    code = _code;\n\n    const nodes = ASTNODES;\n    dop_reset();\n    offset = 0;\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        CURSOR[0] = 0;\n        CURSOR[1] = 0;\n    }\n    \n    const id = createASTNode();\n    setType(id, AST_BODY);\n    \n    if( consumeEmptyLines() ) {\n\n        let cur = setFirstChild(id, readLine() );\n\n        while( consumeEmptyLines() )\n            cur = setSibling(cur, readLine() );\n    }\n\n    return {\n        nodes, //TODO: slice\n        filename\n    }\n}\n\n\nfunction createCallUopNode(call: NODE_ID, op: OP_ID, a: NODE_ID) {\n\n    setType(call, AST_CALL);\n\n    if( __SBRY_MODE__ === \"dev\" ) copy_py_code_end(a, call);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(call  as number);\n        const src_end = 4*(a     as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_BEG_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __SBRY_MODE__ === \"dev\" && pyop_name === undefined)\n        throw new Error(`Unknown operator ${op}!`);\n\n    const atype = resultType(a);\n\n    let method   = Types[atype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( __SBRY_MODE__ === \"dev\" && method === undefined) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    ret_type = method[RETURN_TYPE](atype); //TODO: change...\n\n    if( __SBRY_MODE__ === \"dev\" && ret_type === TYPEID_NotImplementedType) {\n        printNode(a);\n        throw new Error(`${pyop_name} ${Types[atype].__class__?.__name__} NOT IMPLEMENTED!`);\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, a );\n\n    return call;\n}\n\nfunction createCallOpNode(call: NODE_ID, left: NODE_ID, op: OP_ID, right: NODE_ID) {\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        copy_py_code_beg(left , call);\n        copy_py_code_end(right, call);\n    }\n\n    if( op === OP_ASSIGN ) {\n\n        let node_type = AST_OP_ASSIGN;\n\n        let type = resultType(left);\n        if( type === 0 ) { // unknown\n            type      = resultType(right);\n            node_type = AST_OP_ASSIGN_INIT;\n\n            if(type === TYPEID_jsint)\n                type = TYPEID_int;\n\n            addSymbol(VALUES[left], type);\n        }\n\n        setType(call, node_type);\n        setResultType(call, type);\n\n        // value is first child (can be chained)...\n        setFirstChild(call , right);\n        setSibling   (right, left );\n\n        return call;\n    }\n\n    if( op >= 29 ) {\n\n        const type = resultType(left);\n        setType(call, AST_OP_ASSIGN_AUG); //TODO: many nodes to store op in node_id ?\n        setResultType(call, type );\n\n        VALUES[call] = Types[type].__class__![opid2iopmethod[op-29]];\n        \n        const opnode = createASTNode();\n        setType(opnode, AST_OP_OP);\n        setFirstChild(call, opnode);\n\n        setSibling(opnode , left);\n        setSibling(left, right);\n\n        return call;\n    }\n\n    setType(call, AST_CALL);\n\n    const opnode = createASTNode();\n    setType(opnode, AST_OP_OP);\n    setFirstChild(call, opnode);\n\n    if( __SBRY_MODE__ === \"dev\" ) {\n        // I guess ?\n        const dst_off = 4*(opnode as number);\n        const src_beg = 4*(left  as number);\n        const src_end = 4*(right as number);\n\n        PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_beg + CODE_END_LINE ];\n        PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_beg + CODE_END_COL  ];\n        PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_end + CODE_BEG_LINE ];\n        PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_end + CODE_BEG_COL  ];\n    }\n\n    let pyop_name = opid2opmethod[op];\n\n    if( __SBRY_MODE__ === \"dev\" && pyop_name === undefined) {\n        printNode(left);\n        printNode(right);\n        console.warn(\"at line\", CURSOR[0])\n        throw new Error(`Unknown operator ${op}!`);\n    }\n\n    const ltype = resultType(left);\n    const rtype = resultType(right);\n\n    let method   = Types[ltype].__class__![pyop_name] as Fct;\n    let ret_type = TYPEID_NotImplementedType;\n\n    if( method !== undefined )\n        ret_type = method[RETURN_TYPE](rtype); //TODO: change...\n    \n    if( ret_type === TYPEID_NotImplementedType) {\n        \n        pyop_name = opid2ropmethod[op];\n        \n        // we NEED to invert l&r.\n        let _ = left;\n        left  = right;\n        right = _;\n\n        method = Types[rtype].__class__![pyop_name] as Fct;\n\n        if( __SBRY_MODE__ === \"dev\" && method === undefined) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n\n        ret_type = method[RETURN_TYPE](ltype!);\n\n        if( __SBRY_MODE__ === \"dev\" && ret_type === TYPEID_NotImplementedType) {\n            printNode(left);\n            printNode(right);\n            throw new Error(`${Types[rtype].__class__?.__name__} ${pyop_name} ${Types[ltype].__class__?.__name__} NOT IMPLEMENTED!`);\n        }\n    }\n\n    VALUES[call] = method;\n    setResultType(call, ret_type)\n\n    setSibling(opnode, left );\n    setSibling(left  , right);\n\n    return call;\n}\n\n// py code\n\nconst CURSOR = __SBRY_MODE__ === \"dev\" ? new ARRAY_TYPE(2) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\nexport function set_py_code_beg(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_BEG_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_BEG_COL  ] = offset - CURSOR[1];\n}\n\nexport function set_py_code_end(id: NODE_ID) {\n\n    const off = 4*(id as number);\n    PY_CODE[ off + CODE_END_LINE ] = CURSOR[0] + 1;\n    PY_CODE[ off + CODE_END_COL  ] = offset - CURSOR[1];\n}\n\nexport function copy_py_code_beg(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_BEG_LINE ] = PY_CODE[ src_off + CODE_BEG_LINE ];\n    PY_CODE[ dst_off + CODE_BEG_COL  ] = PY_CODE[ src_off + CODE_BEG_COL  ];\n}\n\nexport function copy_py_code_end(src: NODE_ID, dst: NODE_ID) {\n\n    const src_off = 4*(src as number);\n    const dst_off = 4*(dst as number);\n\n    PY_CODE[ dst_off + CODE_END_LINE ] = PY_CODE[ src_off + CODE_END_LINE ];\n    PY_CODE[ dst_off + CODE_END_COL  ] = PY_CODE[ src_off + CODE_END_COL  ];\n}","import LIST from './list';\nexport default LIST;\nexport {ast2js} from './utils';\n\nLIST[0  ] = require(\"./symbol\").default;\nLIST[1  ] = require(\"./struct/tuple\").default;\nLIST[2  ] = require(\"./struct/list\").default;\nLIST[3  ] = require(\"./struct/dict\").default;\nLIST[4  ] = require(\"./key/return\").default;\nLIST[5  ] = require(\"./key/pass\").default;\nLIST[6  ] = require(\"./key/raise\").default;\nLIST[7  ] = require(\"./key/import\").default;\nLIST[8  ] = require(\"./key/import_alias\").default;\nLIST[9  ] = require(\"./key/continue\").default;\nLIST[10 ] = require(\"./key/break\").default;\nLIST[11 ] = require(\"./key/assert\").default;\nLIST[12 ] = require(\"./op/op\").default;\nLIST[13 ] = require(\"./op/unary\").default;\nLIST[14 ] = require(\"./op/cmp\").default;\nLIST[15 ] = require(\"./op/bool\").default;\nLIST[16 ] = require(\"./op/bin\").default;\nLIST[17 ] = require(\"./op/not\").default;\nLIST[18 ] = require(\"./op/attr\").default;\nLIST[19 ] = require(\"./op/brackets\").default;\nLIST[20 ] = require(\"./op/assign_aug\").default;\nLIST[21 ] = require(\"./op/assign_init\").default;\nLIST[22 ] = require(\"./op/assign_attr\").default;\nLIST[23 ] = require(\"./op/assign\").default;\nLIST[24 ] = require(\"./lit/str\").default;\nLIST[25 ] = require(\"./lit/int\").default;\nLIST[26 ] = require(\"./lit/float\").default;\nLIST[27 ] = require(\"./lit/fstring\").default;\nLIST[28 ] = require(\"./lit/fstring_fval\").default;\nLIST[29 ] = require(\"./lit/true\").default;\nLIST[30 ] = require(\"./lit/false\").default;\nLIST[31 ] = require(\"./lit/none\").default;\nLIST[32 ] = require(\"./def/fct\").default;\nLIST[33 ] = require(\"./def/meth\").default;\nLIST[34 ] = require(\"./def/args\").default;\nLIST[35 ] = require(\"./def/arg_posonly\").default;\nLIST[36 ] = require(\"./def/arg_pos\").default;\nLIST[37 ] = require(\"./def/arg_varargs\").default;\nLIST[38 ] = require(\"./def/arg_kwonly\").default;\nLIST[39 ] = require(\"./def/arg_kwargs\").default;\nLIST[40 ] = require(\"./call/index\").default;\nLIST[41 ] = require(\"./call/arg_kw\").default;\nLIST[42 ] = require(\"./ctrl/while\").default;\nLIST[43 ] = require(\"./ctrl/tryblock\").default;\nLIST[44 ] = require(\"./ctrl/tryblock_catch\").default;\nLIST[45 ] = require(\"./ctrl/ternary\").default;\nLIST[46 ] = require(\"./ctrl/if\").default;\nLIST[47 ] = require(\"./ctrl/elif\").default;\nLIST[48 ] = require(\"./ctrl/else\").default;\nLIST[49 ] = require(\"./ctrl/for_range\").default;\nLIST[50 ] = require(\"./ctrl/for\").default;\nLIST[51 ] = require(\"./classdef\").default;\nLIST[52 ] = require(\"./body\").default;\nLIST[53 ] = require(\"./2bigint\").default;\nLIST[54 ] = require(\"./2number\").default;\nLIST[55 ] = require(\"./comment\").default;\n\nconst _id2name = __SBRY_MODE__ !== 'dev' ? [] : [\n\t\"SYMBOL\",\n\t\"STRUCT_TUPLE\",\n\t\"STRUCT_LIST\",\n\t\"STRUCT_DICT\",\n\t\"KEY_RETURN\",\n\t\"KEY_PASS\",\n\t\"KEY_RAISE\",\n\t\"KEY_IMPORT\",\n\t\"KEY_IMPORT_ALIAS\",\n\t\"KEY_CONTINUE\",\n\t\"KEY_BREAK\",\n\t\"KEY_ASSERT\",\n\t\"OP_OP\",\n\t\"OP_UNARY\",\n\t\"OP_CMP\",\n\t\"OP_BOOL\",\n\t\"OP_BIN\",\n\t\"OP_NOT\",\n\t\"OP_ATTR\",\n\t\"OP_BRACKETS\",\n\t\"OP_ASSIGN_AUG\",\n\t\"OP_ASSIGN_INIT\",\n\t\"OP_ASSIGN_ATTR\",\n\t\"OP_ASSIGN\",\n\t\"LIT_STR\",\n\t\"LIT_INT\",\n\t\"LIT_FLOAT\",\n\t\"LIT_FSTRING\",\n\t\"LIT_FSTRING_FVAL\",\n\t\"LIT_TRUE\",\n\t\"LIT_FALSE\",\n\t\"LIT_NONE\",\n\t\"DEF_FCT\",\n\t\"DEF_METH\",\n\t\"DEF_ARGS\",\n\t\"DEF_ARG_POSONLY\",\n\t\"DEF_ARG_POS\",\n\t\"DEF_ARG_VARARGS\",\n\t\"DEF_ARG_KWONLY\",\n\t\"DEF_ARG_KWARGS\",\n\t\"CALL\",\n\t\"CALL_ARG_KW\",\n\t\"CTRL_WHILE\",\n\t\"CTRL_TRYBLOCK\",\n\t\"CTRL_TRYBLOCK_CATCH\",\n\t\"CTRL_TERNARY\",\n\t\"CTRL_IF\",\n\t\"CTRL_ELIF\",\n\t\"CTRL_ELSE\",\n\t\"CTRL_FOR_RANGE\",\n\t\"CTRL_FOR\",\n\t\"CLASSDEF\",\n\t\"BODY\",\n\t\"2BIGINT\",\n\t\"2NUMBER\",\n\t\"COMMENT\",\n];\nexport const id2name = _id2name;\n","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\nexport class SBrython {\n\n    #registered: Record<string, Record<string, any>> = {};\n\n    register(name: string, exported: Record<string, any>) {\n        this.#registered[name] = exported;\n    }\n\n    //TODO...\n    // executeModule -> ObjectURL + get exports if possible...\n    // jscode  = `//# sourceURL=${filename}\\n`;\n\n    // for AST...\n    #registered_AST: Record<string, AST> = {};\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SBRY__\", jscode); //TODO...\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#registered[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#registered;\n    }\n    getModule(name: string) {\n        return this.#registered[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return __SBRY_COMPAT__ === \"NONE\" ? null : _r_;\n    }\n    get _sb_() {\n        return __SBRY_COMPAT__ === \"NONE\" ? null : _sb_;\n    }\n}\n\n// give options here ? factory ?\nexport default globalThis.__SBRY__ = new SBrython();"],"names":["last_id","AST_SYMBOL","AST_STRUCT_LIST","AST_KEY_RETURN","AST_KEY_PASS","AST_KEY_CONTINUE","AST_KEY_BREAK","AST_KEY_ASSERT","AST_OP_OP","AST_OP_NOT","AST_OP_ATTR","AST_OP_ASSIGN_AUG","AST_OP_ASSIGN_INIT","AST_OP_ASSIGN","AST_LIT_STR","AST_LIT_INT","AST_LIT_FLOAT","AST_LIT_FSTRING_FVAL","AST_LIT_TRUE","AST_LIT_FALSE","AST_LIT_NONE","AST_DEF_FCT","AST_DEF_METH","AST_DEF_ARGS","AST_DEF_ARG_POSONLY","AST_DEF_ARG_POS","AST_DEF_ARG_VARARGS","AST_DEF_ARG_KWONLY","AST_DEF_ARG_KWARGS","AST_CALL","AST_CALL_ARG_KW","AST_CTRL_WHILE","AST_CTRL_IF","AST_CTRL_ELIF","AST_CTRL_ELSE","AST_CTRL_FOR","AST_CLASSDEF","AST_BODY","AST_2BIGINT","AST_2NUMBER","AST_COMMENT","ast2js","node","coffset","firstChild","w_sns","nextSibling","cur","w_str","w_node","RETURN_TYPE","Symbol","TYPEID","WRITE_CALL","JS_NAME","klass","initBuiltinClass","TYPEID_jsint","TYPEID_type_jsint_","add_method","RET_JSINT","call","w_subs","addJSBinOps","OP_BIN_POW","OP_BIN_ADD","OP_BIN_SUB","OP_BIT_AND","OP_BIT_OR","OP_BIT_XOR","OP_BIT_LSHIFT","OP_BIT_RSHIFT","RET_IJ2INT","convert_self","CONVERT_2INT","convert_other","OP_BIN_MUL","w_call","a","op","b","resultType","TYPEID_int","Number2Int","Int2Number","w_JSBinOp","OP_BIN_DIV","RET_IJBF2FLOAT","CONVERT_INT2FLOAT","OP_BIN_FDIV","RET_JSINT2JSINT","OP_BIN_MOD","addJSUnrOps","OP_UNR_MINUS","w_JSUnrOp","OP_BIT_NOT","RET_INT","addJSCmpOps","JSCmpOps_LIST","RET_IJBF2BOOL","to_write","setParentOPPrio","parentOPPrio","VALUES","assert","cond","msg","Error","fist","rchild","lchild","type","w_NL","_","TYPEID_float","TYPEID_type_float_","RET_FLOAT","other","other_type","TYPEID_str","other_value","slice","otype","TYPES","undefined","__int__","__name__","RET_STR","__SBRY_COMPAT__","_op","write_arg","set_js_cursor","CODE_BEG","defval","CODE_END","write_posarg","start","name","KW","kw","keywords","getKW","Py_Exception","Py_object","TYPEID_NotImplemented","TYPEID_NotImplementedType","float2str","f","str","toExponential","sign_idx","length","toString","includes","OP_BOOL_NOT","body","PythonError","python_exception","constructor","super","_raw_err_","this","BB","first","jscode","BE","TYPEID_unknown","TYPEID_NoneType","TYPEID_None","TYPEID_type","TYPEID_type_int_","TYPEID_type_bool_","TYPEID_bool","TYPEID_type_str_","Array","i","Object","create","LIST","require","id2name","value","Types","left","OP_CMP_EQ","OP_CMP_NEQ","OP_CMP_LT","OP_CMP_LE","OP_CMP_GT","OP_CMP_GE","target","ops","return_type","opid2opmethod","w_JSCmpOp","OP_EQ2IS","debug_print_exception","err","sb","console","warn","stack","isV8","split","filter","e","filter_stack","map","l","_line","_col","fct_name","line","col","pos","indexOf","getASTFor","nodes","parse_stack","stackline","stackline2astnode","stack2astnodes","exception_str","join","log","get_py_exception","__SB__","_err_","_sb_","_r_","JSException","p_prio","opid2jsop","r","NOCONVERT","setResultType","a_value","ltype","rtype","idx","createASTNode","setType","setFirstChild","OP_ASSIGN","pyop_priorities","jsop_priorities","opid2ropmethod","opid2iopmethod","opsymbol2opid","list","__class__","__str__","__call__","RET_STR2BOOL","RET_STR2STR","RET_IJ2STR","abs","n","RET_None","o","RET_INT2INT","ARRAY_TYPE","Float64Array","CODE_LINE","CODE_COL","CODE_BEG_LINE","CODE_BEG_COL","CODE_END_LINE","CODE_END_COL","CODE_BUFFER_SIZE","PY_CODE_BUFFER","ArrayBuffer","maxByteLength","JS_CODE_BUFFER","PY_CODE","JS_CODE","NEXT_AST_NODE_ID","addFirstChild","ASTNODES","ASTNODE_SIZE","ASTNODE_FIRST_CHILD","addSibling","ASTNODE_NEXT_SIBLING","dop_reset","BUFFER","resize","BUFFER_SIZE","ASTNODE_TYPE_ID","ASTNODE_PARENT_OP_PRIORITY","ASTNODE_RESULT_TYPE","parent","setSibling","sibling","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","end","JSType","TypeKlass","instance","jsname","Klass","__qualname__","RET_TYPE","write","create_function","id","CURSOR","ast","nbLines","__SBRY_EXPORT__","new_jscode","exported","node_type","push","child","filename","hasJSCursor","indent","cur_indent_level","indents","has","AST2JS","args","addProps","newProps","getOwnPropertyDescriptors","entries","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","writeOp","count","right","jop","method","reversed_operator","find_and_write_call","Py_JSException","default_call","kname","ADD_EQ","iop","prio","write_multi_jsop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","defineProperty","enumerable","get","obj","prop","hasOwnProperty","toStringTag","builtins","genOpFct","nbBuiltins","addSymbol","getSymbol","opname","printNode","typeID","ret_typeID","ret_type","END_OF_SYMBOL","CHAR_NL","CHAR_SPACE","CHAR_QUOTE","CHAR_HASH","CHAR_SINGLE_QUOTE","CHAR_PARENTHESIS_LEFT","CHAR_PARENTHESIS_RIGHT","CHAR_COMMA","CHAR_MINUS","CHAR_DOT","CHAR_COLON","CHAR_DIGIT_0","CHAR_DIGIT_9","CHAR_EQ","CHAR_BRACKET_LEFT","CHAR_BRACKET_RIGHT","CHAR_a","CHAR_z","CHAR_TILDE","code","curChar","CURRENT_PARAM_TYPE","POSONLY_END","offset","JS","consumeEmptyLines","charCodeAt","nextSymbol","search","nextArg","consumeSpaces","readArg","readExpr","KNOWN_SYMBOLS","readToken","readBody","genericName","genericType","SType_fct","STypeID","cur_builtin_idx","ret_name","imported_name","inherit","SInstID","SType_klass","SType_instance","assign","CURRENT_INDENTATION","consumeIndentedLines","beg","readLine","set_py_code_beg","set_py_code_end","readComment","createCallUopNode","nextChar","result_type","astnode_type","token","symbol","copy_py_code_beg","fctType","next","isEndOfExpr","readOp","op_str","colon_is_end","createCallOpNode","rop","rop_prio","lop","lop_prio","py2ast","_code","import_offset","JS_stubs","copy_py_code_end","opnode","dst_off","src_beg","src_end","pyop_name","atype","off","src","dst","src_off","SBrython","register","buildModule","Function","runJSCode","getModules","getModule","print","globalThis","__SBRY__"],"sourceRoot":""}