{"version":3,"file":"libs/SBrython-runtime-prod/index.js","mappings":"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","sources":["webpack://sbrython/./src/runtime/_sb_/abs.ts","webpack://sbrython/./src/runtime/_sb_/assert.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/Exception.ts","webpack://sbrython/./src/runtime/_sb_/stack.ts","webpack://sbrython/./src/sbry/ast2js/list.js?7e18","webpack://sbrython/./src/sbry/dop.ts","webpack://sbrython/./src/runtime/_sb_/mix.ts","webpack://sbrython/./src/runtime/_sb_/fct_kw.ts","webpack://sbrython/./src/runtime/_r_/Exceptions/JSException.ts","webpack://sbrython/./src/runtime/_sb_/op_bin.ts","webpack://sbrython/./src/runtime/_r_/object.ts","webpack://sbrython/./src/runtime/_sb_/float2str.ts","webpack://sbrython/./src/runtime/_sb_/raise.ts","webpack://sbrython/webpack/bootstrap","webpack://sbrython/webpack/runtime/define property getters","webpack://sbrython/webpack/runtime/hasOwnProperty shorthand","webpack://sbrython/./src/runtime/_r_/list.ts","webpack://sbrython/./src/runtime/_sb_/list.ts","webpack://sbrython/./src/runtime/index.ts"],"sourcesContent":["export default {\n    abs: (n: bigint) => {\n        if( n >= 0)\n            return n;\n        return -n;\n    }\n}","function assert(cond: boolean) {\n    //TODO: if __DEBUG__\n    if( cond )\n        return;\n\n    throw new Error('Assertion failed');\n}\n\n\nexport default {\n    assert\n};","import Py_object from \"@SBrython/runtime/_r_/object\";\n\nexport default class Py_Exception extends Py_object {\n\n}\n\n\n// __traceback__\n    // tb_next\n    // tb_frame\n        // f_back ?\n        // f_local : enable only in compat mode.\n        // f_lineno (line)\n        // f_code\n            // co_name (fct name ?)\n            // co_filename","import { AST_SYMBOL } from \"@SBrython/sbry/ast2js/list\";\nimport Py_Exception from \"@SBrython/runtime/_r_/Exceptions/Exception\";\nimport { NODE_ID, type, VALUES } from \"@SBrython/sbry/dop\";\nimport { SBrython } from \"@SBrython/runtime\";\n\nfunction filter_stack(stack: string[]) {\n  return stack.filter( e => e.includes('brython_') ); //TODO improves...\n}\n\n//TODO: use ~=sourcemap...\nfunction find_astnode_from_jscode_pos(nodes: any, line: number, col: number): null|NODE_ID {\n\n  //TODO...\n  /*\n  for(let i = 0; i < nodes.length; ++i) {\n\n      if( nodes[i].jscode!.start.line > line\n      || nodes[i].jscode!.start.line === line && nodes[i].jscode!.start.col > col)\n          return null;\n\n      if(    nodes[i].jscode!.end.line > line\n          || nodes[i].jscode!.end.line === line && nodes[i].jscode!.end.col > col\n      ) {\n          let node = find_astnode_from_jscode_pos(nodes[i].children, line, col);\n          if( node !== null)\n              return node;\n          return nodes[i];\n      }\n  }\n*/\n\n  return null; //throw new Error(\"node not found\");\n}\n\nexport function stackline2astnode(stackline: StackLine, sb: SBrython): NODE_ID {\n  const ast = sb.getASTFor(\"sbrython_editor.js\");\n  return find_astnode_from_jscode_pos(ast.nodes, stackline[1], stackline[2])!;\n}\n\nexport type StackLine = [string, number, number];\n\n//TODO: convert\nexport function stack2astnodes(stack: StackLine[], sb: SBrython): NODE_ID[] {\n  return stack.map( e => stackline2astnode(e, sb) );\n}\n\n//TODO: add file...\nexport function parse_stack(stack: any, sb: SBrython): StackLine[] {\n\n\n  \n    stack = stack.split(\"\\n\");\n\n    const isV8 = stack[0]=== \"Error\"; \n\n    return filter_stack(stack).map( l => {\n\n      let [_, _line, _col] = l.split(':');\n  \n      if( _col[_col.length-1] === ')') // V8\n        _col = _col.slice(0,-1);\n  \n      let line = +_line - 2;\n      let col  = +_col;\n\n      --col; //starts at 1.\n\n      let fct_name!: string;\n      if( isV8 ) {\n        let pos = _.indexOf(\" \", 7);\n        fct_name = _.slice(7, pos);\n        if( fct_name === \"eval\") //TODO: better\n          fct_name = \"<module>\";\n\n        //TODO: extract filename.\n        const ast = sb.getASTFor(\"sbrython_editor.js\");\n        const node = find_astnode_from_jscode_pos(ast.nodes, line, col)!;\n        if( type(node) === AST_SYMBOL)\n          col += VALUES[node].length; // V8 gives first character of the symbol name when FF gives \"(\"...\n\n      } else {\n        let pos = _.indexOf('@');\n        fct_name = _.slice(0, pos);\n        if( fct_name === \"anonymous\") //TODO: better\n          fct_name = \"<module>\";\n      }\n\n      return [fct_name, line, col] as const;\n    });\n}\n\nfunction debug_print_exception(err: Py_Exception, sb: SBrython) {\n\n    console.warn(\"Exception\", err);\n\n    const stack = parse_stack( (err as any)._raw_err_.stack, sb);\n    const nodes = stack2astnodes(stack, sb);\n    //TODO: convert stack...\n    // nodes[i].pycode.start.line\n    const stack_str = stack.map( (l,i) => `File \"[file]\", line ${0}, in ${stack[i][0]}`);\n\n    let exception_str = \n`Traceback (most recent call last):\n  ${stack_str.join(`\\n  `)}\nException: [msg]`;\n\n    console.log(exception_str);\n}\n\nfunction get_py_exception(_raw_err_: any, __SB__: any) {\n  // @ts-ignore\n  const _err_ = _raw_err_ instanceof _sb_.PythonError\n              ? _raw_err_.python_exception\n              // @ts-ignore\n              : new _r_.JSException(_raw_err_);\n\n  debug_print_exception(_err_, __SB__);\n  \n  return _err_;\n}\n\nexport default {\n    debug_print_exception,\n    get_py_exception\n};","// needs to be JS compatible\nlet last_id = 0;\n\nexport const AST_SYMBOL             = last_id++;\n// structures\nexport const AST_STRUCT_TUPLE       = last_id++;\nexport const AST_STRUCT_LIST        = last_id++;\nexport const AST_STRUCT_DICT        = last_id++;\n// keywords\nexport const AST_KEY_RETURN         = last_id++;\nexport const AST_KEY_PASS           = last_id++;\nexport const AST_KEY_RAISE          = last_id++;\nexport const AST_KEY_IMPORT         = last_id++;\nexport const AST_KEY_IMPORT_ALIAS   = last_id++;\nexport const AST_KEY_CONTINUE       = last_id++;\nexport const AST_KEY_BREAK          = last_id++;\nexport const AST_KEY_ASSERT         = last_id++;\n// operators\nexport const AST_OP_OP              = last_id++;\n\nexport const AST_OP_UNARY           = last_id++;\nexport const AST_OP_CMP             = last_id++;\nexport const AST_OP_BOOL            = last_id++;\nexport const AST_OP_BIN             = last_id++;\n\nexport const AST_OP_NOT             = last_id++;\n\nexport const AST_OP_ATTR            = last_id++;\nexport const AST_OP_BRACKETS        = last_id++;\nexport const AST_OP_ASSIGN_AUG      = last_id++;\nexport const AST_OP_ASSIGN_INIT     = last_id++;\nexport const AST_OP_ASSIGN_ATTR     = last_id++;\nexport const AST_OP_ASSIGN          = last_id++;\n// Litterals\nexport const AST_LIT_STR            = last_id++;\nexport const AST_LIT_INT            = last_id++;\nexport const AST_LIT_FLOAT          = last_id++;\nexport const AST_LIT_FSTRING        = last_id++;\nexport const AST_LIT_FSTRING_FVAL   = last_id++;\nexport const AST_LIT_TRUE           = last_id++;\nexport const AST_LIT_FALSE          = last_id++;\nexport const AST_LIT_NONE           = last_id++;\n// Function def\nexport const AST_DEF_FCT            = last_id++;\nexport const AST_DEF_METH           = last_id++;\nexport const AST_DEF_ARGS           = last_id++;\nexport const AST_DEF_ARG_POSONLY    = last_id++;\nexport const AST_DEF_ARG_POS        = last_id++;\nexport const AST_DEF_ARG_VARARGS    = last_id++;\nexport const AST_DEF_ARG_KWONLY     = last_id++;\nexport const AST_DEF_ARG_KWARGS     = last_id++;\n// function call\nexport const AST_CALL               = last_id++;\nexport const AST_CALL_ARG_KW        = last_id++;\n// Controlflows\nexport const AST_CTRL_WHILE         = last_id++;\nexport const AST_CTRL_TRYBLOCK      = last_id++;\nexport const AST_CTRL_TRYBLOCK_CATCH= last_id++;\nexport const AST_CTRL_TERNARY       = last_id++;\nexport const AST_CTRL_IF            = last_id++;\nexport const AST_CTRL_ELIF          = last_id++;\nexport const AST_CTRL_ELSE          = last_id++;\nexport const AST_CTRL_FOR_RANGE     = last_id++;\nexport const AST_CTRL_FOR           = last_id++;\n// Others\nexport const AST_CLASSDEF           = last_id++;\nexport const AST_BODY               = last_id++;\nexport const AST_2BIGINT            = last_id++;\nexport const AST_2NUMBER            = last_id++;\nexport const AST_COMMENT            = last_id++;\n\nexport default [];","export const ARRAY_TYPE   = Float64Array;\nconst ELEM_SIZE = 8;\nconst MAX_NB_ASTNODES = 105 /**/ * 20 /**/; // when merged\n\nexport const CODE_LINE = 0;\nexport const CODE_COL  = 1;\nexport const CODE_BEG  = 0;\nexport const CODE_END  = 2;\nexport const CODE_BEG_LINE = CODE_BEG + CODE_LINE;\nexport const CODE_BEG_COL  = CODE_BEG + CODE_COL;\nexport const CODE_END_LINE = CODE_END + CODE_LINE;\nexport const CODE_END_COL  = CODE_END + CODE_COL;\n\nconst CODE_BUFFER_SIZE = __DEBUG__ ? 2 * ELEM_SIZE * MAX_NB_ASTNODES : 0;\n// @ts-ignore\nconst PY_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n// @ts-ignore\nconst JS_CODE_BUFFER = new ArrayBuffer(CODE_BUFFER_SIZE, {maxByteLength: CODE_BUFFER_SIZE});\n\nexport const PY_CODE = __DEBUG__ ? new ARRAY_TYPE(PY_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\nexport const JS_CODE = __DEBUG__ ? new ARRAY_TYPE(JS_CODE_BUFFER) : null as unknown as InstanceType<typeof ARRAY_TYPE>;\n\n//TODO: indirection ou par ID...\nexport const VALUES = new Array<any>() as any as Record<NODE_ID, any>;\n\nlet NEXT_AST_NODE_ID = 0;\n\ndeclare const tag: unique symbol;\n\nexport type BRAND <T, B extends string, E = never>  = T & {[tag]: B} | E;\n//type OPAQUE<B extends string, T = never> = T | {[tag]: B};\n\nexport type NODE_ID   = BRAND<number, \"NODE_ID\"  , 0>;\nexport type NODE_TYPE = BRAND<number, \"NODE_TYPE\", 0>;\nexport type TYPE_ID   = BRAND<number, \"TYPE_ID\"  , 0>;\n\nexport function addFirstChild(node: NODE_ID): NODE_ID {\n    // createNode + setFirstChild\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = NEXT_AST_NODE_ID++ as any;\n}\nexport function addSibling(node: NODE_ID): NODE_ID {\n    // createNode + setSibling\n    return ASTNODES[ (node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = NEXT_AST_NODE_ID++ as any;\n}\n\nexport function createASTNode(): NODE_ID {\n    return NEXT_AST_NODE_ID++ as any;\n}\n\nexport default function dop_reset() {\n    (VALUES as any).length = 0;\n    NEXT_AST_NODE_ID = 0;\n    // @ts-ignore\n    BUFFER.resize( 0 );\n    // @ts-ignore\n    BUFFER.resize( BUFFER_SIZE );\n\n    if(__DEBUG__) {\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        PY_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(0);\n        // @ts-ignore\n        JS_CODE_BUFFER.resize(CODE_BUFFER_SIZE);\n    }\n}\n\nexport const ASTNODE_TYPE_ID            = 0; // set initially\nexport const ASTNODE_PARENT_OP_PRIORITY = 1;\nexport const ASTNODE_FIRST_CHILD        = 2; // set if children\nexport const ASTNODE_NEXT_SIBLING       = 3; // set if sibling\nexport const ASTNODE_RESULT_TYPE        = 4; // set if expr.\nexport const ASTNODE_SIZE               = 5;\n\nconst BUFFER_SIZE = ASTNODE_SIZE * ELEM_SIZE * MAX_NB_ASTNODES;\n// @ts-ignore\nconst BUFFER = new ArrayBuffer(BUFFER_SIZE, {maxByteLength: BUFFER_SIZE});\n\nexport const ASTNODES = new ARRAY_TYPE(BUFFER);\n\nexport function type(node: NODE_ID): NODE_TYPE {\n    return ASTNODES[(node as number)* ASTNODE_SIZE + ASTNODE_TYPE_ID] as NODE_TYPE;\n}\nexport function nextSibling(node: NODE_ID): NODE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] as any;\n}\nexport function firstChild(parent: NODE_ID): NODE_ID {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] as any;\n}\nexport function resultType(node: NODE_ID): TYPE_ID {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] as TYPE_ID;\n}\nexport function parentOPPrio(node: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY];\n}\n\nexport function setFirstChild(parent: NODE_ID, value: NODE_ID) {\n    return ASTNODES[(parent as number) * ASTNODE_SIZE + ASTNODE_FIRST_CHILD] = value as any;\n}\nexport function setSibling(node: NODE_ID, sibling: NODE_ID) {\n    return ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_NEXT_SIBLING] = sibling as any;\n}\nexport function setType(node: NODE_ID, value: NODE_TYPE) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_TYPE_ID] = value as number;\n}\nexport function setResultType(node: NODE_ID, value: TYPE_ID) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_RESULT_TYPE] = value as number;\n}\nexport function setParentOPPrio(node: NODE_ID, value: number) {\n    ASTNODES[(node as number) * ASTNODE_SIZE + ASTNODE_PARENT_OP_PRIORITY] = value;\n}","type Klass = new(...args:any[]) => any;\n\nfunction addProps(a: object, b: object) {\n\n    const newProps = Object.getOwnPropertyDescriptors(b);\n    const entries  = Object.entries(newProps).filter( ([k]) => !(k in a) );\n\n    Object.defineProperties(a, Object.fromEntries(entries));\n}\n\nexport default {\n    mix: function(base: Klass, ...extensions: Klass[]) {\n\n        class Mix extends base {}\n\n        for(let i = 0; i < extensions.length; ++i) {\n            addProps(Mix, extensions[i]);\n            addProps(Mix.prototype, extensions[i].prototype);\n        }\n\n        return Mix;\n    }\n}","let KW: Record<string, any> = {};\n\nexport default {\n    kw: (keywords: Record<string, any>) => {\n        KW = keywords;\n    },\n    getKW: () => {\n        const _ = KW;\n        KW = {};\n        return _;\n    }\n}","import Py_Exception from \"./Exception\";\n\nexport default class Py_JSException extends Py_Exception {\n\n}","export default {\n    floordiv_float: (a: number, b: number) => {\n        return Math.floor( a/b );\n    },\n    floordiv_int: (a: bigint, b: bigint) => {\n\n        let result = a/b;\n        if( result > 0 || a%b === 0n)\n            return result;\n\n        return --result;\n    },\n    mod_float: <T>(a: number, b: number) => {\n\n        const mod = (a % b + b) % b;\n        if( mod === 0 && b < 0 )\n            return -0;\n        return mod;\n    },\n    mod_int: <T>(a: bigint, b: bigint) => {\n\n        return (a % b + b) % b;\n    }\n}","export default class Py_object {\n\n}","export default {\n    float2str: (f: number) => {\n        if( f <= 1e-5 || f >= 1e16) {\n\n            let str = f.toExponential();\n            const sign_idx = str.length-2;\n            if(str[sign_idx] === '-' || str[sign_idx] === '+')\n                str = str.slice(0,sign_idx+1) + '0' + str.slice(sign_idx+1);\n            return str;\n        }\n\n        let str = f.toString();\n        if( ! str.includes('.'))\n            str += \".0\";\n        return str;\n    }\n}","export class PythonError extends Error {\n\n    readonly python_exception: any;\n\n    constructor(python_exception: any) {\n        super();\n        python_exception._raw_err_ = this;\n        this.python_exception = python_exception;\n    }\n}\n\n\nexport default {\n    PythonError\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export default {\n\t\"object\": require(\"./object\").default,\n\t\"JSException\": require(\"./Exceptions/JSException\").default,\n\t\"Exception\": require(\"./Exceptions/Exception\").default,\n}\n","export default {\n\t...require(\"./stack\").default,\n\t...require(\"./raise\").default,\n\t...require(\"./op_bin\").default,\n\t...require(\"./mix\").default,\n\t...require(\"./float2str\").default,\n\t...require(\"./fct_kw\").default,\n\t...require(\"./assert\").default,\n\t...require(\"./abs\").default,\n}\n","import type { AST } from \"@SBrython/sbry/py2ast\";\n\nimport _r_  from \"./_r_/list\";\nimport _sb_ from \"./_sb_/list\";\n\nexport {_sb_, _r_};\n\n// classe ?\n\n// @ts-ignore\nglobalThis.int   = BigInt;\n// @ts-ignore\nglobalThis.float = Number;\n// @ts-ignore\nglobalThis.bool  = Boolean;\n// @ts-ignore\nglobalThis.str   = String;\n\nexport class SBrython {\n\n    #registered_AST: Record<string, AST> = {};\n    #exported: Record<string, Record<string, any>> = {\n        browser: globalThis\n    };\n\n    //TODO: runAST() ?\n    //TODO: runPythonCode() ?\n\n    //TODO: somehow, remove AST arg ???\n    buildModule(jscode: string, ast: AST) {\n        if(ast.filename in this.#registered_AST)\n            throw new Error(`AST ${ast.filename} already registered!`);\n\n        //TODO: filename 2 modulename.\n        this.#registered_AST[ast.filename] = ast;\n\n        //console.log(jscode);\n        return new Function(\"__SB__\", `${jscode}\\nreturn __exported__;`);\n    }\n\n    runJSCode(jscode: string, ast: AST) {\n        this.#exported[ast.filename] = this.buildModule(jscode, ast)(this);\n    }\n\n    getModules() {\n        return this.#exported;\n    }\n    getModule(name: string) {\n        return this.#exported[name];\n    }\n\n    getASTFor(filename: string) {\n        return this.#registered_AST[filename]; //TODO modulename?\n    }\n\n    print(...args: []) {\n        console.log(...args);\n    }\n\n    get _r_() {\n        return _r_;\n    }\n    get _sb_() {\n        return _sb_;\n    }\n}\n\n"],"names":["abs","n","assert","cond","Error","Py_Exception","Py_object","debug_print_exception","err","sb","console","warn","stack","isV8","split","filter","e","includes","filter_stack","map","l","_","_line","_col","length","slice","fct_name","line","col","pos","indexOf","node","getASTFor","nodes","type","AST_SYMBOL","VALUES","parse_stack","_raw_err_","stackline","stackline2astnode","stack2astnodes","exception_str","i","join","log","get_py_exception","__SB__","_err_","_sb_","PythonError","python_exception","_r_","JSException","last_id","ARRAY_TYPE","Float64Array","ArrayBuffer","maxByteLength","Array","ASTNODE_TYPE_ID","ASTNODE_SIZE","BUFFER_SIZE","ASTNODES","addProps","a","b","newProps","Object","getOwnPropertyDescriptors","entries","k","defineProperties","fromEntries","mix","base","extensions","Mix","prototype","KW","kw","keywords","getKW","Py_JSException","floordiv_float","Math","floor","floordiv_int","result","mod_float","mod","mod_int","float2str","f","str","toExponential","sign_idx","toString","constructor","super","this","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","require","globalThis","int","BigInt","float","Number","bool","Boolean","String","SBrython","browser","buildModule","jscode","ast","filename","Function","runJSCode","getModules","getModule","name","print","args"],"sourceRoot":""}