var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{a6:()=>Oe,Jq:()=>ae,jV:()=>Ne,od:()=>N,ZT:()=>ye,XK:()=>Qt,st:()=>pe,L2:()=>we,p$:()=>Kt});const n=Float64Array,r=0,l=1,o=0,_=2,s=o+r,i=o+l,u=_+r,a=_+l,c=new n(420),f=new n(420);class h{static NEXT_AST_NODE_ID=0;type;value;children=[];result_type=null;id;write;constructor(t,e,n,r=null,l=[]){this.id=h.NEXT_AST_NODE_ID++;const o=4*this.id;c[o+s]=t.lineno,c[o+i]=t.col_offset,c[o+u]=t.end_lineno,c[o+a]=t.end_col_offset,this.type=e,this.result_type=n,this.value=r,this.children=l}}function d(t,e){let n=null,r=t.id;return"self"===r?r="this":r in e.local_symbols&&(n=e.local_symbols[r]),new h(t,"symbol",n,r)}d.brython_name="Name";const p=new n(2);let y;function g(t){f[t+r]=p[r],f[t+l]=y.length-p[l]}let b=-1,m="";const v={toString:function(){return++p[r],p[l]=y.length+1,"\n"+m}},T={toString:function(){return++b>0&&(m+="    "),""}},w={toString:function(){return--b,m=m.slice(0,-4),""}};function S(...t){return t}function $(t){return"string"==typeof t?E(t):A(...t)}function A(t,...e){for(let n=0;n<e.length;++n)y+=t[n],E(e[n]);y+=t[e.length]}function E(...t){for(let e=0;e<t.length;++e){let n=t[e];if(Array.isArray(n)){$(n);continue}if(!(n instanceof h)){void 0===n&&(n="undefined"),null===n&&(n="null"),y+=n.toString();continue}const r=4*n.id;g(r+o),n.write(),g(r+_)}}function N(t){var e;return e=t.filename,y=`//# sourceURL=${e}\n`,y+="const {_r_, _b_} = __SBRYTHON__;\n",p[r]=3,p[l]=y.length,E(t.body),y+="\nconst __exported__ = {};\n",y}function O(){E(this.value)}function x(t,e){return new h(t,"structs.list",null,null,t.elts.map((t=>be(t,e))))}function V(t,e){return new h(t,"structs.list",null,null,t.elts.map((t=>be(t,e))))}function R(t,e){let n=new Array(2*t.keys.length);for(let r=0;r<t.keys.length;++r)n[2*r]=be(t.keys[r],e),n[2*r+1]=be(t.values[r],e);return new h(t,"structs.dict",null,null,n)}x.brython_name="Tuple",V.brython_name="List",R.brython_name="Dict";const C={};function I(t){return C[t]??={__name__:t}}function J(t,e){return Object.assign(I(t),e)}const k=I("int"),j=I("jsint"),F=I("float"),P=I("bool"),M=I("str"),B=I("NoneType"),D=I("NotImplementedType");function q(t,e){let n,r=B;if(void 0!==t.value){const l=be(t.value,e);r=l.result_type,n=[l]}const l=e.parent_node_context.result_type.__call__;return void 0===l.return_type&&(l.return_type=()=>r),new h(t,"keywords.return",r,null,n)}function Y(t,e){return new h(t,"pass",null)}q.brython_name="Return",Y.brython_name="Pass";const L={USub:"__neg__",Not:"not",Pow:"__pow__",Mult:"__mul__",Div:"__truediv__",FloorDiv:"__floordiv__",Mod:"__mod__",Add:"__add__",Sub:"__sub__",Is:"is",IsNot:"is not",Eq:"__eq__",NotEq:"__ne__",Gt:"__gt__",GtE:"__ge__",Lt:"__lt__",LtE:"__le__",Invert:"__not__",BitOr:"__or__",BitXor:"__xor__",BitAnd:"__and__",RShift:"__rshift__",LShift:"__lshift__"},H={__pow__:"__rpow__",__mul__:"__rmul__",__truediv__:"__rtruediv__",__floordiv__:"__rfloordiv__",__mod__:"__rmod__",__add__:"__radd__",__sub__:"__rsub__",__eq__:"__eq__",__ne__:"__ne__",__lt__:"__gt__",__gt__:"__lt__",__le__:"__ge__",__ge__:"__le__",__not__:"__rnot__",__or__:"__ror__",__and__:"__rand__",__xor__:"__rxor__",__lshift__:"__rlshift__",__rshift__:"__rrshift__"},X={__pow__:"__ipow__",__mul__:"__imul__",__truediv__:"__itruediv__",__floordiv__:"__ifloordiv__",__mod__:"__imod__",__add__:"__iadd__",__sub__:"__isub__",__or__:"__ior__",__and__:"__iand__",__xor__:"__ixor__",__lshift__:"__ilshift__",__rshift__:"__irshift__"},U={"**":"pow","*":"mul","/":"truediv","//":"floordiv","%":"mod","+":"add","-":"sub","u.-":"neg","==":"eq","!=":"ne","<":"lt","<=":"le",">=":"ge",">":"gt","~":"not","|":"or","&":"and","^":"xor","<<":"lshift",">>":"rshift"},Z=[["!","++","--","~","u.-"],["**"],["*","/","%"],["+","-"],["<<",">>",">>>"],["<","<=",">=",">"],["==","!=","===","!=="],["&"],["^"],["|"],["&&"],["||","??"],["="]];function z(t,e="float"){if(t.result_type===j)return t;if("literals.int"===t.type)return t.as=e,t;if("__mul__"===t.value||"__rmul__"===t.value){const n=t.children[0].result_type,r=t.children[1].result_type;if(!(n!==k&&n!==j||r!==k&&r!==j))return t.as=e,t}return"__neg__"===t.value&&t.children[0].result_type===k?(t.as=e,t):"float"===e?S`Number(${t})`:t}function G(t){return t.result_type===k?t:"literals.int"===t.type||"__neg__"===t.value&&t.children[0].result_type===j?(t.as="int",t):S`BigInt(${t})`}let W={};for(let t=0;t<Z.length;++t){const e=Z.length-t;for(let n of Z[t])W[n]=e}function K(t){return H[t]}const Q=1,tt=2;function et(t,e,n,r,l=!0){e instanceof h&&(e.parent_op=n,e.parent_op_dir=Q),r instanceof h&&(r.parent_op=n,r.parent_op_dir=tt);let o=S`${e}${n}${r}`;if(l&&"parent_op"in t){let e=t.parent_op_dir,r=W[n],l=W[t.parent_op];(l>r||l===r&&e&tt)&&(o=S`(${o})`)}return o}function nt(t,e,n,r=!0){let l=S`${e}${n}`;if("-"===e&&(e="u.-"),n instanceof h&&(n.parent_op=e,n.parent_op_dir=tt),r&&"parent_op"in t){let n=t.parent_op_dir,r=W[e],o=W[t.parent_op];n&Q&&o>r&&(l=S`(${l})`)}return l}function rt(t,e,{convert_self:n=t=>t,substitute_call:r}={}){let l={};const o=e=>t;for(let t of e){const e=U[t];"u.-"===t&&(t="-"),r??=(e,r)=>nt(e,t,n(r)),l[`__${e}__`]={return_type:o,substitute_call:r}}return l}function lt(t){return e=>{const n=e.result_type.__name__,r=t[n];if(void 0===r)return e;if("int"===n)return z(e,r);if("int"===r)return G(e);throw new Error("Unfound conversion")}}const ot=t=>t;function _t(t,e,n,{convert_other:r={},convert_self:l=ot,substitute_call:o}={}){let _={};const s=e=>n.includes(e)?t:D,i=lt(r);for(let t of e){const e=U[t];"//"===t&&(t="/");let n=(e,n,r)=>et(e,l(n),t,i(r)),r=(e,n,r)=>et(e,i(r),t,l(n));void 0!==o&&(n=(t,e,n)=>o(t,l(e),i(n)),r=(t,e,n)=>o(t,i(n),l(e))),_[`__${e}__`]={return_type:s,substitute_call:n},_[`__r${e}__`]={return_type:s,substitute_call:r},l===ot&&void 0===o&&(_[`__i${e}__`]={return_type:s,substitute_call:(e,n,r)=>"+"===t&&1===r.value?nt(e,"++",n):"-"===t&&1===r.value?nt(e,"--",n):et(e,n,t+"=",i(r))})}return _}const st=["==","!=",">","<",">=","<="],it={"==":"==","!=":"!=",">":"<","<":">",">=":"<=","<=":">="};function ut(t,e,{convert_other:n={},convert_self:r=ot,substitute_call:l}={}){let o={};const _=t=>e.includes(t)?P:D,s=lt(n);for(let e of t){let t=(t,n,l,o)=>{let _=e,i=r(n),u=s(l);return o&&([i,u]=[u,i],_=it[_]),"="!==_[0]&&"!"!==_[0]||n.result_type===l.result_type&&(_+="="),et(t,i,_,u)};void 0!==l&&(t=(t,e,n,o)=>l(t,r(e),s(n))),o[`__${U[e]}__`]={return_type:_,substitute_call:t}}return o}function at(t,e){let n=be(t.operand,e),r=L[t.op.constructor.$name];if(void 0===r)throw console.warn("OP",t.op.constructor.$name),new Error("not implemented");if("not"===r)return new h(t,"operators.unary",P,"not",[n]);let l=D,o=n.result_type?.[r];if(void 0!==o&&(l=o.return_type()),l===D)throw new Error(`${r} ${n.result_type} NOT IMPLEMENTED!`);return new h(t,"operators.unary",l,r,[n])}function ct(t,e){const n=t.ops.map((t=>{const e=L[t.constructor.$name];if(void 0===e)throw new Error(`${t.constructor.$name} not implemented!`);return e})),r=be(t.left,e),l=t.comparators.map((t=>be(t,e)));return new h(t,"operators.compare",P,n,[r,...l])}function ft(t,e,n,r){let l=!1;const o=r.result_type,_=e.result_type;let s=D,i=e.result_type?.[n];if(void 0!==i&&(s=i.return_type(r.result_type)),s===D){if(n=K(n),i=r.result_type?.[n],void 0!==i&&(s=i.return_type(e.result_type)),s===D){if("__eq__"!==n&&"__ne__"!==n)throw new Error(`${_} ${n} ${o} not implemented!`);return et(t,e,"__eq__"===n?"===":"!==",r)}l=!0,[e,r]=[r,e]}return i.substitute_call(t,e,r,l)}at.brython_name=["UnaryOp"],ct.brython_name="Compare";const ht={And:"&&",Or:"||"};function dt(t,e){let n=t.values.map((t=>be(t,e)));const r=ht[t.op.constructor.$name],l=n[0].result_type;return new h(t,"operators.boolean",l,r,n)}function pt(t,e){let n=be(t.left,e),r=be(t.right,e),l=L[t.op.constructor.$name];if(void 0===l)throw console.warn("OP",t.op.constructor.$name),new Error("not implemented");let o=D,_=n.result_type?.[l];if(void 0!==_&&(o=_.return_type(r.result_type)),o===D){if(l=K(l),_=r.result_type?.[l],void 0!==_&&(o=_.return_type(n.result_type)),o===D)throw new Error(`${r.result_type} ${l} ${n.result_type} NOT IMPLEMENTED!`);[n,r]=[r,n]}return new h(t,"operators.binary",o,l,[n,r])}dt.brython_name=["BoolOp"],pt.brython_name=["BinOp"];const yt={floordiv_float:(t,e)=>Math.floor(t/e),floordiv_int:(t,e)=>{let n=t/e;return n>0||t%e===0n?n:--n},mod_float:(t,e)=>{const n=(t%e+e)%e;return 0===n&&e<0?-0:n},mod_int:(t,e)=>(t%e+e)%e};function gt(t,e){return new h(t,"operators.attr",null,t.attr,[be(t.value,e)])}function bt(t,e){return new h(t,"operators.[]",null,null,[be(t.value,e),be(t.slice,e)])}function mt(t,e){let n=be(t.target,e),r=be(t.value,e),l=L[t.op.constructor.$name];if(void 0===l)throw console.warn("OP",t.op.constructor.$name),new Error("not implemented");return new h(t,"operators.binary",n.result_type,l,[n,r])}function vt(t,e){let n="operators.=";const r=be(t.value,e);let l=r.result_type,o=null;const _=t?.annotation?.id;void 0!==_&&(o=I(_)),null!==o&&o!==l&&console.warn("Wrong result_type"),null===o&&(o=l,l===j&&(o=k));const s=("targets"in t?t.targets:[t.target]).map((t=>{const r=be(t,e);return"symbol"===r.type&&(r.value in e.local_symbols?e.local_symbols[r.value]:"class"!==e.type&&(e.local_symbols[r.value]=o,n+="(init)")),r}));return new h(t,n,o,null,[...s,r])}function Tt(t,e){if("string"==typeof t.value)return new h(t,"literals.str",M,t.value)}function wt(){A`'${this.value}'`}function St(t,e){let n=t.value;if("int"===n.__class__?.__qualname__&&(n=n.value),"number"==typeof n||"bigint"==typeof n)return new h(t,"literals.int","number"!=typeof n?k:j,n)}function $t(){let t="",e=this.as,n=this.value;"float"===e?this.result_type===k&&(n=Number(n)):"int"!==e&&this.result_type!==k||(t="n"),A`${n}${t}`}function At(t,e){if(t.value instanceof Object&&"float"===t.value.__class__?.__qualname__)return new h(t,"literals.float",F,t.value.value)}function Et(t,e){return new h(t,"literals.f-string",null,null,[...t.values.map((t=>be(t,e)))])}function Nt(t,e){return new h(t,"literals.f-string.FormattedValue",null,null,[be(t.value,e)])}function Ot(t,e){if("boolean"==typeof t.value)return new h(t,"literals.bool",P,t.value)}function xt(t,e){if("object"==typeof t.value&&"__class__"in t.value&&"NoneType"===t.value.__class__.__qualname__)return new h(t,"literals.None",B,null)}function Vt(t,e){return new h(t,"keywords.raise",null,null,[be(t.exc,e)])}gt.brython_name=["Attribute"],bt.brython_name=["Subscript"],mt.brython_name=["AugAssign"],vt.brython_name=["Assign","AnnAssign"],Tt.brython_name="Constant",St.brython_name="Constant",At.brython_name="Constant",Et.brython_name="JoinedStr",Nt.brython_name="FormattedValue",Ot.brython_name="Constant",xt.brython_name="Constant",Vt.brython_name="Raise";class Rt extends Error{python_exception;constructor(t){super(),t._raw_err_=this,this.python_exception=t}}const Ct={PythonError:Rt};function It(t,e){return new h(t,"keywords.import",null,t.module,t.names.map((t=>be(t,e))))}function Jt(t,e){return new h(t,"keywords.import.alias",null,[t.name,t.asname])}function kt(t,e){return new h(t,"keywords.continue",null)}function jt(t,e){return new h(t,"keywords.break",null)}function Ft(t,e){return new h(t,"Assert",null,null,[be(t.test,e)])}It.brython_name=["Import","ImportFrom"],Jt.brython_name=["alias"],kt.brython_name="Continue",jt.brython_name="Break",Ft.brython_name="Assert";const Pt={assert:function(t){if(!t)throw new Error("Assertion failed")}};function Mt(t){const e=Object.keys(t);if(0===e.length)return[[]];const n=new Array(e.length+1);let r;for(n[0]=`{${e[0]}: `,r=1;r<e.length;++r)n[r]=`, ${e[r]}: `;return n[r]="}",[n,...Object.values(t)]}function Bt(t,e=", "){if(0===t.length)return[[""]];const n=new Array(t.length+1);let r;for(n[0]="",r=1;r<t.length;++r)n[r]=e;return n[r]="",[n,...t]}function Dt(t){const e=t.value.__call__;let n=t.children.length;for(let e=1;e<t.children.length;++e)if("functions.keyword"===t.children[e].type){n=e;break}let r=e.idx_end_pos;r===Number.POSITIVE_INFINITY&&(r=Math.max(e.idx_vararg,n-1));let l=r+1;e.has_kw&&e.idx_end_pos===Number.POSITIVE_INFINITY&&(l=e.idx_vararg+2);let o=new Array(l);const _={},s={};let i=!1;if(e.has_kw&&e.idx_end_pos===Number.POSITIVE_INFINITY){const r=Math.min(n,e.idx_vararg);for(let e=1;e<r;++e)o[e-1]=t.children[e];e.idx_vararg+1!==n&&(o[e.idx_vararg]=Bt(["[",Bt(t.children.slice(e.idx_vararg+1,n)),"]"],""))}else{const l=Math.min(n,r+1);for(let e=1;e<l;++e)o[e-1]=t.children[e];const s=e.args_names;for(let e=l;e<n;++e)_[s[e-1]]=t.children[e];i=l!==n}let u=!1;const a=e.args_pos;for(let e=n;e<t.children.length;++e){const n=t.children[e],r=n.value,l=a[r];l>=0?o[l]=n:(i=!0,-1===l?_[r]=n:(s[r]=n,u=!0))}let c=_;if(u&&!e.has_kw?c=s:u&&(c[e.kwargs]=Mt(s)),i)o[o.length-1]=Mt(c);else for(;o.length>0&&void 0===o[o.length-1];)--o.length;return S`${t.children[0]}(${Bt(o)})`}function qt(){const t=this.children,e=this.value.__call__;let n=e.idx_end_pos;n===Number.POSITIVE_INFINITY&&(n=e.idx_vararg+1),void 0!==e.kwargs&&n===t.length-1&&++n;for(let r=0;r<t.length;++r)0!==r&&E(", "),n===r&&E("{"),r===e.idx_vararg&&r===t.length-1&&(t[r].last=!0),Yt(t[r]);n<t.length&&E("} = {}")}function Yt(t){const e=4*t.id;if(g(e+_),"arg.vararg"===t.type)t.last?A`...${t.value}`:$(et(t,t.value,"=","[]"));else if("arg.kwarg"===t.type)$(et(t,t.value,"=","{}"));else if(1===t.children.length){let e=t.children[0];"jsint"===e.result_type&&t.result_type===k&&(e=G(e)),$(et(t,t.value,"=",e))}else E(t.value);g(e+_)}function Lt(){}function Ht(t,e,n,r){let l=t.annotation?.id,o=new Array;if(void 0!==e){const t=be(e,r);o.push(t),void 0===l&&(l=t.result_type,"jsint"===l&&(l="int"))}return new h(t,`arg.${n}`,l,t.arg,o)}function Xt(t,e,n){const r=e.result_type,l=r.__call__;(n=new me("fct",n)).parent_node_context=e;const o=function(t,e,n){const r=e.__call__,l=t.args,o=void 0!==l.vararg,_=void 0!==l.kwarg,f=r.args_pos,d=r.args_names,p=l.posonlyargs.length+l.args.length+ +o+l.kwonlyargs.length+ +_,y=new Array(p),g=t.args.defaults,b=l.posonlyargs,m=l.args;let v=g.length-b.length-m.length;for(let t=0;t<b.length;++t){const e=Ht(b[t],g[t-v],"posonly",n);n.local_symbols[e.value]=e.result_type,y[t]=e}let T=b.length;v-=b.length;for(let t=0;t<m.length;++t){const e=Ht(m[t],g[t-v],"pos",n);n.local_symbols[e.value]=e.result_type,d[T]=e.value,y[T++]=e}if(r.idx_vararg=T,o){r.idx_end_pos=Number.POSITIVE_INFINITY;const t=Ht(l.vararg,void 0,"vararg",n);n.local_symbols[t.value]=t.result_type,y[T++]=t}else{r.idx_end_pos=T;const t=Math.min(g.length,m.length),e=g.length>m.length||y.length!==T;(t>1||1===t&&e)&&(r.idx_end_pos-=t)}let w=r.idx_end_pos;w===Number.POSITIVE_INFINITY&&(w=r.idx_vararg);for(let t=b.length;t<w;++t)f[y[t].value]=t;for(let t=w;t<r.idx_vararg;++t)f[y[t].value]=-1;const S=l.kwonlyargs,$=l.kw_defaults;r.has_kw=r.idx_vararg!==w||0!==S.length,v=$.length-S.length;for(let t=0;t<S.length;++t){const e=Ht(S[t],$[t],"kwonly",n);n.local_symbols[e.value]=e.result_type,f[e.value]=-1,y[T++]=e}if(_){const t=Ht(l.kwarg,void 0,"kwarg",n);n.local_symbols[t.value]=t.result_type,y[T++]=t,r.kwargs=t.value}let A;if(0!==y.length){const t=4*y[0].id,e=4*y[y.length-1].id;A={lineno:c[t+s],col_offset:c[t+i],end_lineno:c[e+u],end_col_offset:c[e+a]}}else{const e=t.col_offset+4+t.name.length+1;A={lineno:t.lineno,end_lineno:t.lineno,col_offset:e,end_col_offset:e}}const E=new h(A,"args",null,e,y);return E.write=qt,E}(t,r,n);for(let t of o.children)n.local_symbols[t.value]=t.result_type;l.generate=void 0,l.return_type=void 0;const _=t.returns?.id;if(void 0!==_){let t=I(_);l.return_type=()=>t}e.children=[o,be(t.body,n)]}function Ut(t,e){const n={__name__:"function",__call__:{args_names:new Array(t.args.args.length+t.args.posonlyargs.length),args_pos:{},idx_end_pos:-1,idx_vararg:-1,has_kw:!1,generate:Xt,return_type:()=>(Xt(t,l,e),n.__call__.return_type()),substitute_call:Dt}};e.local_symbols[t.name]=n;const r=t.body[t.body.length-1].constructor.$name;if("Return"!==r&&"Raise"!==r){const e={constructor:{$name:"Return"},lineno:t.end_lineno,end_lineno:t.end_lineno,col_offset:t.end_col_offset,end_col_offset:t.end_col_offset};t.body.push(e)}const l=new h(t,"functions.def",n,t.name);return l}function Zt(t,e){const n=t.func.id,r=e.local_symbols[n];if(void 0===r)throw console.warn(t),console.warn(e.local_symbols),new Error(`Function ${n} not defined`);const l=r.__call__.return_type();return new h(t,"functions.call",l,r,[be(t.func,e),...t.args.map((t=>be(t,e))),...t.keywords.map((t=>be(t,e)))])}function zt(t,e){const n=be(t.value,e),r=n.result_type;return new h(t,"functions.keyword",r,t.arg,[n])}function Gt(t,e){return new h(t,"controlflows.while",null,null,[be(t.test,e),be(t.body,e)])}function Wt(t,e){const n=new Array(t.handlers.length+1);n[0]=be(t.body,e);for(let r=0;r<t.handlers;++r)n[r+1]=be(t.handlers[r],e);return new h(t,"controlflows.tryblock",null,null,n)}function Kt(t,e){return e.getASTFor("sbrython_editor.js").body.children,t[1],t[2],null}function Qt(t,e){const n="Error"===(t=t.split("\n"))[0];return function(t){return t.filter((t=>t.includes("brython_")))}(t).map((t=>{let[r,l,o]=t.split(":");")"===o[o.length-1]&&(o=o.slice(0,-1));let _,s=+l-2,i=+o;if(--i,n){let t=r.indexOf(" ",7);_=r.slice(7,t),"eval"===_&&(_="<module>");const n=(e.getASTFor("sbrython_editor.js").body.children,null);"symbol"===n.type&&(i+=n.value.length)}else{let t=r.indexOf("@");_=r.slice(0,t),"anonymous"===_&&(_="<module>")}return[_,s,i]}))}function te(t,e){console.warn("Exception",t);const n=Qt(t._raw_err_.stack,e);!function(t,e){t.map((t=>Kt(t,e)))}(n,e);let r=`Traceback (most recent call last):\n  ${n.map(((t,e)=>`File "[file]", line 0, in ${n[e][0]}`)).join("\n  ")}\nException: [msg]`;console.log(r)}Lt.brython_name="arguments",Ut.brython_name="FunctionDef",Zt.brython_name="Call",zt.brython_name="keyword",Gt.brython_name="While",Wt.brython_name="Try";const ee={debug_print_exception:te,get_py_exception:function(t,e){const n=t instanceof _b_.PythonError?t.python_exception:new _r_.JSException(t);return te(n,e),n}};function ne(t,e){let n;return n=void 0!==t.type?[be(t.type,e),be(t.body,e)]:[be(t.body,e)],new h(t,"controlflows.catch",null,t.name,n)}function re(t,e){const n=be(t.test,e),r=be(t.body,e),l=be(t.orelse,e);return new h(t,"controlflows.ternary",r.result_type,null,[n,r,l])}function le(t,e){const n=[be(t.test,e),be(t.body,e)];let r=t;for(;"orelse"in r&&1===r.orelse.length&&"test"in r.orelse[0];)r=r.orelse[0],n.push(be(r.test,e),be(r.body,e));return"orelse"in r&&0!==r.orelse.length&&n.push(be(r.orelse,e)),new h(t,"controlflows.ifblock",null,null,n)}function oe(t,e){const n=t.target.id;return e.local_symbols[n]=null,"Call"===t.iter.constructor.$name&&"range"===t.iter.func.id?(e.local_symbols[t.value]=k,new h(t,"controlflows.for(range)",null,n,[...t.iter.args.map((t=>be(t,e))),be(t.body,e)])):new h(t,"controlflows.for",null,n,[be(t.iter,e),be(t.body,e)])}function _e(t,e){if(e.local_symbols[t.name]={__name__:t.name},e=new me("class",e),t.bases.length>1)throw new Error("Not implemented");let n=1===t.bases.length?[be(t.bases[0],e),be(t.body,e)]:[be(t.body,e)];return new h(t,"class.classdef",null,t.name,n)}function se(t,e){const n=new Array(t.length);for(let r=0;r<t.length;++r)n[r]=be(t[r],e);for(let t=0;t<n.length;++t){if("functions.def"!==n[t].type)continue;const e=n[t].result_type.__call__;void 0!==e.generate&&e.return_type()}return new h(function(t){const e=t[0],n=t[t.length-1];return{lineno:e.lineno,col_offset:e.col_offset,end_lineno:n.end_lineno,end_col_offset:n.end_col_offset}}(t),"body",null,null,n)}ne.brython_name="ExceptHandler",re.brython_name="IfExp",le.brython_name="If",oe.brython_name="For",_e.brython_name="ClassDef",se.brython_name="Body";const ie={symbol:{AST_CONVERT:d,AST2JS:O},"structs.tuple":{AST_CONVERT:x,AST2JS:function(){E("Object.freeze(["),this.children.length>0&&E(this.children[0]);for(let t=1;t<this.children.length;++t)E(", ",this.children[t]);E("])")}},"structs.list":{AST_CONVERT:V,AST2JS:function(){E("["),this.children.length>0&&E(this.children[0]);for(let t=1;t<this.children.length;++t)E(", ",this.children[t]);E("])")}},"structs.dict":{AST_CONVERT:R,AST2JS:function(){E("{"),this.children.length>0&&A`${this.children[0]}: ${this.children[1]}`;for(let t=2;t<this.children.length;t+=2)A`, ${this.children[t]}: ${this.children[t+1]}`;E("}")}},return:{AST_CONVERT:q,AST2JS:function(){return 0===this.children.length?E("return null"):A`return ${this.children[0]}`}},pass:{AST_CONVERT:Y,AST2JS:function(){E("/* not implemented */")}},"operators.unary":{AST_CONVERT:at,AST2JS:function(){const t=this.children[0];if("not"===this.value)return $(nt(this,"!",z(t,"jsint")));$(t.result_type[this.value].substitute_call(this,t))}},"operators.compare":{AST_CONVERT:ct,AST2JS:function(){for(let t=0;t<this.value.length;++t){0!==t&&E(" && ");const e=this.value[t],n=this.children[t],r=this.children[t+1];$("is"!==e?"is not"!==e?ft(this,n,e,r):et(this,n,"!==",r):et(this,n,"===",r))}}},"operators.boolean":{AST_CONVERT:dt,AST2JS:function(){$(function(t,e,...n){const r=n[0];r instanceof h&&(r.parent_op=e,r.parent_op_dir=Q);for(let t=1;t<n.length-1;++t){const r=n[t];r instanceof h&&(r.parent_op=e,r.parent_op_dir=Q|tt)}const l=n[n.length-1];l instanceof h&&(l.parent_op=e,l.parent_op_dir=tt);let o=S`${r}`;for(let t=1;t<n.length;++t)o=S`${o} && ${n[t]}`;if("parent_op"in t){let n=t.parent_op_dir,r=W[e],l=W[t.parent_op];(l>r||l===r&&n&tt)&&(o=S`(${o})`)}return o}(this,this.value,...this.children))}},"operators.binary":{AST_CONVERT:pt,AST2JS:function(){let t=this.children[0],e=this.children[1];$(t.result_type[this.value].substitute_call(this,t,e))}},"operators.attr":{AST_CONVERT:gt,AST2JS:function(){A`${this.children[0]}.${this.value}`}},"operators.[]":{AST_CONVERT:bt,AST2JS:function(){A`${this.children[0]}[${this.children[1]}]`}},"operators.AssignOp":{AST_CONVERT:mt,AST2JS:function(){let t=this.children[0],e=this.children[1],n=X[this.value],r=D,l=t.result_type?.[n];if(void 0!==l&&(r=l.return_type(e.result_type)),r===D)throw new Error(`${e.result_type} ${n}= ${t.result_type} NOT IMPLEMENTED!`);$(l.substitute_call(this,t,e))}},"operators.=":{AST_CONVERT:vt,AST2JS:function(){this.type.endsWith("(init)")&&E("var "),E(this.children[0]);for(let t=1;t<this.children.length-1;++t)A` = ${this.children[t]}`;const t=this.children[this.children.length-1];let e=t;t.result_type===j&&this.result_type===k&&(e=G(t)),A` = ${e}`}},"literals.str":{AST_CONVERT:Tt,AST2JS:wt},"literals.int":{AST_CONVERT:St,AST2JS:$t},"literals.float":{AST_CONVERT:At,AST2JS:function(){E(this.value)}},"literals.f-string":{AST_CONVERT:Et,AST2JS:function(){E("`");for(let t of this.children)if(t.result_type===M){const e=4*t.id;g(e+o),E(t.value),g(e+_)}else{if("literals.f-string.FormattedValue"!==t.type)throw new Error("unsupported");E(t)}E("`")}},"literals.f-string/FormattedValue":{AST_CONVERT:Nt,AST2JS:function(){E("${",this.children[0],"}")}},"literals.bool":{AST_CONVERT:Ot,AST2JS:function(){E(this.value)}},"literals.None":{AST_CONVERT:xt,AST2JS:function(){E("null")}},"keywords.raise":{AST_CONVERT:Vt,AST2JS:function(){A`throw new _b_.PythonError(${this.children[0]})`}},"keywords.import":{AST_CONVERT:It,AST2JS:function(){E("const {");for(let t=0;t<this.children.length;++t)0!==t&&E(", "),E(this.children[t]);E("} = "),null===this.value?E("__SBRYTHON__.getModules()"):A`__SBRYTHON__.getModule("${this.value}")`}},"keywords.import/alias":{AST_CONVERT:Jt,AST2JS:function(){if(void 0===this.value[1])return E(this.value[0]);A`${this.value[0]}: ${this.value[1]}`}},"keywords.continue":{AST_CONVERT:kt,AST2JS:function(){E("continue")}},"keywords.break":{AST_CONVERT:jt,AST2JS:function(){E("break")}},"keywords.assert":{AST_CONVERT:Ft,AST2JS:function(){return A`_b_.assert(${this.children[0]})`}},"functions.def":{AST_CONVERT:Ut,AST2JS:function(){A`function ${this.value}(${this.children[0]}){${this.children[1]}${v}}`}},"functions.call":{AST_CONVERT:Zt,AST2JS:function(){$(this.value.__call__.substitute_call(this))}},"functions.call/keyword":{AST_CONVERT:zt,AST2JS:function(){E(this.children[0])}},"functions.args":{AST_CONVERT:Lt,AST2JS:qt},"controlflows.while":{AST_CONVERT:Gt,AST2JS:function(){A`while(${this.children[0]}){${this.children[1]}${v}}}`}},"controlflows.tryblock":{AST_CONVERT:Wt,AST2JS:function(){A`try {${this.children[0]}${v}}`,A`catch(_raw_err_){${T}${v}`,E("const _err_ = _b_.get_py_exception(_raw_err_, __SBRYTHON__)"),this.children.length>1&&E(this.children[1]);for(let t=2;t<this.children.length;++t)E(v,"else ",this.children[t]);1!==this.children[this.children.length-1].children.length&&E(v,"else { throw _raw_err_ }"),E(w,v)}},"controlflows.tryblock/catch":{AST_CONVERT:ne,AST2JS:function(){if(1===this.children.length)return A`{${this.children[0]},${v}}`;A`if(${this.children[0]}){${this.children[1]}${v}}`}},"controlflows.ternary":{AST_CONVERT:re,AST2JS:function(){A`(${this.children[0]} ? ${this.children[1]} : ${this.children[2]})`}},"controlflows.ifblock":{AST_CONVERT:le,AST2JS:function(){let t;for(A`if(${this.children[0]}){${this.children[1]}${v}}`,t=2;t<this.children.length-1;t+=2)A`else if(${this.children[t]}){${this.children[t+1]}${v}}`;t===this.children.length-1&&A`else {${this.children[t]}${v}}`}},"controlflows.for":{AST_CONVERT:oe,AST2JS:function(){const t=this.value,e=this.children[this.children.length-1];if("controlflows.for(range)"===this.type){let n="0n",r="1n",l=G(this.children[0]);return this.children.length>2&&(n=G(this.children[0]),l=G(this.children[1])),this.children.length>3&&(r=G(this.children[2])),A`for(var ${t} = ${n}; ${t} < ${l}; ${t} += ${r}){${e}${v}}`}A`for(var ${t} of ${this.children[0]}){${e}${v}}`}},comments:{AST_CONVERT:function(t,e){},AST2JS:function(){return""}},"class.classdef":{AST_CONVERT:_e,AST2JS:function(){let t="_r_.object",e=this.children[0];2===this.children.length&&(t=this.children[0],e=this.children[1]),A`class ${this.value} extends ${t} {${e}${v}}`}},body:{AST_CONVERT:se,AST2JS:function(){E(T);for(let t=0;t<this.children.length;++t)E(v,this.children[t]);E(w)}}},ue={};Object.assign(ue,yt),Object.assign(ue,{float2str:t=>{if(t<=1e-5||t>=1e16){let e=t.toExponential();const n=e.length-2;return"-"!==e[n]&&"+"!==e[n]||(e=e.slice(0,n+1)+"0"+e.slice(n+1)),e}let e=t.toString();return e.includes(".")||(e+=".0"),e}}),Object.assign(ue,Ct),Object.assign(ue,Pt),Object.assign(ue,ee);const ae=ue,ce=J("type[int]",{__call__:{return_type:()=>k,substitute_call:t=>{const e=t.children[1],n=e.result_type;if(n===k)return e;if(n===j)return G(e);if(n===F)return S`BigInt(Math.trunc(${e}))`;if(n===M)return S`BigInt(${e})`;const r=e.result_type?.__int__;if(void 0===r)throw new Error(`${e.result_type.__name__}.__int__ not defined`);return r.substitute_call(t,e)}}});J("int",{__class__:ce,__str__:{return_type:()=>M,substitute_call:t=>S`${t}.toString()`},__int__:{return_type:()=>k,substitute_call:(t,e)=>function(t,e){return e instanceof h&&(e.parent_op=t.parent_op,e.parent_op_dir=t.parent_op_dir),S`${e}`}(t,e)},..._t(k,["**","+","-","&","|","^",">>","<<"],[k,j],{convert_other:{jsint:"int"}}),..._t(k,["*"],[k],{substitute_call:(t,e,n)=>"float"===t.as?et(t,z(e),"*",z(n)):et(t,e,"*",n)}),..._t(F,["/"],[k,j,F],{convert_self:t=>z(t,"float"),convert_other:{int:"float"}}),..._t(k,["//"],[k,j],{convert_other:{jsint:"int"},substitute_call:(t,e,n)=>S`_b_.floordiv_int(${e}, ${n})`}),..._t(k,["%"],[k,j],{convert_other:{jsint:"int"},substitute_call:(t,e,n)=>S`_b_.mod_int(${e}, ${n})`}),...rt(k,["u.-"],{substitute_call:(t,e)=>nt(t,"-","real"===t.as?z(e):e)}),...rt(k,["~"]),...ut(st,[F,k,j,P])});const fe=J("type[str]",{__call__:{return_type:()=>M,substitute_call:t=>{const e=t.children[1];if(e.result_type===M)return e;const n=e.result_type?.__str__;if(void 0===n)throw new Error(`${e.result_type.__name__}.__str__ not defined`);return n.substitute_call(e)}}});J("str",{__class__:fe,__len__:{return_type:()=>k,substitute_call:t=>S`${t.children[1]}.length`},...ut(st,[M]),..._t(M,["+"],[M]),..._t(M,["*"],[k,j],{convert_other:{int:"float"},substitute_call:(t,e,n)=>(e.result_type!==M&&([e,n]=[n,e]),S`${e}.repeat(${n})`)})});const he=J("type[float]",{__call__:{return_type:()=>F,substitute_call:t=>{const e=t.children[1],n=e.result_type;if(n===k)return z(e);if(n===F||n===j)return n;if(n===M){if("literals.str"===e.type){if("inf"===e.value||"infinity"===e.value)return"Number.POSITIVE_INFINITY";if("-inf"===e.value||"-infinity"===e.value)return"Number.NEGATIVE_INFINITY"}return S`parseFloat(${e})`}const r=e.result_type?.__int__;if(void 0===r)throw new Error(`${e.result_type.__name__}.__int__ not defined`);return r.substitute_call(t,e)}}});J("float",{__class__:he,__str__:{return_type:()=>M,substitute_call:t=>S`_b_.float2str(${t})`},..._t(F,["**","*","/","+","-"],[F,k,j,P],{convert_other:{int:"float"}}),..._t(F,["//"],[F,k,j,P],{convert_other:{int:"float"},substitute_call:(t,e,n)=>S`_b_.floordiv_float(${e}, ${n})`}),..._t(F,["%"],[F,k,j,P],{convert_other:{int:"float"},substitute_call:(t,e,n)=>S`_b_.mod_float(${e}, ${n})`}),...rt(F,["u.-"]),...ut(st,[F,k,j,P])});const de={};for(let t in ie){const e=ie[t];let n=["null"];"brython_name"in e.AST_CONVERT&&(n=Array.isArray(e.AST_CONVERT.brython_name)?e.AST_CONVERT.brython_name:[e.AST_CONVERT.brython_name]);for(let t of n)(de[t]??=[]).push(e)}function pe(t,e){const n=new $B.Parser(t,e,"file");return{body:ye($B._PyPegen.run_parser(n)),filename:e}}function ye(t){return h.NEXT_AST_NODE_ID=0,be(t.body,new me)}function ge(t){return Array.isArray(t)?"Body":t.constructor.$name}function be(t,e){let n=ge(t);"Expr"===n&&(n=ge(t=t.value)),n in de||(console.warn("Module not registered:",n),console.warn(`at ${t.lineno}:${t.col_offset}`),console.log(t),n="null");for(let r of de[n]){const n=r.AST_CONVERT(t,e);if(void 0!==n)return n.write=r.AST2JS,n}throw console.error(t),new Error(`Unsupported node ${n} at ${t.lineno}:${t.col_offset}`)}class me{constructor(t="?",e=Te){this.type=t,this.local_symbols={...e.local_symbols}}type;parent_node_context;local_symbols}const ve={},Te={type:"?",local_symbols:{int:ce,str:fe,float:he,...function(t,e){const n=`__${t}__`;return{[t]:{__class__:ve,__name__:t,__call__:{return_type:()=>e,substitute_call:t=>t.children[1].result_type[n].substitute_call(t)}}}}("len",k)}};function we(t,e){const n=new Array;let r,l={offset:0,line:1,line_offset:0};do{for(n.push(Se(t,l)),r=t[l.offset];"\n"===r;)r=t[++l.offset],++l.line;l.line_offset=l.offset}while(void 0!==r);return{nodes:n,filename:e}}function Se(t,e){let n=t[e.offset],r=$e(t,e);if(n=t[e.offset],"\n"===n)return r;let l=$e(t,e);l.children[0]=r,l.pycode.start=r.pycode.start;let o=[l,$e(t,e)];for(n=t[e.offset];"\n"!==n;){let r=$e(t,e),l=$e(t,e),_=o[o.length-2],s=o[o.length-1];_.children[1]=s,_.pycode.end=s.pycode.end,r.children[0]=_,r.pycode.start=_.pycode.start,o[o.length-2]=r,o[o.length-1]=l,n=t[e.offset]}return o[0].children[1]=o[1],o[0].pycode.end=o[1].pycode.end,o[0]}function $e(t,e){let n=t[e.offset];for(;" "===n||"\t"===n;)n=t[++e.offset];if(void 0===n)return null;const r={line:e.line,col:e.offset-e.line_offset};let l=null;return l='"'===n?function(t,e){const n=e.offset;let r=t[++e.offset];for(;void 0!==r&&'"'!==r&&"\\"!==t[e.offset-1];)r=t[++e.offset];return++e.offset,{type:"literals.string",value:t.slice(n,e.offset),children:[],result_type:null,toJS:wt}}(t,e):n>="a"&&n<="z"||n>="A"&&n<="Z"||"_"==n?function(t,e){const n=e.offset;let r=t[e.offset];for(;r>="a"&&r<="z"||r>="A"&&r<="Z"||r>="0"&&r<="9"||"_"==r;)r=t[++e.offset];return{type:"symbol",value:t.slice(n,e.offset),children:[],result_type:null,toJS:O}}(t,e):n>="0"&&n<="9"?function(t,e){const n=e.offset;let r=t[e.offset];for(;r>="0"&&r<="9";)r=t[++e.offset];return{type:"literals.int",value:t.slice(n,e.offset),children:[],result_type:null,toJS:$t}}(t,e):function(t,e){e.offset;let n=t[e.offset++];return{type:"operators."+n,value:null,children:[void 0,void 0],result_type:null,toJS:ie["operators."+n].AST2JS}}(t,e),l.pycode={start:r,end:{line:e.line,col:e.offset-e.line_offset}},l}class Ae{}class Ee extends Ae{}const Ne={object:Ae,JSException:class extends Ee{},Exception:Ee};class Oe{#t={};#e={browser:globalThis};buildModule(t,e){if(e.filename in this.#t)throw new Error(`AST ${e.filename} already registered!`);return this.#t[e.filename]=e,new Function("__SBRYTHON__",`${t}\nreturn __exported__;`)}runJSCode(t,e){this.#e[e.filename]=this.buildModule(t,e)(this)}getModules(){return this.#e}getModule(t){return this.#e[t]}getASTFor(t){return this.#t[t]}get _r_(){return Ne}get _b_(){return ae}}J("NoneType",{}),J("jsint",{..._t(k,["**","+","-","&","|","^",">>","<<"],[k,j],{convert_self:t=>G(t),convert_other:{jsint:"int"}}),..._t(k,["*"],[k,j],{substitute_call:(t,e,n)=>"float"===t.as?et(t,z(e),"*",z(n)):et(t,G(e),"*",G(n))}),..._t(F,["/"],[k,j,F],{convert_other:{int:"float"}}),..._t(j,["//"],[j],{substitute_call:(t,e,n)=>S`_b_.floordiv_float(${e}, ${n})`}),..._t(j,["%"],[j],{substitute_call:(t,e,n)=>S`_b_.mod_int(${e}, ${n})`}),...rt(j,["u.-"],{substitute_call:(t,e)=>nt(t,"-","int"===t.as?G(e):e)}),...rt(k,["~"],{convert_self:t=>G(t)}),...ut(st,[F,k,j,P])}),J("bool",{...ut(st,[F,P,k,j])});var xe=e.a6,Ve=e.Jq,Re=e.jV,Ce=e.od,Ie=e.ZT,Je=e.XK,ke=e.st,je=e.L2,Fe=e.p$;export{xe as SBrython,Ve as _b_,Re as _r_,Ce as ast2js,Ie as convert_ast,Je as parse_stack,ke as py2ast,je as py2ast_fast,Fe as stackline2astnode};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,